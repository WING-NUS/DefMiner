The Albedo of an object is the extent to which it diffusely reflects light from the sun .

det(Albedo-2, The-1)
nsubj(extent-8, Albedo-2)
det(object-5, an-4)
prep_of(Albedo-2, object-5)
cop(extent-8, is-6)
det(extent-8, the-7)
root(ROOT-0, extent-8)
rel(reflects-13, which-10)
nsubj(reflects-13, it-11)
advmod(reflects-13, diffusely-12)
rcmod(extent-8, reflects-13)
dobj(reflects-13, light-14)
det(sun-17, the-16)
prep_from(reflects-13, sun-17)

In Greek mythology , Achilles - LBR - also Akhilleus or Achilleus ; Ancient Greek : Ã ¡ ÂπÂ √ Ã ∂ ÂΩÃ ⁄ Â ' Ã ⁄ Â '' Ã ⁄ Â '' Ã ⁄ ÂµÃ ∂ ÂŸÃ ∂ Â ≠ - RBR - was a Greek hero of the Trojan War , the central character and the greatest warrior of Homer 's Iliad , which takes for its theme the Wrath of Achilles .

amod(mythology-3, Greek-2)
prep_in(hero-49, mythology-3)
nsubj(hero-49, Achilles-5)
dep(Achilles-5, LBR-7)
advmod(hero-49, also-9)
nsubj(hero-49, Akhilleus-10)
conj_or(Akhilleus-10, Achilleus-12)
nsubj(hero-49, Achilleus-12)
amod(Greek-15, Ancient-14)
dep(Akhilleus-10, Greek-15)
nn(Â-25, Ã-17)
nn(Â-25, ¡-18)
nn(Â-25, ÂπÂ-19)
nn(Â-25, √-20)
nn(Â-25, Ã-21)
nn(Â-25, ∂-22)
nn(Â-25, ÂΩÃ-23)
nn(Â-25, ⁄-24)
dep(Akhilleus-10, Â-25)
nn(Â-29, Ã-27)
nn(Â-29, ⁄-28)
dep(Akhilleus-10, Â-29)
nn(Â-33, Ã-31)
nn(Â-33, ⁄-32)
dep(Akhilleus-10, Â-33)
nn(≠-42, Ã-35)
nn(≠-42, ⁄-36)
nn(≠-42, ÂµÃ-37)
nn(≠-42, ∂-38)
nn(≠-42, ÂŸÃ-39)
nn(≠-42, ∂-40)
nn(≠-42, Â-41)
dep(Akhilleus-10, ≠-42)
dep(≠-42, RBR-44)
cop(hero-49, was-46)
det(hero-49, a-47)
amod(hero-49, Greek-48)
root(ROOT-0, hero-49)
det(War-53, the-51)
nn(War-53, Trojan-52)
prep_of(hero-49, War-53)
det(character-57, the-55)
amod(character-57, central-56)
prep_of(hero-49, character-57)
conj_and(War-53, character-57)
det(warrior-61, the-59)
amod(warrior-61, greatest-60)
prep_of(hero-49, warrior-61)
conj_and(War-53, warrior-61)
poss(Iliad-65, Homer-63)
prep_of(hero-49, Iliad-65)
nsubj(takes-68, Iliad-65)
rcmod(Iliad-65, takes-68)
poss(theme-71, its-70)
prep_for(takes-68, theme-71)
det(Wrath-73, the-72)
dobj(takes-68, Wrath-73)
prep_of(Wrath-73, Achilles-75)

Animalia is an alphabet book and contains twenty-six illustrations , one for each letter of the alphabet .

nsubj(book-5, Animalia-1)
nsubj(contains-7, Animalia-1)
cop(book-5, is-2)
det(book-5, an-3)
nn(book-5, alphabet-4)
root(ROOT-0, book-5)
conj_and(book-5, contains-7)
amod(illustrations-9, twenty-six-8)
dobj(contains-7, illustrations-9)
appos(illustrations-9, one-11)
det(letter-14, each-13)
prep_for(one-11, letter-14)
det(alphabet-17, the-16)
prep_of(letter-14, alphabet-17)

In the history of science , Alchemy - LBR - from the Arabic Ã˘Â § Ã˙Â ≥ Ã˘Â ® Ã˙Â ... Ã˙Â ∑ Ã˙Â ... Ã˘Â § Ã˘Â ¡ al-khÃ ≥ Â `` miyÃ ≥ Â ™ ' - RBR - refers to both an early form of the investigation of nature and an early philosophical and spiritual discipline , both combining elements of chemistry , metallurgy , physics , medicine , astrology , semiotics , mysticism , spiritualism , and art all as parts of one greater force .

det(history-3, the-2)
prep_in(refers-42, history-3)
prep_of(history-3, science-5)
nsubj(refers-42, Alchemy-7)
dep(Ã˙Â-20, LBR-9)
dep(LBR-9, from-11)
det(Ã˙Â-16, the-12)
nn(Ã˙Â-16, Arabic-13)
nn(Ã˙Â-16, Ã˘Â-14)
nn(Ã˙Â-16, §-15)
pobj(from-11, Ã˙Â-16)
nn(Ã˙Â-20, ≥-17)
nn(Ã˙Â-20, Ã˘Â-18)
nn(Ã˙Â-20, ®-19)
dep(Alchemy-7, Ã˙Â-20)
dep(Ã˙Â-20, Ã˙Â-22)
nn(Ã˙Â-24, ∑-23)
dep(Ã˙Â-22, Ã˙Â-24)
nn(Â-32, Ã˘Â-26)
nn(Â-32, §-27)
nn(Â-32, Ã˘Â-28)
nn(Â-32, ¡-29)
nn(Â-32, al-khÃ-30)
nn(Â-32, ≥-31)
dep(Ã˙Â-22, Â-32)
nn(™-37, miyÃ-34)
nn(™-37, ≥-35)
nn(™-37, Â-36)
dep(Â-32, ™-37)
dep(™-37, RBR-40)
root(ROOT-0, refers-42)
preconj(form-47, both-44)
det(form-47, an-45)
amod(form-47, early-46)
prep_to(refers-42, form-47)
det(investigation-50, the-49)
prep_of(form-47, investigation-50)
prep_of(investigation-50, nature-52)
det(discipline-59, an-54)
amod(discipline-59, early-55)
amod(discipline-59, philosophical-56)
conj_and(philosophical-56, spiritual-58)
amod(discipline-59, spiritual-58)
prep_to(refers-42, discipline-59)
conj_and(form-47, discipline-59)
dep(discipline-59, both-61)
amod(elements-63, combining-62)
conj(discipline-59, elements-63)
prep_of(elements-63, chemistry-65)
prep_of(elements-63, metallurgy-67)
conj_and(chemistry-65, metallurgy-67)
prep_of(elements-63, physics-69)
conj_and(chemistry-65, physics-69)
prep_of(elements-63, medicine-71)
conj_and(chemistry-65, medicine-71)
prep_of(elements-63, astrology-73)
conj_and(chemistry-65, astrology-73)
prep_of(elements-63, semiotics-75)
conj_and(chemistry-65, semiotics-75)
prep_of(elements-63, mysticism-77)
conj_and(chemistry-65, mysticism-77)
prep_of(elements-63, spiritualism-79)
conj_and(chemistry-65, spiritualism-79)
prep_of(elements-63, art-82)
conj_and(chemistry-65, art-82)
dep(chemistry-65, all-83)
prep_as(chemistry-65, parts-85)
prep_of(parts-85, one-87)
amod(force-89, greater-88)
dep(elements-63, force-89)

American Standard Code for Information Interchange - LBR - ASCII - RBR - is a character encoding based on the English alphabet .

nn(Code-3, American-1)
nn(Code-3, Standard-2)
nsubj(character-16, Code-3)
nn(ASCII-10, Information-5)
nn(ASCII-10, Interchange-6)
dep(ASCII-10, LBR-8)
prep_for(Code-3, ASCII-10)
dep(ASCII-10, RBR-12)
cop(character-16, is-14)
det(character-16, a-15)
root(ROOT-0, character-16)
partmod(character-16, encoding-17)
prepc_based_on(encoding-17, on-19)
det(alphabet-22, the-20)
amod(alphabet-22, English-21)
pobj(encoding-17, alphabet-22)

Animation is the rapid display of a sequence of images of 2-D or 3-D artwork or model positions in order to create an illusion of movement .

nsubj(display-5, Animation-1)
cop(display-5, is-2)
det(display-5, the-3)
amod(display-5, rapid-4)
root(ROOT-0, display-5)
det(sequence-8, a-7)
prep_of(display-5, sequence-8)
prep_of(sequence-8, images-10)
prep_of(images-10, 2-D-12)
amod(artwork-15, 3-D-14)
prep_of(sequence-8, artwork-15)
conj_or(images-10, artwork-15)
nn(positions-18, model-17)
conj_or(images-10, positions-18)
conj_or(artwork-15, positions-18)
prep_in(artwork-15, order-20)
aux(create-22, to-21)
infmod(display-5, create-22)
det(illusion-24, an-23)
dobj(create-22, illusion-24)
prep_of(illusion-24, movement-26)

In Greek and Roman mythology , Apollo - LBR - in Greek , Ã ¡ ÂπÂ √ Ã ∂ Â • Ã ∂ Â ` Ã ⁄ Â '' Ã ⁄ Â '' Ã ∂ Â ≈ Ã ⁄ Â ∏ - ApÃ ∞ Â `` llÃ ∑ ÂŸn or Ã ¡ ÂπÂ √ Ã ∂ Â • Ã ⁄ Â -- Ã ⁄ Â '' Ã ⁄ Â '' Ã ∂ Â ≈ Ã ⁄ Â ∏ - ApellÃ ∑ ÂŸn - RBR - , is one of the most important and many-sided of the Olympian deities .

amod(mythology-5, Greek-2)
conj_and(Greek-2, Roman-4)
amod(mythology-5, Roman-4)
prep_in(one-88, mythology-5)
nsubj(one-88, Apollo-7)
dep(Apollo-7, LBR-9)
prep_in(Apollo-7, Greek-12)
nn(∏-41, Ã-14)
nn(∏-41, ¡-15)
nn(∏-41, ÂπÂ-16)
nn(∏-41, √-17)
nn(∏-41, Ã-18)
nn(∏-41, ∂-19)
nn(∏-41, Â-20)
nn(∏-41, •-21)
nn(∏-41, Ã-22)
nn(∏-41, ∂-23)
nn(∏-41, Â-24)
nn(∏-41, Ã-26)
amod(∏-41, ⁄-27)
nn(∏-41, Â-28)
amod(∏-41, Ã-30)
amod(∏-41, ⁄-31)
nn(∏-41, Â-32)
nn(∏-41, Ã-34)
nn(∏-41, ∂-35)
nn(∏-41, Â-36)
nn(∏-41, ≈-37)
nn(∏-41, Ã-38)
nn(∏-41, ⁄-39)
nn(∏-41, Â-40)
dep(ÂŸn-49, ∏-41)
nn(ÂŸn-49, ApÃ-43)
nn(ÂŸn-49, ∞-44)
nn(ÂŸn-49, Â-45)
nn(ÂŸn-49, llÃ-47)
nn(ÂŸn-49, ∑-48)
ccomp(one-88, ÂŸn-49)
nn(Â-61, Ã-51)
nn(Â-61, ¡-52)
nn(Â-61, ÂπÂ-53)
nn(Â-61, √-54)
nn(Â-61, Ã-55)
nn(Â-61, ∂-56)
nn(Â-61, Â-57)
nn(Â-61, •-58)
nn(Â-61, Ã-59)
nn(Â-61, ⁄-60)
conj_or(ÂŸn-49, Â-61)
ccomp(one-88, Â-61)
nn(Â-65, Ã-63)
nn(Â-65, ⁄-64)
dep(ÂŸn-49, Â-65)
nn(Â-69, Ã-67)
nn(Â-69, ⁄-68)
dep(ÂŸn-49, Â-69)
nn(⁄-76, Ã-71)
nn(⁄-76, ∂-72)
nn(⁄-76, Â-73)
nn(⁄-76, ≈-74)
nn(⁄-76, Ã-75)
dep(ÂŸn-49, ⁄-76)
nn(RBR-84, Â-77)
nn(RBR-84, ∏-78)
nn(ÂŸn-82, ApellÃ-80)
nn(ÂŸn-82, ∑-81)
dep(RBR-84, ÂŸn-82)
dep(⁄-76, RBR-84)
cop(one-88, is-87)
root(ROOT-0, one-88)
det(important-92, the-90)
advmod(important-92, most-91)
prep_of(one-88, important-92)
prep_of(one-88, many-sided-94)
conj_and(important-92, many-sided-94)
det(deities-98, the-96)
nn(deities-98, Olympian-97)
prep_of(important-92, deities-98)

In law , an Appeal is a process for requesting a formal change to an official decision .

prep_in(process-8, law-2)
det(Appeal-5, an-4)
nsubj(process-8, Appeal-5)
cop(process-8, is-6)
det(process-8, a-7)
root(ROOT-0, process-8)
prepc_for(process-8, requesting-10)
det(change-13, a-11)
amod(change-13, formal-12)
dobj(requesting-10, change-13)
det(decision-17, an-15)
amod(decision-17, official-16)
prep_to(requesting-10, decision-17)

In the common law , an Answer is the first pleading by a defendant , usually filed and served upon the plaintiff within a certain strict time limit after a civil complaint or criminal information or indictment has been served upon the defendant .

det(law-4, the-2)
amod(law-4, common-3)
prep_in(pleading-11, law-4)
det(Answer-7, an-6)
nsubj(pleading-11, Answer-7)
cop(pleading-11, is-8)
det(pleading-11, the-9)
amod(pleading-11, first-10)
root(ROOT-0, pleading-11)
det(defendant-14, a-13)
prep_by(pleading-11, defendant-14)
advmod(filed-17, usually-16)
partmod(defendant-14, filed-17)
partmod(defendant-14, served-19)
conj_and(filed-17, served-19)
det(plaintiff-22, the-21)
prep_upon(filed-17, plaintiff-22)
det(limit-28, a-24)
amod(limit-28, certain-25)
amod(limit-28, strict-26)
nn(limit-28, time-27)
prep_within(filed-17, limit-28)
mark(served-40, after-29)
det(complaint-32, a-30)
amod(complaint-32, civil-31)
nsubjpass(served-40, complaint-32)
amod(information-35, criminal-34)
conj_or(complaint-32, information-35)
nsubjpass(served-40, information-35)
conj_or(complaint-32, indictment-37)
conj_or(information-35, indictment-37)
aux(served-40, has-38)
auxpass(served-40, been-39)
advcl(pleading-11, served-40)
det(defendant-43, the-42)
prep_upon(served-40, defendant-43)

An Abacus , also called a counting frame , is a calculating tool used primarily by Asians for performing arithmetic processes .

det(Abacus-2, An-1)
nsubj(tool-13, Abacus-2)
advmod(called-5, also-4)
dep(tool-13, called-5)
det(frame-8, a-6)
amod(frame-8, counting-7)
dobj(called-5, frame-8)
cop(tool-13, is-10)
det(tool-13, a-11)
amod(tool-13, calculating-12)
root(ROOT-0, tool-13)
partmod(tool-13, used-14)
advmod(used-14, primarily-15)
agent(used-14, Asians-17)
prepc_for(used-14, performing-19)
nn(processes-21, arithmetic-20)
dobj(performing-19, processes-21)

An Acid - LBR - often represented by the generic formula HA - RBR - is traditionally considered any chemical compound that , when dissolved in water , gives a solution with a hydrogen ion activity greater than in pure water .

det(Acid-2, An-1)
nsubj(represented-7, Acid-2)
dep(Acid-2, LBR-4)
advmod(represented-7, often-6)
root(ROOT-0, represented-7)
det(formula-11, the-9)
amod(formula-11, generic-10)
prep_by(represented-7, formula-11)
nsubjpass(considered-18, HA-12)
dep(HA-12, RBR-14)
auxpass(considered-18, is-16)
advmod(considered-18, traditionally-17)
rcmod(formula-11, considered-18)
det(compound-21, any-19)
amod(compound-21, chemical-20)
dobj(considered-18, compound-21)
complm(gives-29, that-22)
advmod(dissolved-25, when-24)
advcl(gives-29, dissolved-25)
prep_in(dissolved-25, water-27)
ccomp(considered-18, gives-29)
det(solution-31, a-30)
dobj(gives-29, solution-31)
det(activity-36, a-33)
nn(activity-36, hydrogen-34)
nn(activity-36, ion-35)
prep_with(gives-29, activity-36)
dep(than-38, greater-37)
advmod(gives-29, than-38)
amod(water-41, pure-40)
prep_in(gives-29, water-41)

An Astronaut or cosmonaut - LBR - Ã ∆ ÂºÃ ∆ Â ≤ ÃŒÂ ™ Ã ∆ ÂπÃ ∆ Â ≤ Ã ∆ Â ∏ Ã ∆ Â ° Ã ` Â ™ Ã ∆ Â '' ÃŒÂ ≠ kÃ ≈ Â˙smÃ ≈ Â ∆ Ã -- Â √ naft - RBR - is a person trained by a human spaceflight program to command , pilot , or serve as a crew member of a spacecraft .

det(Astronaut-2, An-1)
root(ROOT-0, Astronaut-2)
conj_or(Astronaut-2, cosmonaut-4)
dep(Astronaut-2, LBR-6)
nn(Â-28, Ã-8)
nn(Â-28, ∆-9)
nn(Â-28, ÂºÃ-10)
nn(Â-28, ∆-11)
nn(Â-28, Â-12)
nn(Â-28, ≤-13)
nn(Â-28, ÃŒÂ-14)
nn(Â-28, ™-15)
nn(Â-28, Ã-16)
nn(Â-28, ∆-17)
nn(Â-28, ÂπÃ-18)
nn(Â-28, ∆-19)
nn(Â-28, Â-20)
nn(Â-28, ≤-21)
nn(Â-28, Ã-22)
nn(Â-28, ∆-23)
nn(Â-28, Â-24)
nn(Â-28, ∏-25)
nn(Â-28, Ã-26)
nn(Â-28, ∆-27)
nsubj(°-29, Â-28)
dep(Astronaut-2, °-29)
ccomp(°-29, Ã-30)
nn(Â-36, Â-32)
nn(Â-36, ™-33)
nn(Â-36, Ã-34)
nn(Â-36, ∆-35)
dobj(Ã-30, Â-36)
nn(Ã-46, ÃŒÂ-38)
nn(Ã-46, ≠-39)
nn(Ã-46, kÃ-40)
nn(Ã-46, ≈-41)
nn(Ã-46, Â˙smÃ-42)
nn(Ã-46, ≈-43)
nn(Ã-46, Â-44)
nn(Ã-46, ∆-45)
nsubj(person-56, Ã-46)
nn(naft-50, Â-48)
nn(naft-50, √-49)
dep(Ã-46, naft-50)
dep(naft-50, RBR-52)
cop(person-56, is-54)
det(person-56, a-55)
rcmod(Â-36, person-56)
partmod(person-56, trained-57)
det(program-62, a-59)
amod(program-62, human-60)
nn(program-62, spaceflight-61)
agent(trained-57, program-62)
prep_to(trained-57, command-64)
appos(command-64, pilot-66)
ccomp(°-29, serve-69)
conj_or(Ã-30, serve-69)
det(member-73, a-71)
nn(member-73, crew-72)
prep_as(serve-69, member-73)
det(spacecraft-76, a-75)
prep_of(member-73, spacecraft-76)

An Alphabet is a standardized of letters - basic written symbols - each of which roughly represents a phoneme of a spoken language , either as it exists now or as it was in the past .

det(Alphabet-2, An-1)
nsubj(standardized-5, Alphabet-2)
cop(standardized-5, is-3)
det(standardized-5, a-4)
root(ROOT-0, standardized-5)
prep_of(standardized-5, letters-7)
amod(symbols-11, basic-9)
amod(symbols-11, written-10)
attr(standardized-5, symbols-11)
nsubj(represents-17, each-13)
prep_of(each-13, which-15)
advmod(represents-17, roughly-16)
rcmod(symbols-11, represents-17)
det(phoneme-19, a-18)
dobj(represents-17, phoneme-19)
det(language-23, a-21)
amod(language-23, spoken-22)
prep_of(phoneme-19, language-23)
advmod(exists-28, either-25)
dep(exists-28, as-26)
nsubj(exists-28, it-27)
dep(represents-17, exists-28)
advmod(exists-28, now-29)
mark(was-33, as-31)
nsubj(was-33, it-32)
dep(represents-17, was-33)
conj_or(exists-28, was-33)
det(past-36, the-35)
prep_in(was-33, past-36)

The Aardvark - LBR - Orycteropus afer - RBR - - LBR - `` Digging foot `` - RBR - is a medium-sized , burrowing , nocturnal mammal native to Africa .

det(afer-7, The-1)
nn(afer-7, Aardvark-2)
dep(afer-7, LBR-4)
nn(afer-7, Orycteropus-6)
root(ROOT-0, afer-7)
dep(afer-7, RBR-9)
dep(afer-7, LBR-12)
nsubj(foot-16, Digging-15)
dep(LBR-12, foot-16)
nsubj(native-29, RBR-19)
cop(native-29, is-21)
det(native-29, a-22)
amod(nocturnal-27, medium-sized-23)
amod(nocturnal-27, burrowing-25)
amod(native-29, nocturnal-27)
nn(native-29, mammal-28)
ccomp(foot-16, native-29)
prep_to(native-29, Africa-31)

The Aardwolf - LBR - Proteles cristatus - RBR - is a small , insectivorous hyena-like mammal , native to Eastern and Southern Africa .

det(Aardwolf-2, The-1)
root(ROOT-0, Aardwolf-2)
dep(Aardwolf-2, LBR-4)
nn(cristatus-7, Proteles-6)
dep(LBR-4, cristatus-7)
dep(Aardwolf-2, RBR-9)
dep(mammal-17, is-11)
det(mammal-17, a-12)
amod(mammal-17, small-13)
amod(mammal-17, insectivorous-15)
amod(mammal-17, hyena-like-16)
dep(Aardwolf-2, mammal-17)
appos(mammal-17, native-19)
nn(Africa-24, Eastern-21)
conj_and(Eastern-21, Southern-23)
nn(Africa-24, Southern-23)
prep_to(native-19, Africa-24)

An Adventure is an activity that comprises risky , dangerous and uncertain experiences .

det(Adventure-2, An-1)
nsubj(activity-5, Adventure-2)
cop(activity-5, is-3)
det(activity-5, an-4)
root(ROOT-0, activity-5)
nsubj(comprises-7, activity-5)
rcmod(activity-5, comprises-7)
amod(experiences-13, risky-8)
conj_and(risky-8, dangerous-10)
amod(experiences-13, dangerous-10)
conj_and(risky-8, uncertain-12)
amod(experiences-13, uncertain-12)
dobj(comprises-7, experiences-13)

An Android is a robot designed to resemble a human , usually both in appearance and behavior .

det(Android-2, An-1)
nsubj(robot-5, Android-2)
cop(robot-5, is-3)
det(robot-5, a-4)
root(ROOT-0, robot-5)
xsubj(human-10, robot-5)
partmod(robot-5, designed-6)
aux(human-10, to-7)
cop(human-10, resemble-8)
det(human-10, a-9)
xcomp(designed-6, human-10)
advmod(both-13, usually-12)
amod(human-10, both-13)
prep_in(human-10, appearance-15)
prep_in(human-10, behavior-17)
conj_and(appearance-15, behavior-17)

The Actinopterygii - LBR - the plural form of Actinopterygius - RBR - comprise the class of the ray-finned fishes .

det(Actinopterygii-2, The-1)
nsubj(comprise-14, Actinopterygii-2)
nn(RBR-12, LBR-4)
det(form-8, the-6)
nn(form-8, plural-7)
dep(RBR-12, form-8)
prep_of(form-8, Actinopterygius-10)
dep(Actinopterygii-2, RBR-12)
root(ROOT-0, comprise-14)
det(class-16, the-15)
dobj(comprise-14, class-16)
det(fishes-20, the-18)
amod(fishes-20, ray-finned-19)
prep_of(class-16, fishes-20)

Traditionally the term Art was used to refer to any skill or mastery , a concept which altered during the Romantic period , when art came to be seen as `` a special faculty of the human mind to be classified with religion and science `` .

advmod(used-6, Traditionally-1)
det(Art-4, the-2)
nn(Art-4, term-3)
nsubjpass(used-6, Art-4)
xsubj(refer-8, Art-4)
auxpass(used-6, was-5)
root(ROOT-0, used-6)
aux(refer-8, to-7)
xcomp(used-6, refer-8)
det(skill-11, any-10)
prep_to(refer-8, skill-11)
prep_to(refer-8, mastery-13)
conj_or(skill-11, mastery-13)
det(concept-16, a-15)
appos(skill-11, concept-16)
nsubj(altered-18, concept-16)
rcmod(concept-16, altered-18)
det(period-22, the-20)
amod(period-22, Romantic-21)
prep_during(altered-18, period-22)
advmod(came-26, when-24)
nsubj(came-26, art-25)
xsubj(seen-29, art-25)
advcl(refer-8, came-26)
aux(seen-29, to-27)
auxpass(seen-29, be-28)
xcomp(came-26, seen-29)
det(faculty-34, a-32)
amod(faculty-34, special-33)
prep_as(seen-29, faculty-34)
det(mind-38, the-36)
amod(mind-38, human-37)
prep_of(faculty-34, mind-38)
aux(classified-41, to-39)
auxpass(classified-41, be-40)
xcomp(seen-29, classified-41)
prep_with(classified-41, religion-43)
prep_with(classified-41, science-45)
conj_and(religion-43, science-45)

An Actor , actress , player or rarely thespian - LBR - see terminology - RBR - is a person who acts in a dramatic production and who works -LRB- PRT -RRB- in -LRB- \/ PRT -RRB- film , television , theater , or radio in that capacity .

det(thespian-9, An-1)
nn(thespian-9, Actor-2)
conj_or(Actor-2, actress-4)
nn(thespian-9, actress-4)
conj_or(Actor-2, player-6)
nn(thespian-9, player-6)
conj_or(Actor-2, rarely-8)
nn(thespian-9, rarely-8)
nsubj(see-13, thespian-9)
dep(thespian-9, LBR-11)
root(ROOT-0, see-13)
nsubj(person-20, terminology-14)
dep(terminology-14, RBR-16)
cop(person-20, is-18)
det(person-20, a-19)
dep(see-13, person-20)
nsubj(acts-22, person-20)
rcmod(person-20, acts-22)
det(production-26, a-24)
amod(production-26, dramatic-25)
prep_in(acts-22, production-26)
nsubj(works-29, who-28)
dep(see-13, works-29)
conj_and(person-20, works-29)
nsubj(acts-22, works-29)
dobj(works-29, PRT-31)
nn(PRT-36, \/-35)
dep(PRT-31, PRT-36)
prep_in(PRT-31, film-38)
prep_in(PRT-31, television-40)
conj_or(film-38, television-40)
prep_in(PRT-31, theater-42)
conj_or(film-38, theater-42)
prep_in(PRT-31, radio-45)
conj_or(film-38, radio-45)
det(capacity-48, that-47)
prep_in(film-38, capacity-48)

An Abortion is the removal or expulsion of an embryo or fetus from the uterus , resulting in or caused by its death .

det(Abortion-2, An-1)
nsubj(removal-5, Abortion-2)
cop(removal-5, is-3)
det(removal-5, the-4)
root(ROOT-0, removal-5)
conj_or(removal-5, expulsion-7)
det(embryo-10, an-9)
prep_of(removal-5, embryo-10)
prep_of(removal-5, fetus-12)
conj_or(embryo-10, fetus-12)
det(uterus-15, the-14)
prep_from(embryo-10, uterus-15)
dep(removal-5, resulting-17)
prt(resulting-17, in-18)
dep(removal-5, caused-20)
conj_or(resulting-17, caused-20)
poss(death-23, its-22)
prep_by(caused-20, death-23)

In law , an Abstract is a brief statement that contains the most important points of a long legal document or of several related legal papers .

prep_in(statement-9, law-2)
det(Abstract-5, an-4)
nsubj(statement-9, Abstract-5)
cop(statement-9, is-6)
det(statement-9, a-7)
amod(statement-9, brief-8)
root(ROOT-0, statement-9)
nsubj(contains-11, statement-9)
rcmod(statement-9, contains-11)
det(points-15, the-12)
advmod(important-14, most-13)
amod(points-15, important-14)
dobj(contains-11, points-15)
det(document-20, a-17)
amod(document-20, long-18)
amod(document-20, legal-19)
prep_of(points-15, document-20)
amod(papers-26, several-23)
amod(papers-26, related-24)
amod(papers-26, legal-25)
prep_of(points-15, papers-26)
conj_or(document-20, papers-26)

The Ampere , in practice often shortened to amp , - LBR - symbol : A - RBR - is a unit of electric current , or amount of electric charge per second .

det(Ampere-2, The-1)
root(ROOT-0, Ampere-2)
prep_in(Ampere-2, practice-5)
advmod(shortened-7, often-6)
partmod(practice-5, shortened-7)
prep_to(shortened-7, amp-9)
dep(Ampere-2, LBR-12)
dep(LBR-12, symbol-14)
dep(Ampere-2, A-16)
dep(A-16, RBR-18)
cop(unit-22, is-20)
det(unit-22, a-21)
rcmod(A-16, unit-22)
amod(current-25, electric-24)
prep_of(unit-22, current-25)
rcmod(A-16, amount-28)
conj_or(unit-22, amount-28)
amod(charge-31, electric-30)
prep_of(amount-28, charge-31)
prep_per(charge-31, second-33)

In mathematics , computing , linguistics and related disciplines , an Algorithm is a sequence of instructions , often used for calculation and data processing .

prep_in(sequence-15, mathematics-2)
conj_and(mathematics-2, computing-4)
prep_in(sequence-15, computing-4)
conj_and(mathematics-2, linguistics-6)
prep_in(sequence-15, linguistics-6)
amod(disciplines-9, related-8)
conj_and(mathematics-2, disciplines-9)
prep_in(sequence-15, disciplines-9)
det(Algorithm-12, an-11)
nsubj(sequence-15, Algorithm-12)
cop(sequence-15, is-13)
det(sequence-15, a-14)
root(ROOT-0, sequence-15)
prep_of(sequence-15, instructions-17)
advmod(used-20, often-19)
partmod(instructions-17, used-20)
nn(processing-25, calculation-22)
conj_and(calculation-22, data-24)
nn(processing-25, data-24)
prep_for(used-20, processing-25)

Mouthwash or mouth rinse is a product used for oral hygiene .

amod(rinse-4, Mouthwash-1)
conj_or(Mouthwash-1, mouth-3)
amod(rinse-4, mouth-3)
nsubj(product-7, rinse-4)
cop(product-7, is-5)
det(product-7, a-6)
root(ROOT-0, product-7)
partmod(product-7, used-8)
amod(hygiene-11, oral-10)
prep_for(used-8, hygiene-11)

The Apiales are an order of flowering plants .

det(Apiales-2, The-1)
nsubj(order-5, Apiales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(plants-8, flowering-7)
prep_of(order-5, plants-8)

The Asterales are an order of dicotyledonous flowering plants which include the composite family Asteraceae - LBR - sunflowers , daisies , thistles etc. - RBR - and its related families .

det(Asterales-2, The-1)
nsubj(order-5, Asterales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
prep_of(order-5, dicotyledonous-7)
partmod(dicotyledonous-7, flowering-8)
dobj(flowering-8, plants-9)
nsubj(include-11, plants-9)
rcmod(plants-9, include-11)
det(Asteraceae-15, the-12)
amod(Asteraceae-15, composite-13)
nn(Asteraceae-15, family-14)
dobj(include-11, Asteraceae-15)
dobj(include-11, LBR-17)
conj_and(Asteraceae-15, LBR-17)
dobj(include-11, sunflowers-19)
conj_and(Asteraceae-15, sunflowers-19)
appos(sunflowers-19, daisies-21)
nn(etc.-24, thistles-23)
appos(sunflowers-19, etc.-24)
dobj(include-11, RBR-26)
conj_and(Asteraceae-15, RBR-26)
poss(families-31, its-29)
amod(families-31, related-30)
dobj(include-11, families-31)
conj_and(Asteraceae-15, families-31)

An Affidavit is a formal sworn statement of fact , signed by the declarant - LBR - who is called the affiant or deponent - RBR - and witnessed - LBR - as to the veracity of the affiant 's signature - RBR - by a taker of oaths , such as a notary public .

det(Affidavit-2, An-1)
nsubj(statement-7, Affidavit-2)
cop(statement-7, is-3)
det(statement-7, a-4)
amod(statement-7, formal-5)
amod(statement-7, sworn-6)
root(ROOT-0, statement-7)
prep_of(statement-7, fact-9)
partmod(fact-9, signed-11)
det(declarant-14, the-13)
agent(signed-11, declarant-14)
nsubjpass(called-20, declarant-14)
dep(declarant-14, LBR-16)
auxpass(called-20, is-19)
rcmod(declarant-14, called-20)
det(affiant-22, the-21)
dobj(called-20, affiant-22)
dobj(called-20, deponent-24)
conj_or(affiant-22, deponent-24)
nn(LBR-31, RBR-26)
dep(witnessed-29, and-28)
dep(LBR-31, witnessed-29)
dep(affiant-22, LBR-31)
prepc_as_to(called-20, to-34)
det(veracity-36, the-35)
pobj(called-20, veracity-36)
det(affiant-39, the-38)
poss(signature-41, affiant-39)
prep_of(veracity-36, signature-41)
dep(signature-41, RBR-43)
det(taker-47, a-46)
agent(called-20, taker-47)
prep_of(taker-47, oaths-49)
det(public-55, a-53)
amod(public-55, notary-54)
prep_such_as(fact-9, public-55)

AUDI AG , commonly known as Audi , is a premium luxury German automobile manufacturer which produces Audi branded cars , with headquarters in Ingolstadt , Bavaria .

nn(AG-2, AUDI-1)
nsubj(manufacturer-15, AG-2)
advmod(known-5, commonly-4)
partmod(AG-2, known-5)
prep_as(known-5, Audi-7)
cop(manufacturer-15, is-9)
det(manufacturer-15, a-10)
amod(manufacturer-15, premium-11)
nn(manufacturer-15, luxury-12)
amod(manufacturer-15, German-13)
nn(manufacturer-15, automobile-14)
root(ROOT-0, manufacturer-15)
nsubj(produces-17, manufacturer-15)
rcmod(manufacturer-15, produces-17)
nsubj(branded-19, Audi-18)
ccomp(produces-17, branded-19)
dobj(branded-19, cars-20)
prep_with(branded-19, headquarters-23)
nn(Bavaria-27, Ingolstadt-25)
prep_in(branded-19, Bavaria-27)

An Aircraft is a vehicle which is able to fly through the Earth 's atmosphere or through any other atmosphere .

det(Aircraft-2, An-1)
nsubj(vehicle-5, Aircraft-2)
cop(vehicle-5, is-3)
det(vehicle-5, a-4)
root(ROOT-0, vehicle-5)
nsubj(able-8, vehicle-5)
cop(able-8, is-7)
rcmod(vehicle-5, able-8)
aux(fly-10, to-9)
xcomp(able-8, fly-10)
det(Earth-13, the-12)
poss(atmosphere-15, Earth-13)
prep_through(fly-10, atmosphere-15)
det(atmosphere-20, any-18)
amod(atmosphere-20, other-19)
prep_through(fly-10, atmosphere-20)
conj_or(atmosphere-15, atmosphere-20)

An Abjad is a type of writing system in which each symbol stands for a consonant ; the reader must supply the appropriate vowel .

det(Abjad-2, An-1)
nsubj(type-5, Abjad-2)
cop(type-5, is-3)
det(type-5, a-4)
root(ROOT-0, type-5)
prepc_of(type-5, writing-7)
dobj(writing-7, system-8)
rel(stands-13, which-10)
det(symbol-12, each-11)
nsubj(stands-13, symbol-12)
rcmod(system-8, stands-13)
det(consonant-16, a-15)
prep_for(stands-13, consonant-16)
det(reader-19, the-18)
nsubj(supply-21, reader-19)
aux(supply-21, must-20)
parataxis(type-5, supply-21)
det(vowel-24, the-22)
amod(vowel-24, appropriate-23)
dobj(supply-21, vowel-24)

An Abugida is a segmental writing system which is based on consonants but in which vowel notation is obligatory .

det(Abugida-2, An-1)
nsubj(system-7, Abugida-2)
cop(system-7, is-3)
det(system-7, a-4)
amod(system-7, segmental-5)
nn(system-7, writing-6)
root(ROOT-0, system-7)
nsubjpass(based-10, system-7)
det(vowel-16, system-7)
auxpass(based-10, is-9)
rcmod(system-7, based-10)
prep_on(based-10, consonants-12)
dep(obligatory-19, in-14)
pobj(in-14, vowel-16)
nsubj(obligatory-19, notation-17)
cop(obligatory-19, is-18)
rcmod(system-7, obligatory-19)
conj_but(based-10, obligatory-19)

An Allegiance is a duty of fidelity said to be owed by a subject or a citizen to his \/ her state or sovereign .

det(Allegiance-2, An-1)
nsubj(duty-5, Allegiance-2)
cop(duty-5, is-3)
det(duty-5, a-4)
dep(said-8, duty-5)
prep_of(duty-5, fidelity-7)
root(ROOT-0, said-8)
aux(owed-11, to-9)
auxpass(owed-11, be-10)
xcomp(said-8, owed-11)
det(subject-14, a-13)
agent(owed-11, subject-14)
det(citizen-17, a-16)
agent(owed-11, citizen-17)
conj_or(subject-14, citizen-17)
poss(\/-20, his-19)
prep_to(owed-11, \/-20)
poss(state-22, her-21)
nsubj(said-8, state-22)
nsubj(said-8, sovereign-24)
conj_or(state-22, sovereign-24)

Argon - LBR - Ã -- Â √ Ã ≈ ÂŒrgÃ ≈ Â ‚ n - RBR - is a chemical element designated by the symbol Ar .

nn(Ã-5, Argon-1)
dep(Ã-5, LBR-3)
nsubj(element-22, Ã-5)
nn(n-15, Â-7)
nn(n-15, √-8)
nn(n-15, Ã-9)
nn(n-15, ≈-10)
nn(n-15, ÂŒrgÃ-11)
nn(n-15, ≈-12)
nn(n-15, Â-13)
nn(n-15, ‚-14)
dep(Ã-5, n-15)
dep(n-15, RBR-17)
cop(element-22, is-19)
det(element-22, a-20)
amod(element-22, chemical-21)
root(ROOT-0, element-22)
partmod(element-22, designated-23)
det(Ar-27, the-25)
nn(Ar-27, symbol-26)
agent(designated-23, Ar-27)

The Atom is the unit of ordinary matter , that is the gases , liquids and solids that comprise the macroscopic world in which we live .

det(Atom-2, The-1)
nsubj(unit-5, Atom-2)
cop(unit-5, is-3)
det(unit-5, the-4)
root(ROOT-0, unit-5)
amod(matter-8, ordinary-7)
prep_of(unit-5, matter-8)
nsubj(gases-13, matter-8)
cop(gases-13, is-11)
det(gases-13, the-12)
rcmod(matter-8, gases-13)
nsubj(comprise-19, gases-13)
rcmod(matter-8, liquids-15)
conj_and(gases-13, liquids-15)
nsubj(comprise-19, liquids-15)
rcmod(matter-8, solids-17)
conj_and(gases-13, solids-17)
nsubj(comprise-19, solids-17)
rcmod(gases-13, comprise-19)
det(world-22, the-20)
amod(world-22, macroscopic-21)
dobj(comprise-19, world-22)
rel(live-26, which-24)
nsubj(live-26, we-25)
rcmod(world-22, live-26)

An Archipelago - LBR - Ã ≈ ÂŒrkÃ ≈ Â˙Ã -- Â √ pÃ ≈ Â˝lÃ ≈ Â˙goÃ ... Â ... - RBR - is a chain of islands .

det(Â˙goÃ-18, An-1)
nn(Â˙goÃ-18, Archipelago-2)
dep(Â˙goÃ-18, LBR-4)
nn(Â˙Ã-10, Ã-6)
nn(Â˙Ã-10, ≈-7)
nn(Â˙Ã-10, ÂŒrkÃ-8)
nn(Â˙Ã-10, ≈-9)
dep(LBR-4, Â˙Ã-10)
nn(Â˙goÃ-18, Â-12)
nn(Â˙goÃ-18, √-13)
nn(Â˙goÃ-18, pÃ-14)
nn(Â˙goÃ-18, ≈-15)
nn(Â˙goÃ-18, Â˝lÃ-16)
nn(Â˙goÃ-18, ≈-17)
nsubj(chain-27, Â˙goÃ-18)
dep(Â˙goÃ-18, Â-20)
dep(Â-20, RBR-23)
cop(chain-27, is-25)
det(chain-27, a-26)
root(ROOT-0, chain-27)
prep_of(chain-27, islands-29)

An Author is defined both as `` the person who originates or gives existence to anything `` and as `` one who sets forth written statements `` in the Oxford English Dictionary .

det(Author-2, An-1)
nsubjpass(defined-4, Author-2)
auxpass(defined-4, is-3)
root(ROOT-0, defined-4)
dep(defined-4, both-5)
det(person-9, the-8)
prep_as(defined-4, person-9)
nsubj(originates-11, person-9)
nsubj(gives-13, person-9)
rcmod(person-9, originates-11)
rcmod(person-9, gives-13)
conj_or(originates-11, gives-13)
iobj(gives-13, existence-14)
nsubj(sets-23, existence-14)
prep_to(existence-14, anything-16)
amod(one-21, as-19)
prep_to(existence-14, one-21)
conj_and(anything-16, one-21)
rcmod(existence-14, sets-23)
advmod(sets-23, forth-24)
amod(statements-26, written-25)
dobj(gives-13, statements-26)
det(Dictionary-32, the-29)
nn(Dictionary-32, Oxford-30)
nn(Dictionary-32, English-31)
prep_in(statements-26, Dictionary-32)

Anxiety - LBR - also called solicitude - RBR - is a psychological and physiological state characterized by cognitive , somatic , emotional , and behavioral components .

nsubj(called-6, Anxiety-1)
dep(Anxiety-1, LBR-3)
advmod(called-6, also-5)
root(ROOT-0, called-6)
nsubj(state-16, solicitude-7)
dep(solicitude-7, RBR-9)
cop(state-16, is-11)
det(state-16, a-12)
amod(state-16, psychological-13)
conj_and(psychological-13, physiological-15)
amod(state-16, physiological-15)
ccomp(called-6, state-16)
partmod(state-16, characterized-17)
agent(characterized-17, cognitive-19)
agent(characterized-17, somatic-21)
conj_and(cognitive-19, somatic-21)
agent(characterized-17, emotional-23)
conj_and(cognitive-19, emotional-23)
amod(components-27, behavioral-26)
agent(characterized-17, components-27)
conj_and(cognitive-19, components-27)

In medical terminology , Addiction is a state in which the body relies on a substance for normal functioning and develops physical dependence .

amod(terminology-3, medical-2)
prep_in(state-8, terminology-3)
nsubj(state-8, Addiction-5)
cop(state-8, is-6)
det(state-8, a-7)
root(ROOT-0, state-8)
rel(relies-13, which-10)
det(body-12, the-11)
nsubj(relies-13, body-12)
nsubj(develops-21, body-12)
rcmod(state-8, relies-13)
det(substance-16, a-15)
prep_on(relies-13, substance-16)
amod(functioning-19, normal-18)
prep_for(substance-16, functioning-19)
rcmod(state-8, develops-21)
conj_and(relies-13, develops-21)
amod(dependence-23, physical-22)
dobj(develops-21, dependence-23)

In traditional logic , an Axiom or postulate is a proposition that is not proved or demonstrated but considered to be either self-evident , or subject to necessary decision .

amod(logic-3, traditional-2)
prep_in(proposition-11, logic-3)
det(Axiom-6, an-5)
nsubj(proposition-11, Axiom-6)
conj_or(Axiom-6, postulate-8)
nsubj(proposition-11, postulate-8)
cop(proposition-11, is-9)
det(proposition-11, a-10)
root(ROOT-0, proposition-11)
nsubjpass(proved-15, proposition-11)
nsubjpass(demonstrated-17, proposition-11)
nsubjpass(considered-19, proposition-11)
auxpass(proved-15, is-13)
neg(proved-15, not-14)
rcmod(proposition-11, proved-15)
rcmod(proposition-11, demonstrated-17)
conj_or(proved-15, demonstrated-17)
rcmod(proposition-11, considered-19)
conj_but(proved-15, considered-19)
aux(decision-29, to-20)
cop(decision-29, be-21)
preconj(self-evident-23, either-22)
amod(decision-29, self-evident-23)
amod(necessary-28, subject-26)
dep(necessary-28, to-27)
conj_or(self-evident-23, necessary-28)
amod(decision-29, necessary-28)
xcomp(considered-19, decision-29)

Alpha is the Phoenician name for ox .

nsubj(name-5, Alpha-1)
cop(name-5, is-2)
det(name-5, the-3)
amod(name-5, Phoenician-4)
root(ROOT-0, name-5)
prep_for(name-5, ox-7)

The family Asteraceae or Compositae - LBR - known as the aster , daisy , or sunflower family - RBR - is the largest family of flowering plants , in terms of number of species .

det(Asteraceae-3, The-1)
nn(Asteraceae-3, family-2)
nsubj(known-9, Asteraceae-3)
conj_or(Asteraceae-3, Compositae-5)
nsubj(known-9, Compositae-5)
dep(Asteraceae-3, LBR-7)
root(ROOT-0, known-9)
det(aster-12, the-11)
prep_as(known-9, aster-12)
advmod(known-9, daisy-14)
nn(family-18, sunflower-17)
nsubj(family-25, family-18)
dep(family-18, RBR-20)
cop(family-25, is-22)
det(family-25, the-23)
amod(family-25, largest-24)
conj_or(known-9, family-25)
amod(plants-28, flowering-27)
prep_of(family-25, plants-28)
prep_in(family-25, terms-31)
prep_of(terms-31, number-33)
prep_of(number-33, species-35)

The Apiaceae or Umbelliferae - LBR - both names are allowed by the ICBN - RBR - is a family of usually aromatic plants with hollow stems , commonly known as umbellifers .

det(Apiaceae-2, The-1)
nsubj(family-20, Apiaceae-2)
conj_or(Apiaceae-2, Umbelliferae-4)
nsubj(family-20, Umbelliferae-4)
dep(Apiaceae-2, LBR-6)
det(names-9, both-8)
nsubjpass(allowed-11, names-9)
auxpass(allowed-11, are-10)
rcmod(Apiaceae-2, allowed-11)
det(ICBN-14, the-13)
agent(allowed-11, ICBN-14)
dep(Apiaceae-2, RBR-16)
cop(family-20, is-18)
det(family-20, a-19)
root(ROOT-0, family-20)
advmod(aromatic-23, usually-22)
amod(plants-24, aromatic-23)
prep_of(family-20, plants-24)
amod(stems-27, hollow-26)
prep_with(plants-24, stems-27)
advmod(known-30, commonly-29)
partmod(plants-24, known-30)
prep_as(known-30, umbellifers-32)

An Axon or nerve fiber is a long , slender projection of a nerve cell , or neuron , that conducts electrical impulses away from the neuron 's cell body or soma .

det(fiber-5, An-1)
nn(fiber-5, Axon-2)
conj_or(Axon-2, nerve-4)
nn(fiber-5, nerve-4)
nsubj(projection-11, fiber-5)
cop(projection-11, is-6)
det(projection-11, a-7)
amod(projection-11, long-8)
dep(projection-11, slender-10)
root(ROOT-0, projection-11)
det(cell-15, a-13)
nn(cell-15, nerve-14)
prep_of(projection-11, cell-15)
conj_or(projection-11, neuron-18)
nsubj(conducts-21, neuron-18)
rcmod(neuron-18, conducts-21)
amod(impulses-23, electrical-22)
dobj(conducts-21, impulses-23)
det(neuron-27, the-26)
poss(body-30, neuron-27)
nn(body-30, cell-29)
prep_away_from(conducts-21, body-30)
prep_away_from(conducts-21, soma-32)
conj_or(body-30, soma-32)

The Alps - LBR - Alpes ; Alpen ; Alpi ; Alps ; Alpe - RBR - is the name for one of the great mountain range systems of Europe , stretching from Austria and Slovenia in the east , through Italy , Switzerland , Liechtenstein and Germany to France in the west .

det(Alps-2, The-1)
root(ROOT-0, Alps-2)
nn(Alpi-10, LBR-4)
dep(Alpi-10, Alpes-6)
dep(Alpes-6, Alpen-8)
dep(Alps-2, Alpi-10)
nsubj(name-20, Alps-12)
dep(Alps-12, Alpe-14)
dep(Alpe-14, RBR-16)
cop(name-20, is-18)
det(name-20, the-19)
dep(Alpi-10, name-20)
prep_for(name-20, one-22)
det(systems-28, the-24)
amod(systems-28, great-25)
nn(systems-28, mountain-26)
nn(systems-28, range-27)
prep_of(name-20, systems-28)
prep_of(systems-28, Europe-30)
partmod(name-20, stretching-32)
xcomp(name-20, stretching-32)
prep_from(stretching-32, Austria-34)
prep_from(stretching-32, Slovenia-36)
conj_and(Austria-34, Slovenia-36)
det(east-39, the-38)
prep_in(stretching-32, east-39)
prep_through(stretching-32, Italy-42)
prep_through(stretching-32, Switzerland-44)
conj_and(Italy-42, Switzerland-44)
prep_through(stretching-32, Liechtenstein-46)
conj_and(Italy-42, Liechtenstein-46)
prep_through(stretching-32, Germany-48)
conj_and(Italy-42, Germany-48)
prep_to(stretching-32, France-50)
det(west-53, the-52)
prep_in(France-50, west-53)

In the Bible , Aaron , or Aaron the Levite - LBR - Ã˜Â ∆ Ã˜Â ‰ Ã˜Â ¨ ÃˆÂ ' Ã˜Â Ã˜Â ‰ Ã˜Â˛Ã˜Â Ã˜Â˙ - RBR - , was the brother of Moses .

det(Bible-3, the-2)
prep_in(brother-33, Bible-3)
nsubj(brother-33, Aaron-5)
conj_or(Aaron-5, Aaron-8)
nsubj(brother-33, Aaron-8)
det(Levite-10, the-9)
dep(Aaron-8, Levite-10)
dep(Aaron-8, LBR-12)
nn(ÃˆÂ-20, Ã˜Â-14)
nn(ÃˆÂ-20, ∆-15)
nn(ÃˆÂ-20, Ã˜Â-16)
nn(ÃˆÂ-20, ‰-17)
nn(ÃˆÂ-20, Ã˜Â-18)
nn(ÃˆÂ-20, ¨-19)
poss(Ã˜Â˙-26, ÃˆÂ-20)
nn(Ã˜Â˙-26, Ã˜Â-22)
nn(Ã˜Â˙-26, Ã˜Â-23)
nn(Ã˜Â˙-26, ‰-24)
nn(Ã˜Â˙-26, Ã˜Â˛Ã˜Â-25)
dep(LBR-12, Ã˜Â˙-26)
dep(Ã˜Â˙-26, RBR-28)
cop(brother-33, was-31)
det(brother-33, the-32)
root(ROOT-0, brother-33)
prep_of(brother-33, Moses-35)

In chemistry , an Alcohol is any organic compound in which a hydroxyl group - LBR - - OH - RBR - is bound to a carbon atom of an alkyl or substituted alkyl group .

prep_in(compound-9, chemistry-2)
det(Alcohol-5, an-4)
nsubj(compound-9, Alcohol-5)
cop(compound-9, is-6)
det(compound-9, any-7)
amod(compound-9, organic-8)
root(ROOT-0, compound-9)
rel(bound-24, which-11)
det(group-14, a-12)
amod(group-14, hydroxyl-13)
nsubjpass(bound-24, group-14)
dep(group-14, LBR-16)
dep(group-14, OH-19)
dep(OH-19, RBR-21)
auxpass(bound-24, is-23)
rcmod(compound-9, bound-24)
det(atom-28, a-26)
nn(atom-28, carbon-27)
prep_to(bound-24, atom-28)
det(group-35, an-30)
amod(group-35, alkyl-31)
conj_or(alkyl-31, substituted-33)
amod(group-35, substituted-33)
amod(group-35, alkyl-34)
prep_of(atom-28, group-35)

An Abscess - LBR - abscessus - RBR - is a collection of pus - LBR - dead neutrophils - RBR - that has accumulated in a cavity formed by the tissue on the basis of an infectious process - LBR - usually caused by bacteria or parasites - RBR - or other foreign materials - LBR - e. g. splinters , bullet wounds , or injecting needles - RBR - .

det(Abscess-2, An-1)
root(ROOT-0, Abscess-2)
nsubj(collection-12, LBR-4)
dep(LBR-4, abscessus-6)
dep(abscessus-6, RBR-8)
cop(collection-12, is-10)
det(collection-12, a-11)
dep(Abscess-2, collection-12)
prep_of(collection-12, pus-14)
dep(Abscess-2, LBR-16)
conj_or(collection-12, LBR-16)
nsubj(accumulated-25, LBR-16)
amod(neutrophils-19, dead-18)
dep(LBR-16, neutrophils-19)
dep(neutrophils-19, RBR-21)
aux(accumulated-25, has-24)
rcmod(LBR-16, accumulated-25)
det(cavity-28, a-27)
prep_in(accumulated-25, cavity-28)
partmod(cavity-28, formed-29)
det(tissue-32, the-31)
agent(formed-29, tissue-32)
det(basis-35, the-34)
prep_on(tissue-32, basis-35)
det(process-39, an-37)
amod(process-39, infectious-38)
prep_of(basis-35, process-39)
dep(process-39, LBR-41)
advmod(caused-44, usually-43)
partmod(process-39, caused-44)
agent(caused-44, bacteria-46)
agent(caused-44, parasites-48)
conj_or(bacteria-46, parasites-48)
nn(LBR-57, RBR-50)
dep(materials-55, or-52)
amod(materials-55, other-53)
amod(materials-55, foreign-54)
dep(LBR-57, materials-55)
dep(LBR-16, LBR-57)
nn(splinters-61, e.-59)
nn(splinters-61, g.-60)
dep(Abscess-2, splinters-61)
conj_or(collection-12, splinters-61)
nn(wounds-64, bullet-63)
appos(splinters-61, wounds-64)
amod(needles-68, injecting-67)
dep(Abscess-2, needles-68)
conj_or(collection-12, needles-68)
dep(needles-68, RBR-70)

The Abwehr was a German intelligence organization from 1921 to 1944 .

det(Abwehr-2, The-1)
nsubj(organization-7, Abwehr-2)
cop(organization-7, was-3)
det(organization-7, a-4)
amod(organization-7, German-5)
nn(organization-7, intelligence-6)
root(ROOT-0, organization-7)
number(1944-11, 1921-9)
dep(1944-11, to-10)
prep_from(organization-7, 1944-11)

An Amateur refers to a person attached to a particular pursuit , study , or science , without formal training or pay .

det(Amateur-2, An-1)
nsubj(refers-3, Amateur-2)
root(ROOT-0, refers-3)
det(person-6, a-5)
prep_to(refers-3, person-6)
partmod(person-6, attached-7)
det(pursuit-11, a-9)
amod(pursuit-11, particular-10)
prep_to(attached-7, pursuit-11)
prep_to(attached-7, study-13)
conj_or(pursuit-11, study-13)
prep_to(attached-7, science-16)
conj_or(pursuit-11, science-16)
amod(training-20, formal-19)
prep_without(attached-7, training-20)
prep_without(attached-7, pay-22)
conj_or(training-20, pay-22)

The Almond - LBR - ` Prunus dulcis ' , syn .

det(Almond-2, The-1)
root(ROOT-0, Almond-2)
dep(Almond-2, LBR-4)
nn(dulcis-8, Prunus-7)
dep(LBR-4, dulcis-8)
appos(dulcis-8, syn-11)

Prunus amygdalus Batsch .

nsubj(amygdalus-2, Prunus-1)
root(ROOT-0, amygdalus-2)
dobj(amygdalus-2, Batsch-3)

, Amygdalus communis L. , Amygdalus dulcis Mill .

nn(L.-4, Amygdalus-2)
nn(L.-4, communis-3)
dep(dulcis-7, L.-4)
nsubj(dulcis-7, Amygdalus-6)
root(ROOT-0, dulcis-7)
dobj(dulcis-7, Mill-8)

- RBR - is a species of Prunus belonging to the subfamily Prunoideae of the family Rosaceae ; within Prunus , it is classified in the subgenus Amygdalus , distinguished from the other subgenera by the corrugated seed shell .

nsubj(species-6, RBR-2)
cop(species-6, is-4)
det(species-6, a-5)
root(ROOT-0, species-6)
prep_of(species-6, Prunus-8)
partmod(Prunus-8, belonging-9)
det(Prunoideae-13, the-11)
amod(Prunoideae-13, subfamily-12)
prep_to(belonging-9, Prunoideae-13)
det(Rosaceae-17, the-15)
nn(Rosaceae-17, family-16)
prep_of(Prunoideae-13, Rosaceae-17)
prep_within(classified-24, Prunus-20)
nsubj(classified-24, it-22)
cop(classified-24, is-23)
parataxis(species-6, classified-24)
det(Amygdalus-28, the-26)
amod(Amygdalus-28, subgenus-27)
prep_in(classified-24, Amygdalus-28)
acomp(classified-24, distinguished-30)
det(subgenera-34, the-32)
amod(subgenera-34, other-33)
prep_from(distinguished-30, subgenera-34)
det(shell-39, the-36)
amod(shell-39, corrugated-37)
nn(shell-39, seed-38)
prep_by(classified-24, shell-39)

The word Abbot , meaning father , is a title given to the head of a monastery in various traditions , including Christianity and Buddhism .

det(Abbot-3, The-1)
nn(Abbot-3, word-2)
nsubj(title-10, Abbot-3)
partmod(title-10, meaning-5)
dobj(meaning-5, father-6)
cop(title-10, is-8)
det(title-10, a-9)
root(ROOT-0, title-10)
prep(title-10, given-11)
pcomp(given-11, to-12)
det(head-14, the-13)
prep_to(given-11, head-14)
det(monastery-17, a-16)
prep_of(head-14, monastery-17)
amod(traditions-20, various-19)
prep_in(monastery-17, traditions-20)
prep_including(head-14, Christianity-23)
prep_including(head-14, Buddhism-25)
conj_and(Christianity-23, Buddhism-25)

In mathematics , an Automorphism is an isomorphism from a mathematical object to itself .

prep_in(isomorphism-8, mathematics-2)
det(Automorphism-5, an-4)
nsubj(isomorphism-8, Automorphism-5)
cop(isomorphism-8, is-6)
det(isomorphism-8, an-7)
root(ROOT-0, isomorphism-8)
det(object-12, a-10)
amod(object-12, mathematical-11)
prep_from(isomorphism-8, object-12)
prep_to(object-12, itself-14)

The Accordion is a musical instrument of the hand-held bellows-driven free-reed aerophone family , sometimes referred to as a squeezebox .

det(Accordion-2, The-1)
nsubj(instrument-6, Accordion-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, musical-5)
root(ROOT-0, instrument-6)
det(family-13, the-8)
amod(family-13, hand-held-9)
amod(family-13, bellows-driven-10)
amod(family-13, free-reed-11)
nn(family-13, aerophone-12)
prep_of(instrument-6, family-13)
advmod(referred-16, sometimes-15)
partmod(family-13, referred-16)
advmod(squeezebox-20, as-18)
det(squeezebox-20, a-19)
prep_to(referred-16, squeezebox-20)

An Architect is a person or who is involved in the planning , design , and oversight of a building 's construction .

det(Architect-2, An-1)
nsubj(person-5, Architect-2)
cop(person-5, is-3)
det(person-5, a-4)
root(ROOT-0, person-5)
nsubjpass(involved-9, who-7)
auxpass(involved-9, is-8)
conj_or(person-5, involved-9)
rcmod(person-5, involved-9)
det(planning-12, the-11)
prep_in(involved-9, planning-12)
prep_in(involved-9, design-14)
conj_and(planning-12, design-14)
prep_in(involved-9, oversight-17)
conj_and(planning-12, oversight-17)
det(building-20, a-19)
poss(construction-22, building-20)
prep_of(planning-12, construction-22)

An Abbreviation - LBR - from Latin brevis `` short `` - RBR - is a shortened form of a word or phrase .

det(Abbreviation-2, An-1)
nsubj(form-18, Abbreviation-2)
dep(Abbreviation-2, LBR-4)
prep_from(Abbreviation-2, Latin-7)
dep(Latin-7, brevis-8)
amod(RBR-13, short-10)
dobj(brevis-8, RBR-13)
cop(form-18, is-15)
det(form-18, a-16)
amod(form-18, shortened-17)
root(ROOT-0, form-18)
det(word-21, a-20)
prep_of(form-18, word-21)
prep_of(form-18, phrase-23)
conj_or(word-21, phrase-23)

In Greek mythology , Athena - LBR - also called Athene , Attic : Ã ¡ ÂπÂ √ Ã ⁄ Â ¸ Ã ⁄ Â · Ã ⁄ Â ∏ Ã ¡ Â ≤ Â ¶ , AthÃ ≥ Â „ nÃ ∞ Â cents , or Ã ¡ ÂπÂ √ Ã ⁄ Â ¸ Ã ⁄ Â ® Ã ⁄ Â ∏ Ã ⁄ Â · , AthÃ ¡ Â ¸ Â˜nÃ ≥ Â „ ; Doric : Ã ¡ ÂπÂ √ Ã ∂ Â ∞ Ã ⁄ Â ¬ Ã ⁄ Â ∏ Ã ⁄ Â ± , AsÃ ∞ Â ¡ na ; Latin : Minerva - RBR - is the shrewd companion of heroes and the goddess of heroic endeavor .

amod(mythology-3, Greek-2)
prep_in(called-10, mythology-3)
nsubj(called-10, Athena-5)
dep(Athena-5, LBR-7)
advmod(called-10, also-9)
root(ROOT-0, called-10)
nsubj(companion-116, Athene-11)
appos(Athene-11, Attic-13)
number(¡-16, Ã-15)
num(¶-36, ¡-16)
nn(¶-36, ÂπÂ-17)
nn(¶-36, √-18)
nn(¶-36, Ã-19)
nn(¶-36, ⁄-20)
nn(¶-36, Â-21)
nn(¶-36, ¸-22)
nn(¶-36, Ã-23)
nn(¶-36, ⁄-24)
nn(¶-36, Â-25)
nn(¶-36, ·-26)
nn(¶-36, Ã-27)
nn(¶-36, ⁄-28)
nn(¶-36, Â-29)
nn(¶-36, ∏-30)
nn(¶-36, Ã-31)
nn(¶-36, ¡-32)
nn(¶-36, Â-33)
nn(¶-36, ≤-34)
nn(¶-36, Â-35)
dep(Athene-11, ¶-36)
nn(cents-45, AthÃ-38)
nn(cents-45, ≥-39)
nn(cents-45, Â-40)
nn(cents-45, „-41)
nn(cents-45, nÃ-42)
nn(cents-45, ∞-43)
nn(cents-45, Â-44)
dep(Athene-11, cents-45)
conj_or(¶-36, cents-45)
nn(·-67, Ã-48)
nn(·-67, ¡-49)
nn(·-67, ÂπÂ-50)
nn(·-67, √-51)
nn(·-67, Ã-52)
nn(·-67, ⁄-53)
nn(·-67, Â-54)
nn(·-67, ¸-55)
nn(·-67, Ã-56)
nn(·-67, ⁄-57)
nn(·-67, Â-58)
nn(·-67, ®-59)
nn(·-67, Ã-60)
nn(·-67, ⁄-61)
nn(·-67, Â-62)
nn(·-67, ∏-63)
nn(·-67, Ã-64)
nn(·-67, ⁄-65)
nn(·-67, Â-66)
dep(Athene-11, ·-67)
conj_or(¶-36, ·-67)
nn(„-76, AthÃ-69)
nn(„-76, ¡-70)
nn(„-76, Â-71)
nn(„-76, ¸-72)
nn(„-76, Â˜nÃ-73)
nn(„-76, ≥-74)
nn(„-76, Â-75)
appos(·-67, „-76)
dep(Athene-11, Doric-78)
nn(±-99, Ã-80)
nn(±-99, ¡-81)
nn(±-99, ÂπÂ-82)
nn(±-99, √-83)
nn(±-99, Ã-84)
nn(±-99, ∂-85)
nn(±-99, Â-86)
nn(±-99, ∞-87)
nn(±-99, Ã-88)
nn(±-99, ⁄-89)
nn(±-99, Â-90)
nn(±-99, ¬-91)
nn(±-99, Ã-92)
nn(±-99, ⁄-93)
nn(±-99, Â-94)
nn(±-99, ∏-95)
nn(±-99, Ã-96)
nn(±-99, ⁄-97)
nn(±-99, Â-98)
dep(Doric-78, ±-99)
nn(na-105, AsÃ-101)
nn(na-105, ∞-102)
nn(na-105, Â-103)
nn(na-105, ¡-104)
appos(±-99, na-105)
dep(Athene-11, Latin-107)
dep(Latin-107, Minerva-109)
dep(Athene-11, RBR-111)
cop(companion-116, is-113)
det(companion-116, the-114)
amod(companion-116, shrewd-115)
ccomp(called-10, companion-116)
prep_of(companion-116, heroes-118)
det(goddess-121, the-120)
ccomp(called-10, goddess-121)
conj_and(companion-116, goddess-121)
amod(endeavor-124, heroic-123)
prep_of(goddess-121, endeavor-124)

An Alloy is a solid solution or homogeneous mixture of two or more elements , at least one of which is a metal , which itself has metallic properties .

det(Alloy-2, An-1)
nsubj(solution-6, Alloy-2)
cop(solution-6, is-3)
det(solution-6, a-4)
amod(solution-6, solid-5)
root(ROOT-0, solution-6)
nn(mixture-9, homogeneous-8)
conj_or(solution-6, mixture-9)
num(elements-14, two-11)
conj_or(two-11, more-13)
quantmod(two-11, more-13)
num(elements-14, more-13)
prep_of(solution-6, elements-14)
prep_of(one-18, elements-14)
quantmod(one-18, at-16)
mwe(at-16, least-17)
pobj(at-16, least-17)
nsubj(metal-23, one-18)
cop(metal-23, is-21)
det(metal-23, a-22)
rcmod(elements-14, metal-23)
dobj(has-27, metal-23)
rel(has-27, which-25)
nsubj(has-27, itself-26)
rcmod(metal-23, has-27)
amod(properties-29, metallic-28)
dobj(has-27, properties-29)

In geometry and trigonometry , an Angle - LBR - in full , plane angle - RBR - is the figure formed by two rays sharing a common endpoint , called the vertex of the angle harv .

prep_in(figure-21, geometry-2)
conj_and(geometry-2, trigonometry-4)
prep_in(figure-21, trigonometry-4)
det(Angle-7, an-6)
nsubj(figure-21, Angle-7)
nn(RBR-17, LBR-9)
dep(RBR-17, in-11)
amod(angle-15, full-12)
dep(angle-15, plane-14)
pobj(in-11, angle-15)
dep(Angle-7, RBR-17)
cop(figure-21, is-19)
det(figure-21, the-20)
root(ROOT-0, figure-21)
partmod(figure-21, formed-22)
num(rays-25, two-24)
agent(formed-22, rays-25)
partmod(rays-25, sharing-26)
det(endpoint-29, a-27)
amod(endpoint-29, common-28)
dobj(sharing-26, endpoint-29)
partmod(endpoint-29, called-31)
det(vertex-33, the-32)
dobj(called-31, vertex-33)
det(harv-37, the-35)
nn(harv-37, angle-36)
prep_of(vertex-33, harv-37)

An Applet is a software component that runs in the context of another program , for example a web browser .

det(Applet-2, An-1)
nsubj(component-6, Applet-2)
cop(component-6, is-3)
det(component-6, a-4)
nn(component-6, software-5)
root(ROOT-0, component-6)
nsubj(runs-8, component-6)
rcmod(component-6, runs-8)
det(context-11, the-10)
prep_in(runs-8, context-11)
det(program-14, another-13)
prep_of(context-11, program-14)
prep_for(runs-8, example-17)
det(browser-20, a-18)
nn(browser-20, web-19)
dep(example-17, browser-20)

In Greek mythology , Actaeon - LBR - Ã ∞ ÂœkÃ -- Â √ tiÃ ≈ Â˙n - RBR - - LBR - Greek : Ã ⁄ ÂŒÃ ⁄ ÂºÃ ∂ Â ≥ Ã ⁄ Â ± Ã ⁄ Â ¯ Ã ∂ Â ≈ Ã ⁄ Â ∏ - RBR - , son of the priestly herdsman Aristaeus and Autonoe in Boeotia , was a famous Theban hero , trained by the centaur Cheiron , who suffered the fatal wrath of Artemis .

amod(mythology-3, Greek-2)
prep_in(hero-69, mythology-3)
nsubj(hero-69, Actaeon-5)
dep(Actaeon-5, LBR-7)
nn(ÂœkÃ-11, Ã-9)
nn(ÂœkÃ-11, ∞-10)
dep(LBR-7, ÂœkÃ-11)
nn(Â˙n-17, Â-13)
nn(Â˙n-17, √-14)
nn(Â˙n-17, tiÃ-15)
nn(Â˙n-17, ≈-16)
dep(ÂœkÃ-11, Â˙n-17)
dep(Â˙n-17, RBR-19)
nn(RBR-51, LBR-22)
advmod(∏-49, Greek-24)
nn(∏-49, Ã-26)
nn(∏-49, ⁄-27)
nn(∏-49, ÂŒÃ-28)
nn(∏-49, ⁄-29)
nn(∏-49, ÂºÃ-30)
nn(∏-49, ∂-31)
nn(∏-49, Â-32)
nn(∏-49, ≥-33)
nn(∏-49, Ã-34)
nn(∏-49, ⁄-35)
nn(∏-49, Â-36)
nn(∏-49, ±-37)
nn(∏-49, Ã-38)
nn(∏-49, ⁄-39)
nn(∏-49, Â-40)
nn(∏-49, ¯-41)
nn(∏-49, Ã-42)
nn(∏-49, ∂-43)
nn(∏-49, Â-44)
nn(∏-49, ≈-45)
nn(∏-49, Ã-46)
nn(∏-49, ⁄-47)
nn(∏-49, Â-48)
dep(RBR-51, ∏-49)
dep(ÂœkÃ-11, RBR-51)
appos(Actaeon-5, son-54)
det(Aristaeus-59, the-56)
amod(Aristaeus-59, priestly-57)
amod(Aristaeus-59, herdsman-58)
prep_of(son-54, Aristaeus-59)
prep_of(son-54, Autonoe-61)
conj_and(Aristaeus-59, Autonoe-61)
prep_in(Aristaeus-59, Boeotia-63)
cop(hero-69, was-65)
det(hero-69, a-66)
amod(hero-69, famous-67)
nn(hero-69, Theban-68)
root(ROOT-0, hero-69)
partmod(hero-69, trained-71)
det(Cheiron-75, the-73)
nn(Cheiron-75, centaur-74)
agent(trained-71, Cheiron-75)
nsubj(suffered-78, who-77)
rcmod(hero-69, suffered-78)
det(wrath-81, the-79)
amod(wrath-81, fatal-80)
dobj(suffered-78, wrath-81)
prep_of(wrath-81, Artemis-83)

In the 19th century the term Anglicanism was coined to describe the common religious tradition of these churches .

det(century-4, the-2)
amod(century-4, 19th-3)
prep_in(coined-9, century-4)
det(Anglicanism-7, the-5)
nn(Anglicanism-7, term-6)
nsubjpass(coined-9, Anglicanism-7)
xsubj(describe-11, Anglicanism-7)
auxpass(coined-9, was-8)
root(ROOT-0, coined-9)
aux(describe-11, to-10)
xcomp(coined-9, describe-11)
det(tradition-15, the-12)
amod(tradition-15, common-13)
amod(tradition-15, religious-14)
dobj(describe-11, tradition-15)
det(churches-18, these-17)
prep_of(tradition-15, churches-18)

The Archaea are a group of single-celled microorganisms .

det(Archaea-2, The-1)
nsubj(group-5, Archaea-2)
cop(group-5, are-3)
det(group-5, a-4)
root(ROOT-0, group-5)
amod(microorganisms-8, single-celled-7)
prep_of(group-5, microorganisms-8)

The term Arianism is used to refer to other nontrinitarian theological systems of the fourth century , which regarded the Son of God , the Logos , as a created being - LBR - as in Arianism proper and Anomoeanism - RBR - or as neither uncreated nor created in the sense other beings are created - LBR - as in `` Semi-Arianism `` - RBR - .

det(Arianism-3, The-1)
nn(Arianism-3, term-2)
nsubjpass(used-5, Arianism-3)
xsubj(refer-7, Arianism-3)
auxpass(used-5, is-4)
root(ROOT-0, used-5)
aux(refer-7, to-6)
xcomp(used-5, refer-7)
amod(systems-12, other-9)
amod(systems-12, nontrinitarian-10)
amod(systems-12, theological-11)
prep_to(refer-7, systems-12)
det(century-16, the-14)
amod(century-16, fourth-15)
prep_of(systems-12, century-16)
nsubj(regarded-19, century-16)
rcmod(century-16, regarded-19)
det(Son-21, the-20)
dobj(regarded-19, Son-21)
prep_of(Son-21, God-23)
det(Logos-26, the-25)
appos(God-23, Logos-26)
det(being-31, a-29)
amod(being-31, created-30)
prep_as(regarded-19, being-31)
dep(being-31, LBR-33)
advmod(being-31, as-35)
nn(proper-38, Arianism-37)
prep_in(as-35, proper-38)
prep_in(as-35, Anomoeanism-40)
conj_and(proper-38, Anomoeanism-40)
dep(being-31, RBR-42)
dep(RBR-42, as-45)
advmod(uncreated-47, neither-46)
pobj(as-45, uncreated-47)
pobj(as-45, created-49)
conj_nor(uncreated-47, created-49)
det(sense-52, the-51)
prep_in(created-49, sense-52)
amod(beings-54, other-53)
nsubjpass(created-56, beings-54)
auxpass(created-56, are-55)
rcmod(sense-52, created-56)
dep(being-31, LBR-58)
conj_or(RBR-42, LBR-58)
advmod(in-61, as-60)
dep(RBR-42, in-61)
pcomp(in-61, Semi-Arianism-63)
dobj(Semi-Arianism-63, RBR-66)

In Judeo-Christian theology , the term Apocrypha refers to any collection of scriptural texts that falls outside the canon .

amod(theology-3, Judeo-Christian-2)
prep_in(refers-8, theology-3)
det(Apocrypha-7, the-5)
nn(Apocrypha-7, term-6)
nsubj(refers-8, Apocrypha-7)
root(ROOT-0, refers-8)
det(collection-11, any-10)
prep_to(refers-8, collection-11)
nsubj(falls-16, collection-11)
amod(texts-14, scriptural-13)
prep_of(collection-11, texts-14)
rcmod(collection-11, falls-16)
det(canon-19, the-18)
prep_outside(falls-16, canon-19)

An Abbess - LBR - Latin abbatissa , fem .

det(Abbess-2, An-1)
root(ROOT-0, Abbess-2)
dep(Abbess-2, LBR-4)
nn(abbatissa-7, Latin-6)
dep(LBR-4, abbatissa-7)
appos(abbatissa-7, fem-9)

form of abbas , abbot - RBR - is the female superior , or Mother Superior , of an abbey of nuns .

nsubj(superior-12, form-1)
prep_of(form-1, abbas-3)
appos(abbas-3, abbot-5)
dep(form-1, RBR-7)
cop(superior-12, is-9)
det(superior-12, the-10)
amod(superior-12, female-11)
root(ROOT-0, superior-12)
nn(Superior-16, Mother-15)
conj_or(superior-12, Superior-16)
det(abbey-20, an-19)
prep_of(superior-12, abbey-20)
prep_of(abbey-20, nuns-22)

An Abbey - LBR - from Latin abbatia , derived from Syriac abba , `` father `` - RBR - , is a Christian monastery or convent , under the government of an Abbot or an Abbess , who serves as the spiritual father or mother of the community .

det(Abbey-2, An-1)
nsubj(monastery-25, Abbey-2)
dep(Abbey-2, LBR-4)
nn(abbatia-8, Latin-7)
prep_from(Abbey-2, abbatia-8)
partmod(abbatia-8, derived-10)
amod(abba-13, Syriac-12)
prep_from(derived-10, abba-13)
dobj(derived-10, father-16)
dep(abbatia-8, RBR-19)
cop(monastery-25, is-22)
det(monastery-25, a-23)
amod(monastery-25, Christian-24)
root(ROOT-0, monastery-25)
conj_or(monastery-25, convent-27)
det(government-31, the-30)
prep_under(monastery-25, government-31)
nsubj(serves-40, government-31)
det(Abbess-37, an-33)
nn(Abbess-37, Abbot-34)
conj_or(Abbot-34, an-36)
nn(Abbess-37, an-36)
prep_of(government-31, Abbess-37)
rcmod(government-31, serves-40)
det(father-44, the-42)
amod(father-44, spiritual-43)
prep_as(serves-40, father-44)
prep_as(serves-40, mother-46)
conj_or(father-44, mother-46)
det(community-49, the-48)
prep_of(father-44, community-49)

In particle physics and quantum chemistry , Antimatter is the extension of the concept of the antiparticle to matter , where antimatter is composed of antiparticles in the same way that normal matter is composed of particles .

nn(physics-3, particle-2)
prep_in(extension-11, physics-3)
nn(chemistry-6, quantum-5)
conj_and(physics-3, chemistry-6)
prep_in(extension-11, chemistry-6)
nsubj(extension-11, Antimatter-8)
cop(extension-11, is-9)
det(extension-11, the-10)
root(ROOT-0, extension-11)
det(concept-14, the-13)
prep_of(extension-11, concept-14)
det(antiparticle-17, the-16)
prep_of(concept-14, antiparticle-17)
aux(matter-19, to-18)
infmod(antiparticle-17, matter-19)
advmod(composed-24, where-21)
nsubjpass(composed-24, antimatter-22)
auxpass(composed-24, is-23)
advcl(matter-19, composed-24)
prep_of(composed-24, antiparticles-26)
det(way-30, the-28)
amod(way-30, same-29)
prep_in(antiparticles-26, way-30)
complm(composed-35, that-31)
amod(matter-33, normal-32)
nsubjpass(composed-35, matter-33)
auxpass(composed-35, is-34)
ccomp(composed-24, composed-35)
prep_of(composed-35, particles-37)

In mathematics , Associativity is a property that a binary operation can have .

prep_in(property-7, mathematics-2)
nsubj(property-7, Associativity-4)
cop(property-7, is-5)
det(property-7, a-6)
root(ROOT-0, property-7)
complm(have-13, that-8)
det(operation-11, a-9)
amod(operation-11, binary-10)
nsubj(have-13, operation-11)
aux(have-13, can-12)
ccomp(property-7, have-13)

The name Apatosaurus means ` deceptive lizard ' , so-given because the chevron bones were similar to those of a prehistoric marine lizard , Mosasaurus .

det(Apatosaurus-3, The-1)
nn(Apatosaurus-3, name-2)
nsubj(means-4, Apatosaurus-3)
root(ROOT-0, means-4)
amod(lizard-7, deceptive-6)
nsubj(Mosasaurus-25, lizard-7)
appos(lizard-7, so-given-10)
mark(similar-16, because-11)
det(bones-14, the-12)
nn(bones-14, chevron-13)
nsubj(similar-16, bones-14)
cop(similar-16, were-15)
dep(so-given-10, similar-16)
prep_to(similar-16, those-18)
det(lizard-23, a-20)
amod(lizard-23, prehistoric-21)
amod(lizard-23, marine-22)
prep_of(those-18, lizard-23)
ccomp(means-4, Mosasaurus-25)

Allosaurus was a large bipedal predator with a large skull , equipped with dozens of large , sharp teeth .

nsubj(predator-6, Allosaurus-1)
cop(predator-6, was-2)
det(predator-6, a-3)
amod(predator-6, large-4)
amod(predator-6, bipedal-5)
root(ROOT-0, predator-6)
det(skull-10, a-8)
amod(skull-10, large-9)
prep_with(predator-6, skull-10)
partmod(skull-10, equipped-12)
prep_with(equipped-12, dozens-14)
amod(teeth-19, large-16)
amod(teeth-19, sharp-18)
prep_of(dozens-14, teeth-19)

The AK-47 - LBR - contraction of Russian : Ã ∆ Â ∆ Ã ∆ Â '' ÃŒÂ ≠ Ã ∆ Â ≤ Ã ∆ ÂπÃ ∆ Â ° ÃŒÂ ≠ Ã ∆ Â˚Ã ∆ Â ° Ã ∆ Â '' Ã ∆ Â ° ÃŒÂ √ Ã ∆ Â ∏ Ã ∆ Â ¸ Ã ∆ ÂºÃ ∆ Â ≤ Ã ∆ Â '' Ã ∆ Â ° Ã ∆ Â ≤ Ã ∆ Â ± ÃŒÂ • Ã ∆ Â ° Ã ∆ Â · ÃŒÂ ∫ Ã ∆ Â ° 1947 Ã ∆ Â `` Ã ∆ Â ≤ Ã ∆ Â ´ Ã ∆ Â ° ; Avtomat Kalashnikova obraztsa 1947 goda ; `` Automatic rifle Kalashnikov model of 1947 year `` - RBR - is a 7.62 mm assault rifle developed in the Soviet Union by Mikhail Kalashnikov in two versions : the fixed stock AK-47 and the AKS-47 - LBR - SÃ cents Â • Â ‰ So skladnym prikladom - RBR - variant equipped with an underfolding metal shoulder stock .

det(contraction-6, The-1)
nn(contraction-6, AK-47-2)
dep(contraction-6, LBR-4)
root(ROOT-0, contraction-6)
prep_of(contraction-6, Russian-8)
nn(∆-15, Ã-10)
nn(∆-15, ∆-11)
nn(∆-15, Â-12)
nn(∆-15, ∆-13)
nn(∆-15, Ã-14)
dep(contraction-6, ∆-15)
dobj(≠-31, ∆-15)
nn(ÃŒÂ-30, Â-16)
nn(ÃŒÂ-30, ÃŒÂ-18)
nn(ÃŒÂ-30, ≠-19)
nn(ÃŒÂ-30, Ã-20)
nn(ÃŒÂ-30, ∆-21)
nn(ÃŒÂ-30, Â-22)
nn(ÃŒÂ-30, ≤-23)
nn(ÃŒÂ-30, Ã-24)
nn(ÃŒÂ-30, ∆-25)
nn(ÃŒÂ-30, ÂπÃ-26)
nn(ÃŒÂ-30, ∆-27)
nn(ÃŒÂ-30, Â-28)
nn(ÃŒÂ-30, °-29)
nsubj(≠-31, ÃŒÂ-30)
rcmod(∆-15, ≠-31)
nn(Â-36, Ã-32)
nn(Â-36, ∆-33)
nn(Â-36, Â˚Ã-34)
nn(Â-36, ∆-35)
dep(≤-61, Â-36)
nn(Â-40, °-37)
nn(Â-40, Ã-38)
nn(Â-40, ∆-39)
dep(Â-36, Â-40)
nn(∆-59, Ã-42)
nn(∆-59, ∆-43)
nn(∆-59, Â-44)
nn(∆-59, °-45)
nn(∆-59, ÃŒÂ-46)
nn(∆-59, √-47)
nn(∆-59, Ã-48)
nn(∆-59, ∆-49)
nn(∆-59, Â-50)
nn(∆-59, ∏-51)
nn(∆-59, Ã-52)
nn(∆-59, ∆-53)
nn(∆-59, Â-54)
nn(∆-59, ¸-55)
nn(∆-59, Ã-56)
nn(∆-59, ∆-57)
nn(∆-59, ÂºÃ-58)
dep(≤-61, ∆-59)
nn(≤-61, Â-60)
dep(Â-97, ≤-61)
nn(Â-64, Ã-62)
nn(Â-64, ∆-63)
dep(≤-61, Â-64)
nn(Â-97, Ã-66)
nn(Â-97, ∆-67)
nn(Â-97, Â-68)
nn(Â-97, °-69)
nn(Â-97, Ã-70)
nn(Â-97, ∆-71)
nn(Â-97, Â-72)
nn(Â-97, ≤-73)
nn(Â-97, Ã-74)
nn(Â-97, ∆-75)
nn(Â-97, Â-76)
nn(Â-97, ±-77)
nn(Â-97, ÃŒÂ-78)
nn(Â-97, •-79)
nn(Â-97, Ã-80)
nn(Â-97, ∆-81)
nn(Â-97, Â-82)
nn(Â-97, °-83)
nn(Â-97, Ã-84)
nn(Â-97, ∆-85)
nn(Â-97, Â-86)
nn(Â-97, ·-87)
nn(Â-97, ÃŒÂ-88)
nn(Â-97, ∫-89)
nn(Â-97, Ã-90)
nn(Â-97, ∆-91)
nn(Â-97, Â-92)
nn(Â-97, °-93)
nn(Â-97, 1947-94)
nn(Â-97, Ã-95)
nn(Â-97, ∆-96)
dep(Ã-103, Â-97)
nn(Ã-103, Ã-99)
nn(Ã-103, ∆-100)
nn(Ã-103, Â-101)
nn(Ã-103, ≤-102)
dep(≠-31, Ã-103)
nn(°-110, ∆-104)
nn(°-110, Â-105)
nn(°-110, ´-106)
nn(°-110, Ã-107)
nn(°-110, ∆-108)
nn(°-110, Â-109)
dep(Ã-103, °-110)
nn(obraztsa-114, Avtomat-112)
nn(obraztsa-114, Kalashnikova-113)
dep(Ã-103, obraztsa-114)
num(goda-116, 1947-115)
dep(obraztsa-114, goda-116)
nn(model-122, Automatic-119)
nn(model-122, rifle-120)
nn(model-122, Kalashnikov-121)
dep(Ã-103, model-122)
num(year-125, 1947-124)
prep_of(model-122, year-125)
dep(year-125, RBR-128)
dep(Ã-103, is-130)
det(rifle-135, a-131)
num(rifle-135, 7.62-132)
nn(rifle-135, mm-133)
nn(rifle-135, assault-134)
nsubj(is-130, rifle-135)
partmod(rifle-135, developed-136)
det(Union-140, the-138)
nn(Union-140, Soviet-139)
prep_in(developed-136, Union-140)
nn(Kalashnikov-143, Mikhail-142)
agent(developed-136, Kalashnikov-143)
num(versions-146, two-145)
prep_in(Kalashnikov-143, versions-146)
det(AK-47-151, the-148)
amod(AK-47-151, fixed-149)
nn(AK-47-151, stock-150)
dep(Ã-103, AK-47-151)
det(AKS-47-154, the-153)
dep(Ã-103, AKS-47-154)
conj_and(AK-47-151, AKS-47-154)
amod(stock-177, LBR-156)
nn(‰-163, SÃ-158)
nn(‰-163, cents-159)
nn(‰-163, Â-160)
nn(‰-163, •-161)
nn(‰-163, Â-162)
dep(stock-177, ‰-163)
advmod(prikladom-166, So-164)
nn(prikladom-166, skladnym-165)
dep(‰-163, prikladom-166)
dep(‰-163, RBR-168)
dep(RBR-168, variant-170)
amod(stock-177, equipped-171)
det(shoulder-176, an-173)
amod(shoulder-176, underfolding-174)
nn(shoulder-176, metal-175)
prep_with(equipped-171, shoulder-176)
dep(contraction-6, stock-177)

The Andes are the world 's longest exposed mountain range .

det(Andes-2, The-1)
nsubj(range-10, Andes-2)
cop(range-10, are-3)
det(world-5, the-4)
poss(range-10, world-5)
dep(exposed-8, longest-7)
amod(range-10, exposed-8)
nn(range-10, mountain-9)
root(ROOT-0, range-10)

An Anchor is an object , often made -LRB- PRT -RRB- out -LRB- \/ PRT -RRB- of metal , that is used to attach a ship to the bottom of a body of water at a specific point .

det(Anchor-2, An-1)
nsubj(object-5, Anchor-2)
cop(object-5, is-3)
det(object-5, an-4)
root(ROOT-0, object-5)
nsubjpass(used-22, object-5)
advmod(object-5, often-7)
partmod(object-5, made-8)
dep(made-8, PRT-10)
advmod(PRT-10, out-12)
nn(PRT-15, \/-14)
abbrev(object-5, PRT-15)
prep_of(object-5, metal-18)
auxpass(used-22, is-21)
rcmod(object-5, used-22)
aux(attach-24, to-23)
xcomp(used-22, attach-24)
det(ship-26, a-25)
dobj(attach-24, ship-26)
det(bottom-29, the-28)
prep_to(attach-24, bottom-29)
det(body-32, a-31)
prep_of(bottom-29, body-32)
prep_of(body-32, water-34)
det(point-38, a-36)
amod(point-38, specific-37)
prep_at(attach-24, point-38)

An Anagram - LBR - Greek anagramma ` letters written anew ' , passive participle of ana - ` again ' + gramma ` letter ' - RBR - is a type of word play , the result of rearranging the letters of a word or phrase to produce a new word or phrase , using all the original letters exactly once .

det(anagramma-7, An-1)
nn(anagramma-7, Anagram-2)
dep(anagramma-7, LBR-4)
amod(anagramma-7, Greek-6)
nsubj(+-22, anagramma-7)
nsubj(anew-11, letters-9)
partmod(letters-9, written-10)
dep(anagramma-7, anew-11)
amod(participle-15, passive-14)
dobj(anew-11, participle-15)
prep_of(participle-15, ana-17)
advmod(anew-11, again-20)
root(ROOT-0, +-22)
nn(letter-25, gramma-23)
nsubj(type-32, letter-25)
dep(letter-25, RBR-28)
cop(type-32, is-30)
det(type-32, a-31)
ccomp(+-22, type-32)
nn(play-35, word-34)
prep_of(type-32, play-35)
det(result-38, the-37)
appos(play-35, result-38)
prepc_of(result-38, rearranging-40)
det(letters-42, the-41)
dobj(rearranging-40, letters-42)
det(word-45, a-44)
prep_of(letters-42, word-45)
prep_of(letters-42, phrase-47)
conj_or(word-45, phrase-47)
aux(produce-49, to-48)
xcomp(rearranging-40, produce-49)
det(word-52, a-50)
amod(word-52, new-51)
dobj(produce-49, word-52)
dobj(produce-49, phrase-54)
conj_or(word-52, phrase-54)
xcomp(+-22, using-56)
predet(letters-60, all-57)
det(letters-60, the-58)
amod(letters-60, original-59)
dobj(using-56, letters-60)
advmod(using-56, exactly-61)
advmod(using-56, once-62)

As a tyrannosaurid , Albertosaurus was a bipedal predator with tiny , two-fingered hands and a massive head with dozens of large , sharp teeth .

det(tyrannosaurid-3, a-2)
prep_as(predator-9, tyrannosaurid-3)
nsubj(predator-9, Albertosaurus-5)
cop(predator-9, was-6)
det(predator-9, a-7)
amod(predator-9, bipedal-8)
root(ROOT-0, predator-9)
amod(hands-14, tiny-11)
amod(hands-14, two-fingered-13)
prep_with(predator-9, hands-14)
det(head-18, a-16)
amod(head-18, massive-17)
conj_and(predator-9, head-18)
prep_with(head-18, dozens-20)
amod(teeth-25, large-22)
amod(teeth-25, sharp-24)
prep_of(dozens-20, teeth-25)

Ambrose - LBR - c. 338 & amp ; amp ; ndash ; -LRB- LST -RRB- 4 -LRB- \/ LST -RRB- April 397 - RBR - was a bishop of Milan who became one of the most influential ecclesiastical figures of the fourth century .

nsubj(bishop-29, Ambrose-1)
dep(Ambrose-1, LBR-3)
dep(Ambrose-1, c.-5)
num(c.-5, 338-6)
dep(Ambrose-1, amp-8)
conj_and(c.-5, amp-8)
dep(Ambrose-1, amp-10)
dep(amp-10, ndash-12)
dep(Ambrose-1, LST-15)
dep(LST-15, 4-17)
nn(LST-20, \/-19)
abbrev(4-17, LST-20)
dep(LST-15, April-22)
num(April-22, 397-23)
dep(Ambrose-1, RBR-25)
cop(bishop-29, was-27)
det(bishop-29, a-28)
root(ROOT-0, bishop-29)
nsubj(one-34, bishop-29)
prep_of(bishop-29, Milan-31)
cop(one-34, became-33)
rcmod(bishop-29, one-34)
det(figures-40, the-36)
advmod(influential-38, most-37)
amod(figures-40, influential-38)
amod(figures-40, ecclesiastical-39)
prep_of(one-34, figures-40)
det(century-44, the-42)
amod(century-44, fourth-43)
prep_of(figures-40, century-44)

The Alphorn or alpenhorn is a brass instrument , consisting of a natural wooden horn of conical bore , having a cup-shaped mouthpiece , used by mountain dwellers in Switzerland and elsewhere .

det(Alphorn-2, The-1)
nsubj(instrument-8, Alphorn-2)
conj_or(Alphorn-2, alpenhorn-4)
nsubj(instrument-8, alpenhorn-4)
cop(instrument-8, is-5)
det(instrument-8, a-6)
nn(instrument-8, brass-7)
root(ROOT-0, instrument-8)
dep(instrument-8, consisting-10)
det(horn-15, a-12)
amod(horn-15, natural-13)
amod(horn-15, wooden-14)
prep_of(consisting-10, horn-15)
amod(bore-18, conical-17)
prep_of(horn-15, bore-18)
dep(consisting-10, having-20)
det(mouthpiece-23, a-21)
amod(mouthpiece-23, cup-shaped-22)
dobj(having-20, mouthpiece-23)
partmod(mouthpiece-23, used-25)
nn(dwellers-28, mountain-27)
agent(used-25, dwellers-28)
prep_in(dwellers-28, Switzerland-30)
dobj(having-20, elsewhere-32)
advmod(mouthpiece-23, elsewhere-32)
conj_and(mouthpiece-23, elsewhere-32)

An Army - LBR - from Latin Armata `` act of arming `` via Old French armÃ ∞ Â © e - RBR - , in the broadest sense , is the land-based armed forces of a nation .

det(Army-2, An-1)
nsubj(forces-35, Army-2)
dep(Army-2, LBR-4)
nn(Armata-8, Latin-7)
prep_from(Army-2, Armata-8)
dep(Armata-8, act-10)
prepc_of(Armata-8, arming-12)
amod(armÃ-17, Old-15)
amod(armÃ-17, French-16)
prep_via(©-20, armÃ-17)
nn(Â-19, ∞-18)
nsubj(©-20, Â-19)
ccomp(arming-12, ©-20)
dep(RBR-23, e-21)
dep(©-20, RBR-23)
det(sense-29, the-27)
amod(sense-29, broadest-28)
prep_in(forces-35, sense-29)
cop(forces-35, is-31)
det(forces-35, the-32)
amod(forces-35, land-based-33)
amod(forces-35, armed-34)
root(ROOT-0, forces-35)
det(nation-38, a-37)
prep_of(forces-35, nation-38)

An Apostle is a messenger and ambassador .

det(Apostle-2, An-1)
nsubj(messenger-5, Apostle-2)
cop(messenger-5, is-3)
det(messenger-5, a-4)
root(ROOT-0, messenger-5)
conj_and(messenger-5, ambassador-7)

The Dasyproctidae are a family of large South American rodents , comprising the agoutis and acouchis .

det(Dasyproctidae-2, The-1)
nsubj(family-5, Dasyproctidae-2)
cop(family-5, are-3)
det(family-5, a-4)
root(ROOT-0, family-5)
amod(rodents-10, large-7)
nn(rodents-10, South-8)
nn(rodents-10, American-9)
prep_of(family-5, rodents-10)
partmod(family-5, comprising-12)
xcomp(family-5, comprising-12)
det(agoutis-14, the-13)
dobj(comprising-12, agoutis-14)
dobj(comprising-12, acouchis-16)
conj_and(agoutis-14, acouchis-16)

The Aar - LBR - German Aare - RBR - , a tributary of the Rhine , is the longest river that both rises and ends entirely within Switzerland .

det(Aar-2, The-1)
root(ROOT-0, Aar-2)
nsubj(river-21, LBR-4)
nn(Aare-7, German-6)
dep(LBR-4, Aare-7)
dep(Aare-7, RBR-9)
det(tributary-13, a-12)
appos(LBR-4, tributary-13)
det(Rhine-16, the-15)
prep_of(tributary-13, Rhine-16)
cop(river-21, is-18)
det(river-21, the-19)
amod(river-21, longest-20)
dep(Aar-2, river-21)
nsubj(rises-24, river-21)
nsubj(ends-26, river-21)
dep(rises-24, both-23)
rcmod(river-21, rises-24)
rcmod(river-21, ends-26)
conj_and(rises-24, ends-26)
advmod(ends-26, entirely-27)
prep_within(ends-26, Switzerland-29)

The Alamanni , Allemanni , or Alemanni were originally an alliance of west Germanic tribes located around the upper Main , a river that is one of the largest tributaries of the Rhine , on land that is today part of Germany .

det(Alamanni-2, The-1)
nsubj(alliance-11, Alamanni-2)
conj_or(Alamanni-2, Allemanni-4)
nsubj(alliance-11, Allemanni-4)
conj_or(Alamanni-2, Alemanni-7)
nsubj(alliance-11, Alemanni-7)
cop(alliance-11, were-8)
advmod(alliance-11, originally-9)
det(alliance-11, an-10)
root(ROOT-0, alliance-11)
amod(tribes-15, west-13)
amod(tribes-15, Germanic-14)
prep_of(alliance-11, tribes-15)
partmod(tribes-15, located-16)
det(Main-20, the-18)
amod(Main-20, upper-19)
prep_around(located-16, Main-20)
det(river-23, a-22)
appos(Main-20, river-23)
nsubj(one-26, river-23)
cop(one-26, is-25)
rcmod(river-23, one-26)
det(tributaries-30, the-28)
amod(tributaries-30, largest-29)
prep_of(one-26, tributaries-30)
det(Rhine-33, the-32)
prep_of(tributaries-30, Rhine-33)
prep_on(alliance-11, land-36)
nsubj(part-40, land-36)
cop(part-40, is-38)
nn(part-40, today-39)
rcmod(land-36, part-40)
prep_of(part-40, Germany-42)

The Dodo is a fictional character appearing in Chapters 2 and 3 of the book Alice 's Adventures in Wonderland by Lewis Carroll - LBR - Charles Lutwidge Dodgson - RBR - .

det(Dodo-2, The-1)
nsubj(character-6, Dodo-2)
cop(character-6, is-3)
det(character-6, a-4)
amod(character-6, fictional-5)
root(ROOT-0, character-6)
partmod(character-6, appearing-7)
prep_in(appearing-7, Chapters-9)
num(Chapters-9, 2-10)
prep_in(appearing-7, 3-12)
conj_and(Chapters-9, 3-12)
det(book-15, the-14)
prep_of(Chapters-9, book-15)
poss(Adventures-18, Alice-16)
dobj(appearing-7, Adventures-18)
prep_in(appearing-7, Wonderland-20)
nn(RBR-31, Lewis-22)
nn(RBR-31, Carroll-23)
dep(RBR-31, LBR-25)
nn(Dodgson-29, Charles-27)
nn(Dodgson-29, Lutwidge-28)
dep(LBR-25, Dodgson-29)
agent(appearing-7, RBR-31)

The Eaglet is a character appearing in Chapter 2 and 3 of Alice 's Adventures in Wonderland by Lewis Carroll , a reference to Edith Liddell , Alice 's sister .

det(Eaglet-2, The-1)
nsubj(character-5, Eaglet-2)
cop(character-5, is-3)
det(character-5, a-4)
root(ROOT-0, character-5)
partmod(character-5, appearing-6)
prep_in(appearing-6, Chapter-8)
num(Chapter-8, 2-9)
prep_in(appearing-6, 3-11)
conj_and(Chapter-8, 3-11)
poss(Adventures-15, Alice-13)
prep_of(Chapter-8, Adventures-15)
prep_in(Adventures-15, Wonderland-17)
nn(Carroll-20, Lewis-19)
agent(appearing-6, Carroll-20)
det(reference-23, a-22)
appos(Carroll-20, reference-23)
nn(Liddell-26, Edith-25)
prep_to(reference-23, Liddell-26)
poss(sister-30, Alice-28)
appos(Liddell-26, sister-30)

Agate - LBR - ' Ã ∞ ÂœgÃ ≈ Â˙t - RBR - is a microcrystalline variety of quartz - LBR - silica - RBR - , chiefly chalcedony , characterised by its fineness of grain and brightness of color .

root(ROOT-0, Agate-1)
poss(Â˙t-10, LBR-3)
nn(Â˙t-10, Ã-6)
nn(Â˙t-10, ∞-7)
nn(Â˙t-10, ÂœgÃ-8)
nn(Â˙t-10, ≈-9)
nsubj(variety-17, Â˙t-10)
dep(Â˙t-10, RBR-12)
cop(variety-17, is-14)
det(variety-17, a-15)
amod(variety-17, microcrystalline-16)
dep(Agate-1, variety-17)
amod(silica-23, quartz-19)
dep(silica-23, LBR-21)
prep_of(variety-17, silica-23)
dep(silica-23, RBR-25)
advmod(chalcedony-29, chiefly-28)
amod(variety-17, chalcedony-29)
partmod(variety-17, characterised-31)
poss(fineness-34, its-33)
agent(characterised-31, fineness-34)
prep_of(fineness-34, grain-36)
dep(Agate-1, brightness-38)
conj_and(variety-17, brightness-38)
prep_of(brightness-38, color-40)

In the Book of Samuel , Abner - LBR - Biblical Hebrew for `` father of light `` - RBR - , is first cousin to Saul and commander-in-chief of his army - LBR - 1 Samuel 14:50 , 20:25 - RBR - .

det(Book-3, the-2)
prep_in(cousin-25, Book-3)
prep_of(Book-3, Samuel-5)
dep(LBR-9, Abner-7)
ccomp(cousin-25, LBR-9)
nn(Hebrew-12, Biblical-11)
dep(LBR-9, Hebrew-12)
prep_for(Hebrew-12, father-15)
prep_of(father-15, light-17)
dep(father-15, RBR-20)
cop(cousin-25, is-23)
amod(cousin-25, first-24)
root(ROOT-0, cousin-25)
prep_to(cousin-25, Saul-27)
prep_to(cousin-25, commander-in-chief-29)
conj_and(Saul-27, commander-in-chief-29)
poss(army-32, his-31)
prep_of(Saul-27, army-32)
nn(RBR-42, LBR-34)
num(Samuel-37, 1-36)
dep(RBR-42, Samuel-37)
num(Samuel-37, 14:50-38)
appos(Samuel-37, 20:25-40)
dep(Saul-27, RBR-42)

In Greco-Roman mythology , Aeneas - LBR - Greek : Ã ⁄ ÂŒÃ ¡ ÂπÂ ° Ã ⁄ Â ∏ Ã ⁄ ÂµÃ ⁄ Â ¯ Ã ⁄ Â ± Ã ∂ Â ≠ , AineÃ ∞ Â -- as ; Ã ≈ ÂªÃ -- Â √ niÃ -- Â ∆ Ã ≈ Â˙s in English - RBR - was a Trojan hero , the son of prince Anchises and the goddess Aphrodite - LBR - Venus in Roman sources - RBR - .

amod(mythology-3, Greco-Roman-2)
prep_in(hero-63, mythology-3)
nsubj(hero-63, Aeneas-5)
dep(Aeneas-5, LBR-7)
dep(Aeneas-5, Greek-9)
number(⁄-12, Ã-11)
num(≠-34, ⁄-12)
nn(≠-34, ÂŒÃ-13)
nn(≠-34, ¡-14)
nn(≠-34, ÂπÂ-15)
nn(≠-34, °-16)
nn(≠-34, Ã-17)
nn(≠-34, ⁄-18)
nn(≠-34, Â-19)
nn(≠-34, ∏-20)
nn(≠-34, Ã-21)
nn(≠-34, ⁄-22)
nn(≠-34, ÂµÃ-23)
nn(≠-34, ⁄-24)
nn(≠-34, Â-25)
nn(≠-34, ¯-26)
nn(≠-34, Ã-27)
nn(≠-34, ⁄-28)
nn(≠-34, Â-29)
nn(≠-34, ±-30)
nn(≠-34, Ã-31)
nn(≠-34, ∂-32)
nn(≠-34, Â-33)
dep(Aeneas-5, ≠-34)
nn(Â-38, AineÃ-36)
nn(Â-38, ∞-37)
appos(≠-34, Â-38)
dep(Aeneas-5, as-40)
nn(ÂªÃ-44, Ã-42)
nn(ÂªÃ-44, ≈-43)
dep(as-40, ÂªÃ-44)
nn(√-47, Â-46)
dep(Aeneas-5, √-47)
dep(√-47, niÃ-48)
nn(Â˙s-54, Â-50)
nn(Â˙s-54, ∆-51)
nn(Â˙s-54, Ã-52)
nn(Â˙s-54, ≈-53)
dep(Aeneas-5, Â˙s-54)
prep_in(Â˙s-54, English-56)
dep(Aeneas-5, RBR-58)
cop(hero-63, was-60)
det(hero-63, a-61)
amod(hero-63, Trojan-62)
root(ROOT-0, hero-63)
det(son-66, the-65)
conj_and(hero-63, son-66)
nn(Anchises-69, prince-68)
prep_of(son-66, Anchises-69)
det(goddess-72, the-71)
conj_and(hero-63, goddess-72)
nn(RBR-82, Aphrodite-73)
dep(RBR-82, LBR-75)
dep(LBR-75, Venus-77)
nn(sources-80, Roman-79)
prep_in(Venus-77, sources-80)
dep(goddess-72, RBR-82)

Amaranth or pigweed is a cosmopolitan genus of herbs .

nsubj(genus-7, Amaranth-1)
conj_or(Amaranth-1, pigweed-3)
nsubj(genus-7, pigweed-3)
cop(genus-7, is-4)
det(genus-7, a-5)
nn(genus-7, cosmopolitan-6)
root(ROOT-0, genus-7)
prep_of(genus-7, herbs-9)

In Greek mythology , Agamemnon - LBR - ancient Greek : Ã ¡ ÂπÂ √ Ã ⁄ Â `` Ã ⁄ Â ± Ã ⁄ ÂπÃ ⁄ Â -- Ã ⁄ ÂπÃ ⁄ Â ∏ Ã ∂ Â ≈ Ã ⁄ Â ∏ - RBR - is a hero , the son of King Atreus of Mycenae and Queen Aerope , the brother of Menelaus and the husband of Clytemnestra ; different mythological versions make him the king either of Mycenae or of Argos .

amod(mythology-3, Greek-2)
prep_in(hero-49, mythology-3)
nsubj(hero-49, Agamemnon-5)
dep(Agamemnon-5, LBR-7)
amod(Greek-10, ancient-9)
dep(LBR-7, Greek-10)
nn(ÂπÃ-26, Ã-12)
nn(ÂπÃ-26, ¡-13)
nn(ÂπÃ-26, ÂπÂ-14)
nn(ÂπÃ-26, √-15)
nn(ÂπÃ-26, Ã-16)
nn(ÂπÃ-26, ⁄-17)
nn(ÂπÃ-26, Â-18)
nn(ÂπÃ-26, Ã-20)
nn(ÂπÃ-26, ⁄-21)
nn(ÂπÃ-26, Â-22)
nn(ÂπÃ-26, ±-23)
nn(ÂπÃ-26, Ã-24)
nn(ÂπÃ-26, ⁄-25)
dep(LBR-7, ÂπÃ-26)
nn(RBR-45, ⁄-27)
nn(RBR-45, Â-28)
advmod(∏-43, Ã-30)
nn(∏-43, ⁄-31)
nn(∏-43, ÂπÃ-32)
nn(∏-43, ⁄-33)
nn(∏-43, Â-34)
nn(∏-43, ∏-35)
nn(∏-43, Ã-36)
nn(∏-43, ∂-37)
nn(∏-43, Â-38)
nn(∏-43, ≈-39)
nn(∏-43, Ã-40)
nn(∏-43, ⁄-41)
nn(∏-43, Â-42)
dep(RBR-45, ∏-43)
dep(ÂπÃ-26, RBR-45)
cop(hero-49, is-47)
det(hero-49, a-48)
root(ROOT-0, hero-49)
det(son-52, the-51)
appos(hero-49, son-52)
nn(Atreus-55, King-54)
prep_of(son-52, Atreus-55)
nn(Aerope-60, Mycenae-57)
conj_and(Mycenae-57, Queen-59)
nn(Aerope-60, Queen-59)
prep_of(Atreus-55, Aerope-60)
det(brother-63, the-62)
conj_and(hero-49, brother-63)
prep_of(brother-63, Menelaus-65)
det(husband-68, the-67)
conj_and(hero-49, husband-68)
prep_of(husband-68, Clytemnestra-70)
amod(versions-74, different-72)
amod(versions-74, mythological-73)
nsubj(make-75, versions-74)
parataxis(hero-49, make-75)
nsubj(king-78, him-76)
det(king-78, the-77)
xcomp(make-75, king-78)
preconj(make-75, either-79)
prep_of(make-75, Mycenae-81)
prep_of(make-75, Argos-84)
conj_or(Mycenae-81, Argos-84)

Agathon - LBR - Ã ¡ ÂπÂ √ Ã ⁄ Â `` Ã ⁄ Â ¬ Ã ⁄ Â ¸ Ã ∂ Â ≈ Ã ⁄ Â ∏ - RBR - - LBR - ca .

root(ROOT-0, Agathon-1)
dep(Agathon-1, LBR-3)
nn(Â-23, Ã-5)
nn(Â-23, ¡-6)
nn(Â-23, ÂπÂ-7)
nn(Â-23, √-8)
nn(Â-23, Ã-9)
nn(Â-23, ⁄-10)
nn(Â-23, Â-11)
nn(Â-23, Ã-13)
nn(Â-23, ⁄-14)
nn(Â-23, Â-15)
nn(Â-23, ¬-16)
nn(Â-23, Ã-17)
nn(Â-23, ⁄-18)
nn(Â-23, Â-19)
nn(Â-23, ¸-20)
nn(Â-23, Ã-21)
nn(Â-23, ∂-22)
nsubj(≈-24, Â-23)
dep(Agathon-1, ≈-24)
nn(∏-28, Ã-25)
nn(∏-28, ⁄-26)
nn(∏-28, Â-27)
nsubj(ca-35, ∏-28)
dep(∏-28, RBR-30)
dep(∏-28, LBR-33)
ccomp(≈-24, ca-35)

448 & amp ; amp ; ndash ; 400 BC - RBR - was an Athenian tragic poet and friend of Euripides and Plato .

nsubj(poet-18, 448-1)
conj_and(448-1, amp-3)
nsubj(poet-18, amp-3)
dep(448-1, amp-5)
dep(amp-5, ndash-7)
dep(448-1, 400-9)
dep(400-9, BC-10)
dep(448-1, RBR-12)
cop(poet-18, was-14)
det(poet-18, an-15)
amod(poet-18, Athenian-16)
amod(poet-18, tragic-17)
root(ROOT-0, poet-18)
conj_and(poet-18, friend-20)
prep_of(friend-20, Euripides-22)
prep_of(friend-20, Plato-24)
conj_and(Euripides-22, Plato-24)

Ajax or Aias - LBR - Greek : Ã ⁄ ÂŒÃ ¡ ÂπÂ ´ Ã ⁄ Â ± Ã ⁄ Â ≤ - RBR - was a mythological Greek hero , the son of Telamon and Periboea and king of Salamis .

nsubj(hero-30, Ajax-1)
conj_or(Ajax-1, Aias-3)
nsubj(hero-30, Aias-3)
nn(RBR-24, LBR-5)
dep(RBR-24, Greek-7)
nn(≤-22, Ã-9)
nn(≤-22, ⁄-10)
nn(≤-22, ÂŒÃ-11)
nn(≤-22, ¡-12)
nn(≤-22, ÂπÂ-13)
nn(≤-22, ´-14)
nn(≤-22, Ã-15)
nn(≤-22, ⁄-16)
nn(≤-22, Â-17)
nn(≤-22, ±-18)
nn(≤-22, Ã-19)
nn(≤-22, ⁄-20)
nn(≤-22, Â-21)
dep(Greek-7, ≤-22)
dep(Ajax-1, RBR-24)
cop(hero-30, was-26)
det(hero-30, a-27)
amod(hero-30, mythological-28)
amod(hero-30, Greek-29)
root(ROOT-0, hero-30)
det(son-33, the-32)
conj_and(hero-30, son-33)
prep_of(son-33, Telamon-35)
prep_of(son-33, Periboea-37)
conj_and(Telamon-35, Periboea-37)
conj_and(hero-30, king-39)
prep_of(king-39, Salamis-41)

In Greek mythology , Alcmene or Alcmena - LBR - Greek : AÃ ⁄ Â '' Ã ⁄ ÂºÃ ⁄ ÂπÃ ⁄ Â ® Ã ⁄ Â ∏ Ã ⁄ Â · - RBR - was the mother of Heracles .

amod(mythology-3, Greek-2)
prep_in(mother-38, mythology-3)
nsubj(mother-38, Alcmene-5)
conj_or(Alcmene-5, Alcmena-7)
nsubj(mother-38, Alcmena-7)
nn(RBR-34, LBR-9)
dep(RBR-34, Greek-11)
nn(Ã-17, AÃ-13)
nn(Ã-17, ⁄-14)
nn(Ã-17, Â-15)
dep(Greek-11, Ã-17)
advmod(·-32, ⁄-18)
nn(·-32, ÂºÃ-19)
nn(·-32, ⁄-20)
nn(·-32, ÂπÃ-21)
nn(·-32, ⁄-22)
nn(·-32, Â-23)
nn(·-32, ®-24)
nn(·-32, Ã-25)
nn(·-32, ⁄-26)
nn(·-32, Â-27)
nn(·-32, ∏-28)
nn(·-32, Ã-29)
nn(·-32, ⁄-30)
nn(·-32, Â-31)
rcmod(Ã-17, ·-32)
dep(Alcmene-5, RBR-34)
cop(mother-38, was-36)
det(mother-38, the-37)
root(ROOT-0, mother-38)
prep_of(mother-38, Heracles-40)

The Alexandrists were a school of Renaissance philosophers who , in the great controversy on the subject of personal immortality , adopted the explanation of the De Anima given by Alexander of Aphrodisias .

det(Alexandrists-2, The-1)
nsubj(school-5, Alexandrists-2)
cop(school-5, were-3)
det(school-5, a-4)
root(ROOT-0, school-5)
nsubj(adopted-22, school-5)
nn(philosophers-8, Renaissance-7)
prep_of(school-5, philosophers-8)
det(controversy-14, the-12)
amod(controversy-14, great-13)
prep_in(adopted-22, controversy-14)
det(subject-17, the-16)
prep_on(controversy-14, subject-17)
amod(immortality-20, personal-19)
prep_of(subject-17, immortality-20)
rcmod(school-5, adopted-22)
det(explanation-24, the-23)
dobj(adopted-22, explanation-24)
det(Anima-28, the-26)
nn(Anima-28, De-27)
prep_of(explanation-24, Anima-28)
prep(adopted-22, given-29)
pcomp(given-29, by-30)
prep_by(given-29, Alexander-31)
prep_of(Alexander-31, Aphrodisias-33)

An Antipope - LBR - Latin : antipapa - RBR - is a person who makes a widely accepted claim to be the lawful pope , in opposition to the pope recognized by the Roman Catholic Church .

det(Antipope-2, An-1)
nsubj(person-14, Antipope-2)
nn(RBR-10, LBR-4)
dep(RBR-10, Latin-6)
dep(Latin-6, antipapa-8)
dep(Antipope-2, RBR-10)
cop(person-14, is-12)
det(person-14, a-13)
root(ROOT-0, person-14)
nsubj(makes-16, person-14)
rcmod(person-14, makes-16)
det(claim-20, a-17)
advmod(claim-20, widely-18)
amod(claim-20, accepted-19)
nsubj(pope-25, claim-20)
aux(pope-25, to-21)
cop(pope-25, be-22)
det(pope-25, the-23)
amod(pope-25, lawful-24)
xcomp(makes-16, pope-25)
prep_in(pope-25, opposition-28)
det(pope-31, the-30)
prep_to(opposition-28, pope-31)
partmod(pope-31, recognized-32)
det(Church-37, the-34)
nn(Church-37, Roman-35)
nn(Church-37, Catholic-36)
agent(recognized-32, Church-37)

The Amazons are all-female warriors in Greek mythology .

det(Amazons-2, The-1)
nsubj(warriors-5, Amazons-2)
cop(warriors-5, are-3)
amod(warriors-5, all-female-4)
root(ROOT-0, warriors-5)
amod(mythology-8, Greek-7)
prep_in(warriors-5, mythology-8)

Anacharsis was a Scythian philosopher who traveled from his homeland on the northern shores of the Black Sea to Athens in the early 6th century BCE and made a great impression as a forthright , outspoken `` barbarian , `` apparently a forerunner of the Skeptics and Cynics , though none of his authentic works have survived .

nsubj(philosopher-5, Anacharsis-1)
cop(philosopher-5, was-2)
det(philosopher-5, a-3)
amod(philosopher-5, Scythian-4)
root(ROOT-0, philosopher-5)
nsubj(traveled-7, philosopher-5)
nsubj(made-28, philosopher-5)
rcmod(philosopher-5, traveled-7)
poss(homeland-10, his-9)
prep_from(traveled-7, homeland-10)
det(shores-14, the-12)
amod(shores-14, northern-13)
prep_on(traveled-7, shores-14)
det(Sea-18, the-16)
nn(Sea-18, Black-17)
prep_of(shores-14, Sea-18)
prep_to(traveled-7, Athens-20)
det(BCE-26, the-22)
amod(BCE-26, early-23)
amod(BCE-26, 6th-24)
nn(BCE-26, century-25)
prep_in(Athens-20, BCE-26)
rcmod(philosopher-5, made-28)
conj_and(traveled-7, made-28)
det(impression-31, a-29)
amod(impression-31, great-30)
dobj(made-28, impression-31)
det(barbarian-38, a-33)
amod(barbarian-38, forthright-34)
amod(barbarian-38, outspoken-36)
prep_as(made-28, barbarian-38)
dobj(survived-57, barbarian-38)
advmod(forerunner-43, apparently-41)
det(forerunner-43, a-42)
dep(barbarian-38, forerunner-43)
det(Skeptics-46, the-45)
prep_of(forerunner-43, Skeptics-46)
prep_of(forerunner-43, Cynics-48)
conj_and(Skeptics-46, Cynics-48)
mark(survived-57, though-50)
nsubj(survived-57, none-51)
poss(works-55, his-53)
amod(works-55, authentic-54)
prep_of(none-51, works-55)
aux(survived-57, have-56)
dep(barbarian-38, survived-57)

The Acre is a unit of area in a number of different systems , including the imperial and U. S. customary systems .

det(Acre-2, The-1)
nsubj(unit-5, Acre-2)
cop(unit-5, is-3)
det(unit-5, a-4)
root(ROOT-0, unit-5)
prep_of(unit-5, area-7)
det(number-10, a-9)
prep_in(area-7, number-10)
amod(systems-13, different-12)
prep_of(number-10, systems-13)
det(imperial-17, the-16)
prep_including(unit-5, imperial-17)
nn(systems-22, U.-19)
nn(systems-22, S.-20)
amod(systems-22, customary-21)
prep_including(unit-5, systems-22)
conj_and(imperial-17, systems-22)

An Allomorph is a linguistics term for a variant form of a morpheme .

det(Allomorph-2, An-1)
nsubj(term-6, Allomorph-2)
cop(term-6, is-3)
det(term-6, a-4)
amod(term-6, linguistics-5)
root(ROOT-0, term-6)
det(form-10, a-8)
amod(form-10, variant-9)
prep_for(term-6, form-10)
det(morpheme-13, a-12)
prep_of(form-10, morpheme-13)

In phonetics , an Allophone is one of several similar speech sounds - LBR - phones - RBR - that belong to the same phoneme .

prep_in(one-7, phonetics-2)
det(Allophone-5, an-4)
nsubj(one-7, Allophone-5)
cop(one-7, is-6)
root(ROOT-0, one-7)
amod(sounds-12, several-9)
amod(sounds-12, similar-10)
nn(sounds-12, speech-11)
prep_of(one-7, sounds-12)
dep(one-7, LBR-14)
nsubj(belong-21, LBR-14)
dep(LBR-14, phones-16)
dep(phones-16, RBR-18)
rcmod(LBR-14, belong-21)
det(phoneme-25, the-23)
amod(phoneme-25, same-24)
prep_to(belong-21, phoneme-25)

An Affix is a morpheme that is attached to a stem to form a word .

det(Affix-2, An-1)
nsubj(morpheme-5, Affix-2)
cop(morpheme-5, is-3)
det(morpheme-5, a-4)
root(ROOT-0, morpheme-5)
nsubjpass(attached-8, morpheme-5)
auxpass(attached-8, is-7)
rcmod(morpheme-5, attached-8)
det(stem-11, a-10)
prep_to(attached-8, stem-11)
aux(form-13, to-12)
xcomp(attached-8, form-13)
det(word-15, a-14)
dobj(form-13, word-15)

An Allegory - LBR - from Ã ⁄ Â ± Ã ⁄ Â '' Ã ⁄ Â '' Ã ⁄ Â ¿ Ã ∂ Â ≠ , allos , `` other `` , and lang , agoreuein , `` to speak -LRB- PRT -RRB- in -LRB- \/ PRT -RRB- public `` - RBR - is a figurative mode of representation conveying a meaning other than the literal .

det(Allegory-2, An-1)
nsubj(mode-58, Allegory-2)
dep(Allegory-2, LBR-4)
nn(Â-13, Ã-7)
nn(Â-13, ⁄-8)
nn(Â-13, Â-9)
nn(Â-13, ±-10)
nn(Â-13, Ã-11)
nn(Â-13, ⁄-12)
prep_from(Allegory-2, Â-13)
xsubj(speak-41, Â-13)
partmod(Â-13, Ã-15)
nn(Â-17, ⁄-16)
dobj(Ã-15, Â-17)
partmod(Â-17, Ã-19)
nn(≠-26, ⁄-20)
nn(≠-26, Â-21)
nn(≠-26, ¿-22)
nn(≠-26, Ã-23)
nn(≠-26, ∂-24)
nn(≠-26, Â-25)
dep(other-31, ≠-26)
appos(≠-26, allos-28)
dep(Ã-19, other-31)
dobj(Ã-15, lang-35)
conj_and(Â-17, lang-35)
appos(lang-35, agoreuein-37)
aux(speak-41, to-40)
xcomp(Ã-15, speak-41)
dobj(speak-41, PRT-43)
nn(PRT-48, \/-47)
abbrev(public-50, PRT-48)
prep_in(PRT-43, public-50)
dep(Â-13, RBR-53)
cop(mode-58, is-55)
det(mode-58, a-56)
amod(mode-58, figurative-57)
root(ROOT-0, mode-58)
prep_of(mode-58, representation-60)
partmod(representation-60, conveying-61)
det(other-64, a-62)
amod(other-64, meaning-63)
dobj(conveying-61, other-64)
det(literal-67, the-66)
prep_than(conveying-61, literal-67)

An Ambush is a long established military tactic in which an ambushing force uses concealment to attack an enemy that passes its position .

det(Ambush-2, An-1)
nsubj(tactic-8, Ambush-2)
cop(tactic-8, is-3)
det(tactic-8, a-4)
advmod(established-6, long-5)
amod(tactic-8, established-6)
amod(tactic-8, military-7)
root(ROOT-0, tactic-8)
rel(uses-14, which-10)
det(force-13, an-11)
amod(force-13, ambushing-12)
nsubj(uses-14, force-13)
rcmod(tactic-8, uses-14)
acomp(uses-14, concealment-15)
aux(attack-17, to-16)
xcomp(concealment-15, attack-17)
det(enemy-19, an-18)
dobj(attack-17, enemy-19)
nsubj(passes-21, enemy-19)
rcmod(enemy-19, passes-21)
poss(position-23, its-22)
dobj(passes-21, position-23)

An Abzyme - LBR - from antibody and enzyme - RBR - , also called catmab - LBR - from catalytic monoclonal antibody - RBR - , is a monoclonal antibody with catalytic activity .

det(Abzyme-2, An-1)
nsubj(antibody-31, Abzyme-2)
dep(Abzyme-2, LBR-4)
prep_from(Abzyme-2, antibody-7)
prep_from(Abzyme-2, enzyme-9)
conj_and(antibody-7, enzyme-9)
dep(antibody-7, RBR-11)
advmod(called-15, also-14)
partmod(Abzyme-2, called-15)
dep(called-15, catmab-16)
dep(RBR-25, LBR-18)
dep(LBR-18, from-20)
amod(antibody-23, catalytic-21)
amod(antibody-23, monoclonal-22)
pobj(from-20, antibody-23)
dep(catmab-16, RBR-25)
cop(antibody-31, is-28)
det(antibody-31, a-29)
amod(antibody-31, monoclonal-30)
root(ROOT-0, antibody-31)
amod(activity-34, catalytic-33)
prep_with(antibody-31, activity-34)

An Allele - LBR - Ã -- Â √ Ã ∞ ÂœliÃ -- Â ∆ l - LBR - UK - RBR - , \/ Ã ≈ Â˙Ã -- Â √ liÃ -- Â ∆ l \/ - LBR - US - RBR - - RBR - is one member of a pair or series of different forms of a gene .

det(Allele-2, An-1)
nsubj(member-50, Allele-2)
nn(Â-14, LBR-4)
dep(Â-14, Ã-6)
nn(ÂœliÃ-12, Â-8)
nn(ÂœliÃ-12, √-9)
nn(ÂœliÃ-12, Ã-10)
nn(ÂœliÃ-12, ∞-11)
dep(Ã-6, ÂœliÃ-12)
dep(Allele-2, Â-14)
amod(l-16, ∆-15)
dep(Â-14, l-16)
dep(Â-14, LBR-18)
dep(LBR-18, UK-20)
dep(Â-14, RBR-22)
nn(Â˙Ã-28, \/-25)
nn(Â˙Ã-28, Ã-26)
nn(Â˙Ã-28, ≈-27)
appos(RBR-22, Â˙Ã-28)
nn(liÃ-32, Â-30)
nn(liÃ-32, √-31)
dep(RBR-22, liÃ-32)
nn(\/-37, Â-34)
nn(\/-37, ∆-35)
nn(\/-37, l-36)
dep(RBR-22, \/-37)
dep(RBR-22, LBR-39)
dep(RBR-22, US-41)
dep(RBR-22, RBR-43)
dep(RBR-22, RBR-46)
cop(member-50, is-48)
num(member-50, one-49)
root(ROOT-0, member-50)
det(pair-53, a-52)
prep_of(member-50, pair-53)
prep_of(member-50, series-55)
conj_or(pair-53, series-55)
amod(forms-58, different-57)
prep_of(pair-53, forms-58)
det(gene-61, a-60)
prep_of(forms-58, gene-61)

An Autosome is a non-sex chromosome .

det(Autosome-2, An-1)
nsubj(chromosome-6, Autosome-2)
cop(chromosome-6, is-3)
det(chromosome-6, a-4)
amod(chromosome-6, non-sex-5)
root(ROOT-0, chromosome-6)

Apus is a faint southern constellation , not visible to the ancient Greeks .

nsubj(constellation-6, Apus-1)
cop(constellation-6, is-2)
det(constellation-6, a-3)
amod(southern-5, faint-4)
amod(constellation-6, southern-5)
root(ROOT-0, constellation-6)
dep(constellation-6, not-8)
dep(not-8, visible-9)
det(Greeks-13, the-11)
amod(Greeks-13, ancient-12)
prep_to(visible-9, Greeks-13)

Aslan is a Turkish word also used in Persian , with the meaning of lion .

nsubj(word-5, Aslan-1)
cop(word-5, is-2)
det(word-5, a-3)
amod(word-5, Turkish-4)
root(ROOT-0, word-5)
advmod(used-7, also-6)
partmod(word-5, used-7)
prep_in(used-7, Persian-9)
det(meaning-13, the-12)
prep_with(used-7, meaning-13)
prep_of(meaning-13, lion-15)

The Amiga is a family of personal computers originally developed by Amiga Corporation .

det(Amiga-2, The-1)
nsubj(family-5, Amiga-2)
cop(family-5, is-3)
det(family-5, a-4)
root(ROOT-0, family-5)
amod(computers-8, personal-7)
prep_of(family-5, computers-8)
advmod(developed-10, originally-9)
partmod(computers-8, developed-10)
nn(Corporation-13, Amiga-12)
agent(developed-10, Corporation-13)

The word Angula refers to a measure equal to a finger 's breadth .

det(Angula-3, The-1)
nn(Angula-3, word-2)
nsubj(refers-4, Angula-3)
root(ROOT-0, refers-4)
det(measure-7, a-6)
prep_to(refers-4, measure-7)
amod(measure-7, equal-8)
det(finger-11, a-10)
poss(breadth-13, finger-11)
prep_to(equal-8, breadth-13)

The Achaeans - LBR - in Greek Ã ¡ ÂπÂ √ Ã ∂ ÂΩÃ ⁄ Â ± Ã ⁄ Â ' Ã ⁄ Â ¿ Ã ⁄ Â ¯ , Akhaioi - RBR - is one of the collective names used for the Greeks in Homer 's Iliad - LBR - used 598 times - RBR - and Odyssey .

det(Achaeans-2, The-1)
nsubj(one-36, Achaeans-2)
nn(RBR-33, LBR-4)
amod(⁄-19, Greek-7)
nn(⁄-19, Ã-8)
nn(⁄-19, ¡-9)
nn(⁄-19, ÂπÂ-10)
nn(⁄-19, √-11)
nn(⁄-19, Ã-12)
nn(⁄-19, ∂-13)
nn(⁄-19, ÂΩÃ-14)
nn(⁄-19, ⁄-15)
nn(⁄-19, Â-16)
nn(⁄-19, ±-17)
nn(⁄-19, Ã-18)
prep_in(¯-29, ⁄-19)
poss(¯-29, Â-20)
nn(¯-29, Ã-22)
nn(¯-29, ⁄-23)
nn(¯-29, Â-24)
nn(¯-29, ¿-25)
nn(¯-29, Ã-26)
nn(¯-29, ⁄-27)
nn(¯-29, Â-28)
dep(RBR-33, ¯-29)
appos(¯-29, Akhaioi-31)
dep(Achaeans-2, RBR-33)
cop(one-36, is-35)
root(ROOT-0, one-36)
det(names-40, the-38)
amod(names-40, collective-39)
prep_of(one-36, names-40)
partmod(names-40, used-41)
det(Greeks-44, the-43)
prep_for(used-41, Greeks-44)
poss(Iliad-48, Homer-46)
prep_in(Greeks-44, Iliad-48)
dep(Iliad-48, LBR-50)
partmod(Greeks-44, used-52)
number(times-54, 598-53)
dobj(used-52, times-54)
dep(times-54, RBR-56)
dobj(used-52, Odyssey-59)
conj_and(times-54, Odyssey-59)

In Greek mythology , Ares - LBR - Ancient Greek : Ã ¡ ÂπÂ ` Ã ∂ Â ™ Ã ⁄ Â · Ã ∂ Â ≠ , modern Greek Ã ⁄ Â ∫ Ã ∂ Â ™ Ã ⁄ Â · Ã ∂ Â ≠ - RBR - is the son of Zeus and Hera .

amod(mythology-3, Greek-2)
prep_in(son-52, mythology-3)
nsubj(son-52, Ares-5)
nn(RBR-48, LBR-7)
amod(Greek-10, Ancient-9)
dep(RBR-48, Greek-10)
nn(≠-27, Ã-12)
nn(≠-27, ¡-13)
nn(≠-27, ÂπÂ-14)
nn(≠-27, Ã-16)
nn(≠-27, ∂-17)
nn(≠-27, Â-18)
nn(≠-27, ™-19)
nn(≠-27, Ã-20)
nn(≠-27, ⁄-21)
nn(≠-27, Â-22)
nn(≠-27, ·-23)
nn(≠-27, Ã-24)
nn(≠-27, ∂-25)
nn(≠-27, Â-26)
dep(Greek-10, ≠-27)
amod(≠-46, modern-29)
amod(≠-46, Greek-30)
nn(≠-46, Ã-31)
nn(≠-46, ⁄-32)
nn(≠-46, Â-33)
nn(≠-46, ∫-34)
nn(≠-46, Ã-35)
nn(≠-46, ∂-36)
nn(≠-46, Â-37)
nn(≠-46, ™-38)
nn(≠-46, Ã-39)
nn(≠-46, ⁄-40)
nn(≠-46, Â-41)
nn(≠-46, ·-42)
nn(≠-46, Ã-43)
nn(≠-46, ∂-44)
nn(≠-46, Â-45)
appos(≠-27, ≠-46)
dep(Ares-5, RBR-48)
cop(son-52, is-50)
det(son-52, the-51)
root(ROOT-0, son-52)
prep_of(son-52, Zeus-54)
prep_of(son-52, Hera-56)
conj_and(Zeus-54, Hera-56)

In computer science an Array is a data structure consisting of a group of elements that are accessed by indexing .

nn(science-3, computer-2)
prep_in(structure-9, science-3)
det(Array-5, an-4)
nsubj(structure-9, Array-5)
cop(structure-9, is-6)
det(structure-9, a-7)
nn(structure-9, data-8)
root(ROOT-0, structure-9)
partmod(structure-9, consisting-10)
det(group-13, a-12)
prep_of(consisting-10, group-13)
prep_of(group-13, elements-15)
nsubjpass(accessed-18, elements-15)
auxpass(accessed-18, are-17)
rcmod(elements-15, accessed-18)
agent(accessed-18, indexing-20)

The Aorta - LBR - pronounced `` ay-OR-tuh `` - RBR - is the largest artery in the human body , originating from the left ventricle of the heart and bringing oxygenated blood to all parts of the body in the systemic circulation .

det(Aorta-2, The-1)
nsubj(pronounced-6, Aorta-2)
dep(Aorta-2, LBR-4)
root(ROOT-0, pronounced-6)
ccomp(pronounced-6, ay-OR-tuh-8)
nsubj(artery-16, RBR-11)
cop(artery-16, is-13)
det(artery-16, the-14)
amod(artery-16, largest-15)
ccomp(ay-OR-tuh-8, artery-16)
det(body-20, the-18)
amod(body-20, human-19)
prep_in(artery-16, body-20)
ccomp(pronounced-6, originating-22)
conj_and(ay-OR-tuh-8, originating-22)
det(ventricle-26, the-24)
amod(ventricle-26, left-25)
prep_from(originating-22, ventricle-26)
det(heart-29, the-28)
prep_of(ventricle-26, heart-29)
ccomp(pronounced-6, bringing-31)
conj_and(ay-OR-tuh-8, bringing-31)
amod(blood-33, oxygenated-32)
dobj(bringing-31, blood-33)
det(parts-36, all-35)
prep_to(bringing-31, parts-36)
det(body-39, the-38)
prep_of(parts-36, body-39)
det(circulation-43, the-41)
amod(circulation-43, systemic-42)
prep_in(body-39, circulation-43)

An Ansible is a hypothetical machine capable of superluminal communication and used as a plot device in science fiction literature .

det(Ansible-2, An-1)
nsubj(machine-6, Ansible-2)
cop(machine-6, is-3)
det(machine-6, a-4)
amod(machine-6, hypothetical-5)
root(ROOT-0, machine-6)
amod(machine-6, capable-7)
amod(communication-10, superluminal-9)
prep_of(capable-7, communication-10)
amod(machine-6, used-12)
conj_and(capable-7, used-12)
det(device-16, a-14)
nn(device-16, plot-15)
prep_as(used-12, device-16)
nn(literature-20, science-18)
nn(literature-20, fiction-19)
prep_in(device-16, literature-20)

The Angles is a modern English word for a Germanic-speaking people who took their name from the cultural ancestral region of Angeln , a modern district located in Schleswig-Holstein , Germany .

det(Angles-2, The-1)
nsubj(word-7, Angles-2)
cop(word-7, is-3)
det(word-7, a-4)
amod(word-7, modern-5)
amod(word-7, English-6)
root(ROOT-0, word-7)
det(people-11, a-9)
amod(people-11, Germanic-speaking-10)
prep_for(word-7, people-11)
nsubj(took-13, people-11)
rcmod(people-11, took-13)
poss(name-15, their-14)
dobj(took-13, name-15)
det(region-20, the-17)
amod(ancestral-19, cultural-18)
amod(region-20, ancestral-19)
prep_from(took-13, region-20)
prep_of(region-20, Angeln-22)
det(district-26, a-24)
amod(district-26, modern-25)
appos(Angeln-22, district-26)
partmod(district-26, located-27)
nn(Germany-31, Schleswig-Holstein-29)
prep_in(located-27, Germany-31)

An Angel is a transcendental being found in many religions .

det(Angel-2, An-1)
nsubj(transcendental-5, Angel-2)
cop(transcendental-5, is-3)
det(transcendental-5, a-4)
root(ROOT-0, transcendental-5)
auxpass(found-7, being-6)
partmod(transcendental-5, found-7)
amod(religions-10, many-9)
prep_in(found-7, religions-10)

Aeolus - LBR - Ã ⁄ ÂŒÃ ¡ ÂπÂ ´ Ã ⁄ Â ¿ Ã ⁄ Â '' Ã ⁄ Â ¿ Ã ∂ Â ≠ - RBR - was the ruler of the winds in Greek Mythology .

nsubj(ruler-32, Aeolus-1)
dep(Aeolus-1, LBR-3)
nn(Â-17, Ã-5)
nn(Â-17, ⁄-6)
nn(Â-17, ÂŒÃ-7)
nn(Â-17, ¡-8)
nn(Â-17, ÂπÂ-9)
nn(Â-17, ´-10)
nn(Â-17, Ã-11)
nn(Â-17, ⁄-12)
nn(Â-17, Â-13)
nn(Â-17, ¿-14)
nn(Â-17, Ã-15)
nn(Â-17, ⁄-16)
dep(Aeolus-1, Â-17)
nn(≠-26, Ã-19)
nn(≠-26, ⁄-20)
nn(≠-26, Â-21)
nn(≠-26, ¿-22)
nn(≠-26, Ã-23)
nn(≠-26, ∂-24)
nn(≠-26, Â-25)
dep(Aeolus-1, ≠-26)
dep(≠-26, RBR-28)
cop(ruler-32, was-30)
det(ruler-32, the-31)
root(ROOT-0, ruler-32)
det(winds-35, the-34)
prep_of(ruler-32, winds-35)
amod(Mythology-38, Greek-37)
prep_in(winds-35, Mythology-38)

In philosophy , the term Anti-realism is used to describe any position involving either the denial of an objective reality of entities of a certain type or the denial that verification-transcendent statements about a type of entity are either true or false .

prep_in(used-8, philosophy-2)
det(Anti-realism-6, the-4)
nn(Anti-realism-6, term-5)
nsubjpass(used-8, Anti-realism-6)
xsubj(describe-10, Anti-realism-6)
auxpass(used-8, is-7)
root(ROOT-0, used-8)
aux(describe-10, to-9)
xcomp(used-8, describe-10)
det(position-12, any-11)
dobj(describe-10, position-12)
advmod(denial-16, either-14)
det(denial-16, the-15)
prep_involving(position-12, denial-16)
det(reality-20, an-18)
amod(reality-20, objective-19)
prep_of(denial-16, reality-20)
prep_of(reality-20, entities-22)
det(type-26, a-24)
amod(type-26, certain-25)
prep_of(entities-22, type-26)
det(denial-29, the-28)
prep_of(entities-22, denial-29)
conj_or(type-26, denial-29)
complm(true-40, that-30)
amod(statements-32, verification-transcendent-31)
nsubj(true-40, statements-32)
nsubj(false-42, statements-32)
det(type-35, a-34)
prep_about(statements-32, type-35)
prep_of(type-35, entity-37)
cop(true-40, are-38)
preconj(true-40, either-39)
ccomp(used-8, true-40)
ccomp(used-8, false-42)
conj_or(true-40, false-42)

An Autobiography , from the Greek autos , ` self ' , bios , ` life ' and graphein , ` write ' is a biography written by the subject or composed conjointly with a collaborative writer - LBR - styled `` as told to `` or `` with `` - RBR - .

det(Autobiography-2, An-1)
nsubj(biography-26, Autobiography-2)
det(autos-7, the-5)
amod(autos-7, Greek-6)
prep_from(biography-26, autos-7)
conj_and(autos-7, self-10)
prep_from(biography-26, self-10)
conj_and(autos-7, bios-13)
prep_from(biography-26, bios-13)
conj_and(autos-7, life-16)
prep_from(biography-26, life-16)
conj_and(autos-7, graphein-19)
prep_from(biography-26, graphein-19)
nsubj(biography-26, write-22)
cop(biography-26, is-24)
det(biography-26, a-25)
root(ROOT-0, biography-26)
dep(biography-26, written-27)
det(subject-30, the-29)
prep_by(written-27, subject-30)
dep(biography-26, composed-32)
conj_or(written-27, composed-32)
advmod(composed-32, conjointly-33)
det(writer-37, a-35)
amod(writer-37, collaborative-36)
prep_with(composed-32, writer-37)
dep(biography-26, LBR-39)
dep(LBR-39, styled-41)
dobj(styled-41, as-43)
rcmod(as-43, told-44)
prep(as-43, to-45)
mark(RBR-52, with-49)
dobj(styled-41, RBR-52)
conj_or(as-43, RBR-52)

An Arab - LBR - Ã˘Â ' Ã˘Â ± Ã˘Â ¨ Ã˙Â ... , Ã ... Â ¿ arabi - RBR - is a person who identifies as such on genealogical , linguistic , or cultural grounds .

det(Arab-2, An-1)
ccomp(person-25, Arab-2)
dep(Arab-2, LBR-4)
poss(Ã˙Â-12, Ã˘Â-6)
nn(Ã˙Â-12, Ã˘Â-8)
nn(Ã˙Â-12, ±-9)
nn(Ã˙Â-12, Ã˘Â-10)
nn(Ã˙Â-12, ¨-11)
dep(LBR-4, Ã˙Â-12)
nsubj(person-25, Ã-15)
nn(arabi-19, Â-17)
nn(arabi-19, ¿-18)
dep(Ã-15, arabi-19)
dep(arabi-19, RBR-21)
cop(person-25, is-23)
det(person-25, a-24)
root(ROOT-0, person-25)
nsubj(identifies-27, person-25)
rcmod(person-25, identifies-27)
advmod(such-29, as-28)
prep(identifies-27, such-29)
amod(grounds-37, genealogical-31)
amod(grounds-37, linguistic-33)
conj_or(linguistic-33, cultural-36)
amod(grounds-37, cultural-36)
prep_on(such-29, grounds-37)

The Apicomplexa are a large group of protists , characterized by the presence of a unique organelle called an apical complex - LBR - see also apicoplast - RBR - .

det(Apicomplexa-2, The-1)
nsubj(group-6, Apicomplexa-2)
cop(group-6, are-3)
det(group-6, a-4)
amod(group-6, large-5)
dep(called-18, group-6)
prep_of(group-6, protists-8)
partmod(protists-8, characterized-10)
det(presence-13, the-12)
agent(characterized-10, presence-13)
det(organelle-17, a-15)
amod(organelle-17, unique-16)
prep_of(presence-13, organelle-17)
root(ROOT-0, called-18)
det(complex-21, an-19)
amod(complex-21, apical-20)
nsubj(see-25, complex-21)
dep(complex-21, LBR-23)
ccomp(called-18, see-25)
advmod(see-25, also-26)
nsubj(called-18, apicoplast-27)
dep(apicoplast-27, RBR-29)

An Analgesic - LBR - colloquially known as a painkiller - RBR - is any member of the diverse group of drugs used to relieve pain - LBR - achieve analgesia - RBR - .

det(Analgesic-2, An-1)
nsubj(member-16, Analgesic-2)
nn(RBR-12, LBR-4)
advmod(known-7, colloquially-6)
dep(RBR-12, known-7)
det(painkiller-10, a-9)
prep_as(known-7, painkiller-10)
dep(Analgesic-2, RBR-12)
cop(member-16, is-14)
det(member-16, any-15)
root(ROOT-0, member-16)
det(group-20, the-18)
amod(group-20, diverse-19)
prep_of(member-16, group-20)
prep_of(group-20, drugs-22)
xsubj(relieve-25, drugs-22)
partmod(drugs-22, used-23)
aux(relieve-25, to-24)
xcomp(used-23, relieve-25)
nsubj(achieve-30, pain-26)
dep(pain-26, LBR-28)
ccomp(relieve-25, achieve-30)
dobj(achieve-30, analgesia-31)
dep(analgesia-31, RBR-33)

An Antidepressant is a psychiatric medication or other substance - LBR - nutrient or herb - RBR - used for alleviating depression or dysthymia - LBR - ` milder ' depression - RBR - .

det(Antidepressant-2, An-1)
nsubj(medication-6, Antidepressant-2)
cop(medication-6, is-3)
det(medication-6, a-4)
amod(medication-6, psychiatric-5)
dep(LBR-11, medication-6)
amod(substance-9, other-8)
conj_or(medication-6, substance-9)
dep(LBR-11, substance-9)
root(ROOT-0, LBR-11)
dep(LBR-11, nutrient-13)
dep(LBR-11, herb-15)
conj_or(nutrient-13, herb-15)
dep(nutrient-13, RBR-17)
dep(LBR-11, used-19)
prepc_for(used-19, alleviating-21)
dobj(alleviating-21, depression-22)
dobj(alleviating-21, dysthymia-24)
conj_or(depression-22, dysthymia-24)
dep(depression-22, LBR-26)
amod(depression-31, milder-29)
dep(LBR-26, depression-31)
dep(depression-31, RBR-33)

In business and accounting , an Asset is defined as a probable future economic benefit obtained or controlled by a particular entity as a result of a past transaction or event .

prep_in(defined-9, business-2)
conj_and(business-2, accounting-4)
prep_in(defined-9, accounting-4)
det(Asset-7, an-6)
nsubjpass(defined-9, Asset-7)
auxpass(defined-9, is-8)
root(ROOT-0, defined-9)
det(benefit-15, a-11)
amod(benefit-15, probable-12)
amod(benefit-15, future-13)
amod(benefit-15, economic-14)
prep_as(defined-9, benefit-15)
partmod(benefit-15, obtained-16)
partmod(benefit-15, controlled-18)
conj_or(obtained-16, controlled-18)
det(entity-22, a-20)
amod(entity-22, particular-21)
agent(obtained-16, entity-22)
det(result-25, a-24)
prep_as(entity-22, result-25)
det(transaction-29, a-27)
amod(transaction-29, past-28)
prep_of(result-25, transaction-29)
prep_of(result-25, event-31)
conj_or(transaction-29, event-31)

An Anode is an electrode through which - LBR - positive - RBR - electric current flows into a polarized electrical device .

det(Anode-2, An-1)
nsubj(electrode-5, Anode-2)
cop(electrode-5, is-3)
det(electrode-5, an-4)
dep(LBR-9, electrode-5)
prep_through(electrode-5, which-7)
root(ROOT-0, LBR-9)
dep(LBR-9, positive-11)
dep(positive-11, RBR-13)
dep(LBR-9, electric-15)
amod(flows-17, current-16)
dobj(electric-15, flows-17)
det(device-22, a-19)
amod(device-22, polarized-20)
amod(device-22, electrical-21)
prep_into(electric-15, device-22)

An Adhesive is a compound that adheres or bonds two items together .

det(Adhesive-2, An-1)
nsubj(compound-5, Adhesive-2)
cop(compound-5, is-3)
det(compound-5, a-4)
root(ROOT-0, compound-5)
nsubj(adheres-7, compound-5)
rcmod(compound-5, adheres-7)
rcmod(compound-5, bonds-9)
conj_or(adheres-7, bonds-9)
num(items-11, two-10)
npadvmod(together-12, items-11)
advmod(bonds-9, together-12)

In music , an Arrangement refers either to a rewriting of a piece of existing music with additional new material or to a fleshing-out of a compositional sketch , such as a lead sheet .

prep_in(refers-6, music-2)
det(Arrangement-5, an-4)
nsubj(refers-6, Arrangement-5)
root(ROOT-0, refers-6)
preconj(refers-6, either-7)
det(rewriting-10, a-9)
prep_to(refers-6, rewriting-10)
det(piece-13, a-12)
prep_of(rewriting-10, piece-13)
amod(music-16, existing-15)
prep_of(piece-13, music-16)
amod(material-20, additional-18)
amod(material-20, new-19)
prep_with(music-16, material-20)
det(fleshing-out-24, a-23)
prep_to(refers-6, fleshing-out-24)
conj_or(rewriting-10, fleshing-out-24)
det(sketch-28, a-26)
amod(sketch-28, compositional-27)
prep_of(fleshing-out-24, sketch-28)
det(sheet-34, a-32)
amod(sheet-34, lead-33)
prep_such_as(fleshing-out-24, sheet-34)

An Alexandrine is a line of poetic meter .

det(Alexandrine-2, An-1)
nsubj(line-5, Alexandrine-2)
cop(line-5, is-3)
det(line-5, a-4)
root(ROOT-0, line-5)
amod(meter-8, poetic-7)
prep_of(line-5, meter-8)

An Anthem is a composition to an English religious text sung in the context of an Anglican service .

det(Anthem-2, An-1)
nsubj(composition-5, Anthem-2)
cop(composition-5, is-3)
det(composition-5, a-4)
root(ROOT-0, composition-5)
det(text-10, an-7)
amod(text-10, English-8)
amod(text-10, religious-9)
prep_to(composition-5, text-10)
partmod(text-10, sung-11)
det(context-14, the-13)
prep_in(sung-11, context-14)
det(service-18, an-16)
amod(service-18, Anglican-17)
prep_of(context-14, service-18)

In physics , Acceleration is defined as the rate of change of velocity , or as the second derivative of position - LBR - with respect to time - RBR - .

prep_in(defined-6, physics-2)
nsubjpass(defined-6, Acceleration-4)
auxpass(defined-6, is-5)
root(ROOT-0, defined-6)
det(rate-9, the-8)
prep_as(defined-6, rate-9)
prep_of(rate-9, change-11)
prep_of(change-11, velocity-13)
prep_of(rate-9, as-16)
advmod(change-11, as-16)
conj_or(change-11, as-16)
det(derivative-19, the-17)
amod(derivative-19, second-18)
dep(change-11, derivative-19)
prep_of(derivative-19, position-21)
prep_of(rate-9, LBR-23)
conj_or(change-11, LBR-23)
prep_of(rate-9, with-25)
conj_or(change-11, with-25)
prep_with(change-11, respect-26)
prep_to(defined-6, time-28)
dep(time-28, RBR-30)

The Ababda - LBR - or Ababde - RBR - - LBR - the Gebadei of Pliny , and possibly the Troglodytes of other classical writers - RBR - are nomads living in the area between the Nile and the Red Sea , in the vicinity of Aswan in Egypt .

det(Ababda-2, The-1)
nsubj(living-32, Ababda-2)
dep(Ababda-2, LBR-4)
dep(Ababde-7, or-6)
dep(LBR-4, Ababde-7)
dep(Ababde-7, RBR-9)
nn(RBR-28, LBR-12)
det(Gebadei-15, the-14)
dep(RBR-28, Gebadei-15)
prep_of(Gebadei-15, Pliny-17)
advmod(Troglodytes-22, possibly-20)
det(Troglodytes-22, the-21)
conj_and(Gebadei-15, Troglodytes-22)
dep(RBR-28, Troglodytes-22)
amod(writers-26, other-24)
amod(writers-26, classical-25)
prep_of(Troglodytes-22, writers-26)
dep(LBR-4, RBR-28)
aux(living-32, are-30)
advmod(living-32, nomads-31)
root(ROOT-0, living-32)
det(area-35, the-34)
prep_in(living-32, area-35)
det(Nile-38, the-37)
prep_between(area-35, Nile-38)
det(Sea-42, the-40)
nn(Sea-42, Red-41)
prep_between(area-35, Sea-42)
conj_and(Nile-38, Sea-42)
det(vicinity-46, the-45)
prep_in(area-35, vicinity-46)
prep_of(vicinity-46, Aswan-48)
prep_in(living-32, Egypt-50)

The Aurochs or urus - LBR - Bos primigenius - RBR - was a very large type of cattle that was prevalent in Europe until its extinction in 1627 .

det(Aurochs-2, The-1)
nsubj(type-17, Aurochs-2)
conj_or(Aurochs-2, urus-4)
nsubj(type-17, urus-4)
nn(RBR-11, LBR-6)
nn(primigenius-9, Bos-8)
dep(RBR-11, primigenius-9)
dep(Aurochs-2, RBR-11)
cop(type-17, was-13)
det(type-17, a-14)
advmod(large-16, very-15)
amod(type-17, large-16)
root(ROOT-0, type-17)
prep_of(type-17, cattle-19)
nsubj(prevalent-22, cattle-19)
cop(prevalent-22, was-21)
rcmod(cattle-19, prevalent-22)
prep_in(prevalent-22, Europe-24)
poss(extinction-27, its-26)
prep_until(prevalent-22, extinction-27)
prep_in(extinction-27, 1627-29)

In anatomy , the Anus - LBR - from Latin Ã ≥ Â ™ nus `` ring - LBR - circle - RBR - , anus `` - RBR - is the external opening of the rectum .

prep_in(anus-26, anatomy-2)
det(Anus-5, the-4)
nsubj(anus-26, Anus-5)
dep(Anus-5, LBR-7)
dep(LBR-7, from-9)
nn(nus-15, Latin-10)
nn(nus-15, Ã-11)
nn(nus-15, ≥-12)
nn(nus-15, Â-13)
nn(nus-15, ™-14)
pobj(from-9, nus-15)
dep(nus-15, ring-17)
dep(nus-15, LBR-19)
dep(nus-15, circle-21)
dep(nus-15, RBR-23)
root(ROOT-0, anus-26)
nsubj(opening-34, RBR-29)
cop(opening-34, is-31)
det(opening-34, the-32)
amod(opening-34, external-33)
ccomp(anus-26, opening-34)
det(rectum-37, the-36)
prep_of(opening-34, rectum-37)

The Acantharea are a small group of radiolarian protozoa , distinguished mainly by their skeletons .

det(Acantharea-2, The-1)
nsubj(group-6, Acantharea-2)
cop(group-6, are-3)
det(group-6, a-4)
amod(group-6, small-5)
root(ROOT-0, group-6)
nn(protozoa-9, radiolarian-8)
prep_of(group-6, protozoa-9)
dep(group-6, distinguished-11)
advmod(distinguished-11, mainly-12)
poss(skeletons-15, their-14)
prep_by(distinguished-11, skeletons-15)

Anglesey is also a county which includes Holy Island and other nearby small islands .

nsubj(county-5, Anglesey-1)
cop(county-5, is-2)
advmod(county-5, also-3)
det(county-5, a-4)
root(ROOT-0, county-5)
nsubj(includes-7, county-5)
rcmod(county-5, includes-7)
nn(Island-9, Holy-8)
dobj(includes-7, Island-9)
amod(islands-14, other-11)
amod(islands-14, nearby-12)
amod(islands-14, small-13)
dobj(includes-7, islands-14)
conj_and(Island-9, islands-14)

In Greek mythology , Aegisthus - LBR - Ancient Greek : Ã ⁄ ÂŒÃ ⁄ Â ¯ Ã ⁄ Â `` Ã ⁄ Â ' Ã ∂ Â ∞ Ã ⁄ Â ¸ Ã ⁄ Â ¿ Ã ∂ Â ≠ , `` goat strength `` - also transliterated as Aegisthos or AigÃ ∞ Â -- sthos - RBR - was the son of Thyestes and of his daughter , Pelopia .

amod(mythology-3, Greek-2)
prep_in(Ã-12, mythology-3)
nsubj(Ã-12, Aegisthus-5)
nsubj(transliterated-49, Aegisthus-5)
dep(Aegisthus-5, LBR-7)
amod(Greek-10, Ancient-9)
dep(LBR-7, Greek-10)
root(ROOT-0, Ã-12)
nn(Â-20, ⁄-13)
nn(Â-20, ÂŒÃ-14)
nn(Â-20, ⁄-15)
nn(Â-20, Â-16)
nn(Â-20, ¯-17)
nn(Â-20, Ã-18)
nn(Â-20, ⁄-19)
dep(≠-41, Â-20)
nn(Â-24, Ã-22)
nn(Â-24, ⁄-23)
poss(≠-41, Â-24)
nn(≠-41, Ã-26)
nn(≠-41, ∂-27)
nn(≠-41, Â-28)
nn(≠-41, ∞-29)
nn(≠-41, Ã-30)
nn(≠-41, ⁄-31)
nn(≠-41, Â-32)
nn(≠-41, ¸-33)
nn(≠-41, Ã-34)
nn(≠-41, ⁄-35)
nn(≠-41, Â-36)
nn(≠-41, ¿-37)
nn(≠-41, Ã-38)
nn(≠-41, ∂-39)
nn(≠-41, Â-40)
dep(Ã-12, ≠-41)
dep(≠-41, goat-44)
advmod(transliterated-49, also-48)
conj_strength(Ã-12, transliterated-49)
mark(son-63, as-50)
nsubj(son-63, Aegisthos-51)
nn(Â-55, AigÃ-53)
nn(Â-55, ∞-54)
conj_or(Aegisthos-51, Â-55)
nsubj(son-63, Â-55)
dep(Â-55, sthos-57)
dep(sthos-57, RBR-59)
cop(son-63, was-61)
det(son-63, the-62)
advcl(transliterated-49, son-63)
prep_of(son-63, Thyestes-65)
poss(daughter-69, his-68)
prep_of(Pelopia-71, daughter-69)
conj_and(Ã-12, Pelopia-71)

Ajmer - LBR - Hindi : Ã & nbsp ; Â $ Â ∑ Ã & nbsp ; Â $ Â˛Ã & nbsp ; Â $ Â ® Ã & nbsp ; Â ¥ ÂΩÃ & nbsp ; Â $ Â ° \/ Ã ≈ Â˙dÃ ... Â ‚ meÃ -- Â ∆ r \/ - RBR - is a city in Ajmer District in India 's Rajasthan state .

nsubj(city-61, Ajmer-1)
dep(Ajmer-1, LBR-3)
dep(LBR-3, Hindi-5)
dep(LBR-3, Ã-7)
dep(LBR-3, nbsp-9)
conj_and(Ã-7, nbsp-9)
dep(LBR-3, Â-11)
dep(Â-11, $-12)
number($-12, Â-13)
number($-12, ∑-14)
dep($-12, Ã-15)
dep($-12, nbsp-17)
conj_and(Ã-15, nbsp-17)
dep(LBR-3, Â-19)
dep(Â-19, $-20)
num($-20, Â˛Ã-21)
dep(Â-19, nbsp-23)
conj_and($-20, nbsp-23)
dep(LBR-3, Â-25)
dep(Â-25, $-26)
number($-26, Â-27)
number($-26, ®-28)
dep($-26, Ã-29)
dep($-26, nbsp-31)
conj_and(Ã-29, nbsp-31)
nn(ÂΩÃ-35, Â-33)
nn(ÂΩÃ-35, ¥-34)
dep(LBR-3, ÂΩÃ-35)
dep(LBR-3, nbsp-37)
conj_and(ÂΩÃ-35, nbsp-37)
dep(LBR-3, Â-39)
num(Â˙dÃ-46, $-40)
number($-40, Â-41)
number($-40, °-42)
nn(Â˙dÃ-46, \/-43)
nn(Â˙dÃ-46, Ã-44)
nn(Â˙dÃ-46, ≈-45)
dep(Â-39, Â˙dÃ-46)
nn(‚-49, Â-48)
dep(LBR-3, ‚-49)
dep(‚-49, meÃ-50)
nn(\/-55, Â-52)
nn(\/-55, ∆-53)
nn(\/-55, r-54)
dep(LBR-3, \/-55)
dep(\/-55, RBR-57)
cop(city-61, is-59)
det(city-61, a-60)
root(ROOT-0, city-61)
nn(District-64, Ajmer-63)
prep_in(city-61, District-64)
poss(state-69, India-66)
nn(state-69, Rajasthan-68)
prep_in(District-64, state-69)

Affinity , in etymology Affinity is the opposite of infinity .

advmod(opposite-8, Affinity-1)
prep_in(opposite-8, etymology-4)
nsubj(opposite-8, Affinity-5)
cop(opposite-8, is-6)
det(opposite-8, the-7)
root(ROOT-0, opposite-8)
prep_of(opposite-8, infinity-10)

An Antacid is any substance , generally a base or basic salt , which counteracts stomach acidity .

det(Antacid-2, An-1)
nsubj(substance-5, Antacid-2)
cop(substance-5, is-3)
det(substance-5, any-4)
root(ROOT-0, substance-5)
advmod(base-9, generally-7)
det(base-9, a-8)
rcmod(substance-5, base-9)
amod(salt-12, basic-11)
rcmod(substance-5, salt-12)
conj_or(base-9, salt-12)
nsubj(counteracts-15, which-14)
rcmod(substance-5, counteracts-15)
dobj(counteracts-15, stomach-16)
advmod(counteracts-15, acidity-17)

In organic chemistry , an Alkene , olefin , or olefine is an unsaturated chemical compound containing at least one carbon-to-carbon double bond .

amod(chemistry-3, organic-2)
prep_in(compound-16, chemistry-3)
det(Alkene-6, an-5)
nsubj(compound-16, Alkene-6)
conj_or(Alkene-6, olefin-8)
nsubj(compound-16, olefin-8)
conj_or(Alkene-6, olefine-11)
nsubj(compound-16, olefine-11)
cop(compound-16, is-12)
det(compound-16, an-13)
amod(compound-16, unsaturated-14)
nn(compound-16, chemical-15)
root(ROOT-0, compound-16)
partmod(compound-16, containing-17)
quantmod(one-20, at-18)
mwe(at-18, least-19)
pobj(at-18, least-19)
dobj(containing-17, one-20)
iobj(containing-17, one-20)
amod(bond-23, carbon-to-carbon-21)
amod(bond-23, double-22)
dobj(containing-17, bond-23)
dep(one-20, bond-23)

An Allene is a hydrocarbon in which one atom of carbon is connected by double bonds with two other atoms of carbon .

det(Allene-2, An-1)
nsubj(hydrocarbon-5, Allene-2)
cop(hydrocarbon-5, is-3)
det(hydrocarbon-5, a-4)
root(ROOT-0, hydrocarbon-5)
rel(connected-13, which-7)
num(atom-9, one-8)
nsubjpass(connected-13, atom-9)
prep_of(atom-9, carbon-11)
auxpass(connected-13, is-12)
rcmod(hydrocarbon-5, connected-13)
amod(bonds-16, double-15)
agent(connected-13, bonds-16)
num(atoms-20, two-18)
amod(atoms-20, other-19)
prep_with(connected-13, atoms-20)
prep_of(atoms-20, carbon-22)

An Antianginal is any drug used in the treatment of angina pectoris , a symptom of ischaemic heart disease .

det(Antianginal-2, An-1)
nsubj(drug-5, Antianginal-2)
cop(drug-5, is-3)
det(drug-5, any-4)
root(ROOT-0, drug-5)
partmod(drug-5, used-6)
det(treatment-9, the-8)
prep_in(used-6, treatment-9)
nn(pectoris-12, angina-11)
prep_of(treatment-9, pectoris-12)
det(symptom-15, a-14)
appos(pectoris-12, symptom-15)
amod(disease-19, ischaemic-17)
nn(disease-19, heart-18)
prep_of(symptom-15, disease-19)

Astrobiology - LBR - from Greek : Ã ¡ ÂπÂ • Ã ∂ Â ∞ Ã ∂ Â ≥ Ã ∂ Â ™ Ã ⁄ Â ¿ , astro , `` constellation `` ; Ã ⁄ Â '' Ã ⁄ Â ¯ Ã ⁄ Â ¿ Ã ∂ Â ≠ , bios , `` life `` ; and Ã ⁄ Â '' Ã ∂ Â ` Ã ⁄ Â `` Ã ⁄ Â ¿ Ã ∂ Â ≠ , logos , `` knowledge `` - RBR - is the interdisciplinary study of life in the universe , combining aspects of astronomy , biology and geology .

root(ROOT-0, Astrobiology-1)
dep(⁄-25, LBR-3)
dep(LBR-3, from-5)
pobj(from-5, Greek-6)
nn(⁄-25, Ã-8)
nn(⁄-25, ¡-9)
nn(⁄-25, ÂπÂ-10)
nn(⁄-25, •-11)
nn(⁄-25, Ã-12)
nn(⁄-25, ∂-13)
nn(⁄-25, Â-14)
nn(⁄-25, ∞-15)
nn(⁄-25, Ã-16)
nn(⁄-25, ∂-17)
nn(⁄-25, Â-18)
nn(⁄-25, ≥-19)
nn(⁄-25, Ã-20)
nn(⁄-25, ∂-21)
nn(⁄-25, Â-22)
nn(⁄-25, ™-23)
nn(⁄-25, Ã-24)
dep(constellation-32, ⁄-25)
nn(¿-27, Â-26)
nsubj(constellation-32, ¿-27)
appos(¿-27, astro-29)
dep(Astrobiology-1, constellation-32)
nn(Ã-39, Ã-35)
nn(Ã-39, ⁄-36)
nn(Ã-39, Â-37)
nsubj(⁄-40, Ã-39)
ccomp(constellation-32, ⁄-40)
nn(≠-50, Â-41)
nn(≠-50, ¯-42)
nn(≠-50, Ã-43)
nn(≠-50, ⁄-44)
nn(≠-50, Â-45)
nn(≠-50, ¿-46)
nn(≠-50, Ã-47)
nn(≠-50, ∂-48)
nn(≠-50, Â-49)
dobj(⁄-40, ≠-50)
partmod(≠-50, bios-52)
dobj(bios-52, life-55)
nn(Ã-63, Ã-59)
nn(Ã-63, ⁄-60)
nn(Ã-63, Â-61)
dobj(⁄-40, Ã-63)
conj_and(≠-50, Ã-63)
nn(≠-78, ∂-64)
nn(≠-78, Â-65)
nn(≠-78, Ã-67)
nn(≠-78, ⁄-68)
nn(≠-78, Â-69)
nn(≠-78, Ã-71)
nn(≠-78, ⁄-72)
nn(≠-78, Â-73)
nn(≠-78, ¿-74)
nn(≠-78, Ã-75)
nn(≠-78, ∂-76)
nn(≠-78, Â-77)
dep(Ã-63, ≠-78)
appos(Ã-63, logos-80)
appos(Ã-63, knowledge-83)
dep(knowledge-83, RBR-86)
dep(knowledge-83, is-88)
det(study-91, the-89)
amod(study-91, interdisciplinary-90)
nsubj(is-88, study-91)
prep_of(study-91, life-93)
det(universe-96, the-95)
prep_in(life-93, universe-96)
partmod(⁄-40, combining-98)
xcomp(⁄-40, combining-98)
dobj(combining-98, aspects-99)
prep_of(aspects-99, astronomy-101)
prep_of(aspects-99, biology-103)
conj_and(astronomy-101, biology-103)
prep_of(aspects-99, geology-105)
conj_and(astronomy-101, geology-105)

The Abipones were a tribe of South American Indians of Guaycuran stock recently inhabiting the territory lying between Santa Fe and St. The Azawakh is a sighthound dog breed from Africa .

det(Abipones-2, The-1)
nsubj(tribe-5, Abipones-2)
cop(tribe-5, were-3)
det(tribe-5, a-4)
dep(breed-29, tribe-5)
nn(Indians-9, South-7)
nn(Indians-9, American-8)
prep_of(tribe-5, Indians-9)
nn(stock-12, Guaycuran-11)
prep_of(Indians-9, stock-12)
advmod(inhabiting-14, recently-13)
xcomp(tribe-5, inhabiting-14)
det(territory-16, the-15)
dobj(inhabiting-14, territory-16)
partmod(territory-16, lying-17)
nn(Fe-20, Santa-19)
prep_between(lying-17, Fe-20)
prep_between(lying-17, St.-22)
conj_and(Fe-20, St.-22)
det(Azawakh-24, The-23)
nsubj(breed-29, Azawakh-24)
cop(breed-29, is-25)
det(breed-29, a-26)
amod(breed-29, sighthound-27)
nn(breed-29, dog-28)
root(ROOT-0, breed-29)
prep_from(breed-29, Africa-31)

An Ammeter is a measuring instrument used to measure the electric current in a circuit .

det(Ammeter-2, An-1)
nsubj(instrument-6, Ammeter-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
nn(instrument-6, measuring-5)
root(ROOT-0, instrument-6)
xsubj(measure-9, instrument-6)
partmod(instrument-6, used-7)
aux(measure-9, to-8)
xcomp(used-7, measure-9)
det(current-12, the-10)
amod(current-12, electric-11)
dobj(measure-9, current-12)
det(circuit-15, a-14)
prep_in(measure-9, circuit-15)

An Anxiolytic is a drug prescribed for the treatment of symptoms of anxiety .

det(Anxiolytic-2, An-1)
nsubj(drug-5, Anxiolytic-2)
cop(drug-5, is-3)
det(drug-5, a-4)
root(ROOT-0, drug-5)
partmod(drug-5, prescribed-6)
det(treatment-9, the-8)
prep_for(prescribed-6, treatment-9)
prep_of(treatment-9, symptoms-11)
prep_of(symptoms-11, anxiety-13)

In Greek mythology , Artemis was the daughter of Zeus and Leto , and the twin sister of Apollo .

amod(mythology-3, Greek-2)
prep_in(daughter-8, mythology-3)
nsubj(daughter-8, Artemis-5)
cop(daughter-8, was-6)
det(daughter-8, the-7)
root(ROOT-0, daughter-8)
prep_of(daughter-8, Zeus-10)
prep_of(daughter-8, Leto-12)
conj_and(Zeus-10, Leto-12)
det(sister-17, the-15)
amod(sister-17, twin-16)
conj_and(daughter-8, sister-17)
prep_of(sister-17, Apollo-19)

In chemistry , an Alkali - LBR - from Arabic : Al-Qaly Ã˘Â § Ã˙Â ≥ Ã˙Â ≠ Ã˙Â ≥ Ã˙Â ... , Ã˘Â § Ã˙Â ≥ Ã˙Â ≠ Ã˘Â § Ã˙Â ≥ Ã˙Â ... - RBR - is a basic , ionic salt of an alkali metal or alkaline earth metal element .

prep_in(salt-44, chemistry-2)
det(Alkali-5, an-4)
nsubj(salt-44, Alkali-5)
dep(Alkali-5, LBR-7)
prep_from(Alkali-5, Arabic-10)
nn(≥-16, Al-Qaly-12)
nn(≥-16, Ã˘Â-13)
nn(≥-16, §-14)
nn(≥-16, Ã˙Â-15)
dep(Arabic-10, ≥-16)
nn(Ã˙Â-21, Ã˙Â-17)
nn(Ã˙Â-21, ≠-18)
nn(Ã˙Â-21, Ã˙Â-19)
nn(Ã˙Â-21, ≥-20)
dep(≥-16, Ã˙Â-21)
nn(Ã˙Â-34, Ã˘Â-24)
nn(Ã˙Â-34, §-25)
nn(Ã˙Â-34, Ã˙Â-26)
nn(Ã˙Â-34, ≥-27)
nn(Ã˙Â-34, Ã˙Â-28)
nn(Ã˙Â-34, ≠-29)
nn(Ã˙Â-34, Ã˘Â-30)
nn(Ã˙Â-34, §-31)
nn(Ã˙Â-34, Ã˙Â-32)
nn(Ã˙Â-34, ≥-33)
appos(Alkali-5, Ã˙Â-34)
dep(Alkali-5, RBR-37)
cop(salt-44, is-39)
det(salt-44, a-40)
amod(salt-44, basic-41)
amod(salt-44, ionic-43)
root(ROOT-0, salt-44)
det(metal-48, an-46)
amod(metal-48, alkali-47)
prep_of(salt-44, metal-48)
amod(element-53, alkaline-50)
nn(element-53, earth-51)
nn(element-53, metal-52)
prep_of(salt-44, element-53)
conj_or(metal-48, element-53)

The Admiralty was formerly the authority in the United Kingdom responsible for the command of the Royal Navy .

det(Admiralty-2, The-1)
nsubj(authority-6, Admiralty-2)
cop(authority-6, was-3)
advmod(authority-6, formerly-4)
det(authority-6, the-5)
root(ROOT-0, authority-6)
det(Kingdom-10, the-8)
nn(Kingdom-10, United-9)
prep_in(authority-6, Kingdom-10)
amod(Kingdom-10, responsible-11)
det(command-14, the-13)
prep_for(responsible-11, command-14)
det(Navy-18, the-16)
nn(Navy-18, Royal-17)
prep_of(command-14, Navy-18)

An Anemometer is a device for measuring wind speed , and is one instrument used in a weather station .

det(Anemometer-2, An-1)
nsubj(device-5, Anemometer-2)
cop(device-5, is-3)
det(device-5, a-4)
root(ROOT-0, device-5)
prepc_for(device-5, measuring-7)
nn(speed-9, wind-8)
dobj(measuring-7, speed-9)
cop(instrument-14, is-12)
num(instrument-14, one-13)
conj_and(device-5, instrument-14)
partmod(instrument-14, used-15)
det(station-19, a-17)
nn(station-19, weather-18)
prep_in(used-15, station-19)

The Apeiron is a cosmological theory created by Anaximander in the 6th century BC .

det(Apeiron-2, The-1)
nsubj(theory-6, Apeiron-2)
cop(theory-6, is-3)
det(theory-6, a-4)
amod(theory-6, cosmological-5)
root(ROOT-0, theory-6)
partmod(theory-6, created-7)
agent(created-7, Anaximander-9)
det(BC-14, the-11)
amod(BC-14, 6th-12)
nn(BC-14, century-13)
prep_in(created-7, BC-14)

In Christian belief , Armageddon - LBR - Greek Ã ⁄ ÂŒÃ ∂ Â ™ Ã ⁄ ÂπÃ ⁄ Â ± Ã ⁄ Â `` Ã ⁄ ÂµÃ ⁄ Â ´ Ã ⁄ Â ´ Ã ∂ Â ≈ Ã ⁄ Â ∏ ; also spelled Har-Magedon in some modern English translations ; also known as Mount of Megiddo - RBR - , is the site of the final battle - LBR - or campaign - RBR - between God and the forces of righteousness , and Satan - LBR - whose name means ` adversary ' - RBR - , also known as the Devil .

amod(belief-3, Christian-2)
prep_in(site-66, belief-3)
nsubj(site-66, Armageddon-5)
dep(Armageddon-5, LBR-7)
amod(Â-24, Greek-9)
nn(Â-24, Ã-10)
nn(Â-24, ⁄-11)
nn(Â-24, ÂŒÃ-12)
nn(Â-24, ∂-13)
nn(Â-24, Â-14)
nn(Â-24, ™-15)
nn(Â-24, Ã-16)
nn(Â-24, ⁄-17)
nn(Â-24, ÂπÃ-18)
nn(Â-24, ⁄-19)
nn(Â-24, Â-20)
nn(Â-24, ±-21)
nn(Â-24, Ã-22)
nn(Â-24, ⁄-23)
dep(LBR-7, Â-24)
nn(∏-43, Ã-26)
nn(∏-43, ⁄-27)
nn(∏-43, ÂµÃ-28)
nn(∏-43, ⁄-29)
nn(∏-43, Â-30)
nn(∏-43, ´-31)
nn(∏-43, Ã-32)
nn(∏-43, ⁄-33)
nn(∏-43, Â-34)
nn(∏-43, ´-35)
nn(∏-43, Ã-36)
nn(∏-43, ∂-37)
nn(∏-43, Â-38)
nn(∏-43, ≈-39)
nn(∏-43, Ã-40)
nn(∏-43, ⁄-41)
nn(∏-43, Â-42)
nsubj(known-55, ∏-43)
advmod(Har-Magedon-47, also-45)
nn(Har-Magedon-47, spelled-46)
dep(∏-43, Har-Magedon-47)
det(translations-52, some-49)
amod(translations-52, modern-50)
amod(translations-52, English-51)
prep_in(Har-Magedon-47, translations-52)
advmod(known-55, also-54)
dep(Â-24, known-55)
prep_as(known-55, Mount-57)
prep_of(Mount-57, Megiddo-59)
dep(Â-24, RBR-61)
cop(site-66, is-64)
det(site-66, the-65)
root(ROOT-0, site-66)
det(battle-70, the-68)
amod(battle-70, final-69)
prep_of(site-66, battle-70)
dep(site-66, LBR-72)
dep(campaign-75, or-74)
dep(LBR-72, campaign-75)
dep(campaign-75, RBR-77)
prep_between(LBR-72, God-80)
det(forces-83, the-82)
conj_and(site-66, forces-83)
prep_of(forces-83, righteousness-85)
conj_and(site-66, Satan-88)
poss(name-93, Satan-88)
dep(Satan-88, LBR-90)
nsubj(means-94, name-93)
rcmod(Satan-88, means-94)
dobj(means-94, adversary-96)
dep(adversary-96, RBR-99)
advmod(known-103, also-102)
partmod(adversary-96, known-103)
det(Devil-106, the-105)
prep_as(known-103, Devil-106)

In a computer 's central processing unit - LBR - CPU - RBR - , an Accumulator is a register in which intermediate arithmetic and logic results are stored .

det(computer-3, a-2)
poss(unit-7, computer-3)
amod(unit-7, central-5)
nn(unit-7, processing-6)
prep_in(register-20, unit-7)
nn(RBR-13, LBR-9)
dep(RBR-13, CPU-11)
dep(unit-7, RBR-13)
det(Accumulator-17, an-16)
nsubj(register-20, Accumulator-17)
cop(register-20, is-18)
det(register-20, a-19)
root(ROOT-0, register-20)
rel(stored-29, which-22)
amod(arithmetic-24, intermediate-23)
nsubjpass(stored-29, arithmetic-24)
nn(results-27, logic-26)
conj_and(arithmetic-24, results-27)
nsubjpass(stored-29, results-27)
auxpass(stored-29, are-28)
rcmod(register-20, stored-29)

An Afterglow is a broad high arch of whitish or rosy light appearing in the sky due to very fine particles of dust suspended in the high regions of the atmosphere .

det(Afterglow-2, An-1)
nsubj(arch-7, Afterglow-2)
cop(arch-7, is-3)
det(arch-7, a-4)
amod(arch-7, broad-5)
amod(arch-7, high-6)
root(ROOT-0, arch-7)
amod(light-12, whitish-9)
conj_or(whitish-9, rosy-11)
amod(light-12, rosy-11)
prep_of(arch-7, light-12)
partmod(light-12, appearing-13)
det(sky-16, the-15)
prep_in(appearing-13, sky-16)
advmod(fine-20, very-19)
amod(particles-21, fine-20)
prep_due_to(sky-16, particles-21)
prep_of(particles-21, dust-23)
partmod(dust-23, suspended-24)
det(regions-28, the-26)
amod(regions-28, high-27)
prep_in(suspended-24, regions-28)
det(atmosphere-31, the-30)
prep_of(regions-28, atmosphere-31)

In phonetics , Aspiration is the strong burst of air that accompanies either the release or , in the case of preaspiration , the closure of some obstruents .

prep_in(burst-8, phonetics-2)
nsubj(burst-8, Aspiration-4)
cop(burst-8, is-5)
det(burst-8, the-6)
amod(burst-8, strong-7)
root(ROOT-0, burst-8)
nsubj(accompanies-12, burst-8)
prep_of(burst-8, air-10)
rcmod(burst-8, accompanies-12)
advmod(release-15, either-13)
det(release-15, the-14)
dobj(accompanies-12, release-15)
dep(release-15, in-18)
det(case-20, the-19)
pobj(in-18, case-20)
prep_of(case-20, preaspiration-22)
det(closure-25, the-24)
dobj(accompanies-12, closure-25)
conj_or(release-15, closure-25)
det(obstruents-28, some-27)
prep_of(release-15, obstruents-28)

In economics and finance , Arbitrage is the practice of taking advantage of a price differential between two or more markets : striking a combination of matching deals that capitalize upon the imbalance , the profit being the difference between the market prices .

prep_in(practice-9, economics-2)
conj_and(economics-2, finance-4)
prep_in(practice-9, finance-4)
nsubj(practice-9, Arbitrage-6)
cop(practice-9, is-7)
det(practice-9, the-8)
root(ROOT-0, practice-9)
prepc_of(practice-9, taking-11)
dobj(taking-11, advantage-12)
det(differential-16, a-14)
nn(differential-16, price-15)
prep_of(advantage-12, differential-16)
num(markets-21, two-18)
conj_or(two-18, more-20)
quantmod(two-18, more-20)
num(markets-21, more-20)
prep_between(differential-16, markets-21)
dep(taking-11, striking-23)
det(combination-25, a-24)
dobj(striking-23, combination-25)
nsubj(capitalize-30, combination-25)
amod(deals-28, matching-27)
prep_of(combination-25, deals-28)
rcmod(combination-25, capitalize-30)
det(imbalance-33, the-32)
prep_upon(capitalize-30, imbalance-33)
det(profit-36, the-35)
appos(imbalance-33, profit-36)
cop(difference-39, being-37)
det(difference-39, the-38)
xcomp(capitalize-30, difference-39)
det(prices-43, the-41)
nn(prices-43, market-42)
prep_between(difference-39, prices-43)

Antinomy - LBR - Greek Ã ⁄ Â ± Ã ⁄ Â ∏ Ã ∂ Â ≥ Ã ⁄ Â ' - , against , plus Ã ⁄ Â ∏ Ã ⁄ Â ¿ Ã ⁄ ÂπÃ ⁄ Â ¿ Ã ∂ Â ≠ , law - RBR - literally means the mutual incompatibility , real or apparent , of two laws .

nsubj(means-51, Antinomy-1)
dep(Antinomy-1, LBR-3)
amod(Â-20, Greek-5)
nn(Â-20, Ã-6)
nn(Â-20, ⁄-7)
nn(Â-20, Â-8)
nn(Â-20, ±-9)
nn(Â-20, Ã-10)
nn(Â-20, ⁄-11)
nn(Â-20, Â-12)
nn(Â-20, ∏-13)
nn(Â-20, Ã-14)
nn(Â-20, ∂-15)
nn(Â-20, Â-16)
nn(Â-20, ≥-17)
nn(Â-20, Ã-18)
nn(Â-20, ⁄-19)
dep(Antinomy-1, Â-20)
dep(Antinomy-1, plus-26)
nn(≠-44, Ã-27)
nn(≠-44, ⁄-28)
nn(≠-44, Â-29)
nn(≠-44, ∏-30)
nn(≠-44, Ã-31)
nn(≠-44, ⁄-32)
nn(≠-44, Â-33)
nn(≠-44, ¿-34)
nn(≠-44, Ã-35)
nn(≠-44, ⁄-36)
nn(≠-44, ÂπÃ-37)
nn(≠-44, ⁄-38)
nn(≠-44, Â-39)
nn(≠-44, ¿-40)
nn(≠-44, Ã-41)
nn(≠-44, ∂-42)
nn(≠-44, Â-43)
dep(plus-26, ≠-44)
prep_against(Antinomy-1, law-46)
dep(Antinomy-1, RBR-48)
advmod(means-51, literally-50)
root(ROOT-0, means-51)
det(incompatibility-54, the-52)
amod(incompatibility-54, mutual-53)
dobj(means-51, incompatibility-54)
amod(incompatibility-54, real-56)
amod(incompatibility-54, apparent-58)
conj_or(real-56, apparent-58)
num(laws-62, two-61)
prep_of(incompatibility-54, laws-62)

An Aquarium - LBR - plural aquariums or aquaria - RBR - is a vivarium consisting of at least one transparent side in which water-dwelling plants or animals are kept .

det(Aquarium-2, An-1)
nsubj(vivarium-15, Aquarium-2)
nn(RBR-11, LBR-4)
nn(aquariums-7, plural-6)
dep(RBR-11, aquariums-7)
conj_or(aquariums-7, aquaria-9)
dep(RBR-11, aquaria-9)
dep(Aquarium-2, RBR-11)
cop(vivarium-15, is-13)
det(vivarium-15, a-14)
root(ROOT-0, vivarium-15)
partmod(vivarium-15, consisting-16)
advmod(transparent-21, at-18)
pobj(at-18, least-19)
dep(transparent-21, one-20)
amod(side-22, transparent-21)
prep_of(consisting-16, side-22)
rel(kept-30, which-24)
amod(plants-26, water-dwelling-25)
nsubjpass(kept-30, plants-26)
conj_or(plants-26, animals-28)
nsubjpass(kept-30, animals-28)
auxpass(kept-30, are-29)
rcmod(side-22, kept-30)

Generally , an Amplifier is any device that changes , usually increases , the amplitude of a signal .

advmod(device-7, Generally-1)
det(Amplifier-4, an-3)
nsubj(device-7, Amplifier-4)
cop(device-7, is-5)
det(device-7, any-6)
root(ROOT-0, device-7)
det(changes-9, device-7)
nsubj(increases-12, changes-9)
advmod(increases-12, usually-11)
rcmod(device-7, increases-12)
det(amplitude-15, the-14)
dobj(increases-12, amplitude-15)
det(signal-18, a-17)
prep_of(amplitude-15, signal-18)

The Azores - LBR - AÃ ∞ Â § ores Ã ≈ Â ∆ Ã -- Â √ soÃ ≈ Â ≤ Ã ≈ Â ¨ Ã ... Â ∞ or -LRB- Ã ≈ Â ∆ Ã -- Â √ soÃ ≈ Â ≤ Ã ... Â ∞ -RRB- - RBR - are a Portuguese archipelago in the Atlantic Ocean , about 1,500 & amp ; amp ; nbsp ; km - LBR - 950 & amp ; amp ; nbsp ; mi - RBR - from Lisbon and about 3,900 & amp ; amp ; nbsp ; km - LBR - 2,400 & amp ; amp ; nbsp ; mi - RBR - from the east coast of North America .

det(Azores-2, The-1)
root(ROOT-0, Azores-2)
nsubj(archipelago-56, LBR-4)
nn(ores-10, AÃ-6)
nn(ores-10, ∞-7)
nn(ores-10, Â-8)
nn(ores-10, §-9)
dep(LBR-4, ores-10)
nn(Ã-15, Ã-11)
nn(Ã-15, ≈-12)
nn(Ã-15, Â-13)
nn(Ã-15, ∆-14)
dep(ores-10, Ã-15)
nn(Â-21, Â-17)
nn(Â-21, √-18)
nn(Â-21, soÃ-19)
nn(Â-21, ≈-20)
dep(ores-10, Â-21)
nn(Ã-27, ≤-22)
nn(Ã-27, Ã-23)
nn(Ã-27, ≈-24)
nn(Ã-27, Â-25)
nn(Ã-27, ¨-26)
dep(Â-21, Ã-27)
nn(∞-30, Â-29)
dep(ores-10, ∞-30)
nn(Ã-37, Ã-33)
nn(Ã-37, ≈-34)
nn(Ã-37, Â-35)
nn(Ã-37, ∆-36)
dep(ores-10, Ã-37)
conj_or(∞-30, Ã-37)
nn(Ã-45, Â-39)
nn(Ã-45, √-40)
nn(Ã-45, soÃ-41)
nn(Ã-45, ≈-42)
nn(Ã-45, Â-43)
nn(Ã-45, ≤-44)
dep(ores-10, Ã-45)
nn(∞-48, Â-47)
dep(Ã-45, ∞-48)
dep(LBR-4, RBR-51)
cop(archipelago-56, are-53)
det(archipelago-56, a-54)
amod(archipelago-56, Portuguese-55)
dep(Azores-2, archipelago-56)
det(Ocean-60, the-58)
nn(Ocean-60, Atlantic-59)
prep_in(archipelago-56, Ocean-60)
quantmod(1,500-63, about-62)
appos(Ocean-60, 1,500-63)
cc(amp-65, &-64)
dep(1,500-63, amp-65)
dep(Ocean-60, amp-67)
dep(Ocean-60, nbsp-69)
dep(Ocean-60, km-71)
dep(Ocean-60, LBR-73)
dep(Ocean-60, 950-75)
dep(Ocean-60, amp-77)
conj_and(950-75, amp-77)
dep(Ocean-60, amp-79)
dep(Ocean-60, nbsp-81)
dep(Ocean-60, mi-83)
dep(Ocean-60, RBR-85)
prep_from(Ocean-60, Lisbon-88)
quantmod(3,900-91, about-90)
prep_in(archipelago-56, 3,900-91)
conj_and(Ocean-60, 3,900-91)
cc(amp-93, &-92)
dep(3,900-91, amp-93)
prep_in(archipelago-56, amp-95)
conj_and(Ocean-60, amp-95)
prep_in(archipelago-56, nbsp-97)
conj_and(Ocean-60, nbsp-97)
prep_in(archipelago-56, km-99)
conj_and(Ocean-60, km-99)
prep_in(archipelago-56, LBR-101)
conj_and(Ocean-60, LBR-101)
prep_in(archipelago-56, 2,400-103)
conj_and(Ocean-60, 2,400-103)
conj_and(Ocean-60, amp-105)
conj_and(2,400-103, amp-105)
prep_in(archipelago-56, amp-107)
conj_and(Ocean-60, amp-107)
prep_in(archipelago-56, nbsp-109)
conj_and(Ocean-60, nbsp-109)
prep_in(archipelago-56, mi-111)
conj_and(Ocean-60, mi-111)
prep_in(archipelago-56, RBR-113)
conj_and(Ocean-60, RBR-113)
prep_in(archipelago-56, from-115)
conj_and(Ocean-60, from-115)
det(coast-118, the-116)
amod(coast-118, east-117)
prep_from(Ocean-60, coast-118)
nn(America-121, North-120)
prep_of(coast-118, America-121)

Ammunition , often referred to as ammo , is a generic term meaning - LBR - the assembly of - RBR - a projectile and its propellant .

nsubj(meaning-13, Ammunition-1)
advmod(referred-4, often-3)
partmod(Ammunition-1, referred-4)
quantmod(ammo-7, as-6)
prep_to(referred-4, ammo-7)
cop(meaning-13, is-9)
det(meaning-13, a-10)
amod(meaning-13, generic-11)
nn(meaning-13, term-12)
root(ROOT-0, meaning-13)
conj_and(meaning-13, LBR-15)
det(assembly-18, the-17)
conj_and(meaning-13, assembly-18)
prep(assembly-18, of-19)
conj_and(meaning-13, RBR-21)
det(projectile-24, a-23)
conj_and(meaning-13, projectile-24)
poss(propellant-27, its-26)
conj_and(meaning-13, propellant-27)

An Antioxidant is a molecule capable of slowing or preventing the oxidation of other molecules .

det(Antioxidant-2, An-1)
nsubj(molecule-5, Antioxidant-2)
cop(molecule-5, is-3)
det(molecule-5, a-4)
root(ROOT-0, molecule-5)
amod(molecule-5, capable-6)
prepc_of(capable-6, slowing-8)
prepc_of(capable-6, preventing-10)
conj_or(slowing-8, preventing-10)
det(oxidation-12, the-11)
dobj(slowing-8, oxidation-12)
amod(molecules-15, other-14)
prep_of(oxidation-12, molecules-15)

A Bit is a binary digit , taking a value of either 0 or 1 .

det(Bit-2, A-1)
nsubj(digit-6, Bit-2)
cop(digit-6, is-3)
det(digit-6, a-4)
amod(digit-6, binary-5)
root(ROOT-0, digit-6)
partmod(digit-6, taking-8)
xcomp(digit-6, taking-8)
det(value-10, a-9)
dobj(taking-8, value-10)
preconj(0-13, either-12)
prep_of(value-10, 0-13)
prep_of(value-10, 1-15)
conj_or(0-13, 1-15)

In computer science a Byte - LBR - pronounced `` bite `` , baÃ ≈ Âªt - RBR - is a unit of measurement of information storage , most often consisting of eight bits .

nn(science-3, computer-2)
prep_in(pronounced-9, science-3)
det(Byte-5, a-4)
nsubj(pronounced-9, Byte-5)
dep(Byte-5, LBR-7)
root(ROOT-0, pronounced-9)
dobj(pronounced-9, bite-11)
rcmod(bite-11, baÃ-14)
nn(Âªt-16, ≈-15)
nsubj(unit-22, Âªt-16)
dep(Âªt-16, RBR-18)
cop(unit-22, is-20)
det(unit-22, a-21)
ccomp(baÃ-14, unit-22)
prep_of(unit-22, measurement-24)
nn(storage-27, information-26)
prep_of(measurement-24, storage-27)
advmod(often-30, most-29)
advmod(consisting-31, often-30)
partmod(unit-22, consisting-31)
xcomp(unit-22, consisting-31)
num(bits-34, eight-33)
prep_of(consisting-31, bits-34)

A Bridge is a structure built to span a gorge , valley , road , railroad track , river , body of water , or any other physical obstacle , for the purpose of providing passage over the obstacle .

det(Bridge-2, A-1)
nsubj(structure-5, Bridge-2)
cop(structure-5, is-3)
det(structure-5, a-4)
root(ROOT-0, structure-5)
xsubj(span-8, structure-5)
partmod(structure-5, built-6)
aux(span-8, to-7)
xcomp(built-6, span-8)
det(gorge-10, a-9)
dobj(span-8, gorge-10)
dobj(span-8, valley-12)
conj_or(gorge-10, valley-12)
dobj(span-8, road-14)
conj_or(gorge-10, road-14)
nn(track-17, railroad-16)
dobj(span-8, track-17)
conj_or(gorge-10, track-17)
dobj(span-8, river-19)
conj_or(gorge-10, river-19)
dobj(span-8, body-21)
conj_or(gorge-10, body-21)
prep_of(body-21, water-23)
det(obstacle-29, any-26)
amod(obstacle-29, other-27)
amod(obstacle-29, physical-28)
dobj(span-8, obstacle-29)
conj_or(gorge-10, obstacle-29)
det(purpose-33, the-32)
prep_for(built-6, purpose-33)
prepc_of(purpose-33, providing-35)
dobj(providing-35, passage-36)
det(obstacle-39, the-38)
prep_over(providing-35, obstacle-39)

A Bead is a small , decorative object that is pierced for threading or stringing .

det(Bead-2, A-1)
nsubj(object-8, Bead-2)
cop(object-8, is-3)
det(object-8, a-4)
amod(object-8, small-5)
amod(object-8, decorative-7)
root(ROOT-0, object-8)
nsubjpass(pierced-11, object-8)
auxpass(pierced-11, is-10)
rcmod(object-8, pierced-11)
prep_for(pierced-11, threading-13)
prep_for(pierced-11, stringing-15)
conj_or(threading-13, stringing-15)

Basis may refer to the value differential between a future and the spot price .

nsubj(refer-3, Basis-1)
aux(refer-3, may-2)
root(ROOT-0, refer-3)
det(differential-7, the-5)
nn(differential-7, value-6)
prep_to(refer-3, differential-7)
det(future-10, a-9)
prep_between(differential-7, future-10)
det(price-14, the-12)
nn(price-14, spot-13)
prep_between(differential-7, price-14)
conj_and(future-10, price-14)

The Bromeliales is the flowering plants .

det(Bromeliales-2, The-1)
nsubj(plants-6, Bromeliales-2)
cop(plants-6, is-3)
det(plants-6, the-4)
amod(plants-6, flowering-5)
root(ROOT-0, plants-6)

The Brassicales are an order of flowering plants , belonging to the eurosids II group of dicotyledons under the APG II system .

det(Brassicales-2, The-1)
nsubj(order-5, Brassicales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(plants-8, flowering-7)
prep_of(order-5, plants-8)
partmod(order-5, belonging-10)
det(group-15, the-12)
amod(group-15, eurosids-13)
nn(group-15, II-14)
prep_to(belonging-10, group-15)
prep_of(group-15, dicotyledons-17)
det(system-22, the-19)
nn(system-22, APG-20)
nn(system-22, II-21)
prep_under(belonging-10, system-22)

Blindness is defined as visual acuity of less than 3 \/ 60 , or corresponding visual field loss to less than 10 degrees , in the better eye with best possible correction .

nsubjpass(defined-3, Blindness-1)
auxpass(defined-3, is-2)
root(ROOT-0, defined-3)
amod(acuity-6, visual-5)
prep_as(defined-3, acuity-6)
mwe(than-9, less-8)
quantmod(3-10, than-9)
prep_of(acuity-6, 3-10)
number(60-12, \/-11)
npadvmod(3-10, 60-12)
amod(loss-18, corresponding-15)
amod(loss-18, visual-16)
nn(loss-18, field-17)
npadvmod(3-10, loss-18)
conj_or(60-12, loss-18)
mwe(than-21, less-20)
quantmod(10-22, than-21)
num(degrees-23, 10-22)
prep_to(loss-18, degrees-23)
det(eye-28, the-26)
amod(eye-28, better-27)
prep_in(3-10, eye-28)
dep(possible-31, best-30)
amod(correction-32, possible-31)
prep_with(eye-28, correction-32)

A Bomber is a military aircraft designed to attack ground targets , primarily by dropping bombs .

det(Bomber-2, A-1)
nsubj(aircraft-6, Bomber-2)
cop(aircraft-6, is-3)
det(aircraft-6, a-4)
amod(aircraft-6, military-5)
root(ROOT-0, aircraft-6)
xsubj(attack-9, aircraft-6)
partmod(aircraft-6, designed-7)
aux(attack-9, to-8)
xcomp(designed-7, attack-9)
nn(targets-11, ground-10)
dobj(attack-9, targets-11)
advmod(designed-7, primarily-13)
agent(designed-7, dropping-15)
dobj(dropping-15, bombs-16)

The Lhop or Doya are a little-known tribe of southwest Bhutan .

det(Lhop-2, The-1)
nsubj(tribe-8, Lhop-2)
conj_or(Lhop-2, Doya-4)
nsubj(tribe-8, Doya-4)
cop(tribe-8, are-5)
det(tribe-8, a-6)
amod(tribe-8, little-known-7)
root(ROOT-0, tribe-8)
amod(Bhutan-11, southwest-10)
prep_of(tribe-8, Bhutan-11)

The Bosporus or Bosphorus , also known as the Istanbul Strait , - LBR - Turkish : Ã ≥ Â ° stanbul BoÃ ≥ ÂƒazÃ ≥ Â ± - RBR - - LBR - Greek : Ã ⁄ Â ‚ Ã ∂ Â ` Ã ∂ Â ∞ Ã ∂ Â • Ã ⁄ Â ¿ Ã ∂ Â ™ Ã ⁄ Â ¿ Ã ∂ Â ≠ - RBR - is a strait that forms the boundary between the European part - LBR - Rumelia - RBR - of Turkey and its Asian part - LBR - Anatolia - RBR - .

det(Bosporus-2, The-1)
root(ROOT-0, Bosporus-2)
conj_or(Bosporus-2, Bosphorus-4)
advmod(known-7, also-6)
partmod(Bosporus-2, known-7)
det(Strait-11, the-9)
nn(Strait-11, Istanbul-10)
prep_as(known-7, Strait-11)
dep(Bosporus-2, LBR-14)
dep(LBR-14, Turkish-16)
nn(°-21, Ã-18)
nn(°-21, ≥-19)
nn(°-21, Â-20)
dep(Bosporus-2, °-21)
amod(±-28, stanbul-22)
nn(±-28, BoÃ-23)
nn(±-28, ≥-24)
nn(±-28, ÂƒazÃ-25)
nn(±-28, ≥-26)
nn(±-28, Â-27)
dep(°-21, ±-28)
dep(±-28, RBR-30)
dep(Bosporus-2, LBR-33)
dep(LBR-33, Greek-35)
nn(Â-47, Ã-37)
nn(Â-47, ⁄-38)
nn(Â-47, Â-39)
nn(Â-47, ‚-40)
nn(Â-47, Ã-41)
nn(Â-47, ∂-42)
nn(Â-47, Â-43)
nn(Â-47, Ã-45)
num(Â-47, ∂-46)
dep(Bosporus-2, Â-47)
advmod(≠-68, ∞-48)
nn(≠-68, Ã-49)
nn(≠-68, ∂-50)
nn(≠-68, Â-51)
nn(≠-68, •-52)
nn(≠-68, Ã-53)
nn(≠-68, ⁄-54)
nn(≠-68, Â-55)
nn(≠-68, ¿-56)
nn(≠-68, Ã-57)
nn(≠-68, ∂-58)
nn(≠-68, Â-59)
nn(≠-68, ™-60)
nn(≠-68, Ã-61)
nn(≠-68, ⁄-62)
nn(≠-68, Â-63)
nn(≠-68, ¿-64)
nn(≠-68, Ã-65)
nn(≠-68, ∂-66)
nn(≠-68, Â-67)
rcmod(Â-47, ≠-68)
dep(Bosporus-2, RBR-70)
cop(strait-74, is-72)
det(strait-74, a-73)
dep(RBR-70, strait-74)
nsubj(forms-76, strait-74)
rcmod(strait-74, forms-76)
det(boundary-78, the-77)
dobj(forms-76, boundary-78)
det(part-82, the-80)
amod(part-82, European-81)
prep_between(boundary-78, part-82)
dep(boundary-78, LBR-84)
dep(boundary-78, Rumelia-86)
dep(boundary-78, RBR-88)
prep_of(boundary-78, Turkey-91)
poss(part-95, its-93)
amod(part-95, Asian-94)
dobj(forms-76, part-95)
conj_and(boundary-78, part-95)
nn(RBR-101, LBR-97)
dep(RBR-101, Anatolia-99)
dep(part-95, RBR-101)

In animals , the Brain is the control center of the central nervous system , responsible for behavior .

prep_in(center-9, animals-2)
det(Brain-5, the-4)
nsubj(center-9, Brain-5)
cop(center-9, is-6)
det(center-9, the-7)
nn(center-9, control-8)
root(ROOT-0, center-9)
det(system-14, the-11)
amod(system-14, central-12)
amod(system-14, nervous-13)
prep_of(center-9, system-14)
amod(center-9, responsible-16)
prep_for(responsible-16, behavior-18)

Byzantium - LBR - Greek : Ã ⁄ Â ‚ Ã ∂ Â ∑ Ã ⁄ Â ¶ Ã ⁄ Â ¬ Ã ⁄ Â ∏ Ã ∂ Â ≥ Ã ⁄ Â ' Ã ⁄ Â ¿ Ã ⁄ Â ∏ , Latin : lang , lang - RBR - was an ancient Greek city , which was founded by Greek colonists from Megara in 667 BC and named after their king Byzas or Byzantas - LBR - Ã ⁄ Â ‚ Ã ∂ ÂŸÃ ⁄ Â ¶ Ã ⁄ Â ± Ã ∂ Â ≠ or Ã ⁄ Â ‚ Ã ∂ ÂŸÃ ⁄ Â ¶ Ã ⁄ Â ± Ã ⁄ Â ∏ Ã ∂ Â ≥ Ã ⁄ Â ± Ã ∂ Â ≠ in Greek - RBR - .

root(ROOT-0, Byzantium-1)
dep(Byzantium-1, LBR-3)
dep(LBR-3, Greek-5)
nn(Ã-31, Ã-7)
nn(Ã-31, ⁄-8)
nn(Ã-31, Â-9)
nn(Ã-31, ‚-10)
nn(Ã-31, Ã-11)
nn(Ã-31, ∂-12)
nn(Ã-31, Â-13)
nn(Ã-31, ∑-14)
nn(Ã-31, Ã-15)
nn(Ã-31, ⁄-16)
nn(Ã-31, Â-17)
nn(Ã-31, ¶-18)
nn(Ã-31, Ã-19)
nn(Ã-31, ⁄-20)
nn(Ã-31, Â-21)
nn(Ã-31, ¬-22)
nn(Ã-31, Ã-23)
nn(Ã-31, ⁄-24)
nn(Ã-31, Â-25)
nn(Ã-31, ∏-26)
nn(Ã-31, Ã-27)
nn(Ã-31, ∂-28)
nn(Ã-31, Â-29)
nn(Ã-31, ≥-30)
dep(Â-33, Ã-31)
dep(Ã-31, ⁄-32)
poss(Â-37, Â-33)
nn(Â-37, Ã-35)
nn(Â-37, ⁄-36)
dep(LBR-3, Â-37)
nn(Latin-44, ¿-38)
nn(Latin-44, Ã-39)
nn(Latin-44, ⁄-40)
nn(Latin-44, Â-41)
nn(Latin-44, ∏-42)
dep(Â-37, Latin-44)
dep(LBR-3, lang-46)
appos(lang-46, lang-48)
dep(Byzantium-1, RBR-50)
dep(city-56, was-52)
det(city-56, an-53)
amod(city-56, ancient-54)
amod(city-56, Greek-55)
dep(Byzantium-1, city-56)
nsubjpass(founded-60, city-56)
nsubjpass(named-70, city-56)
auxpass(founded-60, was-59)
rcmod(city-56, founded-60)
amod(colonists-63, Greek-62)
agent(founded-60, colonists-63)
prep_from(founded-60, Megara-65)
nn(BC-68, 667-67)
prep_in(Megara-65, BC-68)
rcmod(city-56, named-70)
conj_and(founded-60, named-70)
poss(king-73, their-72)
prep_after(named-70, king-73)
dep(king-73, Byzas-74)
dep(king-73, Byzantas-76)
conj_or(Byzas-74, Byzantas-76)
nn(RBR-132, LBR-78)
nn(≠-97, Ã-80)
nn(≠-97, ⁄-81)
nn(≠-97, Â-82)
nn(≠-97, ‚-83)
nn(≠-97, Ã-84)
nn(≠-97, ∂-85)
nn(≠-97, ÂŸÃ-86)
nn(≠-97, ⁄-87)
nn(≠-97, Â-88)
nn(≠-97, ¶-89)
nn(≠-97, Ã-90)
nn(≠-97, ⁄-91)
nn(≠-97, Â-92)
nn(≠-97, ±-93)
nn(≠-97, Ã-94)
nn(≠-97, ∂-95)
nn(≠-97, Â-96)
dep(RBR-132, ≠-97)
nn(≠-128, Ã-99)
nn(≠-128, ⁄-100)
nn(≠-128, Â-101)
nn(≠-128, ‚-102)
nn(≠-128, Ã-103)
nn(≠-128, ∂-104)
nn(≠-128, ÂŸÃ-105)
nn(≠-128, ⁄-106)
nn(≠-128, Â-107)
nn(≠-128, ¶-108)
nn(≠-128, Ã-109)
nn(≠-128, ⁄-110)
nn(≠-128, Â-111)
nn(≠-128, ±-112)
nn(≠-128, Ã-113)
nn(≠-128, ⁄-114)
nn(≠-128, Â-115)
nn(≠-128, ∏-116)
nn(≠-128, Ã-117)
nn(≠-128, ∂-118)
nn(≠-128, Â-119)
nn(≠-128, ≥-120)
nn(≠-128, Ã-121)
nn(≠-128, ⁄-122)
nn(≠-128, Â-123)
nn(≠-128, ±-124)
nn(≠-128, Ã-125)
nn(≠-128, ∂-126)
nn(≠-128, Â-127)
conj_or(≠-97, ≠-128)
dep(RBR-132, ≠-128)
prep_in(≠-97, Greek-130)
dep(king-73, RBR-132)

The term Biotic refers to the condition of living organisms .

det(Biotic-3, The-1)
nn(Biotic-3, term-2)
nsubj(refers-4, Biotic-3)
root(ROOT-0, refers-4)
det(condition-7, the-6)
prep_to(refers-4, condition-7)
amod(organisms-10, living-9)
prep_of(condition-7, organisms-10)

A Burning-glass is a large convex lens that can concentrate the sun 's rays onto a small area , heating -LRB- PRT -RRB- up -LRB- \/ PRT -RRB- the area and thus resulting in ignition of the exposed surface .

det(Burning-glass-2, A-1)
nsubj(lens-7, Burning-glass-2)
cop(lens-7, is-3)
det(lens-7, a-4)
amod(lens-7, large-5)
nn(lens-7, convex-6)
root(ROOT-0, lens-7)
nsubj(concentrate-10, lens-7)
aux(concentrate-10, can-9)
rcmod(lens-7, concentrate-10)
det(sun-12, the-11)
poss(rays-14, sun-12)
dobj(concentrate-10, rays-14)
det(area-18, a-16)
amod(area-18, small-17)
prep_onto(concentrate-10, area-18)
dep(concentrate-10, heating-20)
dobj(heating-20, PRT-22)
nn(PRT-27, \/-26)
dep(PRT-22, PRT-27)
det(area-30, the-29)
prep_up(PRT-22, area-30)
dep(concentrate-10, thus-32)
advmod(heating-20, thus-32)
conj_and(heating-20, thus-32)
dep(concentrate-10, resulting-33)
conj_and(heating-20, resulting-33)
prep_in(resulting-33, ignition-35)
det(surface-39, the-37)
amod(surface-39, exposed-38)
prep_of(ignition-35, surface-39)

A banker or Bank is a financial institution whose primary activity is to act as a payment agent for customers , and to borrow , lend , and , in all modern banking systems , create money .

det(banker-2, A-1)
nsubj(institution-8, banker-2)
conj_or(banker-2, Bank-4)
nsubj(institution-8, Bank-4)
cop(institution-8, is-5)
det(institution-8, a-6)
amod(institution-8, financial-7)
root(ROOT-0, institution-8)
poss(activity-11, institution-8)
amod(activity-11, primary-10)
nsubj(is-12, activity-11)
rcmod(institution-8, is-12)
aux(act-14, to-13)
ccomp(is-12, act-14)
det(agent-18, a-16)
nn(agent-18, payment-17)
prep_as(act-14, agent-18)
prep_for(agent-18, customers-20)
aux(borrow-24, to-23)
ccomp(is-12, borrow-24)
conj_and(act-14, borrow-24)
parataxis(borrow-24, lend-26)
dep(borrow-24, in-30)
det(systems-34, all-31)
amod(systems-34, modern-32)
nn(systems-34, banking-33)
pobj(in-30, systems-34)
conj_and(act-14, create-36)
conj_and(borrow-24, create-36)
dobj(create-36, money-37)

The Bundestag - LBR - `` Federal Diet `` or `` Lower House of German Parliament `` - RBR - is the parliament of Germany .

det(Bundestag-2, The-1)
nsubj(parliament-23, Bundestag-2)
dep(Bundestag-2, LBR-4)
nn(Diet-8, Federal-7)
pobj(--5, Diet-8)
nn(House-13, Lower-12)
pobj(--5, House-13)
conj_or(Diet-8, House-13)
nn(Parliament-16, German-15)
prep_of(LBR-4, Parliament-16)
dep(Parliament-16, RBR-19)
cop(parliament-23, is-21)
det(parliament-23, the-22)
root(ROOT-0, parliament-23)
prep_of(parliament-23, Germany-25)

A Book is a set or collection of written , printed , illustrated , or blank sheets , made of paper , parchment , or other material , usually fastened together to hinge at one side .

det(Book-2, A-1)
nsubj(set-5, Book-2)
cop(set-5, is-3)
det(set-5, a-4)
root(ROOT-0, set-5)
conj_or(set-5, collection-7)
prep_of(set-5, written-9)
partmod(written-9, printed-11)
partmod(written-9, illustrated-13)
amod(sheets-17, blank-16)
nsubj(fastened-30, sheets-17)
xsubj(hinge-33, sheets-17)
partmod(sheets-17, made-19)
prep_of(made-19, paper-21)
prep_of(made-19, parchment-23)
conj_or(paper-21, parchment-23)
amod(material-27, other-26)
prep_of(made-19, material-27)
conj_or(paper-21, material-27)
advmod(fastened-30, usually-29)
conj_or(set-5, fastened-30)
advmod(hinge-33, together-31)
aux(hinge-33, to-32)
xcomp(fastened-30, hinge-33)
num(side-36, one-35)
prep_at(hinge-33, side-36)

With regard to living things , a Body is the integral physical material of an individual .

amod(things-5, living-4)
prep_with_regard_to(material-13, things-5)
det(Body-8, a-7)
nsubj(material-13, Body-8)
cop(material-13, is-9)
det(material-13, the-10)
amod(material-13, integral-11)
amod(material-13, physical-12)
root(ROOT-0, material-13)
det(individual-16, an-15)
prep_of(material-13, individual-16)

The Banjo is a stringed instrument developed by enslaved Africans in the United States , adapted from several African instruments .

det(Banjo-2, The-1)
nsubj(instrument-6, Banjo-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, stringed-5)
root(ROOT-0, instrument-6)
partmod(instrument-6, developed-7)
amod(Africans-10, enslaved-9)
agent(developed-7, Africans-10)
det(States-14, the-12)
nn(States-14, United-13)
prep_in(Africans-10, States-14)
partmod(Africans-10, adapted-16)
amod(instruments-20, several-18)
amod(instruments-20, African-19)
prep_from(adapted-16, instruments-20)

In cryptography , Blowfish is a keyed , symmetric block cipher , designed in 1993 by Bruce Schneier and included in a large number of cipher suites and encryption products .

prep_in(cipher-11, cryptography-2)
nsubj(cipher-11, Blowfish-4)
cop(cipher-11, is-5)
det(cipher-11, a-6)
amod(symmetric-9, keyed-7)
amod(cipher-11, symmetric-9)
nn(cipher-11, block-10)
root(ROOT-0, cipher-11)
dep(cipher-11, designed-13)
prep_in(designed-13, 1993-15)
nn(Schneier-18, Bruce-17)
prep_by(designed-13, Schneier-18)
dep(cipher-11, included-20)
conj_and(designed-13, included-20)
det(number-24, a-22)
amod(number-24, large-23)
prep_in(included-20, number-24)
nn(suites-27, cipher-26)
prep_of(number-24, suites-27)
nn(products-30, encryption-29)
prep_of(number-24, products-30)
conj_and(suites-27, products-30)

In the arts , the Baroque - LBR - pronounced \/ bÃ ≈ Â˙ ` rÃ ≈ Â ‚ k \/ - RBR - was a Western cultural epoch , commencing roughly at the turn of the 17th century in Rome , Italy .

det(arts-3, the-2)
prep_in(pronounced-10, arts-3)
det(Baroque-6, the-5)
nsubj(pronounced-10, Baroque-6)
dep(Baroque-6, LBR-8)
root(ROOT-0, pronounced-10)
nn(\/-21, \/-11)
nn(\/-21, bÃ-12)
nn(\/-21, ≈-13)
nn(\/-21, Â˙-14)
nn(\/-21, rÃ-16)
nn(\/-21, ≈-17)
nn(\/-21, Â-18)
nn(\/-21, ‚-19)
nn(\/-21, k-20)
nsubj(epoch-29, \/-21)
dep(\/-21, RBR-23)
cop(epoch-29, was-25)
det(epoch-29, a-26)
amod(epoch-29, Western-27)
amod(epoch-29, cultural-28)
ccomp(pronounced-10, epoch-29)
partmod(epoch-29, commencing-31)
xcomp(epoch-29, commencing-31)
advmod(commencing-31, roughly-32)
det(turn-35, the-34)
prep_at(commencing-31, turn-35)
det(century-39, the-37)
amod(century-39, 17th-38)
prep_of(turn-35, century-39)
nn(Italy-43, Rome-41)
prep_in(century-39, Italy-43)

In computer networking and other digital fields , the term Bandwidth often refers to a data rate measured in bits \/ s , for example network throughput .

nn(networking-3, computer-2)
prep_in(refers-13, networking-3)
amod(fields-7, other-5)
amod(fields-7, digital-6)
conj_and(networking-3, fields-7)
prep_in(refers-13, fields-7)
det(Bandwidth-11, the-9)
nn(Bandwidth-11, term-10)
nsubj(refers-13, Bandwidth-11)
advmod(refers-13, often-12)
root(ROOT-0, refers-13)
det(rate-17, a-15)
nn(rate-17, data-16)
prep_to(refers-13, rate-17)
partmod(rate-17, measured-18)
prep_in(measured-18, bits-20)
xcomp(measured-18, \/-21)
dobj(\/-21, s-22)
nn(throughput-27, example-25)
nn(throughput-27, network-26)
prep_for(measured-18, throughput-27)

The Bicycle , cycle , or bike is a pedal-driven , human-powered vehicle with two wheels attached to a frame , one behind the other .

det(Bicycle-2, The-1)
nsubj(vehicle-13, Bicycle-2)
conj_or(Bicycle-2, cycle-4)
nsubj(vehicle-13, cycle-4)
conj_or(Bicycle-2, bike-7)
nsubj(vehicle-13, bike-7)
cop(vehicle-13, is-8)
det(vehicle-13, a-9)
amod(vehicle-13, pedal-driven-10)
amod(vehicle-13, human-powered-12)
root(ROOT-0, vehicle-13)
num(wheels-16, two-15)
prep_with(vehicle-13, wheels-16)
partmod(wheels-16, attached-17)
det(frame-20, a-19)
prep_to(attached-17, frame-20)
appos(frame-20, one-22)
det(other-25, the-24)
prep_behind(one-22, other-25)

In inorganic chemistry , Bicarbonate - LBR - IUPAC-recommended nomenclature : hydrogencarbonate - RBR - is an intermediate form in the deprotonation of carbonic acid .

amod(chemistry-3, inorganic-2)
prep_in(form-19, chemistry-3)
nsubj(form-19, Bicarbonate-5)
nn(RBR-14, LBR-7)
amod(nomenclature-10, IUPAC-recommended-9)
dep(RBR-14, nomenclature-10)
dep(nomenclature-10, hydrogencarbonate-12)
dep(Bicarbonate-5, RBR-14)
cop(form-19, is-16)
det(form-19, an-17)
amod(form-19, intermediate-18)
root(ROOT-0, form-19)
det(deprotonation-22, the-21)
prep_in(form-19, deprotonation-22)
amod(acid-25, carbonic-24)
prep_of(deprotonation-22, acid-25)

A Boat is a watercraft designed to float or plane on water , and provide transport over it .

det(Boat-2, A-1)
nsubj(watercraft-5, Boat-2)
cop(watercraft-5, is-3)
det(watercraft-5, a-4)
root(ROOT-0, watercraft-5)
xsubj(float-8, watercraft-5)
partmod(watercraft-5, designed-6)
aux(float-8, to-7)
xcomp(designed-6, float-8)
xcomp(designed-6, plane-10)
conj_or(float-8, plane-10)
prep_on(plane-10, water-12)
xcomp(designed-6, provide-15)
conj_and(float-8, provide-15)
dobj(provide-15, transport-16)
prep_over(provide-15, it-18)

In computer programming , BASIC - LBR - an acronym for Beginner 's All-purpose Symbolic Instruction Code - RBR - is a family of high-level programming languages .

nn(programming-3, computer-2)
prep_in(family-23, programming-3)
nsubj(family-23, BASIC-5)
nn(RBR-19, LBR-7)
det(acronym-10, an-9)
dep(RBR-19, acronym-10)
poss(Code-17, Beginner-12)
nn(Code-17, All-purpose-14)
nn(Code-17, Symbolic-15)
nn(Code-17, Instruction-16)
prep_for(acronym-10, Code-17)
dep(BASIC-5, RBR-19)
cop(family-23, is-21)
det(family-23, a-22)
root(ROOT-0, family-23)
amod(languages-27, high-level-25)
nn(languages-27, programming-26)
prep_of(family-23, languages-27)

A Battleship is a large , heavily armored warship with a main battery consisting of the largest calibre of guns .

det(Battleship-2, A-1)
nsubj(warship-9, Battleship-2)
cop(warship-9, is-3)
det(warship-9, a-4)
amod(warship-9, large-5)
advmod(armored-8, heavily-7)
amod(warship-9, armored-8)
root(ROOT-0, warship-9)
det(battery-13, a-11)
amod(battery-13, main-12)
prep_with(warship-9, battery-13)
partmod(battery-13, consisting-14)
det(calibre-18, the-16)
amod(calibre-18, largest-17)
prep_of(consisting-14, calibre-18)
prep_of(calibre-18, guns-20)

Bilskirnir was also the name of an Extreme Metal event held monthly in Birmingham , UK by local legends Barnabus Price and Noj .

nsubj(name-5, Bilskirnir-1)
cop(name-5, was-2)
advmod(name-5, also-3)
det(name-5, the-4)
root(ROOT-0, name-5)
det(event-10, an-7)
nn(event-10, Extreme-8)
nn(event-10, Metal-9)
prep_of(name-5, event-10)
partmod(event-10, held-11)
advmod(held-11, monthly-12)
nn(UK-16, Birmingham-14)
prep_in(held-11, UK-16)
amod(Price-21, local-18)
nn(Price-21, legends-19)
nn(Price-21, Barnabus-20)
agent(held-11, Price-21)
agent(held-11, Noj-23)
conj_and(Price-21, Noj-23)

In Norse mythology , BrÃ ∞ Â -- singamen - LBR - from Old Norse brisinga `` flaming , glowing `` and men `` jewellry , ornament `` - RBR - is the necklace of the goddess Freyja - LBR - or Frigg in some mythological writings - RBR - .

nn(mythology-3, Norse-2)
prep_in(ornament-27, mythology-3)
nn(Â-7, BrÃ-5)
nn(Â-7, ∞-6)
nsubj(ornament-27, Â-7)
dep(Â-7, singamen-9)
dep(singamen-9, LBR-11)
nn(brisinga-16, Old-14)
nn(brisinga-16, Norse-15)
prep_from(Â-7, brisinga-16)
partmod(brisinga-16, flaming-18)
partmod(Â-7, glowing-20)
cc(men-23, and-22)
dobj(glowing-20, men-23)
dep(men-23, jewellry-25)
root(ROOT-0, ornament-27)
nsubj(necklace-34, RBR-30)
cop(necklace-34, is-32)
det(necklace-34, the-33)
ccomp(ornament-27, necklace-34)
det(goddess-37, the-36)
prep_of(necklace-34, goddess-37)
dep(goddess-37, Freyja-38)
nn(RBR-49, LBR-40)
dep(Frigg-43, or-42)
dep(RBR-49, Frigg-43)
det(writings-47, some-45)
amod(writings-47, mythological-46)
prep_in(Frigg-43, writings-47)
dep(goddess-37, RBR-49)

In complexity theory , BPP is the class of decision problems solvable by a probabilistic Turing machine in polynomial time , with an error probability of at most 1 \/ 3 for all instances .

nn(theory-3, complexity-2)
prep_in(class-8, theory-3)
nsubj(class-8, BPP-5)
cop(class-8, is-6)
det(class-8, the-7)
root(ROOT-0, class-8)
nn(problems-11, decision-10)
prep_of(class-8, problems-11)
amod(problems-11, solvable-12)
det(machine-17, a-14)
amod(machine-17, probabilistic-15)
nn(machine-17, Turing-16)
prep_by(solvable-12, machine-17)
amod(time-20, polynomial-19)
prep_in(machine-17, time-20)
det(probability-25, an-23)
nn(probability-25, error-24)
prep_with(solvable-12, probability-25)
quantmod(1-29, at-27)
mwe(at-27, most-28)
pobj(at-27, most-28)
num(3-31, 1-29)
number(3-31, \/-30)
prep_of(probability-25, 3-31)
det(instances-34, all-33)
prep_for(problems-11, instances-34)

Brainfuck is an esoteric programming language noted for its extreme minimalism .

nsubj(language-6, Brainfuck-1)
cop(language-6, is-2)
det(language-6, an-3)
amod(language-6, esoteric-4)
nn(language-6, programming-5)
root(ROOT-0, language-6)
partmod(language-6, noted-7)
poss(minimalism-11, its-9)
amod(minimalism-11, extreme-10)
prep_for(noted-7, minimalism-11)

A Bishop is an ordained or consecrated member of the Christian clergy who is generally entrusted with a position of authority and oversight .

det(Bishop-2, A-1)
nsubj(member-8, Bishop-2)
cop(member-8, is-3)
det(member-8, an-4)
amod(member-8, ordained-5)
conj_or(ordained-5, consecrated-7)
amod(member-8, consecrated-7)
root(ROOT-0, member-8)
det(clergy-12, the-10)
amod(clergy-12, Christian-11)
prep_of(member-8, clergy-12)
nsubjpass(entrusted-16, clergy-12)
auxpass(entrusted-16, is-14)
advmod(entrusted-16, generally-15)
rcmod(clergy-12, entrusted-16)
det(position-19, a-18)
prep_with(entrusted-16, position-19)
prep_of(position-19, authority-21)
prep_of(position-19, oversight-23)
conj_and(authority-21, oversight-23)

A Bus is a large road vehicle designed to carry numerous passengers in addition to the driver and sometimes a conductor .

det(Bus-2, A-1)
nsubj(vehicle-7, Bus-2)
cop(vehicle-7, is-3)
det(vehicle-7, a-4)
amod(vehicle-7, large-5)
nn(vehicle-7, road-6)
root(ROOT-0, vehicle-7)
xsubj(carry-10, vehicle-7)
partmod(vehicle-7, designed-8)
aux(carry-10, to-9)
xcomp(designed-8, carry-10)
amod(passengers-12, numerous-11)
dobj(carry-10, passengers-12)
prep_in(passengers-12, addition-14)
det(driver-17, the-16)
prep_to(carry-10, driver-17)
advmod(conductor-21, sometimes-19)
det(conductor-21, a-20)
prep_to(carry-10, conductor-21)
conj_and(driver-17, conductor-21)

The Benelux is an economic union in Western Europe that includes three neighboring monarchies , Belgium , the Netherlands , and Luxembourg - LBR - BelgiÃ ∞ Â `` \/ Belgique \/ Belgien - Nederland - LÃ ∞ Â `` tzebuerg \/ Luxembourg \/ Luxemburg - RBR - , which lie in the north western European region between France and Germany .

det(Benelux-2, The-1)
nsubj(union-6, Benelux-2)
cop(union-6, is-3)
det(union-6, an-4)
amod(union-6, economic-5)
root(ROOT-0, union-6)
nn(Europe-9, Western-8)
prep_in(union-6, Europe-9)
nsubj(includes-11, Europe-9)
nsubj(lie-51, Europe-9)
rcmod(Europe-9, includes-11)
num(monarchies-14, three-12)
amod(monarchies-14, neighboring-13)
dobj(includes-11, monarchies-14)
dobj(includes-11, Belgium-16)
conj_and(monarchies-14, Belgium-16)
det(Netherlands-19, the-18)
dobj(includes-11, Netherlands-19)
conj_and(monarchies-14, Netherlands-19)
dobj(includes-11, Luxembourg-22)
conj_and(monarchies-14, Luxembourg-22)
dobj(includes-11, LBR-24)
conj_and(monarchies-14, LBR-24)
nn(Belgien-33, BelgiÃ-26)
nn(Belgien-33, ∞-27)
nn(Belgien-33, Â-28)
nn(Belgien-33, \/-30)
nn(Belgien-33, Belgique-31)
nn(Belgien-33, \/-32)
dobj(includes-11, Belgien-33)
conj_and(monarchies-14, Belgien-33)
dobj(includes-11, Nederland-35)
conj_and(monarchies-14, Nederland-35)
nn(Â-39, LÃ-37)
nn(Â-39, ∞-38)
dobj(includes-11, Â-39)
conj_and(monarchies-14, Â-39)
amod(Luxemburg-45, tzebuerg-41)
nn(Luxemburg-45, \/-42)
nn(Luxemburg-45, Luxembourg-43)
nn(Luxemburg-45, \/-44)
dep(Â-39, Luxemburg-45)
dep(Europe-9, RBR-47)
rcmod(Europe-9, lie-51)
det(region-57, the-53)
amod(region-57, north-54)
amod(region-57, western-55)
amod(region-57, European-56)
prep_in(lie-51, region-57)
prep_between(region-57, France-59)
prep_between(region-57, Germany-61)
conj_and(France-59, Germany-61)

A Barge is a flat-bottomed boat , built mainly for river and canal transport of heavy goods .

det(Barge-2, A-1)
nsubj(boat-6, Barge-2)
cop(boat-6, is-3)
det(boat-6, a-4)
amod(boat-6, flat-bottomed-5)
root(ROOT-0, boat-6)
partmod(boat-6, built-8)
advmod(built-8, mainly-9)
nn(transport-14, river-11)
conj_and(river-11, canal-13)
nn(transport-14, canal-13)
prep_for(built-8, transport-14)
amod(goods-17, heavy-16)
prep_of(transport-14, goods-17)

Generally , a Battle is a conceptual component in the hierarchy of combat in warfare between two or more armed forces , wherein each group will seek to defeat the others within the scope of a military campaign , and are well defined in duration , area and force commitment .

advmod(component-8, Generally-1)
det(Battle-4, a-3)
nsubj(component-8, Battle-4)
cop(component-8, is-5)
det(component-8, a-6)
amod(component-8, conceptual-7)
root(ROOT-0, component-8)
det(hierarchy-11, the-10)
prep_in(component-8, hierarchy-11)
prep_of(hierarchy-11, combat-13)
prep_in(combat-13, warfare-15)
num(forces-21, two-17)
conj_or(two-17, more-19)
quantmod(two-17, more-19)
num(forces-21, more-19)
amod(forces-21, armed-20)
prep_between(warfare-15, forces-21)
advmod(seek-27, wherein-23)
det(group-25, each-24)
nsubj(seek-27, group-25)
xsubj(defeat-29, group-25)
nsubjpass(defined-43, group-25)
aux(seek-27, will-26)
rcmod(forces-21, seek-27)
aux(defeat-29, to-28)
xcomp(seek-27, defeat-29)
det(others-31, the-30)
dobj(defeat-29, others-31)
det(scope-34, the-33)
prep_within(defeat-29, scope-34)
det(campaign-38, a-36)
amod(campaign-38, military-37)
prep_of(scope-34, campaign-38)
auxpass(defined-43, are-41)
advmod(defined-43, well-42)
rcmod(forces-21, defined-43)
conj_and(seek-27, defined-43)
prep_in(defined-43, duration-45)
prep_in(defined-43, area-47)
conj_and(duration-45, area-47)
nn(commitment-50, force-49)
prep_in(defined-43, commitment-50)
conj_and(duration-45, commitment-50)

A Bacteriophage - LBR - from ` bacteria ' and Greek phagein , ` to eat ' - RBR - is any one of a number of viruses that infect bacteria .

det(Bacteriophage-2, A-1)
nsubj(one-23, Bacteriophage-2)
dep(Bacteriophage-2, LBR-4)
amod(phagein-12, bacteria-8)
conj_and(bacteria-8, Greek-11)
amod(phagein-12, Greek-11)
prep_from(Bacteriophage-2, phagein-12)
aux(eat-16, to-15)
infmod(phagein-12, eat-16)
dep(phagein-12, RBR-19)
cop(one-23, is-21)
det(one-23, any-22)
root(ROOT-0, one-23)
det(number-26, a-25)
prep_of(one-23, number-26)
prep_of(number-26, viruses-28)
nsubj(infect-30, viruses-28)
rcmod(viruses-28, infect-30)
dobj(infect-30, bacteria-31)

A Bacteriostat is a biological or chemical agent that causes bacteriostasis .

det(Bacteriostat-2, A-1)
nsubj(agent-8, Bacteriostat-2)
cop(agent-8, is-3)
det(agent-8, a-4)
amod(agent-8, biological-5)
conj_or(biological-5, chemical-7)
amod(agent-8, chemical-7)
root(ROOT-0, agent-8)
nsubj(causes-10, agent-8)
rcmod(agent-8, causes-10)
dobj(causes-10, bacteriostasis-11)

A Bactericide or bacteriocide is a substance that kills bacteria and , preferably , nothing else .

det(Bactericide-2, A-1)
nsubj(substance-7, Bactericide-2)
conj_or(Bactericide-2, bacteriocide-4)
nsubj(substance-7, bacteriocide-4)
cop(substance-7, is-5)
det(substance-7, a-6)
root(ROOT-0, substance-7)
nsubj(kills-9, substance-7)
rcmod(substance-7, kills-9)
dobj(kills-9, bacteria-10)
dep(bacteria-10, preferably-13)
dobj(kills-9, nothing-15)
conj_and(bacteria-10, nothing-15)
advmod(nothing-15, else-16)

In electronics , a Battery is two or more electrochemical cells which store chemical energy and make it available as electrical energy .

prep_in(cells-11, electronics-2)
det(Battery-5, a-4)
nsubj(cells-11, Battery-5)
cop(cells-11, is-6)
num(cells-11, two-7)
conj_or(two-7, more-9)
quantmod(two-7, more-9)
num(cells-11, more-9)
amod(cells-11, electrochemical-10)
root(ROOT-0, cells-11)
nsubj(store-13, cells-11)
nsubj(make-17, cells-11)
rcmod(cells-11, store-13)
nn(energy-15, chemical-14)
dobj(store-13, energy-15)
rcmod(cells-11, make-17)
conj_and(store-13, make-17)
nsubj(available-19, it-18)
xcomp(make-17, available-19)
amod(energy-22, electrical-21)
prep_as(available-19, energy-22)

The Bassoon is a woodwind instrument in the double reed family that typically plays music written in the bass and tenor registers and occasionally even higher . !

det(Bassoon-2, The-1)
nsubj(instrument-6, Bassoon-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
nn(instrument-6, woodwind-5)
root(ROOT-0, instrument-6)
det(family-11, the-8)
amod(family-11, double-9)
amod(family-11, reed-10)
prep_in(instrument-6, family-11)
complm(plays-14, that-12)
advmod(plays-14, typically-13)
dep(family-11, plays-14)
nsubj(plays-14, music-15)
amod(music-15, written-16)
det(registers-22, the-18)
nn(registers-22, bass-19)
conj_and(bass-19, tenor-21)
nn(registers-22, tenor-21)
prep_in(written-16, registers-22)
advmod(higher-26, occasionally-24)
advmod(higher-26, even-25)
amod(music-15, higher-26)
conj_and(written-16, higher-26)

Bioinformatics more properly refers to the creation and advancement of algorithms , computational and statistical techniques , and theory to solve formal and practical problems arising from the management and analysis of biological data .

dep(more-2, Bioinformatics-1)
nsubj(refers-4, more-2)
xsubj(solve-21, more-2)
advmod(refers-4, properly-3)
root(ROOT-0, refers-4)
det(creation-7, the-6)
prep_to(refers-4, creation-7)
prep_to(refers-4, advancement-9)
conj_and(creation-7, advancement-9)
prep_of(creation-7, algorithms-11)
amod(techniques-16, computational-13)
conj_and(computational-13, statistical-15)
amod(techniques-16, statistical-15)
prep_of(creation-7, techniques-16)
conj_and(algorithms-11, techniques-16)
prep_of(creation-7, theory-19)
conj_and(algorithms-11, theory-19)
aux(solve-21, to-20)
xcomp(refers-4, solve-21)
amod(problems-25, formal-22)
conj_and(formal-22, practical-24)
amod(problems-25, practical-24)
dobj(solve-21, problems-25)
partmod(problems-25, arising-26)
det(management-29, the-28)
prep_from(arising-26, management-29)
prep_from(arising-26, analysis-31)
conj_and(management-29, analysis-31)
amod(data-34, biological-33)
prep_of(management-29, data-34)

The Cell is the structural and functional unit of all known living organisms .

det(Cell-2, The-1)
nsubj(unit-8, Cell-2)
cop(unit-8, is-3)
det(unit-8, the-4)
amod(unit-8, structural-5)
conj_and(structural-5, functional-7)
amod(unit-8, functional-7)
root(ROOT-0, unit-8)
advmod(known-11, all-10)
amod(organisms-13, known-11)
amod(organisms-13, living-12)
prep_of(unit-8, organisms-13)

A Trade Exchange or Barter is a type of trade in which goods or services are directly exchanged for other goods and \/ or services , without the use of money .

det(Exchange-3, A-1)
nn(Exchange-3, Trade-2)
nsubj(type-8, Exchange-3)
conj_or(Exchange-3, Barter-5)
nsubj(type-8, Barter-5)
cop(type-8, is-6)
det(type-8, a-7)
root(ROOT-0, type-8)
prep_of(type-8, trade-10)
rel(exchanged-18, which-12)
nsubjpass(exchanged-18, goods-13)
conj_or(goods-13, services-15)
nsubjpass(exchanged-18, services-15)
auxpass(exchanged-18, are-16)
advmod(exchanged-18, directly-17)
rcmod(type-8, exchanged-18)
amod(goods-21, other-20)
prep_for(exchanged-18, goods-21)
prep_for(exchanged-18, \/-23)
conj_and(goods-21, \/-23)
conj_and(goods-21, services-25)
conj_or(\/-23, services-25)
det(use-29, the-28)
prep_without(exchanged-18, use-29)
prep_of(use-29, money-31)

A Brand is a collection of images and ideas representing an economic producer ; more specifically , it refers to the concrete symbols such as a name , logo , slogan , and design scheme .

det(Brand-2, A-1)
nsubj(collection-5, Brand-2)
cop(collection-5, is-3)
det(collection-5, a-4)
root(ROOT-0, collection-5)
prep_of(collection-5, images-7)
prep_of(collection-5, ideas-9)
conj_and(images-7, ideas-9)
partmod(collection-5, representing-10)
det(producer-13, an-11)
amod(producer-13, economic-12)
dobj(representing-10, producer-13)
advmod(specifically-16, more-15)
advmod(refers-19, specifically-16)
nsubj(refers-19, it-18)
parataxis(collection-5, refers-19)
det(symbols-23, the-21)
amod(symbols-23, concrete-22)
prep_to(refers-19, symbols-23)
det(slogan-31, a-26)
nn(slogan-31, name-27)
dep(slogan-31, logo-29)
prep_such_as(symbols-23, slogan-31)
nn(scheme-35, design-34)
prep_such_as(symbols-23, scheme-35)
conj_and(slogan-31, scheme-35)

The Bavarii were a large and powerful tribe which emerged late in Teutonic tribal times , in what is now the Czech Republic - LBR - Bohemia - RBR - .

det(Bavarii-2, The-1)
nsubj(tribe-8, Bavarii-2)
cop(tribe-8, were-3)
det(tribe-8, a-4)
amod(tribe-8, large-5)
conj_and(large-5, powerful-7)
amod(tribe-8, powerful-7)
root(ROOT-0, tribe-8)
nsubj(emerged-10, tribe-8)
rcmod(tribe-8, emerged-10)
advmod(emerged-10, late-11)
amod(times-15, Teutonic-13)
amod(times-15, tribal-14)
prep_in(emerged-10, times-15)
nsubj(Bohemia-27, what-18)
cop(Bohemia-27, is-19)
advmod(Bohemia-27, now-20)
det(Bohemia-27, the-21)
amod(Bohemia-27, Czech-22)
nn(Bohemia-27, Republic-23)
dep(Bohemia-27, LBR-25)
prepc_in(emerged-10, Bohemia-27)
dep(Bohemia-27, RBR-29)

The Burgundians or Burgundes were an East Germanic tribe which may have emigrated from mainland Scandinavia to the island of Bornholm , whose old form in Old Norse still was Burgundarholmr - LBR - the Island of the Burgundians - RBR - , and from there to mainland Europe .

det(Burgundians-2, The-1)
nsubj(tribe-9, Burgundians-2)
conj_or(Burgundians-2, Burgundes-4)
nsubj(tribe-9, Burgundes-4)
cop(tribe-9, were-5)
det(tribe-9, an-6)
nn(tribe-9, East-7)
nn(tribe-9, Germanic-8)
root(ROOT-0, tribe-9)
nsubj(emigrated-13, tribe-9)
aux(emigrated-13, may-11)
aux(emigrated-13, have-12)
rcmod(tribe-9, emigrated-13)
nn(Scandinavia-16, mainland-15)
prep_from(emigrated-13, Scandinavia-16)
prep_from(emigrated-13, Scandinavia-16')
conj_and(Scandinavia-16, Scandinavia-16')
det(island-19, the-18)
prep_to(Scandinavia-16, island-19)
poss(form-25, island-19)
prep_of(island-19, Bornholm-21)
amod(form-25, old-24)
nsubj(Burgundarholmr-31, form-25)
nn(Norse-28, Old-27)
prep_in(form-25, Norse-28)
advmod(Burgundarholmr-31, still-29)
cop(Burgundarholmr-31, was-30)
rcmod(island-19, Burgundarholmr-31)
nn(RBR-41, LBR-33)
det(Island-36, the-35)
dep(RBR-41, Island-36)
det(Burgundians-39, the-38)
prep_of(Island-36, Burgundians-39)
dep(Burgundarholmr-31, RBR-41)
prep_from(Scandinavia-16', there-46)
amod(Europe-49, mainland-48)
prep_to(emigrated-13, Europe-49)

The Batavians - LBR - Latin Batavi - RBR - were a Germanic tribe , originally part of the Chatti , reported by Tacitus to have lived around the Rhine delta , in the area that is currently the Netherlands , `` an uninhabited district on the extremity of the coast of Gaul , and also of a neighbouring island , surrounded by the ocean in front , and by the river Rhine in the rear and on either side `` - LBR - Tacitus , Historiae iv - RBR - .

det(Batavians-2, The-1)
root(ROOT-0, Batavians-2)
nn(RBR-9, LBR-4)
nn(Batavi-7, Latin-6)
dep(RBR-9, Batavi-7)
dep(Batavians-2, RBR-9)
cop(tribe-14, were-11)
det(tribe-14, a-12)
amod(tribe-14, Germanic-13)
dep(RBR-9, tribe-14)
xsubj(lived-27, tribe-14)
advmod(part-17, originally-16)
rcmod(tribe-14, part-17)
det(Chatti-20, the-19)
prep_of(part-17, Chatti-20)
partmod(tribe-14, reported-22)
agent(reported-22, Tacitus-24)
aux(lived-27, to-25)
aux(lived-27, have-26)
xcomp(reported-22, lived-27)
det(delta-31, the-29)
nn(delta-31, Rhine-30)
prep_around(lived-27, delta-31)
det(area-35, the-34)
prep_in(reported-22, area-35)
nsubj(Netherlands-40, area-35)
cop(Netherlands-40, is-37)
advmod(Netherlands-40, currently-38)
det(Netherlands-40, the-39)
rcmod(area-35, Netherlands-40)
det(district-45, an-43)
amod(district-45, uninhabited-44)
dep(Netherlands-40, district-45)
det(extremity-48, the-47)
prep_on(district-45, extremity-48)
det(coast-51, the-50)
prep_of(extremity-48, coast-51)
prep_of(coast-51, Gaul-53)
dep(RBR-9, also-56)
advmod(tribe-14, also-56)
conj_and(tribe-14, also-56)
xsubj(lived-27, also-56)
dep(RBR-9, of-57)
conj_and(tribe-14, of-57)
xsubj(lived-27, of-57)
det(island-60, a-58)
amod(island-60, neighbouring-59)
pobj(of-57, island-60)
conj_and(tribe-14, surrounded-62)
conj_and(of-57, surrounded-62)
det(ocean-65, the-64)
prep_by(surrounded-62, ocean-65)
prep_in(ocean-65, front-67)
det(Rhine-73, the-71)
nn(Rhine-73, river-72)
prep_by(surrounded-62, Rhine-73)
conj_and(ocean-65, Rhine-73)
det(rear-76, the-75)
prep_in(Rhine-73, rear-76)
conj_and(tribe-14, on-78)
conj_and(of-57, on-78)
det(side-80, either-79)
pobj(on-78, side-80)
dep(side-80, LBR-83)
nn(iv-88, Tacitus-85)
dep(iv-88, Historiae-87)
dep(side-80, iv-88)
dep(side-80, RBR-90)

In Christianity , Baptism - LBR - Greek , `` immersing `` , `` performing ablutions `` - RBR - is the sacramental act of cleansing in water that admits one as a full member of the Church .

prep_in(act-24, Christianity-2)
nsubj(act-24, Baptism-4)
dep(Baptism-4, LBR-6)
dep(LBR-6, Greek-8)
partmod(Greek-8, immersing-11)
nsubj(ablutions-16, performing-15)
ccomp(immersing-11, ablutions-16)
dep(Baptism-4, RBR-19)
cop(act-24, is-21)
det(act-24, the-22)
amod(act-24, sacramental-23)
root(ROOT-0, act-24)
prepc_of(act-24, cleansing-26)
prep_in(cleansing-26, water-28)
nsubj(admits-30, water-28)
rcmod(water-28, admits-30)
dobj(admits-30, one-31)
det(member-35, a-33)
amod(member-35, full-34)
prep_as(admits-30, member-35)
det(Church-38, the-37)
prep_of(member-35, Church-38)

The Bastarnae were an important ancient people of uncertain , but probably mixed Germanic-Celtic-Sarmatian , ethnic origin , who lived between the Danube and the Dnieper - LBR - Strabo , Geography , VII , 3,17 - RBR - during the last centuries BC and early centuries AD .

det(Bastarnae-2, The-1)
nsubj(people-7, Bastarnae-2)
cop(people-7, were-3)
det(people-7, an-4)
amod(people-7, important-5)
amod(people-7, ancient-6)
root(ROOT-0, people-7)
amod(origin-17, uncertain-9)
dep(Germanic-Celtic-Sarmatian-14, but-11)
dep(Germanic-Celtic-Sarmatian-14, probably-12)
amod(Germanic-Celtic-Sarmatian-14, mixed-13)
dep(uncertain-9, Germanic-Celtic-Sarmatian-14)
amod(origin-17, ethnic-16)
prep_of(people-7, origin-17)
nsubj(lived-20, origin-17)
rcmod(origin-17, lived-20)
det(Danube-23, the-22)
prep_between(lived-20, Danube-23)
det(Dnieper-26, the-25)
prep_between(lived-20, Dnieper-26)
conj_and(Danube-23, Dnieper-26)
nn(RBR-38, LBR-28)
dep(RBR-38, Strabo-30)
appos(Strabo-30, Geography-32)
appos(Strabo-30, VII-34)
appos(Strabo-30, 3,17-36)
dep(Danube-23, RBR-38)
det(BC-44, the-41)
amod(BC-44, last-42)
nn(BC-44, centuries-43)
prep_during(lived-20, BC-44)
amod(AD-48, early-46)
nn(AD-48, centuries-47)
prep_during(lived-20, AD-48)
conj_and(BC-44, AD-48)

A Backplane - LBR - or `` backplane system `` - RBR - is a circuit board - LBR - usually a printed circuit board - RBR - that connects several connectors in parallel to each other , so that each pin of each connector is linked to the same relative pin of all the other connectors , forming a computer bus .

det(Backplane-2, A-1)
nsubj(board-17, Backplane-2)
conj_or(Backplane-2, LBR-4)
nsubj(board-17, LBR-4)
amod(RBR-12, backplane-8)
nn(RBR-12, system-9)
conj_or(Backplane-2, RBR-12)
nsubj(board-17, RBR-12)
cop(board-17, is-14)
det(board-17, a-15)
nn(board-17, circuit-16)
root(ROOT-0, board-17)
dep(board-17, LBR-19)
advmod(board-17, usually-21)
det(board-25, a-22)
amod(board-25, printed-23)
nn(board-25, circuit-24)
attr(board-17, board-25)
nsubj(connects-30, board-25)
dep(board-25, RBR-27)
rcmod(board-25, connects-30)
amod(connectors-32, several-31)
dobj(connects-30, connectors-32)
prep_in(connectors-32, parallel-34)
det(other-37, each-36)
prep_to(parallel-34, other-37)
advmod(linked-47, so-39)
dep(linked-47, that-40)
det(pin-42, each-41)
nsubjpass(linked-47, pin-42)
det(connector-45, each-44)
prep_of(pin-42, connector-45)
auxpass(linked-47, is-46)
advcl(connects-30, linked-47)
det(pin-52, the-49)
amod(pin-52, same-50)
amod(pin-52, relative-51)
prep_to(linked-47, pin-52)
predet(connectors-57, all-54)
det(connectors-57, the-55)
amod(connectors-57, other-56)
prep_of(pin-52, connectors-57)
xcomp(connects-30, forming-59)
det(bus-62, a-60)
nn(bus-62, computer-61)
dobj(forming-59, bus-62)

A Baldric - LBR - also baldrick , bawdrick , bauldrick as well as some other , mostly rare or obsolete , variations - RBR - is a belt worn over one shoulder that is typically used to carry a weapon - LBR - usually a sword - RBR - or other implement such as a bugle or drum .

det(Baldric-2, A-1)
nsubj(baldrick-7, Baldric-2)
dep(Baldric-2, LBR-4)
advmod(baldrick-7, also-6)
root(ROOT-0, baldrick-7)
dep(baldrick-7, bawdrick-9)
ccomp(baldrick-7, bauldrick-11)
cc(other-16, well-13)
det(other-16, some-15)
dobj(bauldrick-11, other-16)
advmod(rare-19, mostly-18)
amod(other-16, rare-19)
amod(other-16, obsolete-21)
conj_or(rare-19, obsolete-21)
dep(other-16, variations-23)
dep(variations-23, RBR-25)
cop(belt-29, is-27)
det(belt-29, a-28)
rcmod(variations-23, belt-29)
partmod(belt-29, worn-30)
num(shoulder-33, one-32)
prep_over(worn-30, shoulder-33)
nsubjpass(used-37, shoulder-33)
auxpass(used-37, is-35)
advmod(used-37, typically-36)
rcmod(shoulder-33, used-37)
aux(carry-39, to-38)
xcomp(used-37, carry-39)
det(weapon-41, a-40)
dobj(carry-39, weapon-41)
dobj(carry-39, LBR-43)
conj_or(weapon-41, LBR-43)
advmod(sword-47, usually-45)
det(sword-47, a-46)
dobj(carry-39, sword-47)
conj_or(weapon-41, sword-47)
dobj(carry-39, RBR-49)
conj_or(weapon-41, RBR-49)
amod(implement-53, other-52)
dobj(carry-39, implement-53)
conj_or(weapon-41, implement-53)
det(bugle-57, a-56)
prep_such_as(implement-53, bugle-57)
ccomp(baldrick-7, drum-59)
conj_or(bauldrick-11, drum-59)

A Boomerang is a simple wooden implement used for various purposes .

det(Boomerang-2, A-1)
nsubj(implement-7, Boomerang-2)
cop(implement-7, is-3)
det(implement-7, a-4)
amod(implement-7, simple-5)
amod(implement-7, wooden-6)
root(ROOT-0, implement-7)
partmod(implement-7, used-8)
amod(purposes-11, various-10)
prep_for(used-8, purposes-11)

The Beagle is a breed of medium-sized dog .

det(Beagle-2, The-1)
nsubj(breed-5, Beagle-2)
cop(breed-5, is-3)
det(breed-5, a-4)
root(ROOT-0, breed-5)
amod(dog-8, medium-sized-7)
prep_of(breed-5, dog-8)

Bioterrorism is terrorism by intentional release or dissemination of biological agents - LBR - bacteria , viruses or toxins - RBR - ; these may be in a naturally-occurring or in a human-modified form .

nsubj(terrorism-3, Bioterrorism-1)
cop(terrorism-3, is-2)
root(ROOT-0, terrorism-3)
amod(release-6, intentional-5)
prep_by(terrorism-3, release-6)
prep_by(terrorism-3, dissemination-8)
conj_or(release-6, dissemination-8)
amod(agents-11, biological-10)
prep_of(release-6, agents-11)
nn(RBR-21, LBR-13)
dep(RBR-21, bacteria-15)
appos(bacteria-15, viruses-17)
appos(bacteria-15, toxins-19)
conj_or(viruses-17, toxins-19)
dep(release-6, RBR-21)
nsubj(be-26, these-24)
aux(be-26, may-25)
parataxis(terrorism-3, be-26)
det(naturally-occurring-29, a-28)
prep_in(be-26, naturally-occurring-29)
det(form-34, a-32)
amod(form-34, human-modified-33)
prep_in(be-26, form-34)
conj_or(naturally-occurring-29, form-34)

The Galjoen , black bream , or blackfish , Dichistius capensis is a of marine fish that is found only along the coast of South Africa .

det(Galjoen-2, The-1)
nsubj(a-13, Galjoen-2)
amod(bream-5, black-4)
appos(Galjoen-2, bream-5)
amod(capensis-11, blackfish-8)
dep(capensis-11, Dichistius-10)
conj_or(Galjoen-2, capensis-11)
nsubj(a-13, capensis-11)
cop(a-13, is-12)
root(ROOT-0, a-13)
nsubjpass(found-19, a-13)
amod(fish-16, marine-15)
prep_of(a-13, fish-16)
auxpass(found-19, is-18)
rcmod(a-13, found-19)
advmod(found-19, only-20)
det(coast-23, the-22)
prep_along(found-19, coast-23)
nn(Africa-26, South-25)
prep_of(coast-23, Africa-26)

In computing , the BIOS - LBR - Ã -- Â √ baÃ ≈ ÂªoÃ ... Â ... s - RBR - is an initialism stands for the Basic Input \/ Output System according to the IBM Personal Computer Technical Reference manual or the punctuational variants Basic Input Output System , or Basic Input-Output System .

prep_in(initialism-25, computing-2)
det(BIOS-5, the-4)
nsubj(initialism-25, BIOS-5)
dep(BIOS-5, LBR-7)
nn(RBR-21, Ã-9)
nn(ÂªoÃ-15, Â-11)
nn(ÂªoÃ-15, √-12)
nn(ÂªoÃ-15, baÃ-13)
nn(ÂªoÃ-15, ≈-14)
dep(RBR-21, ÂªoÃ-15)
dep(ÂªoÃ-15, Â-17)
dep(Â-17, s-19)
dep(LBR-7, RBR-21)
cop(initialism-25, is-23)
det(initialism-25, an-24)
root(ROOT-0, initialism-25)
rcmod(initialism-25, stands-26)
det(System-33, the-28)
nn(System-33, Basic-29)
nn(System-33, Input-30)
nn(System-33, \/-31)
nn(System-33, Output-32)
prep_for(stands-26, System-33)
prepc_according_to(stands-26, to-35)
det(manual-42, the-36)
nn(manual-42, IBM-37)
nn(manual-42, Personal-38)
nn(manual-42, Computer-39)
nn(manual-42, Technical-40)
nn(manual-42, Reference-41)
pobj(stands-26, manual-42)
det(variants-46, the-44)
amod(variants-46, punctuational-45)
conj_or(initialism-25, variants-46)
nn(System-50, Basic-47)
nn(System-50, Input-48)
nn(System-50, Output-49)
dep(variants-46, System-50)
nn(System-55, Basic-53)
nn(System-55, Input-Output-54)
conj_or(initialism-25, System-55)

The term Breast refers to the upper ventral region of an animalÃ cents Â • Â˙s torso , particularly that of mammals , including human beings .

det(Breast-3, The-1)
nn(Breast-3, term-2)
nsubj(refers-4, Breast-3)
root(ROOT-0, refers-4)
det(region-9, the-6)
amod(region-9, upper-7)
amod(region-9, ventral-8)
prep_to(refers-4, region-9)
det(torso-17, an-11)
number(cents-13, animalÃ-12)
num(torso-17, cents-13)
nn(torso-17, Â-14)
nn(torso-17, •-15)
nn(torso-17, Â˙s-16)
prep_of(region-9, torso-17)
advmod(torso-17, particularly-19)
dep(torso-17, that-20)
prep_of(that-20, mammals-22)
amod(beings-26, human-25)
prep_including(region-9, beings-26)

The Bunyip - LBR - usually translated as `` devil `` or `` spirit `` - RBR - is a mythical creature from Australian folklore .

det(Bunyip-2, The-1)
root(ROOT-0, Bunyip-2)
nsubj(creature-22, LBR-4)
advmod(translated-7, usually-6)
partmod(LBR-4, translated-7)
prep_as(translated-7, devil-10)
nn(RBR-17, spirit-14)
prep_as(translated-7, RBR-17)
conj_or(devil-10, RBR-17)
cop(creature-22, is-19)
det(creature-22, a-20)
amod(creature-22, mythical-21)
dep(Bunyip-2, creature-22)
amod(folklore-25, Australian-24)
prep_from(creature-22, folklore-25)

The Banshee - LBR - Ã -- Â √ bÃ ∞ ÂœnÃ ... Â ∞ iÃ -- Â - RBR - , from the Irish bean sÃ ∞ Â - LBR - `` woman of the sÃ ∞ Â -- de `` or `` woman of the fairy mounds `` - RBR - is a female spirit in Irish mythology , usually seen as an omen of death and a messenger from the Otherworld .

det(Banshee-2, The-1)
nsubj(LBR-31, Banshee-2)
dep(Banshee-2, LBR-4)
nn(Â-18, Ã-6)
nn(ÂœnÃ-12, Â-8)
nn(ÂœnÃ-12, √-9)
nn(ÂœnÃ-12, bÃ-10)
nn(ÂœnÃ-12, ∞-11)
dep(Â-18, ÂœnÃ-12)
nn(iÃ-16, Â-14)
nn(iÃ-16, ∞-15)
dep(ÂœnÃ-12, iÃ-16)
dep(LBR-4, Â-18)
dep(LBR-4, RBR-20)
det(Â-29, the-24)
amod(Â-29, Irish-25)
nn(Â-29, bean-26)
nn(Â-29, sÃ-27)
nn(Â-29, ∞-28)
prep_from(LBR-4, Â-29)
root(ROOT-0, LBR-31)
nsubj(seen-63, woman-34)
det(Â-39, the-36)
nn(Â-39, sÃ-37)
nn(Â-39, ∞-38)
prep_of(woman-34, Â-39)
dep(woman-34, de-41)
conj_or(woman-34, woman-45)
nsubj(seen-63, woman-45)
det(fairy-48, the-47)
prep_of(woman-45, fairy-48)
partmod(fairy-48, mounds-49)
nsubj(spirit-57, RBR-52)
cop(spirit-57, is-54)
det(spirit-57, a-55)
amod(spirit-57, female-56)
ccomp(mounds-49, spirit-57)
amod(mythology-60, Irish-59)
prep_in(spirit-57, mythology-60)
advmod(seen-63, usually-62)
parataxis(LBR-31, seen-63)
det(omen-66, an-65)
prep_as(seen-63, omen-66)
prep_of(omen-66, death-68)
det(messenger-71, a-70)
prep_as(seen-63, messenger-71)
conj_and(omen-66, messenger-71)
det(Otherworld-74, the-73)
prep_from(messenger-71, Otherworld-74)

A Brick is of ceramic material used in masonry construction , laid using mortar .

det(Brick-2, A-1)
nsubj(is-3, Brick-2)
root(ROOT-0, is-3)
amod(material-6, ceramic-5)
prep_of(is-3, material-6)
partmod(material-6, used-7)
nn(construction-10, masonry-9)
prep_in(used-7, construction-10)
partmod(construction-10, laid-12)
xcomp(laid-12, using-13)
dobj(using-13, mortar-14)

A Blizzard is a severe winter storm condition characterized by low temperatures , strong winds , and heavy blowing snow .

det(Blizzard-2, A-1)
nsubj(condition-8, Blizzard-2)
cop(condition-8, is-3)
det(condition-8, a-4)
amod(condition-8, severe-5)
nn(condition-8, winter-6)
nn(condition-8, storm-7)
root(ROOT-0, condition-8)
partmod(condition-8, characterized-9)
amod(temperatures-12, low-11)
agent(characterized-9, temperatures-12)
amod(winds-15, strong-14)
agent(characterized-9, winds-15)
conj_and(temperatures-12, winds-15)
amod(snow-20, heavy-18)
amod(snow-20, blowing-19)
agent(characterized-9, snow-20)
conj_and(temperatures-12, snow-20)

A Bikini or two-piece is a type of women 's swimsuit , characterized by two separate parts - one covering the breasts , the other the groin - LBR - and optionally the buttocks - RBR - , leaving an uncovered area between the two garments .

dep(Bikini-2, A-1)
nsubj(type-7, Bikini-2)
conj_or(Bikini-2, two-piece-4)
nsubj(type-7, two-piece-4)
cop(type-7, is-5)
det(type-7, a-6)
root(ROOT-0, type-7)
poss(swimsuit-11, women-9)
prep_of(type-7, swimsuit-11)
partmod(type-7, characterized-13)
num(parts-17, two-15)
amod(parts-17, separate-16)
agent(characterized-13, parts-17)
dep(parts-17, one-19)
partmod(one-19, covering-20)
det(breasts-22, the-21)
dobj(covering-20, breasts-22)
det(groin-27, the-24)
amod(groin-27, other-25)
det(groin-27, the-26)
agent(characterized-13, groin-27)
conj_and(parts-17, groin-27)
dep(groin-27, LBR-29)
agent(characterized-13, optionally-32)
advmod(parts-17, optionally-32)
conj_and(parts-17, optionally-32)
det(buttocks-34, the-33)
agent(characterized-13, buttocks-34)
conj_and(parts-17, buttocks-34)
dep(buttocks-34, RBR-36)
partmod(type-7, leaving-39)
det(area-42, an-40)
amod(area-42, uncovered-41)
dobj(leaving-39, area-42)
det(garments-46, the-44)
num(garments-46, two-45)
prep_between(area-42, garments-46)

The Balalaika - LBR - Ã ∆ Â ± Ã ∆ Â ° Ã ∆ Â '' Ã ∆ Â ° Ã ∆ Â '' Ã ∆ Â ° Ã ` Â ™ Ã ∆ Â ' Ã ∆ ÂºÃ ∆ Â ° , bÃ ≈ Â˙lÃ ≈ Â ∆ Ã -- Â √ lajkÃ ≈ Â˙ - RBR - - LBR - also Balabaika , Ã ∆ Â ± Ã ∆ Â ° Ã ∆ Â '' Ã ∆ Â ° Ã ∆ Â ± Ã ∆ Â ° Ã ` Â ™ Ã ∆ Â ' Ã ∆ ÂºÃ ∆ Â ° - RBR - - is a stringed instrument of Russian origin , with a characteristic triangular body and 3 strings - LBR - or sometimes 6 , in 3 courses - RBR - .

det(Balalaika-2, The-1)
nsubj(instrument-112, Balalaika-2)
dep(Balalaika-2, LBR-4)
nn(Â-16, Ã-6)
nn(Â-16, ∆-7)
nn(Â-16, Â-8)
nn(Â-16, ±-9)
nn(Â-16, Ã-10)
nn(Â-16, ∆-11)
nn(Â-16, Â-12)
nn(Â-16, °-13)
nn(Â-16, Ã-14)
nn(Â-16, ∆-15)
dep(Balalaika-2, Â-16)
nn(Â-24, Ã-18)
nn(Â-24, ∆-19)
nn(Â-24, Â-20)
nn(Â-24, °-21)
nn(Â-24, Ã-22)
nn(Â-24, ∆-23)
dep(Balalaika-2, Â-24)
nn(Â-36, Ã-26)
nn(Â-36, ∆-27)
nn(Â-36, Â-28)
nn(Â-36, °-29)
nn(Â-36, Ã-30)
nn(Â-36, Â-32)
nn(Â-36, ™-33)
nn(Â-36, Ã-34)
nn(Â-36, ∆-35)
dep(Balalaika-2, Â-36)
nn(°-43, Ã-38)
nn(°-43, ∆-39)
nn(°-43, ÂºÃ-40)
nn(°-43, ∆-41)
nn(°-43, Â-42)
dep(Balalaika-2, °-43)
nn(Ã-51, bÃ-45)
nn(Ã-51, ≈-46)
nn(Ã-51, Â˙lÃ-47)
nn(Ã-51, ≈-48)
nn(Ã-51, Â-49)
nn(Ã-51, ∆-50)
appos(°-43, Ã-51)
nn(Â˙-57, Â-53)
nn(Â˙-57, √-54)
nn(Â˙-57, lajkÃ-55)
nn(Â˙-57, ≈-56)
dep(°-43, Â˙-57)
dep(°-43, RBR-59)
dep(°-43, LBR-62)
advmod(°-43, also-64)
dep(°-43, Balabaika-65)
nn(Ã-75, Ã-67)
nn(Ã-75, ∆-68)
nn(Ã-75, Â-69)
nn(Ã-75, ±-70)
nn(Ã-75, Ã-71)
nn(Ã-75, ∆-72)
nn(Ã-75, Â-73)
nn(Ã-75, °-74)
nsubj(∆-76, Ã-75)
parataxis(instrument-112, ∆-76)
nn(Ã-91, Â-77)
nn(Ã-91, Ã-79)
nn(Ã-91, ∆-80)
nn(Ã-91, Â-81)
nn(Ã-91, °-82)
nn(Ã-91, Ã-83)
nn(Ã-91, ∆-84)
nn(Ã-91, Â-85)
nn(Ã-91, ±-86)
nn(Ã-91, Ã-87)
nn(Ã-91, ∆-88)
nn(Ã-91, Â-89)
nn(Ã-91, °-90)
dep(°-104, Ã-91)
nn(Â-97, Â-93)
nn(Â-97, ™-94)
nn(Â-97, Ã-95)
nn(Â-97, ∆-96)
poss(°-104, Â-97)
nn(°-104, Ã-99)
nn(°-104, ∆-100)
nn(°-104, ÂºÃ-101)
nn(°-104, ∆-102)
nn(°-104, Â-103)
dep(∆-76, °-104)
dep(°-104, RBR-106)
cop(instrument-112, is-109)
det(instrument-112, a-110)
amod(instrument-112, stringed-111)
root(ROOT-0, instrument-112)
amod(origin-115, Russian-114)
prep_of(instrument-112, origin-115)
det(body-121, a-118)
amod(body-121, characteristic-119)
nn(body-121, triangular-120)
prep_with(instrument-112, body-121)
num(strings-124, 3-123)
prep_with(instrument-112, strings-124)
conj_and(body-121, strings-124)
nn(RBR-136, LBR-126)
dep(6-130, or-128)
advmod(6-130, sometimes-129)
dep(RBR-136, 6-130)
num(courses-134, 3-133)
prep_in(6-130, courses-134)
dep(body-121, RBR-136)

Edward Teach - LBR - tÃ ≈ Â˝tÃ ... Â ∞ ; c. 1689 Ã cents Â • Â „ November 22 , 1718 - RBR - , better known as Blackbeard , was a notorious English pirate in the Caribbean Sea and western Atlantic during the early 18th century , a period referred to as the Golden Age of Piracy .

nn(Teach-2, Edward-1)
nsubj(pirate-38, Teach-2)
dep(Teach-2, LBR-4)
nn(Â˝tÃ-8, tÃ-6)
nn(Â˝tÃ-8, ≈-7)
dep(Teach-2, Â˝tÃ-8)
nn(∞-11, Â-10)
dep(Â˝tÃ-8, ∞-11)
number(1689-14, c.-13)
num(cents-16, 1689-14)
nn(cents-16, Ã-15)
dep(Teach-2, cents-16)
nn(„-20, Â-17)
nn(„-20, •-18)
nn(„-20, Â-19)
dep(cents-16, „-20)
dep(cents-16, November-21)
num(November-21, 22-22)
num(November-21, 1718-24)
dep(Teach-2, RBR-26)
advmod(known-30, better-29)
ccomp(pirate-38, known-30)
prep_as(known-30, Blackbeard-32)
cop(pirate-38, was-34)
det(pirate-38, a-35)
amod(pirate-38, notorious-36)
amod(pirate-38, English-37)
root(ROOT-0, pirate-38)
det(Sea-42, the-40)
nn(Sea-42, Caribbean-41)
prep_in(pirate-38, Sea-42)
nn(Atlantic-45, western-44)
prep_in(pirate-38, Atlantic-45)
conj_and(Sea-42, Atlantic-45)
det(century-50, the-47)
amod(century-50, early-48)
amod(century-50, 18th-49)
prep_during(pirate-38, century-50)
det(period-53, a-52)
appos(century-50, period-53)
partmod(period-53, referred-54)
advmod(Age-59, as-56)
det(Age-59, the-57)
amod(Age-59, Golden-58)
prep_to(referred-54, Age-59)
prep_of(Age-59, Piracy-61)

A Ballad is a poem usually set to music ; thus , it often is a story told in a song .

det(Ballad-2, A-1)
nsubj(poem-5, Ballad-2)
cop(poem-5, is-3)
det(poem-5, a-4)
root(ROOT-0, poem-5)
advmod(set-7, usually-6)
partmod(poem-5, set-7)
prep_to(set-7, music-9)
advmod(story-17, thus-11)
nsubj(story-17, it-13)
advmod(story-17, often-14)
cop(story-17, is-15)
det(story-17, a-16)
parataxis(poem-5, story-17)
partmod(story-17, told-18)
det(song-21, a-20)
prep_in(told-18, song-21)

Bison is a taxonomic group containing six species of large even-toed ungulates within the subfamily Bovinae .

nsubj(group-5, Bison-1)
cop(group-5, is-2)
det(group-5, a-3)
amod(group-5, taxonomic-4)
root(ROOT-0, group-5)
partmod(group-5, containing-6)
num(species-8, six-7)
dobj(containing-6, species-8)
amod(ungulates-12, large-10)
amod(ungulates-12, even-toed-11)
prep_of(species-8, ungulates-12)
det(Bovinae-16, the-14)
amod(Bovinae-16, subfamily-15)
prep_within(containing-6, Bovinae-16)

A Bogie - LBR - Ã -- Â √ boÃ ... Â ... gi - RBR - - LBR - BÃ ∑ Â ` - gÃ ≥ Â „ - RBR - is a wheeled wagon or trolley .

det(Bogie-2, A-1)
nsubj(wagon-36, Bogie-2)
dep(Bogie-2, LBR-4)
dep(Bogie-2, Ã-6)
nn(boÃ-10, Â-8)
nn(boÃ-10, √-9)
dep(Ã-6, boÃ-10)
dep(Bogie-2, Â-12)
dep(Â-12, gi-14)
dep(gi-14, RBR-16)
dep(Bogie-2, LBR-19)
nn(„-29, BÃ-21)
nn(„-29, ∑-22)
nn(„-29, Â-23)
nn(„-29, gÃ-26)
nn(„-29, ≥-27)
nn(„-29, Â-28)
dep(LBR-19, „-29)
dep(Bogie-2, RBR-31)
cop(wagon-36, is-33)
det(wagon-36, a-34)
amod(wagon-36, wheeled-35)
root(ROOT-0, wagon-36)
conj_or(wagon-36, trolley-38)

A Broch is an Iron Age drystone hollow-walled structure of a type found only in Scotland .

det(Broch-2, A-1)
nsubj(structure-9, Broch-2)
cop(structure-9, is-3)
det(structure-9, an-4)
nn(structure-9, Iron-5)
nn(structure-9, Age-6)
nn(structure-9, drystone-7)
amod(structure-9, hollow-walled-8)
root(ROOT-0, structure-9)
det(type-12, a-11)
prep_of(structure-9, type-12)
partmod(type-12, found-13)
advmod(found-13, only-14)
prep_in(found-13, Scotland-16)

A Bat is a mammal in the order Chiroptera .

det(Bat-2, A-1)
nsubj(mammal-5, Bat-2)
cop(mammal-5, is-3)
det(mammal-5, a-4)
root(ROOT-0, mammal-5)
det(Chiroptera-9, the-7)
nn(Chiroptera-9, order-8)
prep_in(mammal-5, Chiroptera-9)

In computer science , a B-tree is a tree data structure that keeps data sorted and allows searches , insertions , and deletions in logarithmic amortized time .

nn(science-3, computer-2)
prep_in(structure-11, science-3)
det(B-tree-6, a-5)
nsubj(structure-11, B-tree-6)
cop(structure-11, is-7)
det(structure-11, a-8)
nn(structure-11, tree-9)
nn(structure-11, data-10)
root(ROOT-0, structure-11)
nsubj(keeps-13, structure-11)
nsubj(allows-17, structure-11)
rcmod(structure-11, keeps-13)
dobj(keeps-13, data-14)
partmod(data-14, sorted-15)
rcmod(structure-11, allows-17)
conj_and(keeps-13, allows-17)
dobj(allows-17, searches-18)
dobj(allows-17, insertions-20)
conj_and(searches-18, insertions-20)
dobj(allows-17, deletions-23)
conj_and(searches-18, deletions-23)
amod(time-27, logarithmic-25)
amod(time-27, amortized-26)
prep_in(allows-17, time-27)

Bayonne - LBR - French : Bayonne bajÃ ≈ Â ‰ n ; Gascon Occitan and Basque : Baiona - RBR - is a city and commune of southwest France at the confluence of the Nive and Adour rivers , in the PyrÃ ∞ Â © nÃ ∞ Â © es-Atlantiques dÃ ∞ Â © partement , of which it is a sous-prÃ ∞ Â © fecture .

nsubj(city-25, Bayonne-1)
dep(Bayonne-1, LBR-3)
dep(LBR-3, French-5)
nn(‰-11, Bayonne-7)
nn(‰-11, bajÃ-8)
nn(‰-11, ≈-9)
nn(‰-11, Â-10)
dep(LBR-3, ‰-11)
dep(‰-11, n-12)
nn(Occitan-15, Gascon-14)
dep(LBR-3, Occitan-15)
dep(LBR-3, Basque-17)
conj_and(Occitan-15, Basque-17)
dep(LBR-3, Baiona-19)
dep(Baiona-19, RBR-21)
cop(city-25, is-23)
det(city-25, a-24)
root(ROOT-0, city-25)
conj_and(city-25, commune-27)
amod(France-30, southwest-29)
prep_of(city-25, France-30)
det(confluence-33, the-32)
prep_at(city-25, confluence-33)
det(rivers-39, the-35)
nn(rivers-39, Nive-36)
conj_and(Nive-36, Adour-38)
nn(rivers-39, Adour-38)
prep_of(confluence-33, rivers-39)
det(dÃ-52, the-42)
nn(dÃ-52, PyrÃ-43)
nn(dÃ-52, ∞-44)
nn(dÃ-52, Â-45)
nn(dÃ-52, ©-46)
nn(dÃ-52, nÃ-47)
nn(dÃ-52, ∞-48)
nn(dÃ-52, Â-49)
nn(dÃ-52, ©-50)
amod(dÃ-52, es-Atlantiques-51)
prep_in(city-25, dÃ-52)
nn(partement-56, ∞-53)
nn(partement-56, Â-54)
nn(partement-56, ©-55)
attr(city-25, partement-56)
rel(fecture-67, which-59)
nsubj(fecture-67, it-60)
cop(fecture-67, is-61)
det(fecture-67, a-62)
amod(fecture-67, sous-prÃ-63)
nn(fecture-67, ∞-64)
nn(fecture-67, Â-65)
nn(fecture-67, ©-66)
rcmod(partement-56, fecture-67)

Bacillus is a genus of rod-shaped , beta-hemolytic Gram-positive bacteria and a member of the division Firmicutes .

nsubj(genus-4, Bacillus-1)
cop(genus-4, is-2)
det(genus-4, a-3)
root(ROOT-0, genus-4)
amod(bacteria-10, rod-shaped-6)
amod(bacteria-10, beta-hemolytic-8)
amod(bacteria-10, Gram-positive-9)
prep_of(genus-4, bacteria-10)
det(member-13, a-12)
conj_and(genus-4, member-13)
det(Firmicutes-17, the-15)
nn(Firmicutes-17, division-16)
prep_of(member-13, Firmicutes-17)

A Bestiary , or Bestiarum vocabulum is a compendium of beasts .

det(Bestiary-2, A-1)
nsubj(compendium-9, Bestiary-2)
nn(vocabulum-6, Bestiarum-5)
conj_or(Bestiary-2, vocabulum-6)
nsubj(compendium-9, vocabulum-6)
cop(compendium-9, is-7)
det(compendium-9, a-8)
root(ROOT-0, compendium-9)
prep_of(compendium-9, beasts-11)

The Borzoi is a breed of domestic dog - LBR - canis lupus familiaris - RBR - also called the Russian Wolfhound .

det(Borzoi-2, The-1)
nsubj(breed-5, Borzoi-2)
cop(breed-5, is-3)
det(breed-5, a-4)
dep(LBR-10, breed-5)
amod(dog-8, domestic-7)
prep_of(breed-5, dog-8)
root(ROOT-0, LBR-10)
amod(familiaris-14, canis-12)
nn(familiaris-14, lupus-13)
dep(LBR-10, familiaris-14)
dep(familiaris-14, RBR-16)
advmod(called-19, also-18)
dep(LBR-10, called-19)
det(Wolfhound-22, the-20)
amod(Wolfhound-22, Russian-21)
dobj(called-19, Wolfhound-22)

The Basenji is a breed of hunting dog that originates in central Africa .

det(Basenji-2, The-1)
nsubj(breed-5, Basenji-2)
cop(breed-5, is-3)
det(breed-5, a-4)
root(ROOT-0, breed-5)
nsubj(originates-10, breed-5)
nn(dog-8, hunting-7)
prep_of(breed-5, dog-8)
rcmod(breed-5, originates-10)
amod(Africa-13, central-12)
prep_in(originates-10, Africa-13)

A Balloon is a flexible bag filled with a type of gas , such as helium , hydrogen , nitrous oxide or air .

det(Balloon-2, A-1)
nsubj(bag-6, Balloon-2)
cop(bag-6, is-3)
det(bag-6, a-4)
amod(bag-6, flexible-5)
root(ROOT-0, bag-6)
partmod(bag-6, filled-7)
det(type-10, a-9)
prep_with(filled-7, type-10)
prep_of(type-10, gas-12)
nn(oxide-21, helium-16)
prep_such_as(type-10, hydrogen-18)
conj_or(oxide-21, hydrogen-18)
prep_such_as(type-10, nitrous-20)
conj_or(oxide-21, nitrous-20)
prep_such_as(type-10, oxide-21)
prep_such_as(type-10, air-23)
conj_or(oxide-21, air-23)

A Biome is a climatically and geographically defined area of ecologically similar climatic conditions such as communities plants , animals , and soil organisms , often referred to as ecosystems .

det(Biome-2, A-1)
nsubj(climatically-5, Biome-2)
cop(climatically-5, is-3)
det(climatically-5, a-4)
root(ROOT-0, climatically-5)
conj_and(climatically-5, geographically-7)
partmod(climatically-5, defined-8)
dobj(defined-8, area-9)
advmod(similar-12, ecologically-11)
amod(conditions-14, similar-12)
amod(conditions-14, climatic-13)
prep_of(area-9, conditions-14)
xsubj(to-28, conditions-14)
nn(plants-18, communities-17)
prep_such_as(conditions-14, plants-18)
prep_such_as(conditions-14, animals-20)
conj_and(plants-18, animals-20)
nn(organisms-24, soil-23)
prep_such_as(conditions-14, organisms-24)
conj_and(plants-18, organisms-24)
advmod(referred-27, often-26)
partmod(conditions-14, referred-27)
xcomp(referred-27, to-28)
prep_as(referred-27, ecosystems-30)

The BeBox was a short-lived dual processor PC , offered by Be Inc. to run their own operating system , BeOS .

det(BeBox-2, The-1)
nsubj(PC-8, BeBox-2)
cop(PC-8, was-3)
det(PC-8, a-4)
amod(PC-8, short-lived-5)
amod(PC-8, dual-6)
nn(PC-8, processor-7)
root(ROOT-0, PC-8)
xsubj(run-15, PC-8)
partmod(PC-8, offered-10)
nn(Inc.-13, Be-12)
agent(offered-10, Inc.-13)
aux(run-15, to-14)
xcomp(offered-10, run-15)
poss(system-19, their-16)
amod(system-19, own-17)
amod(system-19, operating-18)
dobj(run-15, system-19)
appos(system-19, BeOS-21)

The Balkans is the historic and geographic name used to describe a region of southeastern Europe .

det(Balkans-2, The-1)
nsubj(name-8, Balkans-2)
cop(name-8, is-3)
det(name-8, the-4)
amod(name-8, historic-5)
conj_and(historic-5, geographic-7)
amod(name-8, geographic-7)
root(ROOT-0, name-8)
xsubj(describe-11, name-8)
partmod(name-8, used-9)
aux(describe-11, to-10)
xcomp(used-9, describe-11)
det(region-13, a-12)
dobj(describe-11, region-13)
amod(Europe-16, southeastern-15)
prep_of(region-13, Europe-16)

A Barrister is a lawyer found in many common law jurisdictions which employ a split profession - LBR - as opposed to a fused profession - RBR - in relation to legal representation .

det(Barrister-2, A-1)
nsubj(lawyer-5, Barrister-2)
cop(lawyer-5, is-3)
det(lawyer-5, a-4)
root(ROOT-0, lawyer-5)
partmod(lawyer-5, found-6)
amod(jurisdictions-11, many-8)
amod(jurisdictions-11, common-9)
nn(jurisdictions-11, law-10)
prep_in(found-6, jurisdictions-11)
nsubj(employ-13, jurisdictions-11)
rcmod(jurisdictions-11, employ-13)
det(profession-16, a-14)
nn(profession-16, split-15)
dobj(employ-13, profession-16)
nn(RBR-27, LBR-18)
advmod(opposed-21, as-20)
dep(RBR-27, opposed-21)
det(profession-25, a-23)
amod(profession-25, fused-24)
prep_to(opposed-21, profession-25)
dep(profession-16, RBR-27)
prep_in(employ-13, relation-30)
amod(representation-33, legal-32)
prep_to(relation-30, representation-33)

A Borough is an administrative division of various countries .

det(Borough-2, A-1)
nsubj(division-6, Borough-2)
cop(division-6, is-3)
det(division-6, an-4)
amod(division-6, administrative-5)
root(ROOT-0, division-6)
amod(countries-9, various-8)
prep_of(division-6, countries-9)

A Breviary - LBR - from Latin brevis , ` short ' or ` concise ' - RBR - is a liturgical book of the Latin liturgical rites of Catholic Church containing the public or canonical prayers , hymns , the Psalms , readings , and notations for everyday use , especially for priests , in the Divine NPfice - LBR - i. e. , at the canonical hours or Liturgy of the Hours , the Christians ' daily prayer - RBR - .

det(Breviary-2, A-1)
nsubj(book-23, Breviary-2)
dep(Breviary-2, LBR-4)
amod(brevis-8, Latin-7)
prep_from(Breviary-2, brevis-8)
amod(Breviary-2, short-11)
conj_or(concise-15, short-11)
amod(Breviary-2, concise-15)
dep(Breviary-2, RBR-18)
cop(book-23, is-20)
det(book-23, a-21)
amod(book-23, liturgical-22)
root(ROOT-0, book-23)
det(rites-28, the-25)
amod(rites-28, Latin-26)
amod(rites-28, liturgical-27)
prep_of(book-23, rites-28)
nn(Church-31, Catholic-30)
prep_of(book-23, Church-31)
partmod(Church-31, containing-32)
det(prayers-37, the-33)
amod(prayers-37, public-34)
conj_or(public-34, canonical-36)
amod(prayers-37, canonical-36)
dobj(containing-32, prayers-37)
dobj(containing-32, hymns-39)
conj_and(prayers-37, hymns-39)
det(Psalms-42, the-41)
dobj(containing-32, Psalms-42)
conj_and(prayers-37, Psalms-42)
dobj(containing-32, readings-44)
conj_and(prayers-37, readings-44)
dobj(containing-32, notations-47)
conj_and(prayers-37, notations-47)
amod(use-50, everyday-49)
prep_for(notations-47, use-50)
advmod(notations-47, especially-52)
prep(notations-47, for-53)
dep(LBR-61, priests-54)
dep(priests-54, in-56)
det(NPfice-59, the-57)
nn(NPfice-59, Divine-58)
pobj(in-56, NPfice-59)
dep(for-53, LBR-61)
nn(e.-64, i.-63)
dep(RBR-82, e.-64)
dep(e.-64, at-66)
det(hours-69, the-67)
amod(hours-69, canonical-68)
pobj(at-66, hours-69)
pobj(at-66, Liturgy-71)
conj_or(hours-69, Liturgy-71)
det(Hours-74, the-73)
prep_of(Liturgy-71, Hours-74)
det(Christians-77, the-76)
poss(prayer-80, Christians-77)
amod(prayer-80, daily-79)
appos(Hours-74, prayer-80)
dep(LBR-61, RBR-82)

A Bildungsroman - LBR - Ã -- Â √ bÃ ≈ ÂªldÃ ... Â ... Ã ∑ Â -- s .

nn(Ã-6, A-1)
nn(Ã-6, Bildungsroman-2)
dep(Ã-6, LBR-4)
nsubj(s-20, Ã-6)
nn(ÂªldÃ-12, Â-8)
nn(ÂªldÃ-12, √-9)
nn(ÂªldÃ-12, bÃ-10)
nn(ÂªldÃ-12, ≈-11)
dep(Ã-6, ÂªldÃ-12)
dep(ÂªldÃ-12, Â-14)
nn(Â-18, Ã-16)
nn(Â-18, ∑-17)
dep(Â-14, Â-18)
root(ROOT-0, s-20)

roÃ -- Â ` maÃ -- Â ∆ n ; `` novel of formation `` - RBR - is a novelistic genre that arose during the German Enlightenment .

nsubj(genre-22, roÃ-1)
dep(roÃ-1, Â-3)
dep(Â-3, maÃ-5)
nn(∆-8, Â-7)
dep(Â-3, ∆-8)
dep(∆-8, n-9)
dep(Â-3, novel-12)
prep_of(novel-12, formation-14)
dep(formation-14, RBR-17)
cop(genre-22, is-19)
det(genre-22, a-20)
amod(genre-22, novelistic-21)
root(ROOT-0, genre-22)
nsubj(arose-24, genre-22)
rcmod(genre-22, arose-24)
det(Enlightenment-28, the-26)
amod(Enlightenment-28, German-27)
prep_during(arose-24, Enlightenment-28)

A Bachelor is a man above the age of majority who has never been married - LBR - see single - RBR - .

det(Bachelor-2, A-1)
nsubj(man-5, Bachelor-2)
cop(man-5, is-3)
det(man-5, a-4)
dep(see-19, man-5)
det(age-8, the-7)
prep_above(man-5, age-8)
prep_of(age-8, majority-10)
nsubjpass(married-15, majority-10)
aux(married-15, has-12)
neg(married-15, never-13)
auxpass(married-15, been-14)
rcmod(majority-10, married-15)
dep(majority-10, LBR-17)
root(ROOT-0, see-19)
nsubj(see-19, single-20)
dep(single-20, RBR-22)

Banacek - LBR - one of the rotating NBC Mystery Movie series - RBR - was a short-lived , light-hearted detective TV series starring George Peppard on NBC from 1972 to 1974 .

nsubj(series-23, Banacek-1)
nn(RBR-14, LBR-3)
dep(RBR-14, one-5)
det(series-12, the-7)
nn(series-12, rotating-8)
nn(series-12, NBC-9)
nn(series-12, Mystery-10)
nn(series-12, Movie-11)
prep_of(one-5, series-12)
dep(Banacek-1, RBR-14)
cop(series-23, was-16)
det(series-23, a-17)
amod(series-23, short-lived-18)
amod(series-23, light-hearted-20)
nn(series-23, detective-21)
nn(series-23, TV-22)
root(ROOT-0, series-23)
partmod(series-23, starring-24)
nn(Peppard-26, George-25)
dobj(starring-24, Peppard-26)
prep_on(Peppard-26, NBC-28)
num(1974-32, 1972-30)
dep(1974-32, to-31)
prep_from(starring-24, 1974-32)

A Bokken - LBR - lang , bok-LBR-u - RBR - , `` wood `` , and ken , `` sword `` - RBR - , is a wooden Japanese sword used for training , usually the size and shape of a katana , but sometimes shaped like other swords , such as the wakizashi and tantÃ ∑ ÂŸ .

det(Bokken-2, A-1)
nsubj(sword-31, Bokken-2)
dep(Bokken-2, LBR-4)
dep(LBR-4, lang-6)
partmod(lang-6, bok-LBR-u-8)
dep(bok-LBR-u-8, RBR-10)
appos(RBR-10, wood-14)
dep(Bokken-2, ken-18)
conj_and(LBR-4, ken-18)
nn(RBR-24, sword-21)
appos(ken-18, RBR-24)
cop(sword-31, is-27)
det(sword-31, a-28)
amod(sword-31, wooden-29)
amod(sword-31, Japanese-30)
root(ROOT-0, sword-31)
partmod(sword-31, used-32)
prep_for(used-32, training-34)
advmod(training-34, usually-36)
det(size-38, the-37)
dep(training-34, size-38)
dep(training-34, shape-40)
conj_and(size-38, shape-40)
det(katana-43, a-42)
prep_of(size-38, katana-43)
dep(shaped-47, but-45)
advmod(shaped-47, sometimes-46)
dep(katana-43, shaped-47)
amod(swords-50, other-49)
prep_like(shaped-47, swords-50)
det(wakizashi-55, the-54)
prep_such_as(katana-43, wakizashi-55)
nn(ÂŸ-59, tantÃ-57)
nn(ÂŸ-59, ∑-58)
prep_such_as(katana-43, ÂŸ-59)
conj_and(wakizashi-55, ÂŸ-59)

A Beast is an animal , especially a four-legged mammal .

det(Beast-2, A-1)
nsubj(animal-5, Beast-2)
cop(animal-5, is-3)
det(animal-5, an-4)
root(ROOT-0, animal-5)
advmod(animal-5, especially-7)
det(mammal-10, a-8)
amod(mammal-10, four-legged-9)
dep(animal-5, mammal-10)

A Bain-marie - LBR - also known as a double boiler - RBR - is a French term for a piece of equipment used in science , industry , and cooking to heat materials gently and gradually to fixed temperatures , or to keep materials warm over a period of time .

det(Bain-marie-2, A-1)
nsubj(known-7, Bain-marie-2)
nsubj(cooking-31, Bain-marie-2)
dep(Bain-marie-2, LBR-4)
advmod(known-7, also-6)
root(ROOT-0, known-7)
mark(term-18, as-8)
det(boiler-11, a-9)
amod(boiler-11, double-10)
nsubj(term-18, boiler-11)
dep(boiler-11, RBR-13)
cop(term-18, is-15)
det(term-18, a-16)
amod(term-18, French-17)
advcl(known-7, term-18)
det(piece-21, a-20)
prep_for(term-18, piece-21)
prep_of(piece-21, equipment-23)
partmod(equipment-23, used-24)
prep_in(used-24, science-26)
appos(science-26, industry-28)
conj_and(known-7, cooking-31)
aux(heat-33, to-32)
ccomp(cooking-31, heat-33)
dobj(heat-33, materials-34)
advmod(heat-33, gently-35)
advmod(heat-33, gradually-37)
conj_and(gently-35, gradually-37)
amod(temperatures-40, fixed-39)
prep_to(heat-33, temperatures-40)
aux(keep-44, to-43)
ccomp(cooking-31, keep-44)
conj_or(heat-33, keep-44)
nsubj(warm-46, materials-45)
xcomp(keep-44, warm-46)
det(period-49, a-48)
prep_over(warm-46, period-49)
prep_of(period-49, time-51)

Calculus - LBR - Latin , Calculus , a small stone used for counting - RBR - is a branch of mathematics that includes the study of limits , derivatives , integrals , and infinite series , and constitutes a major part of modern university education .

root(ROOT-0, Calculus-1)
dep(Calculus-1, LBR-3)
nn(Calculus-7, Latin-5)
dep(LBR-3, Calculus-7)
det(stone-11, a-9)
amod(stone-11, small-10)
appos(LBR-3, stone-11)
partmod(stone-11, used-12)
mark(branch-20, for-13)
nsubj(branch-20, counting-14)
dep(counting-14, RBR-16)
cop(branch-20, is-18)
det(branch-20, a-19)
advcl(used-12, branch-20)
prep_of(branch-20, mathematics-22)
nsubj(includes-24, mathematics-22)
nsubj(constitutes-39, mathematics-22)
rcmod(mathematics-22, includes-24)
det(study-26, the-25)
dobj(includes-24, study-26)
nn(integrals-32, limits-28)
dep(integrals-32, derivatives-30)
prep_of(study-26, integrals-32)
nn(series-36, infinite-35)
prep_of(study-26, series-36)
conj_and(integrals-32, series-36)
rcmod(mathematics-22, constitutes-39)
conj_and(includes-24, constitutes-39)
det(part-42, a-40)
amod(part-42, major-41)
dobj(constitutes-39, part-42)
amod(education-46, modern-44)
nn(education-46, university-45)
prep_of(part-42, education-46)

Classics or Classical Studies is the branch of the Humanities dealing with the languages , literature , history , art , and other aspects of the ancient Mediterranean world ; especially Ancient Greece and Ancient Rome during the time known as classical antiquity , roughly spanning from the Ancient Greek Bronze Age in 1000 BC to the Dark Ages circa AD 500 .

nsubj(branch-7, Classics-1)
nn(Studies-4, Classical-3)
conj_or(Classics-1, Studies-4)
nsubj(branch-7, Studies-4)
cop(branch-7, is-5)
det(branch-7, the-6)
root(ROOT-0, branch-7)
det(Humanities-10, the-9)
prep_of(branch-7, Humanities-10)
partmod(Humanities-10, dealing-11)
det(languages-14, the-13)
prep_with(dealing-11, languages-14)
prep_with(dealing-11, literature-16)
conj_and(languages-14, literature-16)
prep_with(dealing-11, history-18)
conj_and(languages-14, history-18)
prep_with(dealing-11, art-20)
conj_and(languages-14, art-20)
amod(aspects-24, other-23)
prep_with(dealing-11, aspects-24)
conj_and(languages-14, aspects-24)
det(world-29, the-26)
amod(world-29, ancient-27)
nn(world-29, Mediterranean-28)
prep_of(aspects-24, world-29)
advmod(Greece-33, especially-31)
amod(Greece-33, Ancient-32)
nsubj(known-40, Greece-33)
nn(Rome-36, Ancient-35)
conj_and(Greece-33, Rome-36)
nsubj(known-40, Rome-36)
det(time-39, the-38)
prep_during(Greece-33, time-39)
parataxis(branch-7, known-40)
amod(antiquity-43, classical-42)
prep_as(known-40, antiquity-43)
advmod(spanning-46, roughly-45)
xcomp(known-40, spanning-46)
det(Age-52, the-48)
amod(Age-52, Ancient-49)
amod(Age-52, Greek-50)
nn(Age-52, Bronze-51)
prep_from(spanning-46, Age-52)
nn(BC-55, 1000-54)
prep_in(Age-52, BC-55)
det(AD-61, the-57)
amod(AD-61, Dark-58)
amod(AD-61, Ages-59)
nn(AD-61, circa-60)
prep_to(spanning-46, AD-61)
num(AD-61, 500-62)

A Casino is , in the modern sense of the word a facility that houses and accommodates certain types of gambling activities .

det(Casino-2, A-1)
nsubj(facility-13, Casino-2)
cop(facility-13, is-3)
det(sense-8, the-6)
amod(sense-8, modern-7)
prep_in(facility-13, sense-8)
det(word-11, the-10)
prep_of(sense-8, word-11)
det(facility-13, a-12)
root(ROOT-0, facility-13)
nsubj(houses-15, facility-13)
nsubj(accommodates-17, facility-13)
rcmod(facility-13, houses-15)
rcmod(facility-13, accommodates-17)
conj_and(houses-15, accommodates-17)
amod(types-19, certain-18)
dobj(houses-15, types-19)
amod(activities-22, gambling-21)
prep_of(types-19, activities-22)

In communications , a Code is a rule for converting a piece of information - LBR - for example , a letter , word , phrase , or gesture - RBR - into another form or representation - LBR - one sign into another sign - RBR - , not necessarily of the same type .

prep_in(rule-8, communications-2)
det(Code-5, a-4)
nsubj(rule-8, Code-5)
cop(rule-8, is-6)
det(rule-8, a-7)
root(ROOT-0, rule-8)
prepc_for(rule-8, converting-10)
det(piece-12, a-11)
dobj(converting-10, piece-12)
prep_of(piece-12, information-14)
dep(rule-8, LBR-16)
dep(LBR-16, for-18)
pobj(for-18, example-19)
det(letter-22, a-21)
appos(example-19, letter-22)
appos(example-19, word-24)
conj_or(letter-22, word-24)
appos(example-19, phrase-26)
conj_or(letter-22, phrase-26)
appos(example-19, gesture-29)
conj_or(letter-22, gesture-29)
dep(LBR-39, RBR-31)
dep(RBR-31, into-33)
det(form-35, another-34)
pobj(into-33, form-35)
pobj(into-33, representation-37)
conj_or(form-35, representation-37)
dep(LBR-16, LBR-39)
num(sign-42, one-41)
dep(not-50, sign-42)
det(sign-45, another-44)
prep_into(sign-42, sign-45)
dep(sign-45, RBR-47)
dep(LBR-39, not-50)
advmod(of-52, necessarily-51)
dep(not-50, of-52)
det(type-55, the-53)
amod(type-55, same-54)
pobj(of-52, type-55)

The Callitrichinae - LBR - synonym Hapalinae - RBR - are a subfamily within the family Cebidae , one of the four families of New World monkeys .

det(Callitrichinae-2, The-1)
root(ROOT-0, Callitrichinae-2)
dep(Callitrichinae-2, LBR-4)
nn(Hapalinae-7, synonym-6)
dep(LBR-4, Hapalinae-7)
dep(Callitrichinae-2, RBR-9)
cop(subfamily-13, are-11)
det(subfamily-13, a-12)
dep(Callitrichinae-2, subfamily-13)
det(family-16, the-15)
prep_within(subfamily-13, family-16)
nsubj(subfamily-13, Cebidae-17)
appos(Cebidae-17, one-19)
det(families-23, the-21)
num(families-23, four-22)
prep_of(one-19, families-23)
nn(monkeys-27, New-25)
nn(monkeys-27, World-26)
prep_of(families-23, monkeys-27)

The Cebidae form one of the four families of New World monkeys now recognized .

det(one-4, The-1)
nn(one-4, Cebidae-2)
nn(one-4, form-3)
nsubj(recognized-14, one-4)
det(families-8, the-6)
num(families-8, four-7)
prep_of(one-4, families-8)
nn(monkeys-12, New-10)
nn(monkeys-12, World-11)
prep_of(families-8, monkeys-12)
advmod(recognized-14, now-13)
root(ROOT-0, recognized-14)

The Coast is defined as the part of the land adjoining or near the ocean .

det(Coast-2, The-1)
nsubjpass(defined-4, Coast-2)
nsubjpass(defined-4', Coast-2)
auxpass(defined-4, is-3)
root(ROOT-0, defined-4)
conj_or(defined-4, defined-4')
det(part-7, the-6)
prep_as(defined-4, part-7)
det(adjoining-11, the-9)
nn(adjoining-11, land-10)
prep_of(part-7, adjoining-11)
det(ocean-15, the-14)
prep_near(defined-4', ocean-15)

A Continent is one landmasses on Earth .

det(Continent-2, A-1)
nsubj(landmasses-5, Continent-2)
cop(landmasses-5, is-3)
num(landmasses-5, one-4)
root(ROOT-0, landmasses-5)
prep_on(landmasses-5, Earth-7)

In cryptography , a Cipher - LBR - or cypher - RBR - is an algorithm for performing encryption and decryption - a series of well-defined steps that can be followed as a procedure .

prep_in(algorithm-16, cryptography-2)
det(Cipher-5, a-4)
nsubj(algorithm-16, Cipher-5)
nn(RBR-12, LBR-7)
dep(cypher-10, or-9)
dep(RBR-12, cypher-10)
dep(Cipher-5, RBR-12)
cop(algorithm-16, is-14)
det(algorithm-16, an-15)
root(ROOT-0, algorithm-16)
prepc_for(algorithm-16, performing-18)
dobj(performing-18, encryption-19)
dobj(performing-18, decryption-21)
conj_and(encryption-19, decryption-21)
det(series-24, a-23)
dep(algorithm-16, series-24)
nsubjpass(followed-31, series-24)
amod(steps-27, well-defined-26)
prep_of(series-24, steps-27)
aux(followed-31, can-29)
auxpass(followed-31, be-30)
rcmod(series-24, followed-31)
det(procedure-34, a-33)
prep_as(followed-31, procedure-34)

A Constitution is a system for governance , often codified as a written document , that establishes the rules and principles of an autonomous political entity .

det(Constitution-2, A-1)
nsubj(system-5, Constitution-2)
cop(system-5, is-3)
det(system-5, a-4)
root(ROOT-0, system-5)
prep_for(system-5, governance-7)
advmod(codified-10, often-9)
partmod(governance-7, codified-10)
det(document-14, a-12)
amod(document-14, written-13)
prep_as(codified-10, document-14)
nsubj(establishes-17, document-14)
rcmod(document-14, establishes-17)
det(rules-19, the-18)
dobj(establishes-17, rules-19)
dobj(establishes-17, principles-21)
conj_and(rules-19, principles-21)
det(entity-26, an-23)
amod(political-25, autonomous-24)
amod(entity-26, political-25)
prep_of(rules-19, entity-26)

In computing , a Keyboard is a peripheral partially modelled after the typewriter keyboard .

prep_in(keyboard-14, computing-2)
det(Keyboard-5, a-4)
nsubj(keyboard-14, Keyboard-5)
cop(keyboard-14, is-6)
det(keyboard-14, a-7)
amod(keyboard-14, peripheral-8)
advmod(modelled-10, partially-9)
amod(keyboard-14, modelled-10)
det(typewriter-13, the-12)
prep_after(modelled-10, typewriter-13)
root(ROOT-0, keyboard-14)

In common usage , a Constellation is a group of stars that are connected together to form a figure or picture .

amod(usage-3, common-2)
prep_in(group-9, usage-3)
det(Constellation-6, a-5)
nsubj(group-9, Constellation-6)
cop(group-9, is-7)
det(group-9, a-8)
root(ROOT-0, group-9)
prep_of(group-9, stars-11)
nsubjpass(connected-14, stars-11)
auxpass(connected-14, are-13)
rcmod(stars-11, connected-14)
advmod(connected-14, together-15)
aux(form-17, to-16)
xcomp(connected-14, form-17)
det(figure-19, a-18)
dobj(form-17, figure-19)
dobj(form-17, picture-21)
conj_or(figure-19, picture-21)

A Cone - LBR - from the Greek Ã ⁄ ÂºÃ ¡ Â ¿ Â ¶ Ã ⁄ Â ∏ Ã ⁄ Â ¿ Ã ∂ Â ≠ , Latin conu - RBR - is a basic geometrical shape ; see cone - LBR - geometry - RBR - .

det(Cone-2, A-1)
root(ROOT-0, Cone-2)
nsubj(shape-39, LBR-4)
dep(conu-31, from-6)
det(≠-28, the-7)
amod(≠-28, Greek-8)
nn(≠-28, Ã-9)
nn(≠-28, ⁄-10)
nn(≠-28, ÂºÃ-11)
nn(≠-28, ¡-12)
nn(≠-28, Â-13)
nn(≠-28, ¿-14)
nn(≠-28, Â-15)
nn(≠-28, ¶-16)
nn(≠-28, Ã-17)
nn(≠-28, ⁄-18)
nn(≠-28, Â-19)
nn(≠-28, ∏-20)
nn(≠-28, Ã-21)
nn(≠-28, ⁄-22)
nn(≠-28, Â-23)
nn(≠-28, ¿-24)
nn(≠-28, Ã-25)
nn(≠-28, ∂-26)
nn(≠-28, Â-27)
pobj(from-6, ≠-28)
nn(conu-31, Latin-30)
dep(LBR-4, conu-31)
dep(conu-31, RBR-33)
cop(shape-39, is-35)
det(shape-39, a-36)
amod(shape-39, basic-37)
amod(shape-39, geometrical-38)
dep(Cone-2, shape-39)
dep(shape-39, see-41)
dobj(see-41, cone-42)
nn(RBR-48, LBR-44)
dep(RBR-48, geometry-46)
dep(cone-42, RBR-48)

In combinatorial mathematics , a Combination is an of distinct elements , usually of a prescribed size and taken from a given set .

amod(mathematics-3, combinatorial-2)
prep_in(an-8, mathematics-3)
det(Combination-6, a-5)
nsubj(an-8, Combination-6)
nsubj(taken-19, Combination-6)
cop(an-8, is-7)
root(ROOT-0, an-8)
amod(elements-11, distinct-10)
prep_of(an-8, elements-11)
advmod(an-8, usually-13)
det(size-17, a-15)
amod(size-17, prescribed-16)
prep_of(an-8, size-17)
conj_and(an-8, taken-19)
det(set-23, a-21)
amod(set-23, given-22)
prep_from(taken-19, set-23)

Creationism is a religious belief that humanity , life , the Earth , and the universe were created in their original form by a deity - LBR - often the Abrahamic God of Judaism , Christianity and Islam - RBR - or deities , whose existence is presupposed .

nsubj(belief-5, Creationism-1)
cop(belief-5, is-2)
det(belief-5, a-3)
amod(belief-5, religious-4)
root(ROOT-0, belief-5)
complm(created-18, that-6)
nsubjpass(created-18, humanity-7)
conj_and(humanity-7, life-9)
nsubjpass(created-18, life-9)
det(Earth-12, the-11)
conj_and(humanity-7, Earth-12)
nsubjpass(created-18, Earth-12)
det(universe-16, the-15)
conj_and(humanity-7, universe-16)
nsubjpass(created-18, universe-16)
auxpass(created-18, were-17)
ccomp(belief-5, created-18)
poss(form-22, their-20)
amod(form-22, original-21)
prep_in(created-18, form-22)
poss(existence-46, form-22)
det(deity-25, a-24)
prep_by(form-22, deity-25)
prep_by(form-22, LBR-27)
conj_or(deity-25, LBR-27)
advmod(God-32, often-29)
det(God-32, the-30)
nn(God-32, Abrahamic-31)
prep_by(form-22, God-32)
conj_or(deity-25, God-32)
prep_of(God-32, Judaism-34)
prep_of(God-32, Christianity-36)
conj_and(Judaism-34, Christianity-36)
prep_of(God-32, Islam-38)
conj_and(Judaism-34, Islam-38)
prep_by(form-22, RBR-40)
conj_or(deity-25, RBR-40)
prep_by(form-22, deities-43)
conj_or(deity-25, deities-43)
nsubjpass(presupposed-48, existence-46)
auxpass(presupposed-48, is-47)
rcmod(form-22, presupposed-48)

A Colloid is a type of mechanical mixture where one substance is dispersed evenly throughout another .

det(Colloid-2, A-1)
nsubj(type-5, Colloid-2)
cop(type-5, is-3)
det(type-5, a-4)
root(ROOT-0, type-5)
amod(mixture-8, mechanical-7)
prep_of(type-5, mixture-8)
advmod(dispersed-13, where-9)
num(substance-11, one-10)
nsubj(dispersed-13, substance-11)
aux(dispersed-13, is-12)
rcmod(type-5, dispersed-13)
advmod(dispersed-13, evenly-14)
prep_throughout(dispersed-13, another-16)

Cross-stitch is a popular form of counted-thread embroidery in which X-shaped stitches are used to form a picture .

nsubj(form-5, Cross-stitch-1)
cop(form-5, is-2)
det(form-5, a-3)
amod(form-5, popular-4)
root(ROOT-0, form-5)
amod(embroidery-8, counted-thread-7)
prep_of(form-5, embroidery-8)
rel(used-14, which-10)
amod(stitches-12, X-shaped-11)
nsubjpass(used-14, stitches-12)
xsubj(form-16, stitches-12)
auxpass(used-14, are-13)
rcmod(form-5, used-14)
aux(form-16, to-15)
xcomp(used-14, form-16)
det(picture-18, a-17)
dobj(form-16, picture-18)

The Cambrian is a geologic period and system that began about Cambriancambrian Ma - LBR - million years ago - RBR - at the end of the Proterozoic eon and ended about cambrianordovician Ma with the beginning of the Ordovician period ICS 2004 .

det(Cambrian-2, The-1)
nsubj(period-6, Cambrian-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
nsubj(began-10, period-6)
nsubj(ended-31, period-6)
conj_and(period-6, system-8)
nsubj(began-10, system-8)
rcmod(period-6, began-10)
nn(Ma-13, Cambriancambrian-12)
prep_about(began-10, Ma-13)
dep(Ma-13, LBR-15)
num(years-18, million-17)
npadvmod(ago-19, years-18)
advmod(Ma-13, ago-19)
dep(Ma-13, RBR-21)
det(end-25, the-24)
prep_at(began-10, end-25)
det(eon-29, the-27)
amod(eon-29, Proterozoic-28)
prep_of(end-25, eon-29)
rcmod(period-6, ended-31)
conj_and(began-10, ended-31)
nn(Ma-34, cambrianordovician-33)
prep_about(ended-31, Ma-34)
det(beginning-37, the-36)
prep_with(ended-31, beginning-37)
det(period-41, the-39)
nn(period-41, Ordovician-40)
prep_of(beginning-37, period-41)
dobj(ended-31, ICS-42)
num(ICS-42, 2004-43)

A Condom is a barrier device most commonly used during sexual intercourse .

det(Condom-2, A-1)
nsubj(device-6, Condom-2)
cop(device-6, is-3)
det(device-6, a-4)
nn(device-6, barrier-5)
root(ROOT-0, device-6)
advmod(commonly-8, most-7)
advmod(used-9, commonly-8)
partmod(device-6, used-9)
amod(intercourse-12, sexual-11)
prep_during(used-9, intercourse-12)

A Calendar is a system of organizing days for a social , religious , commercial or administrative purpose .

det(Calendar-2, A-1)
nsubj(system-5, Calendar-2)
cop(system-5, is-3)
det(system-5, a-4)
root(ROOT-0, system-5)
amod(days-8, organizing-7)
prep_of(system-5, days-8)
det(purpose-18, a-10)
amod(purpose-18, social-11)
conj_or(social-11, religious-13)
amod(purpose-18, religious-13)
conj_or(social-11, commercial-15)
amod(purpose-18, commercial-15)
conj_or(social-11, administrative-17)
amod(purpose-18, administrative-17)
prep_for(days-8, purpose-18)

The Candela - LBR - kanÃ -- Â √ dÃ ≈ Â˝lÃ ≈ Â˙ , \/ - Ã -- Â √ diÃ -- Â ∆ lÃ ≈ Â˙ \/ , symbol : cd - RBR - is of luminous intensity ; that is , power emitted by a light source in a particular direction , weighted by the luminosity function - LBR - a standardized model of the sensitivity of the human eye to different wavelengths , also known as the luminous efficiency function - RBR - .

det(cd-33, The-1)
nn(cd-33, Candela-2)
dep(cd-33, LBR-4)
dep(LBR-4, kanÃ-6)
nn(cd-33, Â-8)
nn(cd-33, √-9)
nn(cd-33, dÃ-10)
nn(cd-33, ≈-11)
nn(cd-33, Â˝lÃ-12)
nn(cd-33, ≈-13)
nn(cd-33, Â˙-14)
appos(cd-33, \/-16)
dep(cd-33, Ã-18)
nn(cd-33, Â-20)
nn(cd-33, √-21)
nn(cd-33, diÃ-22)
nn(\/-29, Â-24)
nn(\/-29, ∆-25)
nn(\/-29, lÃ-26)
nn(\/-29, ≈-27)
nn(\/-29, Â˙-28)
dep(cd-33, \/-29)
appos(\/-29, symbol-31)
nsubj(is-37, cd-33)
dep(cd-33, RBR-35)
root(ROOT-0, is-37)
prep_of(is-37, luminous-39)
dep(luminous-39, intensity-40)
nsubj(is-43, that-42)
rcmod(intensity-40, is-43)
dep(is-43, power-45)
partmod(power-45, emitted-46)
det(source-50, a-48)
amod(source-50, light-49)
agent(emitted-46, source-50)
det(direction-54, a-52)
amod(direction-54, particular-53)
prep_in(source-50, direction-54)
dep(power-45, weighted-56)
det(function-60, the-58)
amod(function-60, luminosity-59)
prep_by(weighted-56, function-60)
dep(function-60, LBR-62)
det(model-66, a-64)
amod(model-66, standardized-65)
dep(function-60, model-66)
det(sensitivity-69, the-68)
prep_of(function-60, sensitivity-69)
det(eye-73, the-71)
amod(eye-73, human-72)
prep_of(sensitivity-69, eye-73)
amod(wavelengths-76, different-75)
prep_to(weighted-56, wavelengths-76)
advmod(known-79, also-78)
dep(power-45, known-79)
det(function-84, the-81)
amod(function-84, luminous-82)
nn(function-84, efficiency-83)
prep_as(known-79, function-84)
dep(power-45, RBR-86)

A City is an urban settlement .

det(City-2, A-1)
nsubj(settlement-6, City-2)
cop(settlement-6, is-3)
det(settlement-6, an-4)
amod(settlement-6, urban-5)
root(ROOT-0, settlement-6)

The Carboniferous is a geologic period and system that extends from the end of the Devonian period , about 359.2 Ã ≠ Â ± 2.5 Ma - LBR - million years ago - RBR - , to the beginning of the Permian period , about 299.0 Ã ≠ Â ± 0.8 Ma ICS 2004 .

det(Carboniferous-2, The-1)
nsubj(period-6, Carboniferous-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
nsubj(extends-10, period-6)
conj_and(period-6, system-8)
nsubj(extends-10, system-8)
rcmod(period-6, extends-10)
det(end-13, the-12)
prep_from(extends-10, end-13)
det(period-17, the-15)
amod(period-17, Devonian-16)
prep_of(end-13, period-17)
quantmod(359.2-20, about-19)
appos(period-17, 359.2-20)
nn(Ma-26, Ã-21)
nn(Ma-26, ≠-22)
nn(Ma-26, Â-23)
nn(Ma-26, ±-24)
num(Ma-26, 2.5-25)
dep(359.2-20, Ma-26)
nn(RBR-34, LBR-28)
num(years-31, million-30)
npadvmod(ago-32, years-31)
dep(RBR-34, ago-32)
dep(end-13, RBR-34)
det(beginning-39, the-38)
prep_to(extends-10, beginning-39)
det(period-43, the-41)
amod(period-43, Permian-42)
prep_of(beginning-39, period-43)
quantmod(299.0-46, about-45)
num(2004-54, 299.0-46)
nn(2004-54, Ã-47)
nn(2004-54, ≠-48)
nn(2004-54, Â-49)
nn(2004-54, ±-50)
nn(2004-54, 0.8-51)
nn(2004-54, Ma-52)
nn(2004-54, ICS-53)
appos(period-43, 2004-54)

The Comoros - LBR - Ã -- Â √ kÃ ≈ Â ‚ mÃ ≈ Â˙roÃ ... Â ... z , audio ; Ã˘Â ¬ Ã˘Â '' Ã˘Â ± Ã˘Â § Ã˙Â ≥ Ã˙Â ≠ Ã˙Â ∑ Ã˘Â ± , Juzur al-Qumur - RBR - , officially the Union of the Comoros - LBR - Union des Comores , Ã˘Â § Ã˙Â ≥ Ã˘Â ¥ Ã˘ÂªÃ˙ÂŒÃ˘Â -- Ã˘Â § Ã˘Â ¯ Ã˘Â § Ã˙Â ≥ Ã˙Â ≠ Ã˙Â ∑ Ã˘Â ± Ã˙Â ... Ã˙Â , Al-IttiÃ ¡ Â ¸ Â ¥ Ã ≥ Â ™ d al-Qumuriyy - RBR - is an island nation in the Indian Ocean , located off the eastern coast of Africa on the northern end of the Mozambique Channel between northern Madagascar and northeastern Mozambique .

det(mÃ-14, The-1)
nn(mÃ-14, Comoros-2)
dep(mÃ-14, LBR-4)
dep(LBR-4, Ã-6)
nn(mÃ-14, Â-8)
nn(mÃ-14, √-9)
nn(mÃ-14, kÃ-10)
nn(mÃ-14, ≈-11)
nn(mÃ-14, Â-12)
nn(mÃ-14, ‚-13)
nsubj(Â-18, mÃ-14)
advmod(Â˙roÃ-16, ≈-15)
amod(mÃ-14, Â˙roÃ-16)
root(ROOT-0, Â-18)
dep(nation-104, z-20)
nsubj(nation-104, audio-22)
nn(Ã˘Â-28, Ã˘Â-24)
nn(Ã˘Â-28, ¬-25)
nn(Ã˘Â-28, Ã˘Â-26)
dep(audio-22, Ã˘Â-28)
partmod(Ã˘Â-28, ±-29)
nn(±-39, Ã˘Â-30)
nn(±-39, §-31)
nn(±-39, Ã˙Â-32)
nn(±-39, ≥-33)
nn(±-39, Ã˙Â-34)
nn(±-39, ≠-35)
nn(±-39, Ã˙Â-36)
nn(±-39, ∑-37)
nn(±-39, Ã˘Â-38)
dobj(±-29, ±-39)
nn(al-Qumur-42, Juzur-41)
appos(±-39, al-Qumur-42)
dep(al-Qumur-42, RBR-44)
advmod(±-29, officially-47)
det(Union-49, the-48)
dep(±-29, Union-49)
det(Comoros-52, the-51)
prep_of(Union-49, Comoros-52)
dep(Union-49, LBR-54)
nn(Comores-58, Union-56)
nn(Comores-58, des-57)
dep(LBR-54, Comores-58)
nn(Ã˘ÂªÃ˙ÂŒÃ˘Â-66, Ã˘Â-60)
nn(Ã˘ÂªÃ˙ÂŒÃ˘Â-66, §-61)
nn(Ã˘ÂªÃ˙ÂŒÃ˘Â-66, Ã˙Â-62)
nn(Ã˘ÂªÃ˙ÂŒÃ˘Â-66, ≥-63)
nn(Ã˘ÂªÃ˙ÂŒÃ˘Â-66, Ã˘Â-64)
nn(Ã˘ÂªÃ˙ÂŒÃ˘Â-66, ¥-65)
appos(Comores-58, Ã˘ÂªÃ˙ÂŒÃ˘Â-66)
nn(Ã˘Â-72, Ã˘Â-68)
nn(Ã˘Â-72, §-69)
nn(Ã˘Â-72, Ã˘Â-70)
nn(Ã˘Â-72, ¯-71)
dep(Comores-58, Ã˘Â-72)
nn(Ã˙Â-82, §-73)
nn(Ã˙Â-82, Ã˙Â-74)
nn(Ã˙Â-82, ≥-75)
nn(Ã˙Â-82, Ã˙Â-76)
nn(Ã˙Â-82, ≠-77)
nn(Ã˙Â-82, Ã˙Â-78)
nn(Ã˙Â-82, ∑-79)
nn(Ã˙Â-82, Ã˘Â-80)
nn(Ã˙Â-82, ±-81)
dep(Ã˘Â-72, Ã˙Â-82)
dep(Comores-58, Ã˙Â-84)
advmod(al-Qumuriyy-97, Al-IttiÃ-86)
nn(al-Qumuriyy-97, ¡-87)
nn(al-Qumuriyy-97, Â-88)
nn(al-Qumuriyy-97, ¸-89)
nn(al-Qumuriyy-97, Â-90)
nn(al-Qumuriyy-97, ¥-91)
nn(al-Qumuriyy-97, Ã-92)
nn(al-Qumuriyy-97, ≥-93)
nn(al-Qumuriyy-97, Â-94)
nn(al-Qumuriyy-97, ™-95)
nn(al-Qumuriyy-97, d-96)
rcmod(Ã˙Â-84, al-Qumuriyy-97)
dep(LBR-54, RBR-99)
cop(nation-104, is-101)
det(nation-104, an-102)
nn(nation-104, island-103)
parataxis(Â-18, nation-104)
det(Ocean-108, the-106)
nn(Ocean-108, Indian-107)
prep_in(nation-104, Ocean-108)
partmod(Ocean-108, located-110)
prt(located-110, off-111)
det(coast-114, the-112)
amod(coast-114, eastern-113)
dobj(located-110, coast-114)
prep_of(coast-114, Africa-116)
det(end-120, the-118)
amod(end-120, northern-119)
prep_on(located-110, end-120)
det(Channel-124, the-122)
nn(Channel-124, Mozambique-123)
prep_of(end-120, Channel-124)
amod(Madagascar-127, northern-126)
prep_between(Channel-124, Madagascar-127)
nn(Mozambique-130, northeastern-129)
prep_between(Channel-124, Mozambique-130)
conj_and(Madagascar-127, Mozambique-130)

The Cucurbitales are an order of flowering plants , included in the rosid group of dicotyledons .

det(Cucurbitales-2, The-1)
nsubj(order-5, Cucurbitales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(plants-8, flowering-7)
prep_of(order-5, plants-8)
partmod(plants-8, included-10)
det(group-14, the-12)
amod(group-14, rosid-13)
prep_in(included-10, group-14)
prep_of(group-14, dicotyledons-16)

In linguistics , a Copula is a word used to link the subject of a sentence with a predicate - LBR - a subject complement or an adverbial - RBR - .

prep_in(word-8, linguistics-2)
det(Copula-5, a-4)
nsubj(word-8, Copula-5)
cop(word-8, is-6)
det(word-8, a-7)
root(ROOT-0, word-8)
xsubj(link-11, word-8)
partmod(word-8, used-9)
aux(link-11, to-10)
xcomp(used-9, link-11)
det(subject-13, the-12)
dobj(link-11, subject-13)
det(sentence-16, a-15)
prep_of(subject-13, sentence-16)
det(predicate-19, a-18)
prep_with(sentence-16, predicate-19)
nn(RBR-30, LBR-21)
det(complement-25, a-23)
nn(complement-25, subject-24)
dep(RBR-30, complement-25)
det(adverbial-28, an-27)
conj_or(complement-25, adverbial-28)
dep(RBR-30, adverbial-28)
dep(sentence-16, RBR-30)

A Chemist is a scientist trained in the science of chemistry .

det(Chemist-2, A-1)
nsubj(scientist-5, Chemist-2)
cop(scientist-5, is-3)
det(scientist-5, a-4)
root(ROOT-0, scientist-5)
partmod(scientist-5, trained-6)
det(science-9, the-8)
prep_in(trained-6, science-9)
prep_of(science-9, chemistry-11)

In articulatory phonetics , a Consonant is a speech sound that is articulated with complete or partial closure of the upper vocal tract , the upper vocal tract being defined as that part of the vocal tract that lies above the larynx .

amod(phonetics-3, articulatory-2)
prep_in(sound-10, phonetics-3)
det(Consonant-6, a-5)
nsubj(sound-10, Consonant-6)
cop(sound-10, is-7)
det(sound-10, a-8)
nn(sound-10, speech-9)
root(ROOT-0, sound-10)
nsubjpass(articulated-13, sound-10)
auxpass(articulated-13, is-12)
rcmod(sound-10, articulated-13)
amod(closure-18, complete-15)
conj_or(complete-15, partial-17)
amod(closure-18, partial-17)
prep_with(articulated-13, closure-18)
det(tract-23, the-20)
amod(tract-23, upper-21)
amod(tract-23, vocal-22)
prep_of(closure-18, tract-23)
det(tract-28, the-25)
amod(tract-28, upper-26)
amod(tract-28, vocal-27)
appos(tract-23, tract-28)
auxpass(defined-30, being-29)
partmod(tract-28, defined-30)
det(part-33, that-32)
prep_as(defined-30, part-33)
det(tract-37, the-35)
amod(tract-37, vocal-36)
prep_of(part-33, tract-37)
nsubj(lies-39, tract-37)
rcmod(tract-37, lies-39)
det(larynx-42, the-41)
prep_above(lies-39, larynx-42)

A Currency is a medium of exchange , facilitating the transfer of goods and \/ or services .

det(Currency-2, A-1)
nsubj(medium-5, Currency-2)
cop(medium-5, is-3)
det(medium-5, a-4)
root(ROOT-0, medium-5)
prep_of(medium-5, exchange-7)
partmod(medium-5, facilitating-9)
det(transfer-11, the-10)
dobj(facilitating-9, transfer-11)
prep_of(transfer-11, goods-13)
prep_of(transfer-11, \/-15)
conj_and(goods-13, \/-15)
conj_and(goods-13, services-17)
conj_or(\/-15, services-17)

A Codex - LBR - Latin for block of wood , book ; plural codices - RBR - is a book in the format used for modern books , with separate pages normally bound together and given a cover .

nn(Latin-6, A-1)
nn(Latin-6, Codex-2)
dep(Latin-6, LBR-4)
nsubj(book-21, Latin-6)
prep_for(Latin-6, block-8)
prep_of(block-8, wood-10)
nsubj(book-21, book-12)
nn(codices-15, plural-14)
dep(book-12, codices-15)
dep(codices-15, RBR-17)
cop(book-21, is-19)
det(book-21, a-20)
root(ROOT-0, book-21)
det(format-24, the-23)
prep_in(book-21, format-24)
partmod(format-24, used-25)
amod(books-28, modern-27)
prep_for(used-25, books-28)
amod(pages-32, separate-31)
prep_with(used-25, pages-32)
advmod(bound-34, normally-33)
partmod(pages-32, bound-34)
dep(bound-34, together-35)
dep(bound-34, given-37)
conj_and(together-35, given-37)
det(cover-39, a-38)
dep(given-37, cover-39)

A Calf - LBR - plural calves - RBR - is the young of various species of mammal .

nn(RBR-9, A-1)
nn(RBR-9, Calf-2)
dep(RBR-9, LBR-4)
nn(calves-7, plural-6)
dep(LBR-4, calves-7)
root(ROOT-0, RBR-9)
dep(RBR-9, is-11)
det(young-13, the-12)
nsubj(is-11, young-13)
amod(species-16, various-15)
prep_of(young-13, species-16)
prep_of(species-16, mammal-18)

In biological terms , a Community is a group of interacting organisms sharing an environment .

amod(terms-3, biological-2)
prep_in(group-9, terms-3)
det(Community-6, a-5)
nsubj(group-9, Community-6)
cop(group-9, is-7)
det(group-9, a-8)
root(ROOT-0, group-9)
amod(organisms-12, interacting-11)
prep_of(group-9, organisms-12)
partmod(organisms-12, sharing-13)
det(environment-15, an-14)
dobj(sharing-13, environment-15)

In film , a Cutaway is the interruption of a continuously filmed action by inserting a view of something else .

prep_in(interruption-8, film-2)
det(Cutaway-5, a-4)
nsubj(interruption-8, Cutaway-5)
cop(interruption-8, is-6)
det(interruption-8, the-7)
root(ROOT-0, interruption-8)
det(action-13, a-10)
advmod(filmed-12, continuously-11)
amod(action-13, filmed-12)
prep_of(interruption-8, action-13)
prepc_by(action-13, inserting-15)
det(view-17, a-16)
dobj(inserting-15, view-17)
prep_of(view-17, something-19)
advmod(something-19, else-20)

In medicine , a Coma - LBR - from the Greek Ã ⁄ ÂºÃ ¡ Â ¿ Â ¶ Ã ⁄ ÂπÃ ⁄ Â ± koma , meaning deep sleep - RBR - is a profound state of unconsciousness .

prep_in(state-37, medicine-2)
det(LBR-7, a-4)
nn(LBR-7, Coma-5)
nsubj(state-37, LBR-7)
dep(sleep-30, from-9)
det(koma-26, the-10)
amod(koma-26, Greek-11)
nn(koma-26, Ã-12)
nn(koma-26, ⁄-13)
nn(koma-26, ÂºÃ-14)
nn(koma-26, ¡-15)
nn(koma-26, Â-16)
nn(koma-26, ¿-17)
nn(koma-26, Â-18)
nn(koma-26, ¶-19)
nn(koma-26, Ã-20)
nn(koma-26, ⁄-21)
nn(koma-26, ÂπÃ-22)
nn(koma-26, ⁄-23)
nn(koma-26, Â-24)
nn(koma-26, ±-25)
pobj(from-9, koma-26)
nn(sleep-30, meaning-28)
amod(sleep-30, deep-29)
dep(LBR-7, sleep-30)
dep(sleep-30, RBR-32)
cop(state-37, is-34)
det(state-37, a-35)
amod(state-37, profound-36)
root(ROOT-0, state-37)
prep_of(state-37, unconsciousness-39)

Constellations is a quarterly peer-reviewed journal of critical and democratic theory .

nsubj(journal-6, Constellations-1)
cop(journal-6, is-2)
det(journal-6, a-3)
amod(journal-6, quarterly-4)
amod(journal-6, peer-reviewed-5)
root(ROOT-0, journal-6)
amod(theory-11, critical-8)
conj_and(critical-8, democratic-10)
amod(theory-11, democratic-10)
prep_of(journal-6, theory-11)

The Cervix - LBR - from Latin `` neck `` - RBR - is the neck of the uterus where it joins with the top end of the vagina .

det(Cervix-2, The-1)
nsubj(neck-16, Cervix-2)
dep(Cervix-2, LBR-4)
prep_from(Cervix-2, Latin-7)
partmod(Latin-7, neck-9)
dobj(neck-9, RBR-12)
cop(neck-16, is-14)
det(neck-16, the-15)
root(ROOT-0, neck-16)
det(uterus-19, the-18)
prep_of(neck-16, uterus-19)
advmod(joins-22, where-20)
nsubj(joins-22, it-21)
rcmod(uterus-19, joins-22)
det(end-26, the-24)
amod(end-26, top-25)
prep_with(joins-22, end-26)
det(vagina-29, the-28)
prep_of(end-26, vagina-29)

A Compiler is a computer program - LBR - or set of programs - RBR - that translates text written in a computer language - LBR - the source language - RBR - into another computer language - LBR - the target language - RBR - .

det(Compiler-2, A-1)
nsubj(program-6, Compiler-2)
cop(program-6, is-3)
det(program-6, a-4)
nn(program-6, computer-5)
root(ROOT-0, program-6)
dep(program-6, LBR-8)
dep(set-11, or-10)
dep(program-6, set-11)
prep_of(set-11, programs-13)
dep(programs-13, RBR-15)
det(text-19, that-17)
amod(text-19, translates-18)
dep(programs-13, text-19)
dep(text-19, written-20)
det(language-24, a-22)
nn(language-24, computer-23)
prep_in(text-19, language-24)
dep(text-19, LBR-26)
det(language-30, the-28)
nn(language-30, source-29)
dep(text-19, language-30)
dep(text-19, RBR-32)
det(language-37, another-35)
nn(language-37, computer-36)
prep_into(text-19, language-37)
dep(programs-13, LBR-39)
det(language-43, the-41)
nn(language-43, target-42)
dep(programs-13, language-43)
dep(programs-13, RBR-45)

A Castrato is a man with a singing voice equivalent to that of a soprano , mezzo-soprano , or contralto voice produced either by castration of the singer before puberty or one who , because of an endocrinological condition , never reaches sexual maturity .

det(Castrato-2, A-1)
nsubj(man-5, Castrato-2)
cop(man-5, is-3)
det(man-5, a-4)
root(ROOT-0, man-5)
det(voice-9, a-7)
nn(voice-9, singing-8)
prep_with(man-5, voice-9)
amod(man-5, equivalent-10)
prep_to(equivalent-10, that-12)
det(mezzo-soprano-17, a-14)
nn(mezzo-soprano-17, soprano-15)
prep_of(that-12, mezzo-soprano-17)
nn(voice-21, contralto-20)
prep_of(that-12, voice-21)
conj_or(mezzo-soprano-17, voice-21)
partmod(man-5, produced-22)
advmod(produced-22, either-23)
agent(produced-22, castration-25)
det(singer-28, the-27)
prep_of(castration-25, singer-28)
prep_before(produced-22, puberty-30)
nsubj(reaches-42, puberty-30)
prep_before(produced-22, one-32)
conj_or(puberty-30, one-32)
nsubj(reaches-42, one-32)
mark(of-36, because-35)
parataxis(reaches-42, of-36)
det(condition-39, an-37)
amod(condition-39, endocrinological-38)
pobj(of-36, condition-39)
neg(reaches-42, never-41)
rcmod(puberty-30, reaches-42)
amod(maturity-44, sexual-43)
dobj(reaches-42, maturity-44)

A Cave is a natural underground void large enough for a human to enter .

det(Cave-2, A-1)
nsubj(void-7, Cave-2)
cop(void-7, is-3)
det(void-7, a-4)
amod(void-7, natural-5)
amod(void-7, underground-6)
root(ROOT-0, void-7)
amod(void-7, large-8)
advmod(large-8, enough-9)
det(human-12, a-11)
prep_for(large-8, human-12)
aux(enter-14, to-13)
xcomp(large-8, enter-14)

A Celebrity is a widely-recognized or famous person who commands a high degree of public and media attention .

det(Celebrity-2, A-1)
nsubj(person-8, Celebrity-2)
cop(person-8, is-3)
det(person-8, a-4)
amod(person-8, widely-recognized-5)
conj_or(widely-recognized-5, famous-7)
amod(person-8, famous-7)
root(ROOT-0, person-8)
nsubj(commands-10, person-8)
rcmod(person-8, commands-10)
det(degree-13, a-11)
amod(degree-13, high-12)
dobj(commands-10, degree-13)
nn(attention-18, public-15)
conj_and(public-15, media-17)
nn(attention-18, media-17)
prep_of(degree-13, attention-18)

In Roman mythology , Cupid - LBR - Latin cupido - RBR - is the god of erotic love and beauty .

nn(mythology-3, Roman-2)
prep_in(god-16, mythology-3)
nsubj(god-16, Cupid-5)
nn(RBR-12, LBR-7)
nn(cupido-10, Latin-9)
dep(RBR-12, cupido-10)
dep(Cupid-5, RBR-12)
cop(god-16, is-14)
det(god-16, the-15)
root(ROOT-0, god-16)
amod(love-19, erotic-18)
prep_of(god-16, love-19)
prep_of(god-16, beauty-21)
conj_and(love-19, beauty-21)

Caesium is the international spelling standardized by the IUPAC , but in North American English , the spelling cesium is more common .

nsubj(standardized-6, Caesium-1)
cop(standardized-6, is-2)
det(standardized-6, the-3)
amod(standardized-6, international-4)
nn(standardized-6, spelling-5)
root(ROOT-0, standardized-6)
det(IUPAC-9, the-8)
prep_by(standardized-6, IUPAC-9)
nn(English-15, North-13)
nn(English-15, American-14)
prep_in(common-22, English-15)
det(cesium-19, the-17)
nn(cesium-19, spelling-18)
nsubj(common-22, cesium-19)
cop(common-22, is-20)
advmod(common-22, more-21)
conj_but(standardized-6, common-22)

In computing , a Comment is information in a file that is primarily intended as an annotation .

prep_in(information-7, computing-2)
det(Comment-5, a-4)
nsubj(information-7, Comment-5)
cop(information-7, is-6)
root(ROOT-0, information-7)
det(file-10, a-9)
prep_in(information-7, file-10)
nsubjpass(intended-14, file-10)
auxpass(intended-14, is-12)
advmod(intended-14, primarily-13)
rcmod(file-10, intended-14)
det(annotation-17, an-16)
prep_as(intended-14, annotation-17)

A Century - LBR - From the Latin cent , one hundred - RBR - is one hundred consecutive years .

det(Century-2, A-1)
nsubj(years-20, Century-2)
nn(RBR-14, LBR-4)
dep(RBR-14, From-6)
det(cent-9, the-7)
amod(cent-9, Latin-8)
pobj(From-6, cent-9)
num(hundred-12, one-11)
appos(cent-9, hundred-12)
dep(Century-2, RBR-14)
cop(years-20, is-16)
number(hundred-18, one-17)
num(years-20, hundred-18)
amod(years-20, consecutive-19)
root(ROOT-0, years-20)

A Carabiner or karabiner - LBR - colloquially : crab , D ring , krab , or & amp ; lt ; nowiki & amp ; gt ; ' & amp ; lt ; \/ nowiki & amp ; gt ; biner - RBR - is a metal loop with a sprung or screwed gate .

det(Carabiner-2, A-1)
nsubj(loop-49, Carabiner-2)
conj_or(Carabiner-2, karabiner-4)
nsubj(loop-49, karabiner-4)
dep(Carabiner-2, LBR-6)
dep(LBR-6, colloquially-8)
dep(Carabiner-2, crab-10)
nn(ring-13, D-12)
dep(Carabiner-2, ring-13)
conj_or(crab-10, ring-13)
dep(Carabiner-2, krab-15)
conj_or(crab-10, krab-15)
cc(amp-19, &-18)
dep(Carabiner-2, amp-19)
conj_or(crab-10, amp-19)
dep(Carabiner-2, lt-21)
dep(lt-21, nowiki-23)
nn(gt-27, amp-25)
dep(lt-21, gt-27)
conj_and(nowiki-23, gt-27)
conj_and(nowiki-23, amp-31)
conj_and(gt-27, amp-31)
dep(Carabiner-2, lt-33)
nn(nowiki-36, \/-35)
dep(lt-33, nowiki-36)
dep(lt-33, amp-38)
conj_and(nowiki-36, amp-38)
dep(Carabiner-2, gt-40)
dep(gt-40, biner-42)
dep(Carabiner-2, RBR-44)
cop(loop-49, is-46)
det(loop-49, a-47)
nn(loop-49, metal-48)
root(ROOT-0, loop-49)
det(gate-55, a-51)
amod(gate-55, sprung-52)
conj_or(sprung-52, screwed-54)
amod(gate-55, screwed-54)
prep_with(loop-49, gate-55)

In fiction , Continuity - LBR - also called time-scheme - RBR - is consistency of the characteristics of persons , plot , objects , places and events seen by the reader or viewer .

prep_in(called-9, fiction-2)
nsubj(called-9, Continuity-4)
dep(Continuity-4, LBR-6)
advmod(called-9, also-8)
root(ROOT-0, called-9)
nsubj(consistency-15, time-scheme-10)
dep(time-scheme-10, RBR-12)
cop(consistency-15, is-14)
ccomp(called-9, consistency-15)
det(characteristics-18, the-17)
prep_of(consistency-15, characteristics-18)
prep_of(characteristics-18, persons-20)
prep_of(characteristics-18, plot-22)
conj_and(persons-20, plot-22)
prep_of(characteristics-18, objects-24)
conj_and(persons-20, objects-24)
prep_of(characteristics-18, places-26)
conj_and(persons-20, places-26)
prep_of(characteristics-18, events-28)
conj_and(persons-20, events-28)
partmod(characteristics-18, seen-29)
det(reader-32, the-31)
agent(seen-29, reader-32)
agent(seen-29, viewer-34)
conj_or(reader-32, viewer-34)

The name Cybernetics denotes the study of `` teleological mechanisms `` and was popularized through his book Cybernetics , or Control and Communication in the Animal and Machine - LBR - Hermann & amp ; amp ; Cie , Paris , 1948 - RBR - .

det(Cybernetics-3, The-1)
nn(Cybernetics-3, name-2)
nsubj(denotes-4, Cybernetics-3)
root(ROOT-0, denotes-4)
det(study-6, the-5)
dobj(denotes-4, study-6)
amod(mechanisms-10, teleological-9)
prep_of(study-6, mechanisms-10)
nsubjpass(popularized-14, and-12)
auxpass(popularized-14, was-13)
dep(mechanisms-10, popularized-14)
poss(book-17, his-16)
prep_through(popularized-14, book-17)
dep(book-17, Cybernetics-18)
prep_through(popularized-14, Control-21)
conj_or(book-17, Control-21)
conj_or(book-17, Communication-23)
conj_and(Control-21, Communication-23)
det(Animal-26, the-25)
prep_in(Control-21, Animal-26)
prep_in(Control-21, Machine-28)
conj_and(Animal-26, Machine-28)
prep_through(popularized-14, LBR-30)
conj_or(book-17, LBR-30)
prep_through(popularized-14, Hermann-32)
conj_or(book-17, Hermann-32)
conj_or(book-17, amp-34)
conj_and(Hermann-32, amp-34)
prep_through(popularized-14, amp-36)
conj_or(book-17, amp-36)
nn(Paris-40, Cie-38)
prep_through(popularized-14, Paris-40)
conj_or(book-17, Paris-40)
prep_through(popularized-14, 1948-42)
conj_or(book-17, 1948-42)
dep(1948-42, RBR-44)

In music , Counterpoint is the relationship between two or more voices that are independent in contour and rhythm , and interdependent in harmony .

prep_in(relationship-7, music-2)
nsubj(relationship-7, Counterpoint-4)
cop(relationship-7, is-5)
det(relationship-7, the-6)
root(ROOT-0, relationship-7)
nsubj(independent-15, relationship-7)
num(voices-12, two-9)
conj_or(two-9, more-11)
quantmod(two-9, more-11)
num(voices-12, more-11)
prep_between(relationship-7, voices-12)
cop(independent-15, are-14)
rcmod(relationship-7, independent-15)
prep_in(independent-15, contour-17)
prep_in(independent-15, rhythm-19)
conj_and(contour-17, rhythm-19)
conj_and(relationship-7, interdependent-22)
nsubj(independent-15, interdependent-22)
prep_in(interdependent-22, harmony-24)

A Cyanide is chemical compound that contains the cyano group - LBR - CÃ cents Â ≈ Â ¡ N - RBR - , which consists of a carbon atom triple-bonded to a nitrogen atom .

det(Cyanide-2, A-1)
nsubj(compound-5, Cyanide-2)
cop(compound-5, is-3)
nn(compound-5, chemical-4)
root(ROOT-0, compound-5)
nsubj(contains-7, compound-5)
rcmod(compound-5, contains-7)
det(group-10, the-8)
amod(group-10, cyano-9)
dobj(contains-7, group-10)
dep(group-10, LBR-12)
nsubj(consists-26, LBR-12)
nn(N-20, CÃ-14)
nn(N-20, cents-15)
nn(N-20, Â-16)
nn(N-20, ≈-17)
nn(N-20, Â-18)
nn(N-20, ¡-19)
dep(LBR-12, N-20)
dep(N-20, RBR-22)
rcmod(LBR-12, consists-26)
det(atom-30, a-28)
nn(atom-30, carbon-29)
prep_of(consists-26, atom-30)
partmod(atom-30, triple-bonded-31)
det(atom-35, a-33)
nn(atom-35, nitrogen-34)
prep_to(triple-bonded-31, atom-35)

In chemistry , a Carbonate is a salt or ester of carbonic acid .

prep_in(salt-8, chemistry-2)
det(Carbonate-5, a-4)
nsubj(salt-8, Carbonate-5)
cop(salt-8, is-6)
det(salt-8, a-7)
root(ROOT-0, salt-8)
conj_or(salt-8, ester-10)
amod(acid-13, carbonic-12)
prep_of(salt-8, acid-13)

The Circumference is the distance around a closed curve .

det(Circumference-2, The-1)
nsubj(distance-5, Circumference-2)
cop(distance-5, is-3)
det(distance-5, the-4)
root(ROOT-0, distance-5)
det(curve-9, a-7)
amod(curve-9, closed-8)
prep_around(distance-5, curve-9)

In Greek mythology , Circe or sÃ ≈ Â˙rsÃ ≥ Â „ - LBR - Greek Ã ⁄ Â˚Ã ⁄ Â ¯ Ã ∂ Â ™ Ã ⁄ ÂºÃ ⁄ Â · KÃ ∞ Â -- rkÃ ≥ Â „ , falcon - RBR - , was a Queen goddess - LBR - or sometimes nymph or sorceress - RBR - living on the island of Aeaea .

amod(mythology-3, Greek-2)
prep_in(goddess-50, mythology-3)
nsubj(goddess-50, Circe-5)
nn(„-12, sÃ-7)
nn(„-12, ≈-8)
nn(„-12, Â˙rsÃ-9)
nn(„-12, ≥-10)
nn(„-12, Â-11)
conj_or(Circe-5, „-12)
nsubj(goddess-50, „-12)
dep(Circe-5, LBR-14)
amod(rkÃ-37, Greek-16)
nn(Â-35, Ã-17)
nn(Â-35, ⁄-18)
nn(Â-35, Â˚Ã-19)
nn(Â-35, ⁄-20)
nn(Â-35, Â-21)
nn(Â-35, ¯-22)
nn(Â-35, Ã-23)
nn(Â-35, ∂-24)
nn(Â-35, Â-25)
nn(Â-35, ™-26)
nn(Â-35, Ã-27)
nn(Â-35, ⁄-28)
nn(Â-35, ÂºÃ-29)
nn(Â-35, ⁄-30)
nn(Â-35, Â-31)
nn(Â-35, ·-32)
nn(Â-35, KÃ-33)
nn(Â-35, ∞-34)
dep(rkÃ-37, Â-35)
dep(LBR-14, rkÃ-37)
nn(„-40, ≥-38)
nn(„-40, Â-39)
dep(rkÃ-37, „-40)
appos(Circe-5, falcon-42)
dep(falcon-42, RBR-44)
cop(goddess-50, was-47)
det(goddess-50, a-48)
nn(goddess-50, Queen-49)
root(ROOT-0, goddess-50)
nn(RBR-60, LBR-52)
dep(nymph-56, or-54)
advmod(nymph-56, sometimes-55)
dep(RBR-60, nymph-56)
conj_or(nymph-56, sorceress-58)
dep(RBR-60, sorceress-58)
dep(goddess-50, RBR-60)
xcomp(goddess-50, living-62)
det(island-65, the-64)
prep_on(living-62, island-65)
prep_of(island-65, Aeaea-67)

In chemistry , mineralogy , and materials science , a Crystal is a solid in which the constituent atoms , molecules , or ions are packed in a regularly ordered , repeating pattern extending in all three spatial dimensions .

prep_in(solid-14, chemistry-2)
conj_and(chemistry-2, mineralogy-4)
prep_in(solid-14, mineralogy-4)
nn(science-8, materials-7)
conj_and(chemistry-2, science-8)
prep_in(solid-14, science-8)
det(Crystal-11, a-10)
nsubj(solid-14, Crystal-11)
cop(solid-14, is-12)
det(solid-14, a-13)
root(ROOT-0, solid-14)
rel(packed-26, which-16)
det(atoms-19, the-17)
amod(atoms-19, constituent-18)
nsubjpass(packed-26, atoms-19)
conj_or(atoms-19, molecules-21)
nsubjpass(packed-26, molecules-21)
conj_or(atoms-19, ions-24)
nsubjpass(packed-26, ions-24)
auxpass(packed-26, are-25)
rcmod(solid-14, packed-26)
det(regularly-29, a-28)
prep_in(packed-26, regularly-29)
partmod(regularly-29, ordered-30)
xcomp(ordered-30, repeating-32)
dobj(repeating-32, pattern-33)
partmod(pattern-33, extending-34)
det(dimensions-39, all-36)
num(dimensions-39, three-37)
amod(dimensions-39, spatial-38)
prep_in(extending-34, dimensions-39)

In computing , C is a general-purpose , block structured , procedural , imperative computer programming language developed in 1972 by Dennis Ritchie at the Bell Telephone Laboratories for use with the Unix operating system .

prep_in(language-17, computing-2)
nsubj(language-17, C-4)
cop(language-17, is-5)
det(language-17, a-6)
amod(structured-10, general-purpose-7)
dep(structured-10, block-9)
amod(language-17, structured-10)
amod(language-17, procedural-12)
amod(language-17, imperative-14)
nn(language-17, computer-15)
amod(language-17, programming-16)
root(ROOT-0, language-17)
partmod(language-17, developed-18)
prep_in(developed-18, 1972-20)
nn(Ritchie-23, Dennis-22)
agent(developed-18, Ritchie-23)
det(Laboratories-28, the-25)
nn(Laboratories-28, Bell-26)
nn(Laboratories-28, Telephone-27)
prep_at(Ritchie-23, Laboratories-28)
prep_for(developed-18, use-30)
det(system-35, the-32)
nn(system-35, Unix-33)
nn(system-35, operating-34)
prep_with(use-30, system-35)

The Commodores were a highly successful funk \/ soul band of the 1970s and 1980s .

det(Commodores-2, The-1)
nsubj(band-10, Commodores-2)
cop(band-10, were-3)
det(band-10, a-4)
advmod(successful-6, highly-5)
amod(band-10, successful-6)
nn(band-10, funk-7)
nn(band-10, \/-8)
nn(band-10, soul-9)
root(ROOT-0, band-10)
dep(1970s-13, the-12)
prep_of(band-10, 1970s-13)
prep_of(band-10, 1980s-15)
conj_and(1970s-13, 1980s-15)

In anatomy : Cortex refers to the outermost or superficial layer of an organ , and especially in the brain .

prep_in(refers-5, anatomy-2)
nsubj(refers-5, Cortex-4)
root(ROOT-0, refers-5)
prep(refers-5, to-6)
det(layer-11, the-7)
amod(layer-11, outermost-8)
conj_or(outermost-8, superficial-10)
amod(layer-11, superficial-10)
pobj(to-6, layer-11)
det(organ-14, an-13)
prep_of(layer-11, organ-14)
prep(refers-5, especially-17)
advmod(to-6, especially-17)
conj_and(to-6, especially-17)
dep(to-6, in-18)
det(brain-20, the-19)
pobj(in-18, brain-20)

In vector calculus , Curl - LBR - or : rotor - RBR - is a vector operator that shows a vector field 's `` rotation `` ; that is , the direction of the axis of rotation and the magnitude of the rotation .

nn(calculus-3, vector-2)
prep_in(operator-18, calculus-3)
nsubj(operator-18, Curl-5)
conj_or(Curl-5, LBR-7)
nsubj(operator-18, LBR-7)
dep(Curl-5, rotor-11)
conj_or(Curl-5, RBR-13)
nsubj(operator-18, RBR-13)
cop(operator-18, is-15)
det(operator-18, a-16)
nn(operator-18, vector-17)
root(ROOT-0, operator-18)
nsubj(shows-20, operator-18)
rcmod(operator-18, shows-20)
det(field-23, a-21)
nn(field-23, vector-22)
nsubj(rotation-26, field-23)
aux(rotation-26, 's-24)
ccomp(shows-20, rotation-26)
nsubj(direction-33, that-29)
cop(direction-33, is-30)
det(direction-33, the-32)
ccomp(rotation-26, direction-33)
det(axis-36, the-35)
prep_of(direction-33, axis-36)
prep_of(axis-36, rotation-38)
det(magnitude-41, the-40)
prep_of(direction-33, magnitude-41)
conj_and(axis-36, magnitude-41)
det(rotation-44, the-43)
prep_of(magnitude-41, rotation-44)

In Greek mythology , Kharybdis or Charybdis - LBR - kÃ ≈ Â˙Ã -- Â √ rÃ ≈ ÂªbdÃ ≈ Â ¨ s ; in Greek , Ã ⁄ Â § Ã ⁄ Â ¬ Ã ∂ Â ™ Ã ∂ Â ∑ Ã ⁄ Â '' Ã ⁄ Â ´ Ã ⁄ Â ' Ã ∂ Â ≠ - RBR - was a sea monster , the daughter of Poseidon and Gaia .

amod(mythology-3, Greek-2)
prep_in(⁄-49, mythology-3)
appos(mythology-3, Kharybdis-5)
appos(mythology-3, Charybdis-7)
conj_or(Kharybdis-5, Charybdis-7)
dep(mythology-3, LBR-9)
nn(Â˙Ã-13, kÃ-11)
nn(Â˙Ã-13, ≈-12)
dep(mythology-3, Â˙Ã-13)
nn(s-23, Â-15)
nn(s-23, √-16)
nn(s-23, rÃ-17)
nn(s-23, ≈-18)
nn(s-23, ÂªbdÃ-19)
nn(s-23, ≈-20)
nn(s-23, Â-21)
nn(s-23, ¨-22)
dep(mythology-3, s-23)
prep_in(mythology-3, Greek-26)
nn(Ã-48, Ã-28)
nn(Ã-48, ⁄-29)
nn(Ã-48, Â-30)
nn(Ã-48, §-31)
nn(Ã-48, Ã-32)
nn(Ã-48, ⁄-33)
nn(Ã-48, Â-34)
nn(Ã-48, ¬-35)
nn(Ã-48, Ã-36)
nn(Ã-48, ∂-37)
nn(Ã-48, Â-38)
nn(Ã-48, ™-39)
nn(Ã-48, Ã-40)
nn(Ã-48, ∂-41)
nn(Ã-48, Â-42)
nn(Ã-48, ∑-43)
nn(Ã-48, Ã-44)
nn(Ã-48, ⁄-45)
nn(Ã-48, Â-46)
nsubj(⁄-49, Ã-48)
root(ROOT-0, ⁄-49)
nn(Â-54, Â-50)
nn(Â-54, ´-51)
nn(Â-54, Ã-52)
nn(Â-54, ⁄-53)
poss(≠-59, Â-54)
nn(≠-59, Ã-56)
nn(≠-59, ∂-57)
nn(≠-59, Â-58)
nsubj(monster-66, ≠-59)
dep(≠-59, RBR-61)
cop(monster-66, was-63)
det(monster-66, a-64)
nn(monster-66, sea-65)
ccomp(⁄-49, monster-66)
det(daughter-69, the-68)
appos(monster-66, daughter-69)
prep_of(daughter-69, Poseidon-71)
prep_of(daughter-69, Gaia-73)
conj_and(Poseidon-71, Gaia-73)

In mathematics , a Conjecture is a mathematical statement which appears likely to be true , but has not been formally proven to be true under the rules of mathematical logic .

prep_in(statement-9, mathematics-2)
det(Conjecture-5, a-4)
nsubj(statement-9, Conjecture-5)
cop(statement-9, is-6)
det(statement-9, a-7)
amod(statement-9, mathematical-8)
root(ROOT-0, statement-9)
nsubj(likely-12, statement-9)
nsubjpass(proven-22, statement-9)
cop(likely-12, appears-11)
rcmod(statement-9, likely-12)
aux(true-15, to-13)
cop(true-15, be-14)
xcomp(likely-12, true-15)
aux(proven-22, has-18)
neg(proven-22, not-19)
auxpass(proven-22, been-20)
advmod(proven-22, formally-21)
rcmod(statement-9, proven-22)
conj_but(likely-12, proven-22)
aux(true-25, to-23)
cop(true-25, be-24)
xcomp(proven-22, true-25)
det(rules-28, the-27)
prep_under(true-25, rules-28)
amod(logic-31, mathematical-30)
prep_of(rules-28, logic-31)

The word Cardinal usually refers to things of fundamental importance , as in cardinal rule or cardinal sins .

det(Cardinal-3, The-1)
nn(Cardinal-3, word-2)
nsubj(refers-5, Cardinal-3)
advmod(refers-5, usually-4)
root(ROOT-0, refers-5)
prep_to(refers-5, things-7)
amod(importance-10, fundamental-9)
prep_of(things-7, importance-10)
advmod(refers-5, as-12)
amod(rule-15, cardinal-14)
prep_in(refers-5, rule-15)
nn(sins-18, cardinal-17)
prep_in(refers-5, sins-18)
conj_or(rule-15, sins-18)

In mathematics , the Cardinality of a set is a measure of the `` number of elements of the set `` .

prep_in(measure-11, mathematics-2)
det(Cardinality-5, the-4)
nsubj(measure-11, Cardinality-5)
det(set-8, a-7)
prep_of(Cardinality-5, set-8)
cop(measure-11, is-9)
det(measure-11, a-10)
root(ROOT-0, measure-11)
det(number-15, the-13)
prep_of(measure-11, number-15)
prep_of(number-15, elements-17)
det(set-20, the-19)
prep_of(number-15, set-20)

In computational complexity theory , Co-NP is a complexity class .

amod(theory-4, computational-2)
nn(theory-4, complexity-3)
prep_in(class-10, theory-4)
nsubj(class-10, Co-NP-6)
cop(class-10, is-7)
det(class-10, a-8)
nn(class-10, complexity-9)
root(ROOT-0, class-10)

A Cardinal is a senior ecclesiastical official , usually a bishop , of the Catholic Church .

det(Cardinal-2, A-1)
nsubj(official-7, Cardinal-2)
cop(official-7, is-3)
det(official-7, a-4)
amod(official-7, senior-5)
amod(official-7, ecclesiastical-6)
root(ROOT-0, official-7)
advmod(bishop-11, usually-9)
det(bishop-11, a-10)
appos(official-7, bishop-11)
det(Church-16, the-14)
nn(Church-16, Catholic-15)
prep_of(official-7, Church-16)

A Civilization or civilisation is a society or culture group normally defined as a complex society characterized by the practice of agriculture and settlement in cities .

det(Civilization-2, A-1)
nsubj(group-10, Civilization-2)
conj_or(Civilization-2, civilisation-4)
nsubj(group-10, civilisation-4)
cop(group-10, is-5)
det(group-10, a-6)
nn(group-10, society-7)
conj_or(society-7, culture-9)
nn(group-10, culture-9)
root(ROOT-0, group-10)
advmod(defined-12, normally-11)
partmod(group-10, defined-12)
det(society-16, a-14)
amod(society-16, complex-15)
prep_as(defined-12, society-16)
partmod(society-16, characterized-17)
det(practice-20, the-19)
agent(characterized-17, practice-20)
prep_of(practice-20, agriculture-22)
prep_of(practice-20, settlement-24)
conj_and(agriculture-22, settlement-24)
prep_in(characterized-17, cities-26)

A Cube is a three-dimensional solid object bounded by six square faces , facets or sides , with three meeting at each vertex .

det(Cube-2, A-1)
nsubj(object-7, Cube-2)
cop(object-7, is-3)
det(object-7, a-4)
amod(object-7, three-dimensional-5)
amod(object-7, solid-6)
root(ROOT-0, object-7)
partmod(object-7, bounded-8)
num(faces-12, six-10)
amod(faces-12, square-11)
agent(bounded-8, faces-12)
appos(faces-12, facets-14)
appos(faces-12, sides-16)
conj_or(facets-14, sides-16)
num(meeting-20, three-19)
prep_with(bounded-8, meeting-20)
det(vertex-23, each-22)
prep_at(meeting-20, vertex-23)

In architecture , a Cupola or lantern is a radially symmetrical ornamental structure - LBR - often dome-shaped or quadrilateral - RBR - located on top of a larger roof or dome , often used as a lookout or to admit light and provide ventilation .

prep_in(structure-13, architecture-2)
det(Cupola-5, a-4)
nsubj(structure-13, Cupola-5)
conj_or(Cupola-5, lantern-7)
nsubj(structure-13, lantern-7)
cop(structure-13, is-8)
det(structure-13, a-9)
advmod(symmetrical-11, radially-10)
amod(structure-13, symmetrical-11)
amod(structure-13, ornamental-12)
dep(LBR-15, structure-13)
root(ROOT-0, LBR-15)
advmod(dome-shaped-18, often-17)
dep(LBR-15, dome-shaped-18)
dep(LBR-15, quadrilateral-20)
conj_or(dome-shaped-18, quadrilateral-20)
dep(dome-shaped-18, RBR-22)
dep(LBR-15, located-24)
det(roof-30, a-28)
amod(roof-30, larger-29)
prep_on_top_of(located-24, roof-30)
prep_on_top_of(located-24, dome-32)
conj_or(roof-30, dome-32)
advmod(used-35, often-34)
partmod(located-24, used-35)
dep(used-35, as-36)
det(lookout-38, a-37)
pobj(as-36, lookout-38)
aux(admit-41, to-40)
dep(used-35, admit-41)
conj_or(as-36, admit-41)
dobj(admit-41, light-42)
conj_or(as-36, provide-44)
conj_and(admit-41, provide-44)
dobj(provide-44, ventilation-45)

In traditional cultures , Air is often seen as a universal power or pure substance .

amod(cultures-3, traditional-2)
prep_in(seen-8, cultures-3)
nsubjpass(seen-8, Air-5)
auxpass(seen-8, is-6)
advmod(seen-8, often-7)
root(ROOT-0, seen-8)
det(power-12, a-10)
amod(power-12, universal-11)
prep_as(seen-8, power-12)
amod(substance-15, pure-14)
prep_as(seen-8, substance-15)
conj_or(power-12, substance-15)

A Church is a building used for prayer , worship , or other public religious services , usually referring specifically to those for Christian worship .

det(Church-2, A-1)
nsubj(building-5, Church-2)
cop(building-5, is-3)
det(building-5, a-4)
root(ROOT-0, building-5)
partmod(building-5, used-6)
prep_for(used-6, prayer-8)
prep_for(used-6, worship-10)
conj_or(prayer-8, worship-10)
amod(services-16, other-13)
amod(services-16, public-14)
amod(services-16, religious-15)
prep_for(used-6, services-16)
conj_or(prayer-8, services-16)
advmod(referring-19, usually-18)
xcomp(used-6, referring-19)
advmod(referring-19, specifically-20)
prep_to(referring-19, those-22)
amod(worship-25, Christian-24)
prep_for(those-22, worship-25)

A Capsid is the protein shell of a virus .

det(Capsid-2, A-1)
nsubj(shell-6, Capsid-2)
cop(shell-6, is-3)
det(shell-6, the-4)
nn(shell-6, protein-5)
root(ROOT-0, shell-6)
det(virus-9, a-8)
prep_of(shell-6, virus-9)

Cretinism is a condition of severely stunted physical and mental growth due to untreated congenital deficiency of thyroid hormones - LBR - hypothyroidism - RBR - .

nsubj(condition-4, Cretinism-1)
cop(condition-4, is-2)
det(condition-4, a-3)
root(ROOT-0, condition-4)
advmod(stunted-7, severely-6)
amod(hormones-19, stunted-7)
amod(hormones-19, physical-8)
conj_and(physical-8, mental-10)
amod(hormones-19, mental-10)
nn(hormones-19, growth-11)
amod(congenital-15, untreated-14)
amod(deficiency-16, congenital-15)
prep_due_to(hormones-19, deficiency-16)
prep_of(deficiency-16, thyroid-18)
prep_of(condition-4, hormones-19)
nn(RBR-25, LBR-21)
dep(RBR-25, hypothyroidism-23)
dep(hormones-19, RBR-25)

The Calorie is a pre-SI unit of energy , in particular heat .

det(Calorie-2, The-1)
nsubj(unit-6, Calorie-2)
cop(unit-6, is-3)
det(unit-6, a-4)
amod(unit-6, pre-SI-5)
root(ROOT-0, unit-6)
prep_of(unit-6, energy-8)
amod(heat-12, particular-11)
prep_in(unit-6, heat-12)

Corcovado , meaning `` hunchback `` in Portuguese is a mountain in central Rio de Janeiro , Brazil .

nsubj(mountain-11, Corcovado-1)
partmod(mountain-11, meaning-3)
dobj(meaning-3, hunchback-5)
prep_in(hunchback-5, Portuguese-8)
cop(mountain-11, is-9)
det(mountain-11, a-10)
root(ROOT-0, mountain-11)
amod(Janeiro-16, central-13)
nn(Janeiro-16, Rio-14)
nn(Janeiro-16, de-15)
prep_in(mountain-11, Janeiro-16)
appos(Janeiro-16, Brazil-18)

The Clarinet is a musical instrument in the woodwind family .

det(Clarinet-2, The-1)
nsubj(instrument-6, Clarinet-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, musical-5)
root(ROOT-0, instrument-6)
det(family-10, the-8)
nn(family-10, woodwind-9)
prep_in(instrument-6, family-10)

ChojnÃ ∞ Â `` w - LBR - Haynau - RBR - is a small town - LBR - 14,389 inhabitants as of 2006 - RBR - on the Skora river , in Legnica County , - LBR - Lower Silesian Voivodeship - RBR - , in south-western Poland .

nn(Â-3, ChojnÃ-1)
nn(Â-3, ∞-2)
nsubj(w-5, Â-3)
root(ROOT-0, w-5)
nsubj(town-16, LBR-7)
dep(LBR-7, Haynau-9)
dep(Haynau-9, RBR-11)
cop(town-16, is-13)
det(town-16, a-14)
amod(town-16, small-15)
parataxis(w-5, town-16)
dep(town-16, LBR-18)
num(inhabitants-21, 14,389-20)
npadvmod(LBR-18, inhabitants-21)
prep_as_of(LBR-18, 2006-24)
dep(LBR-38, RBR-26)
dep(RBR-26, on-28)
det(river-31, the-29)
nn(river-31, Skora-30)
pobj(on-28, river-31)
nn(County-35, Legnica-34)
prep_in(river-31, County-35)
dep(LBR-18, LBR-38)
nn(Voivodeship-42, Lower-40)
nn(Voivodeship-42, Silesian-41)
dep(town-16, Voivodeship-42)
dep(Voivodeship-42, RBR-44)
amod(Poland-49, south-western-48)
prep_in(town-16, Poland-49)

The term Carcinogen refers to any substance , radionuclide or radiation that is an agent directly involved in the promotion of cancer or in the facilitation of its propagation .

det(Carcinogen-3, The-1)
nn(Carcinogen-3, term-2)
nsubj(refers-4, Carcinogen-3)
root(ROOT-0, refers-4)
det(substance-7, any-6)
prep_to(refers-4, substance-7)
nsubj(agent-15, substance-7)
prep_to(refers-4, radionuclide-9)
conj_or(substance-7, radionuclide-9)
nsubj(agent-15, radionuclide-9)
prep_to(refers-4, radiation-11)
conj_or(substance-7, radiation-11)
nsubj(agent-15, radiation-11)
cop(agent-15, is-13)
det(agent-15, an-14)
rcmod(substance-7, agent-15)
advmod(involved-17, directly-16)
partmod(agent-15, involved-17)
det(promotion-20, the-19)
prep_in(involved-17, promotion-20)
prep_of(promotion-20, cancer-22)
det(facilitation-26, the-25)
prep_in(involved-17, facilitation-26)
conj_or(promotion-20, facilitation-26)
poss(propagation-29, its-28)
prep_of(facilitation-26, propagation-29)

A Clock is an instrument for measuring , indicating and maintaining the time .

det(Clock-2, A-1)
nsubj(instrument-5, Clock-2)
cop(instrument-5, is-3)
det(instrument-5, an-4)
root(ROOT-0, instrument-5)
prepc_for(instrument-5, measuring-7)
prepc_for(instrument-5, indicating-9)
conj_and(measuring-7, indicating-9)
prepc_for(instrument-5, maintaining-11)
conj_and(measuring-7, maintaining-11)
det(time-13, the-12)
dobj(measuring-7, time-13)

The Chlorophyceae are one of the classes of green algae , distinguished mainly on the basis of ultrastructural morphology .

det(Chlorophyceae-2, The-1)
nsubj(one-4, Chlorophyceae-2)
cop(one-4, are-3)
root(ROOT-0, one-4)
det(classes-7, the-6)
prep_of(one-4, classes-7)
amod(algae-10, green-9)
prep_of(classes-7, algae-10)
partmod(classes-7, distinguished-12)
advmod(distinguished-12, mainly-13)
det(basis-16, the-15)
prep_on(distinguished-12, basis-16)
amod(morphology-19, ultrastructural-18)
prep_of(basis-16, morphology-19)

A Clutch is a mechanism for transmitting rotation , which can be engaged and disengaged .

det(Clutch-2, A-1)
nsubj(mechanism-5, Clutch-2)
cop(mechanism-5, is-3)
det(mechanism-5, a-4)
root(ROOT-0, mechanism-5)
prepc_for(mechanism-5, transmitting-7)
dobj(transmitting-7, rotation-8)
nsubjpass(engaged-13, rotation-8)
nsubjpass(disengaged-15, rotation-8)
aux(engaged-13, can-11)
auxpass(engaged-13, be-12)
rcmod(rotation-8, engaged-13)
rcmod(rotation-8, disengaged-15)
conj_and(engaged-13, disengaged-15)

In Greek mythology , Cassandra - LBR - Greek : Ã ⁄ Â˚Ã ⁄ Â ± Ã ∂ Â ∞ Ã ∂ Â ∞ Ã ⁄ Â ¬ Ã ⁄ Â ∏ Ã ⁄ Â ´ Ã ∂ Â ™ Ã ⁄ Â ± `` she who entangles women `` - RBR - - LBR - also known as Alexandra - RBR - was the daughter of King Priam and Queen Hecuba of Troy .

amod(mythology-3, Greek-2)
prep_in(Ã-11, mythology-3)
nsubj(Ã-11, Cassandra-5)
dep(Cassandra-5, LBR-7)
dep(LBR-7, Greek-9)
root(ROOT-0, Ã-11)
amod(±-44, ⁄-12)
nn(±-44, Â˚Ã-13)
nn(±-44, ⁄-14)
nn(±-44, Â-15)
nn(±-44, ±-16)
nn(±-44, Ã-17)
nn(±-44, ∂-18)
nn(±-44, Â-19)
nn(±-44, ∞-20)
nn(±-44, Ã-21)
nn(±-44, ∂-22)
nn(±-44, Â-23)
nn(±-44, ∞-24)
nn(±-44, Ã-25)
nn(±-44, ⁄-26)
nn(±-44, Â-27)
nn(±-44, ¬-28)
nn(±-44, Ã-29)
nn(±-44, ⁄-30)
nn(±-44, Â-31)
nn(±-44, ∏-32)
nn(±-44, Ã-33)
nn(±-44, ⁄-34)
nn(±-44, Â-35)
nn(±-44, ´-36)
nn(±-44, Ã-37)
nn(±-44, ∂-38)
nn(±-44, Â-39)
nn(±-44, ™-40)
nn(±-44, Ã-41)
nn(±-44, ⁄-42)
nn(±-44, Â-43)
nsubj(daughter-66, ±-44)
nsubj(entangles-48, she-46)
nsubj(known-58, she-46)
rcmod(she-46, entangles-48)
dobj(entangles-48, women-49)
dobj(entangles-48, RBR-52)
dep(RBR-52, LBR-55)
advmod(known-58, also-57)
ccomp(±-44, known-58)
prep_as(known-58, Alexandra-60)
nsubj(daughter-66, RBR-62)
cop(daughter-66, was-64)
det(daughter-66, the-65)
ccomp(Ã-11, daughter-66)
nn(Priam-69, King-68)
prep_of(daughter-66, Priam-69)
nn(Hecuba-72, Queen-71)
ccomp(Ã-11, Hecuba-72)
conj_and(daughter-66, Hecuba-72)
prep_of(Hecuba-72, Troy-74)

A Couplet is a pair of lines of verse .

det(Couplet-2, A-1)
nsubj(pair-5, Couplet-2)
cop(pair-5, is-3)
det(pair-5, a-4)
root(ROOT-0, pair-5)
prep_of(pair-5, lines-7)
prep_of(lines-7, verse-9)

A Carnivore - LBR - Ã -- Â √ kÃ ≈ ÂŒrnÃ ≈ ÂªvÃ ≈ Â ‰ Ã ≈ Â˙r - RBR - , meaning ` meat eater ' - LBR - Latin carne meaning ` flesh ' and vorare meaning ` to devour ' - RBR - , is an animal with a diet consisting mainly of meat , whether it comes from animals living - LBR - predation - RBR - or dead - LBR - scavenging - RBR - .

nn(Ã-6, A-1)
nn(Ã-6, Carnivore-2)
dep(Ã-6, LBR-4)
nsubj(animal-52, Ã-6)
nn(Â˙r-20, Â-8)
nn(Â˙r-20, √-9)
nn(Â˙r-20, kÃ-10)
nn(Â˙r-20, ≈-11)
nn(Â˙r-20, ÂŒrnÃ-12)
nn(Â˙r-20, ≈-13)
nn(Â˙r-20, ÂªvÃ-14)
nn(Â˙r-20, ≈-15)
nn(Â˙r-20, Â-16)
nn(Â˙r-20, ‰-17)
nn(Â˙r-20, Ã-18)
nn(Â˙r-20, ≈-19)
dep(Ã-6, Â˙r-20)
dep(Â˙r-20, RBR-22)
dep(Ã-6, meaning-25)
nn(eater-28, meat-27)
dobj(meaning-25, eater-28)
dep(eater-28, LBR-31)
amod(carne-34, Latin-33)
amod(eater-28, carne-34)
dep(meaning-25, meaning-35)
dobj(meaning-35, flesh-37)
dep(meaning-25, vorare-40)
advmod(meaning-35, vorare-40)
conj_and(meaning-35, vorare-40)
dep(meaning-25, meaning-41)
conj_and(meaning-35, meaning-41)
aux(devour-44, to-43)
xcomp(meaning-41, devour-44)
dep(Ã-6, RBR-47)
cop(animal-52, is-50)
det(animal-52, an-51)
root(ROOT-0, animal-52)
det(diet-55, a-54)
prep_with(animal-52, diet-55)
partmod(diet-55, consisting-56)
advmod(consisting-56, mainly-57)
prep_of(consisting-56, meat-59)
complm(comes-63, whether-61)
nsubj(comes-63, it-62)
ccomp(consisting-56, comes-63)
nn(living-66, animals-65)
prep_from(comes-63, living-66)
prep_from(comes-63, LBR-68)
conj_or(living-66, LBR-68)
prep_from(comes-63, predation-70)
conj_or(living-66, predation-70)
prep_from(comes-63, RBR-72)
conj_or(living-66, RBR-72)
amod(scavenging-79, dead-75)
dep(scavenging-79, LBR-77)
prep_from(comes-63, scavenging-79)
conj_or(living-66, scavenging-79)
dep(scavenging-79, RBR-81)

The Cello is a bowed string instrument .

det(Cello-2, The-1)
nsubj(instrument-7, Cello-2)
cop(instrument-7, is-3)
det(instrument-7, a-4)
amod(instrument-7, bowed-5)
nn(instrument-7, string-6)
root(ROOT-0, instrument-7)

The Cimbri were a Celtic or Germanic tribe who together with the Teutones and the Ambrones threatened the Roman Republic in the late 2nd century BC .

det(Cimbri-2, The-1)
nsubj(tribe-8, Cimbri-2)
cop(tribe-8, were-3)
det(tribe-8, a-4)
amod(tribe-8, Celtic-5)
conj_or(Celtic-5, Germanic-7)
amod(tribe-8, Germanic-7)
root(ROOT-0, tribe-8)
nsubj(threatened-17, tribe-8)
det(Ambrones-16, the-12)
nn(Ambrones-16, Teutones-13)
conj_and(Teutones-13, the-15)
nn(Ambrones-16, the-15)
prep_together_with(threatened-17, Ambrones-16)
rcmod(tribe-8, threatened-17)
det(Republic-20, the-18)
nn(Republic-20, Roman-19)
dobj(threatened-17, Republic-20)
det(BC-26, the-22)
amod(BC-26, late-23)
amod(BC-26, 2nd-24)
nn(BC-26, century-25)
prep_in(threatened-17, BC-26)

A Carbine is a firearm similar to a rifle or musket , but generally shorter and of lesser power .

det(Carbine-2, A-1)
nsubj(firearm-5, Carbine-2)
cop(firearm-5, is-3)
det(firearm-5, a-4)
root(ROOT-0, firearm-5)
amod(firearm-5, similar-6)
det(rifle-9, a-8)
prep_to(similar-6, rifle-9)
prep_to(similar-6, musket-11)
conj_or(rifle-9, musket-11)
advmod(shorter-15, generally-14)
amod(firearm-5, shorter-15)
conj_but(similar-6, shorter-15)
dep(of-17, and-16)
dep(shorter-15, of-17)
amod(power-19, lesser-18)
pobj(of-17, power-19)

The Cyclades - LBR - Greek Ã ⁄ Â˚Ã ∂ Â ∑ Ã ⁄ ÂºÃ ⁄ Â '' Ã ⁄ Â ¬ Ã ⁄ Â ´ Ã ⁄ ÂµÃ ∂ Â ≠ - RBR - are a Greek island group in the Aegean Sea , south-east of the mainland of Greece ; and an administrative prefecture of Greece .

det(Cyclades-2, The-1)
nsubj(group-40, Cyclades-2)
nn(RBR-34, LBR-4)
amod(Â-31, Greek-6)
nn(Â-31, Ã-7)
nn(Â-31, ⁄-8)
nn(Â-31, Â˚Ã-9)
nn(Â-31, ∂-10)
nn(Â-31, Â-11)
nn(Â-31, ∑-12)
nn(Â-31, Ã-13)
nn(Â-31, ⁄-14)
nn(Â-31, ÂºÃ-15)
amod(Â-31, ⁄-16)
nn(Â-31, Â-17)
nn(Â-31, Ã-19)
nn(Â-31, ⁄-20)
nn(Â-31, Â-21)
nn(Â-31, ¬-22)
nn(Â-31, Ã-23)
nn(Â-31, ⁄-24)
nn(Â-31, Â-25)
nn(Â-31, ´-26)
nn(Â-31, Ã-27)
nn(Â-31, ⁄-28)
nn(Â-31, ÂµÃ-29)
nn(Â-31, ∂-30)
dep(≠-32, Â-31)
dep(RBR-34, ≠-32)
dep(Cyclades-2, RBR-34)
cop(group-40, are-36)
det(group-40, a-37)
amod(group-40, Greek-38)
nn(group-40, island-39)
root(ROOT-0, group-40)
det(Sea-44, the-42)
nn(Sea-44, Aegean-43)
prep_in(group-40, Sea-44)
conj_and(group-40, south-east-46)
det(mainland-49, the-48)
prep_of(south-east-46, mainland-49)
prep_of(mainland-49, Greece-51)
det(prefecture-56, an-54)
amod(prefecture-56, administrative-55)
conj_and(group-40, prefecture-56)
prep_of(prefecture-56, Greece-58)

The term Camel describes any of the six camellike creatures in the family Camelidae : the two true camels , and the four South American camelids , the llama , alpaca , guanaco , and vicuÃ ∞ Â ± a .

det(Camel-3, The-1)
nn(Camel-3, term-2)
nsubj(describes-4, Camel-3)
root(ROOT-0, describes-4)
dobj(describes-4, any-5)
det(creatures-10, the-7)
num(creatures-10, six-8)
amod(creatures-10, camellike-9)
prep_of(any-5, creatures-10)
det(Camelidae-14, the-12)
nn(Camelidae-14, family-13)
prep_in(creatures-10, Camelidae-14)
det(camels-19, the-16)
num(camels-19, two-17)
amod(camels-19, true-18)
prep_of(any-5, camels-19)
conj_and(creatures-10, camels-19)
det(camelids-26, the-22)
num(camelids-26, four-23)
nn(camelids-26, South-24)
nn(camelids-26, American-25)
prep_of(any-5, camelids-26)
conj_and(creatures-10, camelids-26)
det(llama-29, the-28)
conj_and(creatures-10, llama-29)
conj_and(camelids-26, llama-29)
conj_and(creatures-10, alpaca-31)
conj_and(camelids-26, alpaca-31)
conj_and(creatures-10, guanaco-33)
conj_and(camelids-26, guanaco-33)
nn(a-40, vicuÃ-36)
nn(a-40, ∞-37)
nn(a-40, Â-38)
nn(a-40, ±-39)
conj_and(creatures-10, a-40)
conj_and(camelids-26, a-40)

In computer science , Currying , invented by Moses SchÃ ∞ Â ¶ nfinkel and Gottlob Frege , is the technique of transforming a function that takes multiple arguments - LBR - or more accurately an n-tuple as argument - RBR - in such a way as it can be called as a chain of functions each with a single argument .

nn(science-3, computer-2)
prep_in(technique-21, science-3)
nsubj(technique-21, Currying-5)
partmod(Currying-5, invented-7)
nn(nfinkel-14, Moses-9)
nn(nfinkel-14, SchÃ-10)
nn(nfinkel-14, ∞-11)
nn(nfinkel-14, Â-12)
nn(nfinkel-14, ¶-13)
agent(invented-7, nfinkel-14)
nn(Frege-17, Gottlob-16)
agent(invented-7, Frege-17)
conj_and(nfinkel-14, Frege-17)
cop(technique-21, is-19)
det(technique-21, the-20)
root(ROOT-0, technique-21)
prepc_of(technique-21, transforming-23)
det(function-25, a-24)
dobj(transforming-23, function-25)
nsubj(takes-27, function-25)
rcmod(function-25, takes-27)
amod(arguments-29, multiple-28)
dobj(takes-27, arguments-29)
advmod(n-tuple-37, LBR-31)
advmod(accurately-35, more-34)
conj_or(LBR-31, accurately-35)
advmod(n-tuple-37, accurately-35)
det(n-tuple-37, an-36)
dep(arguments-29, n-tuple-37)
prep_as(n-tuple-37, argument-39)
dep(arguments-29, RBR-41)
predet(way-46, such-44)
det(way-46, a-45)
prep_in(arguments-29, way-46)
mark(called-51, as-47)
nsubjpass(called-51, it-48)
aux(called-51, can-49)
auxpass(called-51, be-50)
advcl(takes-27, called-51)
det(chain-54, a-53)
prep_as(called-51, chain-54)
prep_of(chain-54, functions-56)
dep(functions-56, each-57)
det(argument-61, a-59)
amod(argument-61, single-60)
prep_with(called-51, argument-61)

In mathematics , Compactification is the process or result of enlarging a topological space to make it compact .

prep_in(process-7, mathematics-2)
nsubj(process-7, Compactification-4)
cop(process-7, is-5)
det(process-7, the-6)
root(ROOT-0, process-7)
conj_or(process-7, result-9)
prepc_of(process-7, enlarging-11)
det(space-14, a-12)
amod(space-14, topological-13)
dobj(enlarging-11, space-14)
aux(make-16, to-15)
xcomp(enlarging-11, make-16)
dobj(make-16, it-17)
amod(it-17, compact-18)

In computer architecture , a Bus is a subsystem that transfers data between computer components inside a computer or between computers .

nn(architecture-3, computer-2)
prep_in(subsystem-9, architecture-3)
det(Bus-6, a-5)
nsubj(subsystem-9, Bus-6)
cop(subsystem-9, is-7)
det(subsystem-9, a-8)
root(ROOT-0, subsystem-9)
nsubj(transfers-11, subsystem-9)
nsubj(transfers-11', subsystem-9)
rcmod(subsystem-9, transfers-11)
rcmod(subsystem-9, transfers-11')
conj_or(transfers-11, transfers-11')
dobj(transfers-11, data-12)
nn(components-15, computer-14)
prep_between(data-12, components-15)
det(computer-18, a-17)
prep_inside(transfers-11, computer-18)
prep_between(transfers-11', computers-21)

Cuisine is a specific set of cooking traditions and practices , often associated with a specific culture .

nsubj(set-5, Cuisine-1)
cop(set-5, is-2)
det(set-5, a-3)
amod(set-5, specific-4)
root(ROOT-0, set-5)
amod(traditions-8, cooking-7)
prep_of(set-5, traditions-8)
prep_of(set-5, practices-10)
conj_and(traditions-8, practices-10)
advmod(associated-13, often-12)
partmod(set-5, associated-13)
det(culture-17, a-15)
amod(culture-17, specific-16)
prep_with(associated-13, culture-17)

CPAN can denote either the archive network itself , or the Perl program that acts as an interface to the network and as an automated software installer - LBR - somewhat like a package manager - RBR - .

nsubj(denote-3, CPAN-1)
aux(denote-3, can-2)
root(ROOT-0, denote-3)
advmod(network-7, either-4)
det(network-7, the-5)
nn(network-7, archive-6)
dobj(denote-3, network-7)
advmod(network-7, itself-8)
det(program-13, the-11)
amod(program-13, Perl-12)
dobj(denote-3, program-13)
conj_or(network-7, program-13)
nsubj(acts-15, program-13)
rcmod(program-13, acts-15)
det(interface-18, an-17)
prep_as(acts-15, interface-18)
prep_as(acts-15, interface-18')
conj_and(interface-18, interface-18')
det(network-21, the-20)
prep_to(interface-18, network-21)
det(installer-27, an-24)
amod(installer-27, automated-25)
nn(installer-27, software-26)
prep_as(interface-18', installer-27)
dep(RBR-37, LBR-29)
advmod(like-32, somewhat-31)
dep(LBR-29, like-32)
det(manager-35, a-33)
nn(manager-35, package-34)
pobj(like-32, manager-35)
dep(acts-15, RBR-37)

In the most general sense of the word , a Cement is a binder , a substance which sets and hardens independently , and can bind other materials together .

det(sense-5, the-2)
advmod(general-4, most-3)
amod(sense-5, general-4)
prep_in(binder-14, sense-5)
det(word-8, the-7)
prep_of(sense-5, word-8)
det(Cement-11, a-10)
nsubj(binder-14, Cement-11)
cop(binder-14, is-12)
det(binder-14, a-13)
root(ROOT-0, binder-14)
det(substance-17, a-16)
appos(binder-14, substance-17)
nsubj(sets-19, substance-17)
nsubj(hardens-21, substance-17)
nsubj(bind-26, substance-17)
rcmod(substance-17, sets-19)
rcmod(substance-17, hardens-21)
conj_and(sets-19, hardens-21)
advmod(hardens-21, independently-22)
aux(bind-26, can-25)
rcmod(substance-17, bind-26)
conj_and(sets-19, bind-26)
amod(materials-28, other-27)
dobj(bind-26, materials-28)
advmod(bind-26, together-29)

A Clade is a taxonomic group comprising a single common ancestor and all the descendants of that ancestor .

det(Clade-2, A-1)
nsubj(group-6, Clade-2)
cop(group-6, is-3)
det(group-6, a-4)
amod(group-6, taxonomic-5)
root(ROOT-0, group-6)
partmod(group-6, comprising-7)
det(ancestor-11, a-8)
amod(ancestor-11, single-9)
amod(ancestor-11, common-10)
dobj(comprising-7, ancestor-11)
predet(descendants-15, all-13)
det(descendants-15, the-14)
dobj(comprising-7, descendants-15)
conj_and(ancestor-11, descendants-15)
det(ancestor-18, that-17)
prep_of(descendants-15, ancestor-18)

In mathematics , especially in order theory , the Cofinality cf-LBR-A - RBR - of a partially ordered set A is the least of the cardinalities of the cofinal subsets of A .

prep_in(least-23, mathematics-2)
advmod(least-23, especially-4)
nn(theory-7, order-6)
prep_in(least-23, theory-7)
det(cf-LBR-A-11, the-9)
nn(cf-LBR-A-11, Cofinality-10)
nsubj(least-23, cf-LBR-A-11)
dep(cf-LBR-A-11, RBR-13)
det(A-20, a-16)
advmod(ordered-18, partially-17)
amod(A-20, ordered-18)
nn(A-20, set-19)
prep_of(cf-LBR-A-11, A-20)
cop(least-23, is-21)
det(least-23, the-22)
root(ROOT-0, least-23)
det(cardinalities-26, the-25)
prep_of(least-23, cardinalities-26)
det(subsets-30, the-28)
amod(subsets-30, cofinal-29)
prep_of(cardinalities-26, subsets-30)
prep_of(subsets-30, A-32)

A Citadel is a fortress for protecting a town , sometimes incorporating a castle .

det(Citadel-2, A-1)
nsubj(fortress-5, Citadel-2)
cop(fortress-5, is-3)
det(fortress-5, a-4)
root(ROOT-0, fortress-5)
prepc_for(fortress-5, protecting-7)
det(town-9, a-8)
dobj(protecting-7, town-9)
advmod(protecting-7, sometimes-11)
dep(protecting-7, incorporating-12)
det(castle-14, a-13)
dobj(incorporating-12, castle-14)

In Greek mythology , Cerberus or Kerberos - LBR - Greek Ã ⁄ Â˚Ã ⁄ Â -- Ã ∂ Â ™ Ã ⁄ Â '' Ã ⁄ ÂµÃ ∂ Â ™ Ã ⁄ Â ¿ Ã ∂ Â ≠ , KÃ ∞ Â © rberos or SÃ ∞ ÂπrbÃ ∞ ÂπrÃΩÂ ‰ s , the daemon or ker of Erebos - RBR - was the hound of Hades , a monstrous three-headed dog with a snake for a tail and snakes -LRB- PRT -RRB- down -LRB- \/ PRT -RRB- his back like a mane , whose analogs in other cultures are hellhounds .

amod(mythology-3, Greek-2)
prep_in(hound-66, mythology-3)
nsubj(hound-66, Cerberus-5)
conj_or(Cerberus-5, Kerberos-7)
nsubj(hound-66, Kerberos-7)
dep(Cerberus-5, LBR-9)
amod(Â˚Ã-14, Greek-11)
nn(Â˚Ã-14, Ã-12)
nn(Â˚Ã-14, ⁄-13)
dep(LBR-9, Â˚Ã-14)
nn(RBR-62, ⁄-15)
nn(RBR-62, Â-16)
nn(Ã-26, Ã-18)
nn(Ã-26, ∂-19)
nn(Ã-26, Â-20)
nn(Ã-26, ™-21)
nn(Ã-26, Ã-22)
nn(Ã-26, ⁄-23)
nn(Ã-26, Â-24)
dep(RBR-62, Ã-26)
advmod(≠-39, ⁄-27)
nn(≠-39, ÂµÃ-28)
nn(≠-39, ∂-29)
nn(≠-39, Â-30)
nn(≠-39, ™-31)
nn(≠-39, Ã-32)
nn(≠-39, ⁄-33)
nn(≠-39, Â-34)
nn(≠-39, ¿-35)
nn(≠-39, Ã-36)
nn(≠-39, ∂-37)
nn(≠-39, Â-38)
rcmod(Ã-26, ≠-39)
nn(rberos-45, KÃ-41)
nn(rberos-45, ∞-42)
nn(rberos-45, Â-43)
nn(rberos-45, ©-44)
appos(Ã-26, rberos-45)
nn(s-53, SÃ-47)
nn(s-53, ∞-48)
nn(s-53, ÂπrbÃ-49)
nn(s-53, ∞-50)
nn(s-53, ÂπrÃΩÂ-51)
nn(s-53, ‰-52)
appos(Ã-26, s-53)
conj_or(rberos-45, s-53)
det(daemon-56, the-55)
appos(Ã-26, daemon-56)
appos(Ã-26, ker-58)
conj_or(daemon-56, ker-58)
prep_of(daemon-56, Erebos-60)
dep(Â˚Ã-14, RBR-62)
cop(hound-66, was-64)
det(hound-66, the-65)
root(ROOT-0, hound-66)
prep_of(hound-66, Hades-68)
det(dog-73, a-70)
amod(dog-73, monstrous-71)
amod(dog-73, three-headed-72)
appos(Hades-68, dog-73)
det(snake-76, a-75)
prep_with(dog-73, snake-76)
det(tail-79, a-78)
prep_for(snake-76, tail-79)
prep_for(snake-76, snakes-81)
conj_and(tail-79, snakes-81)
abbrev(tail-79, PRT-83)
advmod(tail-79, down-85)
nn(PRT-88, \/-87)
abbrev(hound-66, PRT-88)
poss(back-91, his-90)
dep(hound-66, back-91)
det(mane-94, a-93)
prep_like(back-91, mane-94)
poss(analogs-97, mane-94)
nsubj(hellhounds-102, analogs-97)
amod(cultures-100, other-99)
prep_in(analogs-97, cultures-100)
cop(hellhounds-102, are-101)
rcmod(mane-94, hellhounds-102)

The Coyote - LBR - kaÃ ≈ ÂªÃ -- Â √ oÃ ... Â ... ti , Ã -- Â √ kaÃ ≈ ÂªoÃ ... Â ... t - RBR - - LBR - Canis latrans - RBR - , also known as the prairie wolf , is a mammal of the order Carnivora .

det(latrans-36, The-1)
amod(latrans-36, Coyote-2)
dep(latrans-36, LBR-4)
nn(latrans-36, kaÃ-6)
nn(latrans-36, ≈-7)
nn(latrans-36, ÂªÃ-8)
nn(√-11, Â-10)
dep(latrans-36, √-11)
dep(√-11, oÃ-12)
dep(√-11, Â-14)
dep(Â-14, ti-16)
appos(ti-16, Ã-18)
nn(ÂªoÃ-24, Â-20)
nn(ÂªoÃ-24, √-21)
nn(ÂªoÃ-24, kaÃ-22)
nn(ÂªoÃ-24, ≈-23)
dep(ti-16, ÂªoÃ-24)
dep(ti-16, Â-26)
dep(ti-16, t-28)
dep(ti-16, RBR-30)
dep(ti-16, LBR-33)
dep(Â-14, Canis-35)
nsubj(mammal-50, latrans-36)
dep(latrans-36, RBR-38)
advmod(known-42, also-41)
partmod(latrans-36, known-42)
det(wolf-46, the-44)
amod(wolf-46, prairie-45)
prep_as(known-42, wolf-46)
cop(mammal-50, is-48)
det(mammal-50, a-49)
root(ROOT-0, mammal-50)
det(Carnivora-54, the-52)
nn(Carnivora-54, order-53)
prep_of(mammal-50, Carnivora-54)

The Canidae family is a part of the order Carnivora within the mammals - LBR - Class Mammalia - RBR - .

det(family-3, The-1)
nn(family-3, Canidae-2)
nsubj(part-6, family-3)
cop(part-6, is-4)
det(part-6, a-5)
root(ROOT-0, part-6)
det(Carnivora-10, the-8)
nn(Carnivora-10, order-9)
prep_of(part-6, Carnivora-10)
det(mammals-13, the-12)
prep_within(Carnivora-10, mammals-13)
nn(RBR-20, LBR-15)
nn(Mammalia-18, Class-17)
dep(RBR-20, Mammalia-18)
dep(Carnivora-10, RBR-20)

Couscous or kuskus - LBR - Ã -- Â √ kuÃ -- Â ∆ skuÃ -- Â ∆ s in the US , \/ Ã -- Â √ kÃ ... Â ... skÃ ... Â ... s \/ in the UK ; Berber Seksu - Ã˙Â ∞ Ã˘Â `` Ã˙Â ∞ Ã˘Â `` , called maftoul in Jordan , Lebanon and Palestine - RBR - is a pasta from the Maghreb of Berber origin .

nsubj(Â-9, Couscous-1)
conj_or(Couscous-1, kuskus-3)
nsubj(Â-9, kuskus-3)
dep(Couscous-1, LBR-5)
dep(LBR-5, Ã-7)
root(ROOT-0, Â-9)
amod(kuÃ-11, √-10)
dobj(Â-9, kuÃ-11)
nn(skuÃ-15, Â-13)
nn(skuÃ-15, ∆-14)
nsubj(called-55, skuÃ-15)
nn(∆-18, Â-17)
nsubj(s-19, ∆-18)
dep(skuÃ-15, s-19)
det(Ã-25, the-21)
nn(Ã-25, US-22)
appos(Ã-25, \/-24)
prep_in(s-19, Ã-25)
nn(kÃ-29, Â-27)
nn(kÃ-29, √-28)
dep(Ã-25, kÃ-29)
dep(Ã-25, Â-31)
dep(Ã-25, skÃ-33)
dep(Ã-25, Â-35)
nn(\/-38, s-37)
dep(Ã-25, \/-38)
det(UK-41, the-40)
prep_in(\/-38, UK-41)
nn(Seksu-44, Berber-43)
dep(Ã-25, Seksu-44)
nn(Ã˘Â-48, Ã˙Â-46)
nn(Ã˘Â-48, ∞-47)
dep(Ã-25, Ã˘Â-48)
nn(Ã˘Â-52, Ã˙Â-50)
nn(Ã˘Â-52, ∞-51)
dep(Ã˘Â-48, Ã˘Â-52)
parataxis(Â-9, called-55)
nsubj(pasta-68, maftoul-56)
prep_in(maftoul-56, Jordan-58)
prep_in(maftoul-56, Lebanon-60)
conj_and(Jordan-58, Lebanon-60)
prep_in(maftoul-56, Palestine-62)
conj_and(Jordan-58, Palestine-62)
dep(maftoul-56, RBR-64)
cop(pasta-68, is-66)
det(pasta-68, a-67)
ccomp(called-55, pasta-68)
det(Maghreb-71, the-70)
prep_from(pasta-68, Maghreb-71)
nn(origin-74, Berber-73)
prep_of(Maghreb-71, origin-74)

The Cheka - LBR - Ã ∆ Â § Ã ∆ Â˚ - ÃŒÂΩÃŒÂ • Ã ∆ ÂµÃ ∆ Â · Ã ∆ Â '' ÃŒÂ -- ÃŒÂΩÃ ∆ Â ° Ã ∆ Â ' Ã ∆ Â ∏ Ã ∆ Â ° ÃŒÂ Ã ∆ ÂºÃ ∆ Â ≤ Ã ∆ ÂπÃ ∆ Â ¸ ÃŒÂ ™ ÃŒÂ ™ Ã ∆ Â ¸ ÃŒÂ Chrezvychaynaya Komissiya , tÃ ≈ Â Ã ≈ Â˝ka - RBR - was the first of a succession of Soviet state security organizations .

det(Cheka-2, The-1)
nsubj(first-80, Cheka-2)
dep(Cheka-2, LBR-4)
nn(Â-8, Ã-6)
nn(Â-8, ∆-7)
dep(Cheka-2, Â-8)
nn(Â˚-12, §-9)
nn(Â˚-12, Ã-10)
nn(Â˚-12, ∆-11)
dep(Â-8, Â˚-12)
nn(ÂµÃ-18, ÃŒÂΩÃŒÂ-14)
nn(ÂµÃ-18, •-15)
nn(ÂµÃ-18, Ã-16)
nn(ÂµÃ-18, ∆-17)
dep(Cheka-2, ÂµÃ-18)
nn(ÃŒÂ-26, ∆-19)
nn(ÃŒÂ-26, Â-20)
nn(ÃŒÂ-26, ·-21)
nn(ÃŒÂ-26, Ã-22)
nn(ÃŒÂ-26, ∆-23)
nn(ÃŒÂ-26, Â-24)
dep(ÂµÃ-18, ÃŒÂ-26)
nn(Â-34, ÃŒÂΩÃ-28)
nn(Â-34, ∆-29)
nn(Â-34, Â-30)
nn(Â-34, °-31)
nn(Â-34, Ã-32)
nn(Â-34, ∆-33)
poss(Komissiya-67, Â-34)
nn(Komissiya-67, Ã-36)
nn(Komissiya-67, ∆-37)
nn(Komissiya-67, Â-38)
nn(Komissiya-67, ∏-39)
nn(Komissiya-67, Ã-40)
nn(Komissiya-67, ∆-41)
nn(Komissiya-67, Â-42)
nn(Komissiya-67, °-43)
nn(Komissiya-67, ÃŒÂ-44)
nn(Komissiya-67, Ã-45)
nn(Komissiya-67, ∆-46)
nn(Komissiya-67, ÂºÃ-47)
nn(Komissiya-67, ∆-48)
nn(Komissiya-67, Â-49)
nn(Komissiya-67, ≤-50)
nn(Komissiya-67, Ã-51)
nn(Komissiya-67, ∆-52)
nn(Komissiya-67, ÂπÃ-53)
nn(Komissiya-67, ∆-54)
nn(Komissiya-67, Â-55)
nn(Komissiya-67, ¸-56)
nn(Komissiya-67, ÃŒÂ-57)
nn(Komissiya-67, ™-58)
nn(Komissiya-67, ÃŒÂ-59)
nn(Komissiya-67, ™-60)
nn(Komissiya-67, Ã-61)
nn(Komissiya-67, ∆-62)
nn(Komissiya-67, Â-63)
nn(Komissiya-67, ¸-64)
nn(Komissiya-67, ÃŒÂ-65)
nn(Komissiya-67, Chrezvychaynaya-66)
dep(Cheka-2, Komissiya-67)
nn(Â˝ka-74, tÃ-69)
nn(Â˝ka-74, ≈-70)
nn(Â˝ka-74, Â-71)
nn(Â˝ka-74, Ã-72)
nn(Â˝ka-74, ≈-73)
appos(Komissiya-67, Â˝ka-74)
dep(Cheka-2, RBR-76)
cop(first-80, was-78)
det(first-80, the-79)
root(ROOT-0, first-80)
det(succession-83, a-82)
prep_of(first-80, succession-83)
amod(organizations-88, Soviet-85)
nn(organizations-88, state-86)
nn(organizations-88, security-87)
prep_of(succession-83, organizations-88)

In linguistics , a Clitic is a grammatically independent and phonologically dependent word .

prep_in(word-13, linguistics-2)
det(Clitic-5, a-4)
nsubj(word-13, Clitic-5)
cop(word-13, is-6)
det(word-13, a-7)
advmod(independent-9, grammatically-8)
amod(word-13, independent-9)
advmod(dependent-12, phonologically-11)
conj_and(independent-9, dependent-12)
amod(word-13, dependent-12)
root(ROOT-0, word-13)

A CD-R - LBR - Compact Disc-Recordable - RBR - is a variation of the Compact Disc invented by Philips and Sony .

det(CD-R-2, A-1)
nsubj(variation-13, CD-R-2)
nn(RBR-9, LBR-4)
nn(Disc-Recordable-7, Compact-6)
dep(RBR-9, Disc-Recordable-7)
dep(CD-R-2, RBR-9)
cop(variation-13, is-11)
det(variation-13, a-12)
root(ROOT-0, variation-13)
det(Disc-17, the-15)
nn(Disc-17, Compact-16)
prep_of(variation-13, Disc-17)
partmod(Disc-17, invented-18)
agent(invented-18, Philips-20)
agent(invented-18, Sony-22)
conj_and(Philips-20, Sony-22)

The Cytosol - LBR - cf .

det(Cytosol-2, The-1)
nsubj(cf-6, Cytosol-2)
dep(Cytosol-2, LBR-4)
root(ROOT-0, cf-6)

cytoplasm , - LBR - often abbreviated ICF - RBR - which also includes the organelles - RBR - is the internal fluid of the cell , and where a portion of cell metabolism occurs .

nsubj(abbreviated-7, cytoplasm-1)
dep(cytoplasm-1, LBR-4)
advmod(abbreviated-7, often-6)
root(ROOT-0, abbreviated-7)
dobj(abbreviated-7, ICF-8)
nsubj(includes-14, ICF-8)
dep(ICF-8, RBR-10)
advmod(includes-14, also-13)
rcmod(ICF-8, includes-14)
det(organelles-16, the-15)
nsubj(fluid-23, organelles-16)
dep(organelles-16, RBR-18)
cop(fluid-23, is-20)
det(fluid-23, the-21)
amod(fluid-23, internal-22)
dep(includes-14, fluid-23)
det(cell-26, the-25)
prep_of(fluid-23, cell-26)
advmod(occurs-35, where-29)
det(portion-31, a-30)
nsubj(occurs-35, portion-31)
nn(metabolism-34, cell-33)
prep_of(portion-31, metabolism-34)
dep(includes-14, occurs-35)
conj_and(fluid-23, occurs-35)

A Crew comprises a body or a class of people who work at a common activity , generally in a structured or hierarchical organization .

det(Crew-2, A-1)
nsubj(comprises-3, Crew-2)
root(ROOT-0, comprises-3)
det(body-5, a-4)
dobj(comprises-3, body-5)
det(class-8, a-7)
dobj(comprises-3, class-8)
conj_or(body-5, class-8)
prep_of(class-8, people-10)
nsubj(work-12, people-10)
rcmod(people-10, work-12)
det(activity-16, a-14)
amod(activity-16, common-15)
prep_at(work-12, activity-16)
advmod(activity-16, generally-18)
det(organization-24, a-20)
amod(organization-24, structured-21)
conj_or(structured-21, hierarchical-23)
amod(organization-24, hierarchical-23)
prep_in(work-12, organization-24)

In computer science , a Cache - LBR - kÃ ∞ ÂœÃ ... Â ∞ , like `` cash `` - RBR - is a collection of data duplicating original values stored elsewhere or computed earlier , where the original data is expensive to fetch - LBR - owing to longer access time - RBR - or to compute , compared to the cost of reading the cache .

nn(science-3, computer-2)
prep_in(kÃ-10, science-3)
det(Cache-6, a-5)
nsubj(kÃ-10, Cache-6)
dep(Cache-6, LBR-8)
root(ROOT-0, kÃ-10)
nn(ÂœÃ-12, ∞-11)
dobj(kÃ-10, ÂœÃ-12)
nn(∞-15, Â-14)
dep(ÂœÃ-12, ∞-15)
prep_like(∞-15, cash-19)
nsubj(collection-26, RBR-22)
cop(collection-26, is-24)
det(collection-26, a-25)
ccomp(cash-19, collection-26)
prep_of(collection-26, data-28)
partmod(data-28, duplicating-29)
amod(values-31, original-30)
dobj(duplicating-29, values-31)
dep(values-31, stored-32)
advmod(stored-32, elsewhere-33)
dep(values-31, computed-35)
conj_or(stored-32, computed-35)
advmod(computed-35, earlier-36)
advmod(expensive-43, where-38)
det(data-41, the-39)
amod(data-41, original-40)
nsubj(expensive-43, data-41)
cop(expensive-43, is-42)
advcl(computed-35, expensive-43)
aux(fetch-45, to-44)
xcomp(expensive-43, fetch-45)
nsubj(owing-49, LBR-47)
parataxis(fetch-45, owing-49)
amod(time-53, longer-51)
nn(time-53, access-52)
prep_to(owing-49, time-53)
dep(time-53, RBR-55)
aux(compute-59, to-58)
prep_like(∞-15, compute-59)
conj_or(cash-19, compute-59)
prepc_compared_to(kÃ-10, to-62)
det(cost-64, the-63)
pobj(kÃ-10, cost-64)
prepc_of(cost-64, reading-66)
det(cache-68, the-67)
dobj(reading-66, cache-68)

A Cyborg is a cybernetic organism - LBR - e. , an organism that has both artificial and natural systems - RBR - .

det(Cyborg-2, A-1)
nsubj(organism-6, Cyborg-2)
cop(organism-6, is-3)
det(organism-6, a-4)
amod(organism-6, cybernetic-5)
root(ROOT-0, organism-6)
dep(organism-6, LBR-8)
dep(LBR-8, e.-10)
det(organism-13, an-12)
appos(LBR-8, organism-13)
nsubj(has-15, organism-13)
rcmod(organism-13, has-15)
det(systems-20, both-16)
amod(systems-20, artificial-17)
conj_and(artificial-17, natural-19)
amod(systems-20, natural-19)
dobj(has-15, systems-20)
dep(systems-20, RBR-22)

The Clitoris is a sexual organ that is present only in female mammals .

det(Clitoris-2, The-1)
nsubj(organ-6, Clitoris-2)
cop(organ-6, is-3)
det(organ-6, a-4)
amod(organ-6, sexual-5)
root(ROOT-0, organ-6)
nsubj(present-9, organ-6)
cop(present-9, is-8)
rcmod(organ-6, present-9)
advmod(present-9, only-10)
amod(mammals-13, female-12)
prep_in(present-9, mammals-13)

The Cotswolds is a range of hills in west-central England , sometimes called the `` Heart of England `` , an area convert -LRB- PRT -RRB- across -LRB- \/ PRT -RRB- and convert long .

det(Cotswolds-2, The-1)
nsubj(range-5, Cotswolds-2)
nsubj(convert-33, Cotswolds-2)
cop(range-5, is-3)
det(range-5, a-4)
root(ROOT-0, range-5)
prep_of(range-5, hills-7)
amod(England-10, west-central-9)
prep_in(hills-7, England-10)
advmod(called-13, sometimes-12)
partmod(England-10, called-13)
det(Heart-16, the-14)
dobj(called-13, Heart-16)
prep_of(Heart-16, England-18)
det(area-22, an-21)
appos(England-10, area-22)
dep(area-22, convert-23)
abbrev(area-22, PRT-25)
prep(range-5, across-27)
nn(PRT-30, \/-29)
dep(across-27, PRT-30)
conj_and(range-5, convert-33)
advmod(convert-33, long-34)

In politics and in history , a Colony is a territory under the immediate political control of a state .

prep_in(territory-11, politics-2)
conj_and(politics-2, in-4)
prep_in(territory-11, in-4)
prep_in(politics-2, history-5)
det(Colony-8, a-7)
nsubj(territory-11, Colony-8)
cop(territory-11, is-9)
det(territory-11, a-10)
root(ROOT-0, territory-11)
det(control-16, the-13)
amod(control-16, immediate-14)
amod(control-16, political-15)
prep_under(territory-11, control-16)
det(state-19, a-18)
prep_of(control-16, state-19)

A Column in structural engineering is a vertical structural element that transmits , through compression , the weight of the structure above to other structural elements below .

det(Column-2, A-1)
nsubj(element-10, Column-2)
amod(engineering-5, structural-4)
prep_in(Column-2, engineering-5)
cop(element-10, is-6)
det(element-10, a-7)
amod(element-10, vertical-8)
amod(element-10, structural-9)
root(ROOT-0, element-10)
nsubj(transmits-12, element-10)
rcmod(element-10, transmits-12)
prep_through(transmits-12, compression-15)
det(weight-18, the-17)
appos(compression-15, weight-18)
det(structure-21, the-20)
prep_of(weight-18, structure-21)
prep(structure-21, above-22)
pcomp(above-22, to-23)
amod(elements-26, other-24)
amod(elements-26, structural-25)
prep_to(above-22, elements-26)
advmod(transmits-12, below-27)

A Cabal is a number of people united in some close design , usually to promote their private views and interests in a church , state , or other community , often by intrigue .

det(Cabal-2, A-1)
nsubj(number-5, Cabal-2)
cop(number-5, is-3)
det(number-5, a-4)
root(ROOT-0, number-5)
prep_of(number-5, people-7)
xsubj(promote-16, people-7)
partmod(people-7, united-8)
det(design-12, some-10)
amod(design-12, close-11)
prep_in(united-8, design-12)
advmod(promote-16, usually-14)
aux(promote-16, to-15)
xcomp(united-8, promote-16)
poss(views-19, their-17)
amod(views-19, private-18)
dobj(promote-16, views-19)
dobj(promote-16, interests-21)
conj_and(views-19, interests-21)
det(church-24, a-23)
prep_in(promote-16, church-24)
npadvmod(often-32, state-26)
amod(community-30, other-29)
conj_or(state-26, community-30)
npadvmod(often-32, community-30)
advmod(church-24, often-32)
prep_by(often-32, intrigue-34)

A Cathode is an electrode through which - LBR - positive - RBR - electric current flows out of a polarized electrical device .

det(Cathode-2, A-1)
root(ROOT-0, Cathode-2)
cop(electrode-5, is-3)
det(electrode-5, an-4)
rcmod(Cathode-2, electrode-5)
prep_through(electrode-5, which-7)
nn(RBR-13, LBR-9)
dep(RBR-13, positive-11)
dep(Cathode-2, RBR-13)
amod(flows-17, electric-15)
amod(flows-17, current-16)
dep(Cathode-2, flows-17)
det(device-23, a-20)
amod(device-23, polarized-21)
amod(device-23, electrical-22)
prep_out_of(flows-17, device-23)

Chirality , or `` handedness `` , - LBR - Greek , Ã ∂ ÂΩÃ ⁄ ÂµÃ ⁄ Â ' Ã ∂ Â ™ , kheir : `` hand `` - RBR - is a property of asymmetry important in several branches of science .

ccomp(™-24, Chirality-1)
conj_or(Chirality-1, handedness-5)
ccomp(™-24, handedness-5)
dep(handedness-5, LBR-9)
dep(LBR-9, Greek-11)
nn(Â-19, Ã-13)
nn(Â-19, ∂-14)
nn(Â-19, ÂΩÃ-15)
nn(Â-19, ⁄-16)
nn(Â-19, ÂµÃ-17)
nn(Â-19, ⁄-18)
poss(Â-23, Â-19)
nn(Â-23, Ã-21)
nn(Â-23, ∂-22)
nsubj(™-24, Â-23)
root(ROOT-0, ™-24)
advmod(™-24, kheir-26)
dep(™-24, hand-29)
nsubj(property-36, RBR-32)
cop(property-36, is-34)
det(property-36, a-35)
ccomp(hand-29, property-36)
prep_of(property-36, asymmetry-38)
dep(hand-29, important-39)
amod(branches-42, several-41)
prep_in(important-39, branches-42)
prep_of(branches-42, science-44)

A Campus is traditionally the land on which a college or university and related institutional buildings are situated .

det(Campus-2, A-1)
nsubj(land-6, Campus-2)
cop(land-6, is-3)
advmod(land-6, traditionally-4)
det(land-6, the-5)
root(ROOT-0, land-6)
rel(situated-18, which-8)
det(college-10, a-9)
nsubjpass(situated-18, college-10)
conj_or(college-10, university-12)
nsubjpass(situated-18, university-12)
amod(buildings-16, related-14)
amod(buildings-16, institutional-15)
conj_and(college-10, buildings-16)
nsubjpass(situated-18, buildings-16)
auxpass(situated-18, are-17)
rcmod(land-6, situated-18)

A Crossbow is a weapon consisting of a bow mounted on a stock that shoots projectiles , often called bolts .

det(Crossbow-2, A-1)
nsubj(weapon-5, Crossbow-2)
cop(weapon-5, is-3)
det(weapon-5, a-4)
root(ROOT-0, weapon-5)
partmod(weapon-5, consisting-6)
det(bow-9, a-8)
prep_of(consisting-6, bow-9)
partmod(bow-9, mounted-10)
det(stock-13, a-12)
prep_on(mounted-10, stock-13)
complm(projectiles-16, that-14)
nsubj(projectiles-16, shoots-15)
ccomp(mounted-10, projectiles-16)
advmod(projectiles-16, often-18)
dep(projectiles-16, called-19)
dobj(called-19, bolts-20)

A Cruiser is a large type of warship , which had its prime period from the late 19th century to the end of the Cold War .

det(Cruiser-2, A-1)
nsubj(type-6, Cruiser-2)
cop(type-6, is-3)
det(type-6, a-4)
amod(type-6, large-5)
root(ROOT-0, type-6)
prep_of(type-6, warship-8)
nsubj(had-11, warship-8)
rcmod(warship-8, had-11)
poss(period-14, its-12)
amod(period-14, prime-13)
dobj(had-11, period-14)
det(century-19, the-16)
amod(century-19, late-17)
amod(century-19, 19th-18)
prep_from(period-14, century-19)
det(end-22, the-21)
prep_to(had-11, end-22)
det(War-26, the-24)
nn(War-26, Cold-25)
prep_of(end-22, War-26)

A Copycat - LBR - also ` copy-cat ' or ` copy cat ' - RBR - is a person - LBR - or animal , or computer program - RBR - that mimics or repeats the behavior of another .

det(Copycat-2, A-1)
root(ROOT-0, Copycat-2)
dep(Copycat-2, LBR-4)
dep(person-20, also-6)
dep(person-20, copy-cat-8)
conj_or(copy-cat-8, copy-12)
dep(person-20, copy-12)
nsubj(person-20, cat-13)
dep(cat-13, RBR-16)
cop(person-20, is-18)
det(person-20, a-19)
dep(LBR-4, person-20)
amod(LBR-4, LBR-22)
amod(LBR-4, animal-25)
conj_or(LBR-22, animal-25)
nn(program-29, computer-28)
dep(Copycat-2, program-29)
conj_or(LBR-4, program-29)
nsubj(mimics-34, program-29)
nsubj(repeats-36, program-29)
dep(program-29, RBR-31)
rcmod(program-29, mimics-34)
rcmod(program-29, repeats-36)
conj_or(mimics-34, repeats-36)
det(behavior-38, the-37)
dobj(mimics-34, behavior-38)
prep_of(behavior-38, another-40)

A Cannon is a type of artillery , usually large and tubular , that uses gunpowder or other explosive-based propellants to launch a projectile over a distance .

det(Cannon-2, A-1)
nsubj(type-5, Cannon-2)
cop(type-5, is-3)
det(type-5, a-4)
root(ROOT-0, type-5)
nsubj(uses-15, type-5)
prep_of(type-5, artillery-7)
dep(large-10, usually-9)
dep(type-5, large-10)
dep(type-5, tubular-12)
conj_and(large-10, tubular-12)
rcmod(type-5, uses-15)
nsubj(launch-22, gunpowder-16)
amod(propellants-20, other-18)
amod(propellants-20, explosive-based-19)
conj_or(gunpowder-16, propellants-20)
nsubj(launch-22, propellants-20)
aux(launch-22, to-21)
xcomp(uses-15, launch-22)
det(projectile-24, a-23)
dobj(launch-22, projectile-24)
det(distance-27, a-26)
prep_over(projectile-24, distance-27)

In computing , a Mouse - LBR - plural mice , mouse devices , or mouses - RBR - is a pointing device that functions by detecting two-dimensional motion relative to its supporting surface .

prep_in(device-23, computing-2)
det(Mouse-5, a-4)
nsubj(device-23, Mouse-5)
nn(RBR-18, LBR-7)
nn(mice-10, plural-9)
dep(RBR-18, mice-10)
nn(devices-13, mouse-12)
conj_or(mice-10, devices-13)
dep(RBR-18, devices-13)
conj_or(mice-10, mouses-16)
dep(RBR-18, mouses-16)
dep(Mouse-5, RBR-18)
cop(device-23, is-20)
det(device-23, a-21)
amod(device-23, pointing-22)
root(ROOT-0, device-23)
dep(functions-25, device-23)
dep(relative-30, functions-25)
prepc_by(functions-25, detecting-27)
amod(motion-29, two-dimensional-28)
dobj(detecting-27, motion-29)
rcmod(device-23, relative-30)
poss(surface-34, its-32)
amod(surface-34, supporting-33)
prep_to(relative-30, surface-34)

A Catapult is any one of a number of non-handheld mechanical devices used to throw a projectile a great distance without the aid of an explosive substanceÃ cents Â • Â ‰ particularly various types of ancient and medieval siege engines .

det(Catapult-2, A-1)
nsubj(one-5, Catapult-2)
cop(one-5, is-3)
det(one-5, any-4)
dep(‰-32, one-5)
det(number-8, a-7)
prep_of(one-5, number-8)
amod(devices-12, non-handheld-10)
amod(devices-12, mechanical-11)
prep_of(number-8, devices-12)
xsubj(throw-15, devices-12)
partmod(devices-12, used-13)
aux(throw-15, to-14)
xcomp(used-13, throw-15)
det(distance-20, a-16)
amod(distance-20, projectile-17)
det(distance-20, a-18)
amod(distance-20, great-19)
dobj(throw-15, distance-20)
det(aid-23, the-22)
prep_without(throw-15, aid-23)
det(cents-28, an-25)
amod(cents-28, explosive-26)
num(cents-28, substanceÃ-27)
prep_of(aid-23, cents-28)
nn(Â-31, Â-29)
nn(Â-31, •-30)
nsubj(‰-32, Â-31)
root(ROOT-0, ‰-32)
advmod(types-35, particularly-33)
amod(types-35, various-34)
dobj(‰-32, types-35)
amod(engines-41, ancient-37)
conj_and(ancient-37, medieval-39)
amod(engines-41, medieval-39)
nn(engines-41, siege-40)
prep_of(types-35, engines-41)

A Clerihew - LBR - or clerihew - RBR - is a very specific kind of short biographical humorous verse .

det(Clerihew-2, A-1)
nsubj(kind-15, Clerihew-2)
nn(RBR-9, LBR-4)
dep(clerihew-7, or-6)
dep(RBR-9, clerihew-7)
dep(Clerihew-2, RBR-9)
cop(kind-15, is-11)
det(kind-15, a-12)
advmod(specific-14, very-13)
amod(kind-15, specific-14)
root(ROOT-0, kind-15)
amod(verse-20, short-17)
nn(verse-20, biographical-18)
nn(verse-20, humorous-19)
prep_of(kind-15, verse-20)

The Cornet is a brass instrument very similar to the trumpet , distinguished by its conical bore , compact shape , and mellower tone quality .

det(Cornet-2, The-1)
nsubj(instrument-6, Cornet-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
nn(instrument-6, brass-5)
root(ROOT-0, instrument-6)
advmod(similar-8, very-7)
amod(instrument-6, similar-8)
det(trumpet-11, the-10)
prep_to(instrument-6, trumpet-11)
amod(instrument-6, distinguished-13)
poss(bore-17, its-15)
amod(bore-17, conical-16)
prep_by(distinguished-13, bore-17)
amod(shape-20, compact-19)
prep_by(distinguished-13, shape-20)
conj_and(bore-17, shape-20)
nn(quality-25, mellower-23)
nn(quality-25, tone-24)
prep_by(distinguished-13, quality-25)
conj_and(bore-17, quality-25)

A CrannÃ ∞ Â `` g is an ancient island used for a settlement .

det(g-6, A-1)
nn(g-6, CrannÃ-2)
nn(g-6, ∞-3)
nn(g-6, Â-4)
nsubj(island-10, g-6)
cop(island-10, is-7)
det(island-10, an-8)
amod(island-10, ancient-9)
root(ROOT-0, island-10)
partmod(island-10, used-11)
det(settlement-14, a-13)
prep_for(used-11, settlement-14)

The Carat is a unit of mass used for measuring gems and pearls .

det(Carat-2, The-1)
nsubj(unit-5, Carat-2)
cop(unit-5, is-3)
det(unit-5, a-4)
root(ROOT-0, unit-5)
prep_of(unit-5, mass-7)
partmod(mass-7, used-8)
prepc_for(used-8, measuring-10)
dobj(measuring-10, gems-11)
dobj(measuring-10, pearls-13)
conj_and(gems-11, pearls-13)

A Cairn or - LBR - Irish carn - RBR - is an artificial pile of stones , often in a conical form .

det(Cairn-2, A-1)
nsubj(pile-15, Cairn-2)
dep(carn-8, LBR-5)
amod(carn-8, Irish-7)
conj_or(Cairn-2, carn-8)
nsubj(pile-15, carn-8)
dep(carn-8, RBR-10)
cop(pile-15, is-12)
det(pile-15, an-13)
amod(pile-15, artificial-14)
root(ROOT-0, pile-15)
prep_of(pile-15, stones-17)
advmod(stones-17, often-19)
det(form-23, a-21)
amod(form-23, conical-22)
prep_in(often-19, form-23)

In law , Cross-examination is the interrogation of a witness called by one 's opponent .

prep_in(interrogation-7, law-2)
nsubj(interrogation-7, Cross-examination-4)
cop(interrogation-7, is-5)
det(interrogation-7, the-6)
root(ROOT-0, interrogation-7)
det(witness-10, a-9)
prep_of(interrogation-7, witness-10)
partmod(witness-10, called-11)
poss(opponent-15, one-13)
agent(called-11, opponent-15)

A Creed is a statement or confession of belief Ã cents Â • Â ‰ usually religious belief Ã cents Â • Â ‰ or faith often recited as part of a religious service .

det(Creed-2, A-1)
nsubj(statement-5, Creed-2)
cop(statement-5, is-3)
det(statement-5, a-4)
root(ROOT-0, statement-5)
conj_or(statement-5, confession-7)
nn(‰-15, belief-9)
nn(‰-15, Ã-10)
nn(‰-15, cents-11)
nn(‰-15, Â-12)
nn(‰-15, •-13)
nn(‰-15, Â-14)
prep_of(statement-5, ‰-15)
advmod(statement-5, usually-16)
amod(‰-24, religious-17)
nn(‰-24, belief-18)
nn(‰-24, Ã-19)
nn(‰-24, cents-20)
nn(‰-24, Â-21)
nn(‰-24, •-22)
nn(‰-24, Â-23)
attr(statement-5, ‰-24)
attr(statement-5, faith-26)
conj_or(‰-24, faith-26)
advmod(recited-28, often-27)
partmod(faith-26, recited-28)
prep_as(recited-28, part-30)
det(service-34, a-32)
amod(service-34, religious-33)
prep_of(part-30, service-34)

In Greek mythology , Callisto was a nymph of Artemis .

amod(mythology-3, Greek-2)
prep_in(nymph-8, mythology-3)
nsubj(nymph-8, Callisto-5)
cop(nymph-8, was-6)
det(nymph-8, a-7)
root(ROOT-0, nymph-8)
prep_of(nymph-8, Artemis-10)

In the United States and Canada , a Cookie is a small , flat baked dessert .

det(States-4, the-2)
nn(States-4, United-3)
prep_in(dessert-16, States-4)
conj_and(States-4, Canada-6)
prep_in(dessert-16, Canada-6)
det(Cookie-9, a-8)
nsubj(dessert-16, Cookie-9)
cop(dessert-16, is-10)
det(dessert-16, a-11)
amod(flat-14, small-12)
amod(dessert-16, flat-14)
amod(dessert-16, baked-15)
root(ROOT-0, dessert-16)

The Choctaw are a Native American people originally from the Southeastern United States - LBR - Mississippi , Alabama , and Louisiana - RBR - .

det(Choctaw-2, The-1)
nsubj(people-7, Choctaw-2)
cop(people-7, are-3)
det(people-7, a-4)
amod(people-7, Native-5)
amod(people-7, American-6)
root(ROOT-0, people-7)
amod(people-7, originally-8)
det(States-13, the-10)
nn(States-13, Southeastern-11)
nn(States-13, United-12)
prep_from(originally-8, States-13)
nn(RBR-24, LBR-15)
dep(RBR-24, Mississippi-17)
conj_and(Mississippi-17, Alabama-19)
dep(RBR-24, Alabama-19)
conj_and(Mississippi-17, Louisiana-22)
dep(RBR-24, Louisiana-22)
dep(people-7, RBR-24)

A Cytoprotectant is any medication that combats ulcers not by reducing gastric acid but by increasing mucosal protection .

det(Cytoprotectant-2, A-1)
nsubj(medication-5, Cytoprotectant-2)
cop(medication-5, is-3)
det(medication-5, any-4)
root(ROOT-0, medication-5)
nsubj(combats-7, medication-5)
rcmod(medication-5, combats-7)
dobj(combats-7, ulcers-8)
neg(combats-7, not-9)
prepc_by(combats-7, reducing-11)
amod(acid-13, gastric-12)
dobj(reducing-11, acid-13)
cc(reducing-11, but-14)
prepc_by(reducing-11, increasing-16)
amod(protection-18, mucosal-17)
dobj(increasing-16, protection-18)

The Caliph is the head of state in a Caliphate , and the title for the leader of the Islamic Ummah , an Islamic community ruled by the Shari'a .

det(Caliph-2, The-1)
nsubj(head-5, Caliph-2)
cop(head-5, is-3)
det(head-5, the-4)
ccomp(ruled-26, head-5)
prep_of(head-5, state-7)
det(Caliphate-10, a-9)
prep_in(state-7, Caliphate-10)
det(title-14, the-13)
conj_and(head-5, title-14)
ccomp(ruled-26, title-14)
det(leader-17, the-16)
prep_for(title-14, leader-17)
det(Ummah-21, the-19)
nn(Ummah-21, Islamic-20)
prep_of(leader-17, Ummah-21)
det(community-25, an-23)
amod(community-25, Islamic-24)
nsubj(ruled-26, community-25)
root(ROOT-0, ruled-26)
det(Shari'a-29, the-28)
prep_by(ruled-26, Shari'a-29)

The Crankshaft , sometimes casually abbreviated to crank , is the part of an engine which translates reciprocating linear piston motion into rotation .

det(Crankshaft-2, The-1)
nsubj(abbreviated-6, Crankshaft-2)
xsubj(crank-8, Crankshaft-2)
advmod(abbreviated-6, sometimes-4)
advmod(abbreviated-6, casually-5)
ccomp(is-10, abbreviated-6)
aux(crank-8, to-7)
xcomp(abbreviated-6, crank-8)
root(ROOT-0, is-10)
det(part-12, the-11)
nsubj(is-10, part-12)
det(engine-15, an-14)
prep_of(part-12, engine-15)
nsubj(translates-17, engine-15)
rcmod(engine-15, translates-17)
xcomp(translates-17, reciprocating-18)
amod(motion-21, linear-19)
nn(motion-21, piston-20)
dobj(reciprocating-18, motion-21)
prep_into(reciprocating-18, rotation-23)

The Centromere is a region , often found in the middle of the chromosome , involved in cell division and the control of gene expression .

det(Centromere-2, The-1)
nsubj(region-5, Centromere-2)
cop(region-5, is-3)
det(region-5, a-4)
root(ROOT-0, region-5)
advmod(found-8, often-7)
partmod(region-5, found-8)
det(middle-11, the-10)
prep_in(found-8, middle-11)
det(chromosome-14, the-13)
prep_of(middle-11, chromosome-14)
partmod(region-5, involved-16)
nn(division-19, cell-18)
prep_in(involved-16, division-19)
det(control-22, the-21)
conj_and(region-5, control-22)
nn(expression-25, gene-24)
prep_of(control-22, expression-25)

Colonialism is the extension of a nation 's sovereignty over territory beyond its borders by the establishment of either settler colonies or administrative dependencies in which indigenous populations are directly ruled or displaced .

nsubj(extension-4, Colonialism-1)
cop(extension-4, is-2)
det(extension-4, the-3)
root(ROOT-0, extension-4)
det(nation-7, a-6)
poss(sovereignty-9, nation-7)
prep_of(extension-4, sovereignty-9)
prep_over(sovereignty-9, territory-11)
poss(borders-14, its-13)
prep_beyond(territory-11, borders-14)
det(establishment-17, the-16)
prep_by(extension-4, establishment-17)
det(colonies-21, either-19)
nn(colonies-21, settler-20)
prep_of(establishment-17, colonies-21)
amod(dependencies-24, administrative-23)
prep_by(extension-4, dependencies-24)
conj_or(establishment-17, dependencies-24)
rel(ruled-31, which-26)
nn(populations-28, indigenous-27)
nsubjpass(ruled-31, populations-28)
nsubjpass(displaced-33, populations-28)
auxpass(ruled-31, are-29)
advmod(ruled-31, directly-30)
rcmod(dependencies-24, ruled-31)
rcmod(dependencies-24, displaced-33)
conj_or(ruled-31, displaced-33)

The term Complex in chemistry is usually used to describe molecules or ensembles formed by the combination of ligands and metal ions .

det(Complex-3, The-1)
nn(Complex-3, term-2)
nsubjpass(used-8, Complex-3)
xsubj(describe-10, Complex-3)
prep_in(Complex-3, chemistry-5)
auxpass(used-8, is-6)
advmod(used-8, usually-7)
root(ROOT-0, used-8)
aux(describe-10, to-9)
xcomp(used-8, describe-10)
dobj(describe-10, molecules-11)
dobj(describe-10, ensembles-13)
conj_or(molecules-11, ensembles-13)
partmod(molecules-11, formed-14)
det(combination-17, the-16)
agent(formed-14, combination-17)
prep_of(combination-17, ligands-19)
nn(ions-22, metal-21)
prep_of(combination-17, ions-22)
conj_and(ligands-19, ions-22)

The ColecoVision is Coleco Industries ' second generation home video game console and was released in August 1982 .

det(ColecoVision-2, The-1)
nsubj(console-12, ColecoVision-2)
nsubjpass(released-15, ColecoVision-2)
cop(console-12, is-3)
nn(Industries-5, Coleco-4)
poss(console-12, Industries-5)
amod(console-12, second-7)
nn(console-12, generation-8)
nn(console-12, home-9)
nn(console-12, video-10)
nn(console-12, game-11)
root(ROOT-0, console-12)
auxpass(released-15, was-14)
conj_and(console-12, released-15)
prep_in(released-15, August-17)
num(August-17, 1982-18)

A Crucifix - LBR - from Latin cruci fixus meaning `` - LBR - one - RBR - fixed to a cross `` - RBR - is a cross with a representation of Jesus ' body , or corpus .

det(Crucifix-2, A-1)
nsubj(cross-29, Crucifix-2)
dep(Crucifix-2, LBR-4)
amod(fixus-9, Latin-7)
nn(fixus-9, cruci-8)
prep_from(Crucifix-2, fixus-9)
partmod(fixus-9, meaning-10)
dobj(meaning-10, LBR-13)
dep(LBR-13, one-15)
dep(LBR-13, RBR-17)
dep(Crucifix-2, fixed-19)
det(RBR-25, a-21)
nn(RBR-25, cross-22)
prep_to(fixed-19, RBR-25)
cop(cross-29, is-27)
det(cross-29, a-28)
root(ROOT-0, cross-29)
det(representation-32, a-31)
prep_with(cross-29, representation-32)
poss(body-36, Jesus-34)
prep_of(representation-32, body-36)
prep_with(cross-29, corpus-39)
conj_or(representation-32, corpus-39)

In general use , a Complaint is an expression of displeasure , such as poor service at a store , or from a local government , etc. .

amod(use-3, general-2)
prep_in(expression-9, use-3)
det(Complaint-6, a-5)
nsubj(expression-9, Complaint-6)
cop(expression-9, is-7)
det(expression-9, an-8)
root(ROOT-0, expression-9)
prep_of(expression-9, displeasure-11)
amod(service-16, poor-15)
prep_such_as(expression-9, service-16)
prep_such_as(expression-9, service-16')
conj_or(service-16, service-16')
det(store-19, a-18)
prep_at(service-16, store-19)
det(government-25, a-23)
amod(government-25, local-24)
prep_from(service-16', government-25)
dep(service-16, etc.-27)

In object-oriented programming , a Class is a programming language construct that is used as a blueprint to create objects .

amod(programming-3, object-oriented-2)
prep_in(construct-11, programming-3)
det(Class-6, a-5)
nsubj(construct-11, Class-6)
cop(construct-11, is-7)
det(construct-11, a-8)
nn(construct-11, programming-9)
nn(construct-11, language-10)
root(ROOT-0, construct-11)
nsubjpass(used-14, construct-11)
auxpass(used-14, is-13)
rcmod(construct-11, used-14)
det(blueprint-17, a-16)
prep_as(used-14, blueprint-17)
aux(create-19, to-18)
xcomp(used-14, create-19)
dobj(create-19, objects-20)

Crochet - LBR - kroÃ ... Â ... Ã -- Â √ Ã ... Â ∞ eÃ ≈ Âª - RBR - is a process of creating fabric from yarn or thread using a crochet hook .

nn(kroÃ-5, Crochet-1)
dep(kroÃ-5, LBR-3)
nsubj(process-25, kroÃ-5)
dep(kroÃ-5, Â-7)
nn(RBR-21, Ã-9)
nn(Ã-13, Â-11)
nn(Ã-13, √-12)
dep(RBR-21, Ã-13)
nn(Âª-19, Â-15)
nn(Âª-19, ∞-16)
nn(Âª-19, eÃ-17)
nn(Âª-19, ≈-18)
dep(Ã-13, Âª-19)
dep(Â-7, RBR-21)
cop(process-25, is-23)
det(process-25, a-24)
root(ROOT-0, process-25)
prepc_of(process-25, creating-27)
dobj(creating-27, fabric-28)
prep_from(creating-27, yarn-30)
prep_from(creating-27, thread-32)
conj_or(yarn-30, thread-32)
xcomp(creating-27, using-33)
det(hook-36, a-34)
amod(hook-36, crochet-35)
dobj(using-33, hook-36)

A Coil is a series of loops .

det(Coil-2, A-1)
nsubj(series-5, Coil-2)
cop(series-5, is-3)
det(series-5, a-4)
root(ROOT-0, series-5)
prep_of(series-5, loops-7)

A Clipper was a very fast sailing ship of the 19th century that had multiple masts and a square rig .

det(Clipper-2, A-1)
nsubj(ship-8, Clipper-2)
cop(ship-8, was-3)
det(ship-8, a-4)
advmod(fast-6, very-5)
amod(ship-8, fast-6)
nn(ship-8, sailing-7)
root(ROOT-0, ship-8)
det(century-12, the-10)
amod(century-12, 19th-11)
prep_of(ship-8, century-12)
nsubj(had-14, century-12)
rcmod(century-12, had-14)
amod(masts-16, multiple-15)
dobj(had-14, masts-16)
det(rig-20, a-18)
amod(rig-20, square-19)
dobj(had-14, rig-20)
conj_and(masts-16, rig-20)

Cuitlahuac - LBR - c. 1476 & amp ; amp ; ndash ; 1520 - RBR - or CuitlÃ ∞ Â ¡ huac - LBR - in Spanish orthography ; in cuitlÃ ≥ Â ™ huac , honorific form Cuitlahuatzin - RBR - was the 10th tlatoani - LBR - ruler - RBR - of the Aztec city of Tenochtitlan for 80 days during the year Two Flint - LBR - 1520 - RBR - .

nsubj(c.-5, Cuitlahuac-1)
dep(Cuitlahuac-1, LBR-3)
root(ROOT-0, c.-5)
dobj(c.-5, 1476-6)
dobj(c.-5, amp-8)
conj_and(1476-6, amp-8)
dobj(c.-5, amp-10)
conj_and(1476-6, amp-10)
dobj(c.-5, ndash-12)
conj_and(1476-6, ndash-12)
dobj(c.-5, 1520-14)
conj_and(1476-6, 1520-14)
dobj(c.-5, RBR-16)
conj_and(1476-6, RBR-16)
nn(Â-21, CuitlÃ-19)
nn(Â-21, ∞-20)
dobj(c.-5, Â-21)
conj_or(1476-6, Â-21)
xcomp(c.-5, ¡-22)
acomp(¡-22, huac-23)
dep(in-31, LBR-25)
dep(LBR-25, in-27)
amod(orthography-29, Spanish-28)
pobj(in-27, orthography-29)
dep(form-39, in-31)
nn(™-35, cuitlÃ-32)
nn(™-35, ≥-33)
nn(™-35, Â-34)
pobj(in-31, ™-35)
amod(form-39, huac-36)
amod(form-39, honorific-38)
dep(tlatoani-47, form-39)
nsubj(tlatoani-47, Cuitlahuatzin-40)
dep(Cuitlahuatzin-40, RBR-42)
cop(tlatoani-47, was-44)
det(tlatoani-47, the-45)
amod(tlatoani-47, 10th-46)
dep(huac-23, tlatoani-47)
dep(tlatoani-47, LBR-49)
dep(tlatoani-47, ruler-51)
dep(tlatoani-47, RBR-53)
det(city-58, the-56)
amod(city-58, Aztec-57)
prep_of(for-61, city-58)
prep_of(city-58, Tenochtitlan-60)
dep(tlatoani-47, for-61)
num(days-63, 80-62)
pobj(for-61, days-63)
det(Flint-68, the-65)
nn(Flint-68, year-66)
num(Flint-68, Two-67)
prep_during(days-63, Flint-68)
dep(tlatoani-47, LBR-70)
dep(tlatoani-47, 1520-72)
dep(tlatoani-47, RBR-74)

A Corporation is a legal personality , usually used to conduct business .

det(Corporation-2, A-1)
nsubj(personality-6, Corporation-2)
cop(personality-6, is-3)
det(personality-6, a-4)
amod(personality-6, legal-5)
root(ROOT-0, personality-6)
xsubj(conduct-11, personality-6)
advmod(used-9, usually-8)
partmod(personality-6, used-9)
aux(conduct-11, to-10)
xcomp(used-9, conduct-11)
dobj(conduct-11, business-12)

Cider - LBR - Ã -- Â √ saÃ ≈ ÂªdÃ ≈ Â˚ - RBR - is an alcoholic beverage made from the fermented juice of apples mainly , though pears are also used ; in the UK , pear cider is known as perry .

nn(Ã-5, Cider-1)
dep(Ã-5, LBR-3)
nsubj(beverage-20, Ã-5)
nn(Â˚-13, Â-7)
nn(Â˚-13, √-8)
nn(Â˚-13, saÃ-9)
nn(Â˚-13, ≈-10)
nn(Â˚-13, ÂªdÃ-11)
nn(Â˚-13, ≈-12)
dep(Ã-5, Â˚-13)
dep(Â˚-13, RBR-15)
cop(beverage-20, is-17)
det(beverage-20, an-18)
amod(beverage-20, alcoholic-19)
root(ROOT-0, beverage-20)
partmod(beverage-20, made-21)
det(juice-25, the-23)
amod(juice-25, fermented-24)
prep_from(made-21, juice-25)
prep_of(juice-25, apples-27)
advmod(made-21, mainly-28)
mark(used-34, though-30)
nsubjpass(used-34, pears-31)
auxpass(used-34, are-32)
advmod(used-34, also-33)
advcl(made-21, used-34)
det(UK-38, the-37)
prep_in(known-43, UK-38)
nn(cider-41, pear-40)
nsubjpass(known-43, cider-41)
auxpass(known-43, is-42)
parataxis(beverage-20, known-43)
prep_as(known-43, perry-45)

Cyclotrimethylenetrinitramine , also known as RDX , cyclonite , hexogen , and T4 , is an explosive nitroamine widely used in military and industrial applications .

nsubj(nitroamine-18, Cyclotrimethylenetrinitramine-1)
advmod(known-4, also-3)
partmod(Cyclotrimethylenetrinitramine-1, known-4)
prep_as(known-4, RDX-6)
prep_as(known-4, cyclonite-8)
conj_and(RDX-6, cyclonite-8)
prep_as(known-4, hexogen-10)
conj_and(RDX-6, hexogen-10)
prep_as(known-4, T4-13)
conj_and(RDX-6, T4-13)
cop(nitroamine-18, is-15)
det(nitroamine-18, an-16)
amod(nitroamine-18, explosive-17)
root(ROOT-0, nitroamine-18)
advmod(used-20, widely-19)
partmod(nitroamine-18, used-20)
amod(applications-25, military-22)
conj_and(military-22, industrial-24)
amod(applications-25, industrial-24)
prep_in(used-20, applications-25)

Generally a Chronicle - LBR - chronica , from Greek Ã ∂ ÂΩÃ ∂ Â ™ Ã ⁄ Â ¿ Ã ⁄ Â ∏ Ã ⁄ Â ' Ã ⁄ ÂºÃ ⁄ Â ¬ - LBR - from Ã ∂ ÂΩÃ ∂ Â ™ Ã ∂ Â ` Ã ⁄ Â ∏ Ã ⁄ Â ¿ Ã ∂ Â ≠ - RBR - - RBR - is a historical account of facts and events in chronological order .

advmod(account-70, Generally-1)
det(chronica-7, a-2)
nn(chronica-7, Chronicle-3)
dep(chronica-7, LBR-5)
nsubj(account-70, chronica-7)
amod(Â-27, Greek-10)
nn(Â-27, Ã-11)
nn(Â-27, ∂-12)
nn(Â-27, ÂΩÃ-13)
nn(Â-27, ∂-14)
nn(Â-27, Â-15)
nn(Â-27, ™-16)
nn(Â-27, Ã-17)
nn(Â-27, ⁄-18)
nn(Â-27, Â-19)
nn(Â-27, ¿-20)
nn(Â-27, Ã-21)
nn(Â-27, ⁄-22)
nn(Â-27, Â-23)
nn(Â-27, ∏-24)
nn(Â-27, Ã-25)
nn(Â-27, ⁄-26)
poss(RBR-65, Â-27)
nn(RBR-65, Ã-29)
nn(RBR-65, ⁄-30)
nn(RBR-65, ÂºÃ-31)
nn(RBR-65, ⁄-32)
nn(RBR-65, Â-33)
nn(RBR-65, ¬-34)
dep(RBR-65, LBR-36)
dep(LBR-36, from-38)
nn(Â-47, Ã-39)
nn(Â-47, ∂-40)
nn(Â-47, ÂΩÃ-41)
nn(Â-47, ∂-42)
nn(Â-47, Â-43)
nn(Â-47, ™-44)
nn(Â-47, Ã-45)
nn(Â-47, ∂-46)
pobj(from-38, Â-47)
nn(≠-60, Ã-49)
nn(≠-60, ⁄-50)
nn(≠-60, Â-51)
nn(≠-60, ∏-52)
nn(≠-60, Ã-53)
nn(≠-60, ⁄-54)
nn(≠-60, Â-55)
nn(≠-60, ¿-56)
nn(≠-60, Ã-57)
nn(≠-60, ∂-58)
nn(≠-60, Â-59)
dep(Â-47, ≠-60)
dep(Â-47, RBR-62)
prep_from(chronica-7, RBR-65)
cop(account-70, is-67)
det(account-70, a-68)
amod(account-70, historical-69)
root(ROOT-0, account-70)
prep_of(account-70, facts-72)
prep_of(account-70, events-74)
conj_and(facts-72, events-74)
amod(order-77, chronological-76)
prep_in(facts-72, order-77)

In chemistry , Concentration is the measure of how much of a given substance there is mixed with another substance .

prep_in(measure-7, chemistry-2)
nsubj(measure-7, Concentration-4)
cop(measure-7, is-5)
det(measure-7, the-6)
root(ROOT-0, measure-7)
rel(is-16, of-8)
advmod(much-10, how-9)
pobj(of-8, much-10)
det(substance-14, a-12)
amod(substance-14, given-13)
prep_of(much-10, substance-14)
expl(is-16, there-15)
rcmod(measure-7, is-16)
acomp(is-16, mixed-17)
det(substance-20, another-19)
prep_with(mixed-17, substance-20)

In mathematics and , in particular , functional analysis , Convolution is a mathematical operator that takes two functions f and g and produces a third function that is typically viewed as a modified version of one of the original functions .

prep_in(operator-15, mathematics-2)
conj_and(mathematics-2, in-5)
prep_in(operator-15, in-5)
amod(functional-8, particular-6)
amod(analysis-9, functional-8)
pobj(in-5, analysis-9)
nsubj(operator-15, Convolution-11)
cop(operator-15, is-12)
det(operator-15, a-13)
amod(operator-15, mathematical-14)
root(ROOT-0, operator-15)
nsubj(takes-17, operator-15)
nsubj(produces-24, operator-15)
rcmod(operator-15, takes-17)
num(functions-19, two-18)
dobj(takes-17, functions-19)
iobj(takes-17, functions-19)
dobj(takes-17, f-20)
dep(functions-19, f-20)
dobj(takes-17, g-22)
dep(functions-19, g-22)
conj_and(f-20, g-22)
rcmod(operator-15, produces-24)
conj_and(takes-17, produces-24)
det(function-27, a-25)
amod(function-27, third-26)
dobj(produces-24, function-27)
nsubjpass(viewed-31, function-27)
auxpass(viewed-31, is-29)
advmod(viewed-31, typically-30)
rcmod(function-27, viewed-31)
det(version-35, a-33)
amod(version-35, modified-34)
prep_as(viewed-31, version-35)
prep_of(version-35, one-37)
det(functions-41, the-39)
amod(functions-41, original-40)
prep_of(version-35, functions-41)

The Cro-hook is a special double-ended crochet hook used to make double-sided crochet , which is a variation of Tunisian crochet .

det(Cro-hook-2, The-1)
nsubj(hook-8, Cro-hook-2)
cop(hook-8, is-3)
det(hook-8, a-4)
amod(hook-8, special-5)
amod(hook-8, double-ended-6)
nn(hook-8, crochet-7)
root(ROOT-0, hook-8)
xsubj(make-11, hook-8)
partmod(hook-8, used-9)
aux(make-11, to-10)
xcomp(used-9, make-11)
amod(crochet-13, double-sided-12)
dobj(make-11, crochet-13)
nsubj(variation-18, crochet-13)
cop(variation-18, is-16)
det(variation-18, a-17)
rcmod(crochet-13, variation-18)
nn(crochet-21, Tunisian-20)
prep_of(variation-18, crochet-21)

The Clavichord is a European stringed keyboard instrument known from the late Medieval , through the Renaissance , Baroque and Classical eras .

det(Clavichord-2, The-1)
nsubj(instrument-8, Clavichord-2)
cop(instrument-8, is-3)
det(instrument-8, a-4)
amod(instrument-8, European-5)
amod(instrument-8, stringed-6)
nn(instrument-8, keyboard-7)
root(ROOT-0, instrument-8)
partmod(instrument-8, known-9)
det(Medieval-13, the-11)
amod(Medieval-13, late-12)
prep_from(known-9, Medieval-13)
det(eras-22, the-16)
nn(eras-22, Renaissance-17)
conj_and(Renaissance-17, Baroque-19)
nn(eras-22, Baroque-19)
conj_and(Renaissance-17, Classical-21)
nn(eras-22, Classical-21)
prep_through(known-9, eras-22)

A Checksum is a form of redundancy check , a simple way to protect the integrity of data by detecting errors in data that are sent through space - LBR - telecommunications - RBR - or time - LBR - storage - RBR - .

det(Checksum-2, A-1)
nsubj(form-5, Checksum-2)
cop(form-5, is-3)
det(form-5, a-4)
root(ROOT-0, form-5)
amod(check-8, redundancy-7)
prep_of(form-5, check-8)
det(way-12, a-10)
amod(way-12, simple-11)
appos(check-8, way-12)
aux(protect-14, to-13)
infmod(way-12, protect-14)
det(integrity-16, the-15)
dobj(protect-14, integrity-16)
prep_of(integrity-16, data-18)
prepc_by(protect-14, detecting-20)
dobj(detecting-20, errors-21)
prep_in(detecting-20, data-23)
nsubjpass(sent-26, data-23)
auxpass(sent-26, are-25)
rcmod(data-23, sent-26)
prep_through(sent-26, space-28)
prep_through(sent-26, LBR-30)
conj_or(space-28, LBR-30)
prep_through(sent-26, telecommunications-32)
conj_or(space-28, telecommunications-32)
prep_through(sent-26, RBR-34)
conj_or(space-28, RBR-34)
prep_through(sent-26, time-37)
conj_or(space-28, time-37)
dep(way-12, LBR-39)
dep(LBR-39, storage-41)
dep(storage-41, RBR-43)

The Contras is a label given to the various rebel groups opposing Nicaragua 's FSLN - LBR - Frente Sandinista de Liberacion Nacional - RBR - Sandinista Junta of National Reconstruction following the July 1979 overthrow of Anastasio Somoza Debayle .

det(Contras-2, The-1)
nsubj(label-5, Contras-2)
cop(label-5, is-3)
det(label-5, a-4)
root(ROOT-0, label-5)
prep(label-5, given-6)
pcomp(given-6, to-7)
det(groups-11, the-8)
amod(groups-11, various-9)
amod(groups-11, rebel-10)
prep_to(given-6, groups-11)
partmod(groups-11, opposing-12)
poss(RBR-25, Nicaragua-13)
nn(RBR-25, FSLN-15)
dep(RBR-25, LBR-17)
nn(Nacional-23, Frente-19)
nn(Nacional-23, Sandinista-20)
amod(Nacional-23, de-21)
nn(Nacional-23, Liberacion-22)
dep(LBR-17, Nacional-23)
dobj(opposing-12, RBR-25)
nn(Junta-28, Sandinista-27)
dep(RBR-25, Junta-28)
nn(Reconstruction-31, National-30)
prep_of(Junta-28, Reconstruction-31)
det(overthrow-36, the-33)
nn(overthrow-36, July-34)
num(overthrow-36, 1979-35)
prep_following(Reconstruction-31, overthrow-36)
nn(Debayle-40, Anastasio-38)
nn(Debayle-40, Somoza-39)
prep_of(overthrow-36, Debayle-40)

A Coin is usually a piece of hard material , usually metal or a metallic material , usually in the shape of a disc , and most often issued by a government .

det(Coin-2, A-1)
nsubj(piece-6, Coin-2)
nsubj(most-27, Coin-2)
cop(piece-6, is-3)
advmod(piece-6, usually-4)
det(piece-6, a-5)
root(ROOT-0, piece-6)
amod(material-9, hard-8)
prep_of(piece-6, material-9)
advmod(metal-12, usually-11)
prep_of(piece-6, metal-12)
conj_or(material-9, metal-12)
det(material-16, a-14)
amod(material-16, metallic-15)
prep_of(piece-6, material-16)
conj_or(material-9, material-16)
conj_and(piece-6, usually-18)
det(shape-21, the-20)
prep_in(usually-18, shape-21)
det(disc-24, a-23)
prep_of(shape-21, disc-24)
conj_and(piece-6, most-27)
advmod(issued-29, often-28)
partmod(most-27, issued-29)
det(government-32, a-31)
agent(issued-29, government-32)

A Contract is an exchange of promises between two or more parties to do or refrain from doing an act which is enforceable in a court of law .

det(Contract-2, A-1)
nsubj(exchange-5, Contract-2)
cop(exchange-5, is-3)
det(exchange-5, an-4)
root(ROOT-0, exchange-5)
prep_of(exchange-5, promises-7)
num(parties-12, two-9)
conj_or(two-9, more-11)
quantmod(two-9, more-11)
num(parties-12, more-11)
prep_between(promises-7, parties-12)
aux(do-14, to-13)
infmod(exchange-5, do-14)
infmod(exchange-5, refrain-16)
conj_or(do-14, refrain-16)
prepc_from(refrain-16, doing-18)
det(act-20, an-19)
dobj(doing-18, act-20)
nsubj(enforceable-23, act-20)
cop(enforceable-23, is-22)
rcmod(act-20, enforceable-23)
det(court-26, a-25)
prep_in(enforceable-23, court-26)
prep_of(court-26, law-28)

Commodore is a military rank used in many navies for officers whose position exceeds that of a navy captain , but is less than that of a rear admiral .

nsubj(rank-5, Commodore-1)
cop(rank-5, is-2)
det(rank-5, a-3)
amod(rank-5, military-4)
root(ROOT-0, rank-5)
partmod(rank-5, used-6)
amod(navies-9, many-8)
prep_in(used-6, navies-9)
prep_for(used-6, officers-11)
poss(position-13, officers-11)
nsubj(exceeds-14, position-13)
nsubj(less-23, position-13)
rcmod(officers-11, exceeds-14)
dobj(exceeds-14, that-15)
det(captain-19, a-17)
nn(captain-19, navy-18)
prep_of(that-15, captain-19)
cop(less-23, is-22)
rcmod(officers-11, less-23)
conj_but(exceeds-14, less-23)
prep_than(less-23, that-25)
det(admiral-29, a-27)
amod(admiral-29, rear-28)
prep_of(that-25, admiral-29)

A Caldera is a volcanic feature formed by the collapse of land following a volcanic eruption .

det(Caldera-2, A-1)
nsubj(feature-6, Caldera-2)
cop(feature-6, is-3)
det(feature-6, a-4)
amod(feature-6, volcanic-5)
root(ROOT-0, feature-6)
partmod(feature-6, formed-7)
det(collapse-10, the-9)
agent(formed-7, collapse-10)
prep_of(collapse-10, land-12)
det(eruption-16, a-14)
amod(eruption-16, volcanic-15)
prep_following(land-12, eruption-16)

A Calculator is an electronic device for performing mathematical calculations , distinguished from a computer by a limited problem solving ability and an interface optimized for interactive calculation rather than programming .

det(Calculator-2, A-1)
nsubj(device-6, Calculator-2)
cop(device-6, is-3)
det(device-6, an-4)
amod(device-6, electronic-5)
ccomp(distinguished-12, device-6)
prepc_for(device-6, performing-8)
amod(calculations-10, mathematical-9)
dobj(performing-8, calculations-10)
root(ROOT-0, distinguished-12)
det(computer-15, a-14)
prep_from(distinguished-12, computer-15)
det(problem-19, a-17)
amod(problem-19, limited-18)
prep_by(distinguished-12, problem-19)
amod(ability-21, solving-20)
nsubj(distinguished-12, ability-21)
det(interface-24, an-23)
nsubj(distinguished-12, interface-24)
conj_and(ability-21, interface-24)
partmod(interface-24, optimized-25)
amod(calculation-28, interactive-27)
prep_for(optimized-25, calculation-28)
prep_for(optimized-25, programming-31)
conj_negcc(calculation-28, programming-31)

In phylogenetic taxonomy , the Carinatae are considered the last common ancestor of Neornithes - LBR-living birds - RBR - and Ichthyornis - LBR - an extinct seabird of the Cretaceous - RBR - .

amod(taxonomy-3, phylogenetic-2)
prep_in(considered-8, taxonomy-3)
det(Carinatae-6, the-5)
nsubjpass(considered-8, Carinatae-6)
auxpass(considered-8, are-7)
root(ROOT-0, considered-8)
det(ancestor-12, the-9)
amod(ancestor-12, last-10)
amod(ancestor-12, common-11)
dobj(considered-8, ancestor-12)
prep_of(ancestor-12, Neornithes-14)
amod(birds-17, LBR-living-16)
dep(ancestor-12, birds-17)
nn(LBR-24, RBR-19)
dep(Ichthyornis-22, and-21)
dep(LBR-24, Ichthyornis-22)
dep(birds-17, LBR-24)
det(seabird-28, an-26)
amod(seabird-28, extinct-27)
dep(ancestor-12, seabird-28)
det(Cretaceous-31, the-30)
prep_of(seabird-28, Cretaceous-31)
dep(ancestor-12, RBR-33)

A Cocktail is a style of mixed drink .

det(Cocktail-2, A-1)
nsubj(style-5, Cocktail-2)
cop(style-5, is-3)
det(style-5, a-4)
root(ROOT-0, style-5)
amod(drink-8, mixed-7)
prep_of(style-5, drink-8)

Chaos typically refers to unpredictability , and is the antithesis of cosmos .

nsubj(refers-3, Chaos-1)
xsubj(unpredictability-5, Chaos-1)
advmod(refers-3, typically-2)
root(ROOT-0, refers-3)
aux(unpredictability-5, to-4)
xcomp(refers-3, unpredictability-5)
cop(antithesis-10, is-8)
det(antithesis-10, the-9)
conj_and(refers-3, antithesis-10)
prep_of(antithesis-10, cosmos-12)

Capella refers to vocal music or singing without instrumental accompaniment .

nsubj(refers-2, Capella-1)
root(ROOT-0, refers-2)
amod(music-5, vocal-4)
prep_to(refers-2, music-5)
prep_to(refers-2, singing-7)
conj_or(music-5, singing-7)
amod(accompaniment-10, instrumental-9)
prep_without(refers-2, accompaniment-10)

In ethics , Cognitivism is the philosophical view that ethical sentences express propositions , and hence are capable of being true or false .

prep_in(view-8, ethics-2)
nsubj(view-8, Cognitivism-4)
cop(view-8, is-5)
det(view-8, the-6)
amod(view-8, philosophical-7)
root(ROOT-0, view-8)
complm(express-12, that-9)
amod(sentences-11, ethical-10)
nsubj(express-12, sentences-11)
nsubj(capable-18, sentences-11)
ccomp(view-8, express-12)
dobj(express-12, propositions-13)
advmod(capable-18, hence-16)
cop(capable-18, are-17)
ccomp(view-8, capable-18)
conj_and(express-12, capable-18)
cop(true-21, being-20)
prepc_of(capable-18, true-21)
prepc_of(capable-18, false-23)
conj_or(true-21, false-23)

In digital logic and computing , a Counter is a device which stores - LBR - and sometimes displays - RBR - the number of times a particular event or process has occurred , often in relationship to a clock signal .

amod(logic-3, digital-2)
prep_in(device-11, logic-3)
conj_and(logic-3, computing-5)
prep_in(device-11, computing-5)
det(Counter-8, a-7)
nsubj(device-11, Counter-8)
cop(device-11, is-9)
det(device-11, a-10)
root(ROOT-0, device-11)
dobj(RBR-21, device-11)
rel(RBR-21, which-12)
nsubj(RBR-21, stores-13)
conj_and(stores-13, LBR-15)
nsubj(RBR-21, LBR-15)
advmod(stores-13, sometimes-18)
conj_and(stores-13, sometimes-18)
nsubj(RBR-21, sometimes-18)
conj_and(stores-13, displays-19)
nsubj(RBR-21, displays-19)
rcmod(device-11, RBR-21)
det(number-24, the-23)
nsubj(occurred-33, number-24)
det(event-29, a-27)
amod(event-29, particular-28)
prep_of(number-24, event-29)
prep_of(number-24, process-31)
conj_or(event-29, process-31)
aux(occurred-33, has-32)
parataxis(device-11, occurred-33)
advmod(occurred-33, often-35)
prep_in(often-35, relationship-37)
det(signal-41, a-39)
nn(signal-41, clock-40)
prep_to(often-35, signal-41)

A Centimetre - LBR - American spelling : centimeter , symbol cm - RBR - is a unit of length in the metric system , equal to one hundredth of a metre , which is the current SI base unit of length .

det(Centimetre-2, A-1)
nsubj(unit-18, Centimetre-2)
nn(RBR-14, LBR-4)
amod(spelling-7, American-6)
dep(RBR-14, spelling-7)
dep(spelling-7, centimeter-9)
nn(cm-12, symbol-11)
appos(centimeter-9, cm-12)
dep(Centimetre-2, RBR-14)
cop(unit-18, is-16)
det(unit-18, a-17)
root(ROOT-0, unit-18)
prep_of(unit-18, length-20)
det(system-24, the-22)
amod(system-24, metric-23)
prep_in(length-20, system-24)
amod(length-20, equal-26)
num(hundredth-29, one-28)
prep_to(equal-26, hundredth-29)
det(metre-32, a-31)
prep_of(hundredth-29, metre-32)
nsubj(unit-40, which-34)
cop(unit-40, is-35)
det(unit-40, the-36)
amod(unit-40, current-37)
nn(unit-40, SI-38)
nn(unit-40, base-39)
rcmod(length-20, unit-40)
prep_of(unit-40, length-42)

The term Costume can refer to wardrobe and dress in general , or to the distinctive style of dress of a particular people , class , or period .

det(Costume-3, The-1)
nn(Costume-3, term-2)
nsubj(refer-5, Costume-3)
aux(refer-5, can-4)
root(ROOT-0, refer-5)
prep_to(refer-5, wardrobe-7)
prep_to(refer-5, dress-9)
conj_and(wardrobe-7, dress-9)
prep_in(wardrobe-7, general-11)
det(style-17, the-15)
amod(style-17, distinctive-16)
prep_to(refer-5, style-17)
conj_or(wardrobe-7, style-17)
prep_of(style-17, dress-19)
det(people-23, a-21)
amod(people-23, particular-22)
prep_of(dress-19, people-23)
prep_of(dress-19, class-25)
conj_or(people-23, class-25)
prep_of(dress-19, period-28)
conj_or(people-23, period-28)

A Centriole is a barrel shaped organelle found in most animal eukaryotic cells , though absent in higher plants and fungi .

det(Centriole-2, A-1)
nsubj(organelle-7, Centriole-2)
cop(organelle-7, is-3)
det(organelle-7, a-4)
dep(shaped-6, barrel-5)
amod(organelle-7, shaped-6)
root(ROOT-0, organelle-7)
partmod(organelle-7, found-8)
advmod(animal-11, most-10)
amod(cells-13, animal-11)
amod(cells-13, eukaryotic-12)
prep_in(found-8, cells-13)
dep(absent-16, though-15)
amod(cells-13, absent-16)
amod(plants-19, higher-18)
prep_in(found-8, plants-19)
prep_in(found-8, fungi-21)
conj_and(plants-19, fungi-21)

The Cirth - LBR - `` Runes `` - RBR - are the letters of an artificial script which was invented by J. R. R. Tolkien for the constructed languages he devised and used in his works .

det(Cirth-2, The-1)
nsubj(letters-14, Cirth-2)
dep(Cirth-2, LBR-4)
nn(RBR-10, Runes-7)
dep(LBR-4, RBR-10)
cop(letters-14, are-12)
det(letters-14, the-13)
root(ROOT-0, letters-14)
det(script-18, an-16)
amod(script-18, artificial-17)
prep_of(letters-14, script-18)
nsubjpass(invented-21, script-18)
auxpass(invented-21, was-20)
rcmod(script-18, invented-21)
nn(Tolkien-26, J.-23)
nn(Tolkien-26, R.-24)
nn(Tolkien-26, R.-25)
agent(invented-21, Tolkien-26)
det(languages-30, the-28)
amod(languages-30, constructed-29)
prep_for(Tolkien-26, languages-30)
dobj(devised-32, languages-30)
nsubj(devised-32, he-31)
nsubj(used-34, he-31)
rcmod(languages-30, devised-32)
rcmod(languages-30, used-34)
conj_and(devised-32, used-34)
poss(works-37, his-36)
prep_in(devised-32, works-37)

The Compactron is a 12-pin vacuum tube family introduced in 1961 by General Electric in Owensboro , Kentucky with the express purpose of keeping tubes in the market for a few more years during the solid state revolution .

det(Compactron-2, The-1)
nsubj(family-8, Compactron-2)
cop(family-8, is-3)
det(family-8, a-4)
amod(family-8, 12-pin-5)
nn(family-8, vacuum-6)
nn(family-8, tube-7)
root(ROOT-0, family-8)
partmod(family-8, introduced-9)
prep_in(introduced-9, 1961-11)
nn(Electric-14, General-13)
agent(introduced-9, Electric-14)
nn(Kentucky-18, Owensboro-16)
prep_in(Electric-14, Kentucky-18)
det(purpose-22, the-20)
amod(purpose-22, express-21)
prep_with(introduced-9, purpose-22)
prepc_of(purpose-22, keeping-24)
dobj(keeping-24, tubes-25)
det(market-28, the-27)
prep_in(keeping-24, market-28)
det(years-33, a-30)
amod(years-33, few-31)
num(years-33, more-32)
prep_for(market-28, years-33)
det(revolution-38, the-35)
amod(revolution-38, solid-36)
nn(revolution-38, state-37)
prep_during(keeping-24, revolution-38)

In chemistry , a Carbide is a compound of carbon with a less electronegative element .

prep_in(compound-8, chemistry-2)
det(Carbide-5, a-4)
nsubj(compound-8, Carbide-5)
cop(compound-8, is-6)
det(compound-8, a-7)
root(ROOT-0, compound-8)
prep_of(compound-8, carbon-10)
det(element-15, a-12)
advmod(electronegative-14, less-13)
amod(element-15, electronegative-14)
prep_with(carbon-10, element-15)

Historically , Corporatism or corporativism - LBR - Italian : corporativismo - RBR - refers to a political or economic system in which power is held by civic assemblies that represent economic , industrial , agrarian , social , cultural , and professional groups .

nsubj(refers-15, Historically-1)
conj_or(Historically-1, Corporatism-3)
nsubj(refers-15, Corporatism-3)
conj_or(Historically-1, corporativism-5)
nsubj(refers-15, corporativism-5)
nn(RBR-13, LBR-7)
dep(RBR-13, Italian-9)
dep(Italian-9, corporativismo-11)
dep(Historically-1, RBR-13)
root(ROOT-0, refers-15)
det(system-21, a-17)
amod(system-21, political-18)
conj_or(political-18, economic-20)
amod(system-21, economic-20)
prep_to(refers-15, system-21)
rel(held-26, which-23)
nsubjpass(held-26, power-24)
auxpass(held-26, is-25)
rcmod(system-21, held-26)
amod(assemblies-29, civic-28)
agent(held-26, assemblies-29)
nsubj(represent-31, assemblies-29)
rcmod(assemblies-29, represent-31)
acomp(represent-31, economic-32)
acomp(represent-31, industrial-34)
conj_and(economic-32, industrial-34)
acomp(represent-31, agrarian-36)
conj_and(economic-32, agrarian-36)
acomp(represent-31, social-38)
conj_and(economic-32, social-38)
acomp(represent-31, cultural-40)
conj_and(economic-32, cultural-40)
amod(groups-44, professional-43)
acomp(represent-31, groups-44)
conj_and(economic-32, groups-44)

A Crossfire - LBR - also known as `` interlocking fire `` - RBR - is a military term for the siting of weapons - LBR-often automatic weapons such as machine guns - RBR - so that their arcs of fire overlap .

det(Crossfire-2, A-1)
root(ROOT-0, Crossfire-2)
nsubj(RBR-34, LBR-4)
advmod(known-7, also-6)
partmod(LBR-4, known-7)
amod(fire-11, interlocking-10)
prep_as(known-7, fire-11)
dep(fire-11, RBR-14)
dep(fire-11, is-16)
det(term-19, a-17)
amod(term-19, military-18)
nsubj(is-16, term-19)
det(siting-22, the-21)
prep_for(term-19, siting-22)
prep_of(siting-22, weapons-24)
amod(weapons-28, LBR-often-26)
amod(weapons-28, automatic-27)
dep(fire-11, weapons-28)
nn(guns-32, machine-31)
prep_such_as(weapons-28, guns-32)
dep(Crossfire-2, RBR-34)
advmod(overlap-42, so-36)
dep(overlap-42, that-37)
poss(arcs-39, their-38)
nsubj(overlap-42, arcs-39)
prep_of(arcs-39, fire-41)
advcl(RBR-34, overlap-42)
ccomp(RBR-34, overlap-42)
parataxis(RBR-34, overlap-42)

Cruising by boat is a lifestyle that involves living for extended time on a boat while traveling from place to place for pleasure .

csubj(lifestyle-6, Cruising-1)
prep_by(Cruising-1, boat-3)
cop(lifestyle-6, is-4)
det(lifestyle-6, a-5)
root(ROOT-0, lifestyle-6)
nsubj(involves-8, lifestyle-6)
rcmod(lifestyle-6, involves-8)
xcomp(involves-8, living-9)
amod(time-12, extended-11)
prep_for(living-9, time-12)
det(while-16, a-14)
nn(while-16, boat-15)
prep_on(living-9, while-16)
xsubj(place-21, while-16)
partmod(while-16, traveling-17)
prep_from(traveling-17, place-19)
aux(place-21, to-20)
xcomp(traveling-17, place-21)
prep_for(place-21, pleasure-23)

The Cyprinodontiformes is an order of ray-finned fish , also called the Microcyprini , and comprising mostly small , fresh-water fish .

det(Cyprinodontiformes-2, The-1)
nsubj(order-5, Cyprinodontiformes-2)
cop(order-5, is-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(fish-8, ray-finned-7)
prep_of(order-5, fish-8)
advmod(called-11, also-10)
dep(order-5, called-11)
det(Microcyprini-13, the-12)
dobj(called-11, Microcyprini-13)
dep(order-5, comprising-16)
conj_and(called-11, comprising-16)
advmod(small-18, mostly-17)
amod(fish-21, small-18)
amod(fish-21, fresh-water-20)
dobj(comprising-16, fish-21)

A Cactus - LBR - plural : cacti , the word derives from Greek , thus the Latin plural `` cacti `` is etymologically inappropriate , though it is frequently used nonetheless as is otherwise singular `` cactus `` - RBR - is any member of the succulent plant family Cactaceae , native to the Americas .

det(Cactus-2, A-1)
root(ROOT-0, Cactus-2)
dep(Cactus-2, LBR-4)
dep(LBR-4, plural-6)
dep(Cactus-2, cacti-8)
det(word-11, the-10)
nsubj(cactus-38, word-11)
dep(cactus-38, derives-12)
prep_from(derives-12, Greek-14)
advmod(Greek-14, thus-16)
det(plural-19, the-17)
amod(plural-19, Latin-18)
dep(Greek-14, plural-19)
nsubj(inappropriate-25, cacti-21)
cop(inappropriate-25, is-23)
advmod(inappropriate-25, etymologically-24)
dep(cactus-38, inappropriate-25)
mark(used-31, though-27)
nsubjpass(used-31, it-28)
auxpass(used-31, is-29)
advmod(used-31, frequently-30)
advcl(inappropriate-25, used-31)
advmod(used-31, nonetheless-32)
mark(singular-36, as-33)
cop(singular-36, is-34)
advmod(singular-36, otherwise-35)
advcl(used-31, singular-36)
xcomp(cacti-8, cactus-38)
nsubj(member-45, RBR-41)
cop(member-45, is-43)
det(member-45, any-44)
ccomp(cactus-38, member-45)
det(family-50, the-47)
amod(family-50, succulent-48)
nn(family-50, plant-49)
prep_of(member-45, family-50)
nsubj(cactus-38, Cactaceae-51)
appos(Cactaceae-51, native-53)
det(Americas-56, the-55)
prep_to(native-53, Americas-56)

A Covenant-breaker or the act of Covenant-breaking refers to a particular form of heresy .

det(Covenant-breaker-2, A-1)
nsubj(refers-8, Covenant-breaker-2)
det(act-5, the-4)
conj_or(Covenant-breaker-2, act-5)
nsubj(refers-8, act-5)
prep_of(act-5, Covenant-breaking-7)
root(ROOT-0, refers-8)
det(form-12, a-10)
amod(form-12, particular-11)
prep_to(refers-8, form-12)
prep_of(form-12, heresy-14)

A Convention is a set of agreed , stipulated or generally accepted standards , norms , social norms , or criteria , often taking the form of a custom .

det(Convention-2, A-1)
nsubj(set-5, Convention-2)
cop(set-5, is-3)
det(set-5, a-4)
root(ROOT-0, set-5)
prep_of(set-5, agreed-7)
prep_of(set-5, stipulated-9)
conj_or(agreed-7, stipulated-9)
prep_of(set-5, generally-11)
advmod(agreed-7, generally-11)
conj_or(agreed-7, generally-11)
prep_of(set-5, accepted-12)
conj_or(agreed-7, accepted-12)
dobj(accepted-12, standards-13)
dobj(accepted-12, norms-15)
conj_or(standards-13, norms-15)
amod(norms-18, social-17)
dobj(accepted-12, norms-18)
conj_or(standards-13, norms-18)
dobj(accepted-12, criteria-21)
conj_or(standards-13, criteria-21)
advmod(taking-24, often-23)
partmod(accepted-12, taking-24)
xcomp(accepted-12, taking-24)
det(form-26, the-25)
dobj(taking-24, form-26)
det(custom-29, a-28)
prep_of(form-26, custom-29)

In golf , a caddie - LBR - or Caddy - RBR - is the person who carries a player 's bag , and gives insightful advice and moral support .

prep_in(person-16, golf-2)
det(caddie-5, a-4)
nsubj(person-16, caddie-5)
nn(RBR-12, LBR-7)
dep(Caddy-10, or-9)
dep(RBR-12, Caddy-10)
dep(caddie-5, RBR-12)
cop(person-16, is-14)
det(person-16, the-15)
root(ROOT-0, person-16)
nsubj(carries-18, person-16)
nsubj(gives-25, person-16)
rcmod(person-16, carries-18)
det(player-20, a-19)
poss(bag-22, player-20)
dobj(carries-18, bag-22)
rcmod(person-16, gives-25)
conj_and(carries-18, gives-25)
iobj(gives-25, insightful-26)
dobj(gives-25, advice-27)
amod(support-30, moral-29)
dobj(gives-25, support-30)
conj_and(advice-27, support-30)

A Corona is a type of plasma `` atmosphere `` of the Sun or other celestial body , extending millions of kilometres into space , most easily seen during a total solar eclipse , but also observable in a coronagraph .

det(Corona-2, A-1)
nsubj(type-5, Corona-2)
cop(type-5, is-3)
det(type-5, a-4)
root(ROOT-0, type-5)
prepc_of(type-5, plasma-7)
dobj(plasma-7, atmosphere-9)
det(Sun-13, the-12)
prep_of(atmosphere-9, Sun-13)
amod(body-17, other-15)
nn(body-17, celestial-16)
prep_of(atmosphere-9, body-17)
conj_or(Sun-13, body-17)
partmod(Sun-13, extending-19)
dobj(extending-19, millions-20)
prep_of(millions-20, kilometres-22)
prep_into(extending-19, space-24)
advmod(easily-27, most-26)
advmod(seen-28, easily-27)
dep(Sun-13, seen-28)
det(eclipse-33, a-30)
amod(eclipse-33, total-31)
amod(eclipse-33, solar-32)
prep_during(seen-28, eclipse-33)
dep(Sun-13, also-36)
conj_but(seen-28, also-36)
dep(Sun-13, observable-37)
conj_but(seen-28, observable-37)
det(coronagraph-40, a-39)
prep_in(Sun-13, coronagraph-40)

In physical geography , a Dune is a hill of sand built by aeolian processes .

amod(geography-3, physical-2)
prep_in(hill-9, geography-3)
det(Dune-6, a-5)
nsubj(hill-9, Dune-6)
cop(hill-9, is-7)
det(hill-9, a-8)
root(ROOT-0, hill-9)
prep_of(hill-9, sand-11)
partmod(sand-11, built-12)
nn(processes-15, aeolian-14)
agent(built-12, processes-15)

In calculus , a branch of mathematics , the Derivative is a measurement of how a function changes when the values of its inputs change .

prep_in(measurement-13, calculus-2)
det(branch-5, a-4)
appos(calculus-2, branch-5)
prep_of(branch-5, mathematics-7)
det(Derivative-10, the-9)
nsubj(measurement-13, Derivative-10)
cop(measurement-13, is-11)
det(measurement-13, a-12)
root(ROOT-0, measurement-13)
advmod(changes-18, how-15)
det(function-17, a-16)
nsubj(changes-18, function-17)
prepc_of(measurement-13, changes-18)
advmod(change-25, when-19)
det(values-21, the-20)
nsubj(change-25, values-21)
poss(inputs-24, its-23)
prep_of(values-21, inputs-24)
advcl(changes-18, change-25)

A Dictionary is a book of alphabetically listed words in a specific language , with definitions , etymologies , pronunciations , and other information ; or a book of alphabetically listed words in one language with their equivalents in another , also known as a lexicon .

det(Dictionary-2, A-1)
nsubj(book-5, Dictionary-2)
cop(book-5, is-3)
det(book-5, a-4)
root(ROOT-0, book-5)
amod(words-9, alphabetically-7)
amod(words-9, listed-8)
prep_of(book-5, words-9)
det(language-13, a-11)
amod(language-13, specific-12)
prep_in(words-9, language-13)
prep_with(words-9, definitions-16)
prep_with(words-9, etymologies-18)
conj_and(definitions-16, etymologies-18)
prep_with(words-9, pronunciations-20)
conj_and(definitions-16, pronunciations-20)
amod(information-24, other-23)
prep_with(words-9, information-24)
conj_and(definitions-16, information-24)
det(book-28, a-27)
prep_of(book-5, book-28)
conj_or(words-9, book-28)
amod(words-32, alphabetically-30)
amod(words-32, listed-31)
prep_of(book-28, words-32)
num(language-35, one-34)
prep_in(book-5, language-35)
poss(equivalents-38, their-37)
prep_with(language-35, equivalents-38)
prep_in(equivalents-38, another-40)
advmod(known-43, also-42)
partmod(book-5, known-43)
det(lexicon-46, a-45)
prep_as(known-43, lexicon-46)

A Dystopia - LBR - from the Greek Ã ⁄ Â ´ Ã ∂ Â ∑ Ã ∂ Â ∞ - and Ã ∂ Â ≥ Ã ∂ Â ` Ã ∂ Â • Ã ⁄ Â ¿ Ã ∂ Â ≠ , alternatively , cacotopia , kakotopia , cackotopia , or anti-utopia - RBR - is the vision of a society that is the opposite of utopia .

det(Dystopia-2, A-1)
nsubj(vision-59, Dystopia-2)
dep(Dystopia-2, LBR-4)
det(∞-20, the-7)
amod(∞-20, Greek-8)
nn(∞-20, Ã-9)
nn(∞-20, ⁄-10)
nn(∞-20, Â-11)
nn(∞-20, ´-12)
nn(∞-20, Ã-13)
nn(∞-20, ∂-14)
nn(∞-20, Â-15)
nn(∞-20, ∑-16)
nn(∞-20, Ã-17)
nn(∞-20, ∂-18)
nn(∞-20, Â-19)
prep_from(Dystopia-2, ∞-20)
dep(≠-42, and-22)
nn(≠-42, Ã-23)
nn(≠-42, ∂-24)
nn(≠-42, Â-25)
nn(≠-42, ≥-26)
nn(≠-42, Ã-27)
nn(≠-42, ∂-28)
nn(≠-42, Â-29)
nn(≠-42, Ã-31)
nn(≠-42, ∂-32)
nn(≠-42, Â-33)
nn(≠-42, •-34)
nn(≠-42, Ã-35)
nn(≠-42, ⁄-36)
nn(≠-42, Â-37)
nn(≠-42, ¿-38)
nn(≠-42, Ã-39)
nn(≠-42, ∂-40)
nn(≠-42, Â-41)
dep(Dystopia-2, ≠-42)
appos(≠-42, alternatively-44)
appos(≠-42, cacotopia-46)
conj_or(alternatively-44, cacotopia-46)
appos(≠-42, kakotopia-48)
conj_or(alternatively-44, kakotopia-48)
appos(≠-42, cackotopia-50)
conj_or(alternatively-44, cackotopia-50)
appos(≠-42, anti-utopia-53)
conj_or(alternatively-44, anti-utopia-53)
dep(Dystopia-2, RBR-55)
cop(vision-59, is-57)
det(vision-59, the-58)
root(ROOT-0, vision-59)
det(society-62, a-61)
prep_of(vision-59, society-62)
nsubj(opposite-66, society-62)
cop(opposite-66, is-64)
det(opposite-66, the-65)
rcmod(society-62, opposite-66)
prep_of(opposite-66, utopia-68)

The Drum is a member of the percussion group , technically classified as a membranophone .

det(Drum-2, The-1)
nsubj(member-5, Drum-2)
cop(member-5, is-3)
det(member-5, a-4)
root(ROOT-0, member-5)
det(group-9, the-7)
nn(group-9, percussion-8)
prep_of(member-5, group-9)
advmod(classified-12, technically-11)
amod(group-9, classified-12)
det(membranophone-15, a-14)
prep_as(member-5, membranophone-15)

Deoxyribonucleic acid - LBR - DNA - RBR - is a nucleic acid that contains the genetic instructions used in the development and functioning of all known living organisms and some viruses .

amod(acid-2, Deoxyribonucleic-1)
nsubj(acid-13, acid-2)
nn(RBR-8, LBR-4)
dep(RBR-8, DNA-6)
dep(acid-2, RBR-8)
cop(acid-13, is-10)
det(acid-13, a-11)
amod(acid-13, nucleic-12)
root(ROOT-0, acid-13)
nsubj(contains-15, acid-13)
rcmod(acid-13, contains-15)
det(instructions-18, the-16)
amod(instructions-18, genetic-17)
dobj(contains-15, instructions-18)
partmod(instructions-18, used-19)
det(development-22, the-21)
prep_in(used-19, development-22)
prep_in(used-19, functioning-24)
conj_and(development-22, functioning-24)
prep_of(development-22, all-26)
partmod(all-26, known-27)
xcomp(known-27, living-28)
dobj(living-28, organisms-29)
det(viruses-32, some-31)
dobj(living-28, viruses-32)
conj_and(organisms-29, viruses-32)

A Definition is a statement of the meaning of a word or phrase .

det(Definition-2, A-1)
nsubj(statement-5, Definition-2)
cop(statement-5, is-3)
det(statement-5, a-4)
root(ROOT-0, statement-5)
det(meaning-8, the-7)
prep_of(statement-5, meaning-8)
det(word-11, a-10)
prep_of(meaning-8, word-11)
prep_of(meaning-8, phrase-13)
conj_or(word-11, phrase-13)

A Drink , or beverage is a liquid specifically prepared for human consumption .

det(Drink-2, A-1)
nsubj(liquid-8, Drink-2)
conj_or(Drink-2, beverage-5)
nsubj(liquid-8, beverage-5)
cop(liquid-8, is-6)
det(liquid-8, a-7)
root(ROOT-0, liquid-8)
advmod(prepared-10, specifically-9)
partmod(liquid-8, prepared-10)
amod(consumption-13, human-12)
prep_for(prepared-10, consumption-13)

The Devonian is a geologic period and system of the Paleozoic era spanning from Ma to Ma & amp ; amp ; nbsp ; million years ago ICS 2004 .

det(Devonian-2, The-1)
nsubj(period-6, Devonian-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
conj_and(period-6, system-8)
det(era-12, the-10)
amod(era-12, Paleozoic-11)
prep_of(period-6, era-12)
partmod(era-12, spanning-13)
prep_from(spanning-13, Ma-15)
prep_to(spanning-13, Ma-17)
prep_to(spanning-13, amp-19)
conj_and(Ma-17, amp-19)
nsubj(ICS-28, amp-21)
dep(amp-21, nbsp-23)
num(years-26, million-25)
npadvmod(ago-27, years-26)
advmod(ICS-28, ago-27)
parataxis(period-6, ICS-28)
dobj(ICS-28, 2004-29)

In geometry , a Diameter of a circle is any straight line segment that passes through the center of the circle and whose endpoints are on the circle .

prep_in(segment-13, geometry-2)
det(Diameter-5, a-4)
nsubj(segment-13, Diameter-5)
det(circle-8, a-7)
prep_of(Diameter-5, circle-8)
cop(segment-13, is-9)
det(segment-13, any-10)
amod(segment-13, straight-11)
nn(segment-13, line-12)
root(ROOT-0, segment-13)
nsubj(passes-15, segment-13)
rcmod(segment-13, passes-15)
det(center-18, the-17)
prep_through(passes-15, center-18)
det(circle-21, the-20)
prep_of(center-18, circle-21)
dep(are-25, whose-23)
nsubj(are-25, endpoints-24)
prep_through(passes-15, are-25)
conj_and(center-18, are-25)
det(circle-28, the-27)
prep_on(are-25, circle-28)

A Disease is an abnormal condition of an organism that impairs bodily functions .

det(Disease-2, A-1)
nsubj(condition-6, Disease-2)
cop(condition-6, is-3)
det(condition-6, an-4)
amod(condition-6, abnormal-5)
root(ROOT-0, condition-6)
det(organism-9, an-8)
prep_of(condition-6, organism-9)
nsubj(impairs-11, organism-9)
rcmod(organism-9, impairs-11)
amod(functions-13, bodily-12)
dobj(impairs-11, functions-13)

The Dardanelles - LBR - Turkish : Ã ∞ ÂΩanakkale BoÃ ≥ ÂƒazÃ ≥ Â ± , Greek : Ã ⁄ Â ‰ Ã ⁄ Â ± Ã ∂ Â ™ Ã ⁄ Â ´ Ã ⁄ Â ± Ã ⁄ Â ∏ Ã ⁄ Â -- Ã ⁄ Â '' Ã ⁄ Â '' Ã ⁄ Â ' Ã ⁄ Â ± , Dardanellia - RBR - , formerly known as the Hellespont - LBR - Greek : Ã ⁄ Â Ã ⁄ Â '' Ã ⁄ Â '' Ã ⁄ Â ® Ã ∂ Â ∞ Ã ∂ Â • Ã ⁄ Â ¿ Ã ⁄ Â ∏ Ã ∂ Â ≥ Ã ⁄ Â ¿ Ã ∂ Â ≠ , Hellespontos - RBR - , is a narrow strait in northwestern Turkey connecting the Aegean Sea to the Sea of Marmara .

det(Dardanelles-2, The-1)
root(ROOT-0, Dardanelles-2)
dep(Dardanelles-2, LBR-4)
dep(known-71, Turkish-6)
nn(BoÃ-11, Ã-8)
nn(BoÃ-11, ∞-9)
nn(BoÃ-11, ÂΩanakkale-10)
dep(Turkish-6, BoÃ-11)
nn(±-16, ≥-12)
nn(±-16, ÂƒazÃ-13)
nn(±-16, ≥-14)
nn(±-16, Â-15)
dep(known-71, ±-16)
advmod(Â-46, Greek-18)
nn(Â-46, Ã-20)
nn(Â-46, ⁄-21)
nn(Â-46, Â-22)
nn(Â-46, ‰-23)
nn(Â-46, Ã-24)
nn(Â-46, ⁄-25)
nn(Â-46, Â-26)
nn(Â-46, ±-27)
nn(Â-46, Ã-28)
nn(Â-46, ∂-29)
nn(Â-46, Â-30)
nn(Â-46, ™-31)
nn(Â-46, Ã-32)
nn(Â-46, ⁄-33)
nn(Â-46, Â-34)
nn(Â-46, ´-35)
nn(Â-46, Ã-36)
nn(Â-46, ⁄-37)
nn(Â-46, Â-38)
nn(Â-46, ±-39)
nn(Â-46, Ã-40)
nn(Â-46, ⁄-41)
nn(Â-46, Â-42)
nn(Â-46, ∏-43)
nn(Â-46, Ã-44)
nn(Â-46, ⁄-45)
rcmod(±-16, Â-46)
nn(Â-50, Ã-48)
nn(Â-50, ⁄-49)
dep(±-16, Â-50)
nn(Â-54, Ã-52)
nn(Â-54, ⁄-53)
dep(±-16, Â-54)
nn(Â-58, Ã-56)
nn(Â-58, ⁄-57)
dep(±-16, Â-58)
nn(±-63, Ã-60)
nn(±-63, ⁄-61)
nn(±-63, Â-62)
dep(±-16, ±-63)
appos(±-16, Dardanellia-65)
dep(Dardanellia-65, RBR-67)
advmod(known-71, formerly-70)
dep(LBR-4, known-71)
det(Greek-78, the-73)
amod(Greek-78, Hellespont-74)
dep(Greek-78, LBR-76)
prep_as(known-71, Greek-78)
nn(Â-85, Ã-80)
nn(Â-85, ⁄-81)
nn(Â-85, Â-82)
nn(Â-85, Ã-83)
nn(Â-85, ⁄-84)
dep(Dardanelles-2, Â-85)
nn(Â-89, Ã-87)
nn(Â-89, ⁄-88)
nsubj(strait-132, Â-89)
advmod(≠-122, Ã-91)
nn(≠-122, ⁄-92)
nn(≠-122, Â-93)
nn(≠-122, ®-94)
nn(≠-122, Ã-95)
nn(≠-122, ∂-96)
nn(≠-122, Â-97)
nn(≠-122, ∞-98)
nn(≠-122, Ã-99)
nn(≠-122, ∂-100)
nn(≠-122, Â-101)
nn(≠-122, •-102)
nn(≠-122, Ã-103)
nn(≠-122, ⁄-104)
nn(≠-122, Â-105)
nn(≠-122, ¿-106)
nn(≠-122, Ã-107)
nn(≠-122, ⁄-108)
nn(≠-122, Â-109)
nn(≠-122, ∏-110)
nn(≠-122, Ã-111)
nn(≠-122, ∂-112)
nn(≠-122, Â-113)
nn(≠-122, ≥-114)
nn(≠-122, Ã-115)
nn(≠-122, ⁄-116)
nn(≠-122, Â-117)
nn(≠-122, ¿-118)
nn(≠-122, Ã-119)
nn(≠-122, ∂-120)
nn(≠-122, Â-121)
rcmod(Â-89, ≠-122)
appos(Â-89, Hellespontos-124)
dep(Hellespontos-124, RBR-126)
cop(strait-132, is-129)
det(strait-132, a-130)
amod(strait-132, narrow-131)
rcmod(Â-85, strait-132)
nn(Turkey-135, northwestern-134)
prep_in(strait-132, Turkey-135)
partmod(Turkey-135, connecting-136)
det(Sea-139, the-137)
nn(Sea-139, Aegean-138)
dobj(connecting-136, Sea-139)
det(Sea-142, the-141)
prep_to(connecting-136, Sea-142)
prep_of(Sea-142, Marmara-144)

A Desert is a landscape or region that receives very little precipitation .

det(Desert-2, A-1)
nsubj(landscape-5, Desert-2)
cop(landscape-5, is-3)
det(landscape-5, a-4)
root(ROOT-0, landscape-5)
nsubj(receives-9, landscape-5)
conj_or(landscape-5, region-7)
nsubj(receives-9, region-7)
rcmod(landscape-5, receives-9)
advmod(precipitation-12, very-10)
advmod(precipitation-12, little-11)
acomp(receives-9, precipitation-12)

The Dollar - LBR - often represented by the dollar sign : `` $ `` - RBR - is the name of the official currency in several countries , dependencies and other world regions .

det(Dollar-2, The-1)
nsubj(represented-7, Dollar-2)
dep(Dollar-2, LBR-4)
advmod(represented-7, often-6)
root(ROOT-0, represented-7)
det(sign-11, the-9)
nn(sign-11, dollar-10)
prep_by(represented-7, sign-11)
dep(sign-11, $-14)
dep(--18, RBR-17)
cop(name-21, is-19)
det(name-21, the-20)
rcmod($-14, name-21)
det(currency-25, the-23)
amod(currency-25, official-24)
prep_of(name-21, currency-25)
amod(countries-28, several-27)
prep_in(currency-25, countries-28)
prep_in(currency-25, dependencies-30)
conj_and(countries-28, dependencies-30)
amod(regions-34, other-32)
nn(regions-34, world-33)
prep_in(currency-25, regions-34)
conj_and(countries-28, regions-34)

In medicine and toxicology , a Dose is the smallest amount of a substance required to produce a measurable effect on a living organism .

prep_in(amount-11, medicine-2)
conj_and(medicine-2, toxicology-4)
prep_in(amount-11, toxicology-4)
det(Dose-7, a-6)
nsubj(amount-11, Dose-7)
cop(amount-11, is-8)
det(amount-11, the-9)
amod(amount-11, smallest-10)
root(ROOT-0, amount-11)
det(substance-14, a-13)
prep_of(amount-11, substance-14)
xsubj(produce-17, substance-14)
partmod(substance-14, required-15)
aux(produce-17, to-16)
xcomp(required-15, produce-17)
det(effect-20, a-18)
amod(effect-20, measurable-19)
dobj(produce-17, effect-20)
det(organism-24, a-22)
amod(organism-24, living-23)
prep_on(produce-17, organism-24)

A Dialect - LBR - from the Greek word Ã ⁄ Â ´ Ã ⁄ Â ' Ã ⁄ Â ¬ Ã ⁄ Â '' Ã ⁄ ÂµÃ ⁄ ÂºÃ ∂ Â ≥ Ã ⁄ Â ¿ Ã ∂ Â ≠ , dialektos - RBR - is a variety of a language that is characteristic of a particular group of the language 's speakers .

det(Dialect-2, A-1)
root(ROOT-0, Dialect-2)
dep(∂-39, LBR-4)
dep(LBR-4, from-6)
det(Â-16, the-7)
amod(Â-16, Greek-8)
nn(Â-16, word-9)
nn(Â-16, Ã-10)
nn(Â-16, ⁄-11)
nn(Â-16, Â-12)
nn(Â-16, ´-13)
nn(Â-16, Ã-14)
nn(Â-16, ⁄-15)
poss(Â-24, Â-16)
nn(Â-24, Ã-18)
nn(Â-24, ⁄-19)
nn(Â-24, Â-20)
nn(Â-24, ¬-21)
nn(Â-24, Ã-22)
nn(Â-24, ⁄-23)
pobj(from-6, Â-24)
nn(∂-39, Ã-26)
nn(∂-39, ⁄-27)
nn(∂-39, ÂµÃ-28)
nn(∂-39, ⁄-29)
nn(∂-39, ÂºÃ-30)
nn(∂-39, ∂-31)
nn(∂-39, Â-32)
nn(∂-39, ≥-33)
nn(∂-39, Ã-34)
nn(∂-39, ⁄-35)
nn(∂-39, Â-36)
nn(∂-39, ¿-37)
nn(∂-39, Ã-38)
dep(variety-49, ∂-39)
nn(≠-41, Â-40)
nsubj(variety-49, ≠-41)
appos(≠-41, dialektos-43)
dep(≠-41, RBR-45)
cop(variety-49, is-47)
det(variety-49, a-48)
dep(Dialect-2, variety-49)
det(language-52, a-51)
prep_of(variety-49, language-52)
nsubj(characteristic-55, language-52)
cop(characteristic-55, is-54)
rcmod(language-52, characteristic-55)
det(group-59, a-57)
amod(group-59, particular-58)
prep_of(characteristic-55, group-59)
det(language-62, the-61)
poss(speakers-64, language-62)
prep_of(group-59, speakers-64)

In law , Damages refers to the money paid or awarded to a claimant - LBR - England - RBR - , pursuer - LBR - Scotland - RBR - or plaintiff - LBR - US - RBR - following a successful claim in a civil action .

prep_in(refers-5, law-2)
nsubj(refers-5, Damages-4)
root(ROOT-0, refers-5)
det(money-8, the-7)
prep_to(refers-5, money-8)
partmod(money-8, paid-9)
partmod(money-8, awarded-11)
conj_or(paid-9, awarded-11)
det(claimant-14, a-13)
prep_to(paid-9, claimant-14)
prep_to(paid-9, LBR-16)
conj_or(claimant-14, LBR-16)
prep_to(paid-9, England-18)
conj_or(claimant-14, England-18)
dep(England-18, RBR-20)
appos(England-18, pursuer-23)
prep_to(paid-9, LBR-25)
conj_or(claimant-14, LBR-25)
prep_to(paid-9, Scotland-27)
conj_or(claimant-14, Scotland-27)
prep_to(paid-9, RBR-29)
conj_or(claimant-14, RBR-29)
prep_to(paid-9, plaintiff-32)
conj_or(claimant-14, plaintiff-32)
dep(money-8, LBR-34)
dep(LBR-34, US-36)
dep(US-36, RBR-38)
det(claim-43, a-41)
amod(claim-43, successful-42)
prep_following(LBR-34, claim-43)
det(action-47, a-45)
amod(action-47, civil-46)
prep_in(claim-43, action-47)

A Disaster is the impact of a natural or human-made hazard that negatively affects society or environment .

det(Disaster-2, A-1)
nsubj(impact-5, Disaster-2)
cop(impact-5, is-3)
det(impact-5, the-4)
root(ROOT-0, impact-5)
nsubj(affects-14, impact-5)
det(hazard-11, a-7)
amod(hazard-11, natural-8)
conj_or(natural-8, human-made-10)
amod(hazard-11, human-made-10)
prep_of(impact-5, hazard-11)
advmod(affects-14, negatively-13)
rcmod(impact-5, affects-14)
dobj(affects-14, society-15)
dobj(affects-14, environment-17)
conj_or(society-15, environment-17)

The Dipsacales are an order of flowering plants , included within the asterid group of dicotyledons .

det(Dipsacales-2, The-1)
nsubj(order-5, Dipsacales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(plants-8, flowering-7)
prep_of(order-5, plants-8)
partmod(plants-8, included-10)
det(group-14, the-12)
amod(group-14, asterid-13)
prep_within(included-10, group-14)
prep_of(group-14, dicotyledons-16)

A Dye can generally be described as a colored substance that has an affinity to the substrate to which it is being applied .

det(Dye-2, A-1)
nsubjpass(described-6, Dye-2)
aux(described-6, can-3)
advmod(described-6, generally-4)
auxpass(described-6, be-5)
root(ROOT-0, described-6)
det(substance-10, a-8)
amod(substance-10, colored-9)
prep_as(described-6, substance-10)
nsubj(has-12, substance-10)
rcmod(substance-10, has-12)
det(affinity-14, an-13)
dobj(has-12, affinity-14)
det(substrate-17, the-16)
prep_to(affinity-14, substrate-17)
rel(applied-23, which-19)
nsubjpass(applied-23, it-20)
aux(applied-23, is-21)
auxpass(applied-23, being-22)
rcmod(substrate-17, applied-23)

Democritus - LBR - Greek : Ã ⁄ Â ‰ Ã ⁄ Â · Ã ⁄ ÂπÃ ∂ Â ` Ã ⁄ ÂºÃ ∂ Â ™ Ã ⁄ Â ' Ã ∂ Â ≥ Ã ⁄ Â ¿ Ã ∂ Â ≠ - RBR - was a pre-Socratic Greek materialist philosopher - LBR - born at Abdera in Thrace ca .

nsubj(philosopher-51, Democritus-1)
nn(RBR-44, LBR-3)
dep(RBR-44, Greek-5)
nn(Ã-27, Ã-7)
nn(Ã-27, ⁄-8)
nn(Ã-27, Â-9)
nn(Ã-27, ‰-10)
nn(Ã-27, Ã-11)
nn(Ã-27, ⁄-12)
nn(Ã-27, Â-13)
nn(Ã-27, ·-14)
nn(Ã-27, Ã-15)
nn(Ã-27, ⁄-16)
nn(Ã-27, ÂπÃ-17)
nn(Ã-27, ∂-18)
nn(Ã-27, Â-19)
nn(Ã-27, Ã-21)
nn(Ã-27, ⁄-22)
nn(Ã-27, ÂºÃ-23)
nn(Ã-27, ∂-24)
nn(Ã-27, Â-25)
nn(Ã-27, ™-26)
dep(Greek-5, Ã-27)
nn(Â-29, ⁄-28)
poss(≠-42, Â-29)
nn(≠-42, Ã-31)
nn(≠-42, ∂-32)
nn(≠-42, Â-33)
nn(≠-42, ≥-34)
nn(≠-42, Ã-35)
nn(≠-42, ⁄-36)
nn(≠-42, Â-37)
nn(≠-42, ¿-38)
nn(≠-42, Ã-39)
nn(≠-42, ∂-40)
nn(≠-42, Â-41)
dep(Ã-27, ≠-42)
dep(Democritus-1, RBR-44)
cop(philosopher-51, was-46)
det(philosopher-51, a-47)
amod(philosopher-51, pre-Socratic-48)
amod(philosopher-51, Greek-49)
nn(philosopher-51, materialist-50)
root(ROOT-0, philosopher-51)
dep(philosopher-51, LBR-53)
partmod(philosopher-51, born-55)
prep_at(born-55, Abdera-57)
mark(ca-60, in-58)
nsubj(ca-60, Thrace-59)
advcl(born-55, ca-60)

460 BC - died ca 370 BC - RBR - .

nn(BC-2, 460-1)
nsubj(died-4, BC-2)
root(ROOT-0, died-4)
aux(370-6, ca-5)
ccomp(died-4, 370-6)
dobj(370-6, BC-7)
dep(BC-7, RBR-9)

The Dorians or Dorian Greeks - LBR - Greek : Ã ⁄ Â ‰ Ã ∂ Â ≈ Ã ∂ Â ™ Ã ⁄ Â ' Ã ⁄ ÂµÃ ¡ Â ¿ ÂˆÃ ∂ Â ≠ , DÃ ∑ ÂŸrieis , singular Ã ⁄ Â ‰ Ã ∂ Â ≈ Ã ∂ Â ™ Ã ⁄ Â ' Ã ⁄ ÂµÃ ∂ ÂŸÃ ∂ Â ≠ , DÃ ∑ ÂŸrieus - RBR - were one of three major tribes into which the ancient Greeks divided themselves .

det(Dorians-2, The-1)
nsubj(singular-42, Dorians-2)
nn(Greeks-5, Dorian-4)
conj_or(Dorians-2, Greeks-5)
nsubj(singular-42, Greeks-5)
dep(Dorians-2, LBR-7)
dep(LBR-7, Greek-9)
nn(Ã-23, Ã-11)
nn(Ã-23, ⁄-12)
nn(Ã-23, Â-13)
nn(Ã-23, ‰-14)
nn(Ã-23, Ã-15)
nn(Ã-23, ∂-16)
nn(Ã-23, Â-17)
nn(Ã-23, ≈-18)
nn(Ã-23, Ã-19)
nn(Ã-23, ∂-20)
nn(Ã-23, Â-21)
nn(Ã-23, ™-22)
dep(Dorians-2, Ã-23)
nn(Â-25, ⁄-24)
poss(≠-36, Â-25)
nn(≠-36, Ã-27)
nn(≠-36, ⁄-28)
nn(≠-36, ÂµÃ-29)
nn(≠-36, ¡-30)
nn(≠-36, Â-31)
nn(≠-36, ¿-32)
nn(≠-36, ÂˆÃ-33)
nn(≠-36, ∂-34)
nn(≠-36, Â-35)
dep(Ã-23, ≠-36)
nn(ÂŸrieis-40, DÃ-38)
nn(ÂŸrieis-40, ∑-39)
appos(Dorians-2, ÂŸrieis-40)
root(ROOT-0, singular-42)
nn(Ã-55, Ã-43)
nn(Ã-55, ⁄-44)
nn(Ã-55, Â-45)
nn(Ã-55, ‰-46)
nn(Ã-55, Ã-47)
nn(Ã-55, ∂-48)
nn(Ã-55, Â-49)
nn(Ã-55, ≈-50)
nn(Ã-55, Ã-51)
nn(Ã-55, ∂-52)
nn(Ã-55, Â-53)
nn(Ã-55, ™-54)
nsubj(⁄-56, Ã-55)
ccomp(singular-42, ⁄-56)
poss(≠-66, Â-57)
nn(≠-66, Ã-59)
nn(≠-66, ⁄-60)
nn(≠-66, ÂµÃ-61)
nn(≠-66, ∂-62)
nn(≠-66, ÂŸÃ-63)
nn(≠-66, ∂-64)
nn(≠-66, Â-65)
nsubj(one-75, ≠-66)
nn(ÂŸrieus-70, DÃ-68)
nn(ÂŸrieus-70, ∑-69)
appos(≠-66, ÂŸrieus-70)
dep(≠-66, RBR-72)
cop(one-75, were-74)
ccomp(⁄-56, one-75)
num(tribes-79, three-77)
amod(tribes-79, major-78)
prep_of(one-75, tribes-79)
rel(divided-85, which-81)
det(Greeks-84, the-82)
amod(Greeks-84, ancient-83)
nsubj(divided-85, Greeks-84)
rcmod(tribes-79, divided-85)
dobj(divided-85, themselves-86)

In Greek mythology Demeter - LBR - dÃ ≈ Â ¨ Ã -- Â √ miÃ -- Â ∆ tÃ ≈ Â˚ ; Greek : Ã ⁄ Â ‰ Ã ⁄ Â · Ã ⁄ ÂπÃ ⁄ Â ® Ã ∂ Â ≥ Ã ⁄ Â · Ã ∂ Â ™ , possibly `` distribution-mother `` from the noun of the Indo-European mother-earth \* dheghom \* mater , also called simply Ã ⁄ Â ‰ Ã ⁄ Â · Ã ∂ Â - RBR - is the goddess of grain and fertility , the pure nourisher of the youth and the green earth , the health-giving cycle of life and death , and preserver of marriage and the sacred law .

amod(Demeter-4, Greek-2)
nn(Demeter-4, mythology-3)
prep_in(goddess-88, Demeter-4)
dep(Demeter-4, LBR-6)
nn(Ã-12, dÃ-8)
nn(Ã-12, ≈-9)
nn(Ã-12, Â-10)
nn(Ã-12, ¨-11)
dep(Demeter-4, Ã-12)
nn(miÃ-16, Â-14)
nn(miÃ-16, √-15)
dep(Demeter-4, miÃ-16)
nn(Â˚-22, Â-18)
nn(Â˚-22, ∆-19)
nn(Â˚-22, tÃ-20)
nn(Â˚-22, ≈-21)
dep(Demeter-4, Â˚-22)
dep(Demeter-4, Greek-24)
nn(Â-28, Ã-26)
nn(Â-28, ⁄-27)
dep(Demeter-4, Â-28)
amod(™-51, ‰-29)
nn(™-51, Ã-30)
nn(™-51, ⁄-31)
nn(™-51, Â-32)
nn(™-51, ·-33)
nn(™-51, Ã-34)
nn(™-51, ⁄-35)
nn(™-51, ÂπÃ-36)
nn(™-51, ⁄-37)
nn(™-51, Â-38)
nn(™-51, ®-39)
nn(™-51, Ã-40)
nn(™-51, ∂-41)
nn(™-51, Â-42)
nn(™-51, ≥-43)
nn(™-51, Ã-44)
nn(™-51, ⁄-45)
nn(™-51, Â-46)
nn(™-51, ·-47)
nn(™-51, Ã-48)
nn(™-51, ∂-49)
nn(™-51, Â-50)
nsubj(goddess-88, ™-51)
advmod(distribution-mother-55, possibly-53)
ccomp(™-51, distribution-mother-55)
det(noun-59, the-58)
prep_from(distribution-mother-55, noun-59)
det(mother-earth-63, the-61)
amod(mother-earth-63, Indo-European-62)
prep_of(noun-59, mother-earth-63)
dep(dheghom-65, \*-64)
dep(called-70, dheghom-65)
dep(mater-67, \*-66)
dep(called-70, mater-67)
advmod(called-70, also-69)
dep(distribution-mother-55, called-70)
advmod(Â-82, simply-71)
nn(Â-82, Ã-72)
nn(Â-82, ⁄-73)
nn(Â-82, Â-74)
nn(Â-82, ‰-75)
nn(Â-82, Ã-76)
nn(Â-82, ⁄-77)
nn(Â-82, Â-78)
nn(Â-82, ·-79)
nn(Â-82, Ã-80)
nn(Â-82, ∂-81)
dobj(called-70, Â-82)
dep(Â-82, RBR-84)
cop(goddess-88, is-86)
det(goddess-88, the-87)
root(ROOT-0, goddess-88)
prep_of(goddess-88, grain-90)
prep_of(goddess-88, fertility-92)
conj_and(grain-90, fertility-92)
det(nourisher-96, the-94)
amod(nourisher-96, pure-95)
conj_and(goddess-88, nourisher-96)
det(youth-99, the-98)
prep_of(nourisher-96, youth-99)
det(earth-103, the-101)
amod(earth-103, green-102)
prep_of(nourisher-96, earth-103)
conj_and(youth-99, earth-103)
det(cycle-107, the-105)
amod(cycle-107, health-giving-106)
conj_and(goddess-88, cycle-107)
prep_of(cycle-107, life-109)
prep_of(cycle-107, death-111)
conj_and(life-109, death-111)
conj_and(goddess-88, preserver-114)
prep_of(preserver-114, marriage-116)
det(law-120, the-118)
amod(law-120, sacred-119)
prep_of(preserver-114, law-120)
conj_and(marriage-116, law-120)

Dice - LBR - the plural of Die , from Old French dÃ ∞ Â © , from Latin datum `` something given or played `` - RBR - are small polyhedral objects , usually cubic , used for generating random numbers or other symbols .

root(ROOT-0, Dice-1)
dep(Dice-1, LBR-3)
det(plural-6, the-5)
dep(Dice-1, plural-6)
prep_of(plural-6, Die-8)
amod(©-16, Old-11)
amod(©-16, French-12)
nn(©-16, dÃ-13)
nn(©-16, ∞-14)
nn(©-16, Â-15)
prep_from(Dice-1, ©-16)
amod(something-22, Latin-19)
nn(something-22, datum-20)
prep_from(Dice-1, something-22)
rcmod(Dice-1, given-23)
rcmod(LBR-3, given-23)
rcmod(plural-6, given-23)
rcmod(Dice-1, played-25)
rcmod(LBR-3, played-25)
rcmod(plural-6, played-25)
conj_or(given-23, played-25)
nsubj(objects-33, RBR-28)
cop(objects-33, are-30)
amod(objects-33, small-31)
amod(objects-33, polyhedral-32)
ccomp(played-25, objects-33)
advmod(cubic-36, usually-35)
appos(objects-33, cubic-36)
partmod(objects-33, used-38)
prepc_for(used-38, generating-40)
amod(numbers-42, random-41)
dobj(generating-40, numbers-42)
amod(symbols-45, other-44)
dobj(generating-40, symbols-45)
conj_or(numbers-42, symbols-45)

In electronics , a Diode is a two-terminal device - LBR - except that thermionic diodes may also have one or two ancillary terminals for a heater - RBR - .

prep_in(device-9, electronics-2)
det(Diode-5, a-4)
nsubj(device-9, Diode-5)
cop(device-9, is-6)
det(device-9, a-7)
amod(device-9, two-terminal-8)
root(ROOT-0, device-9)
dep(device-9, LBR-11)
complm(have-19, that-14)
amod(diodes-16, thermionic-15)
nsubj(have-19, diodes-16)
aux(have-19, may-17)
advmod(have-19, also-18)
prepc_except(device-9, have-19)
num(terminals-24, one-20)
conj_or(one-20, two-22)
num(terminals-24, two-22)
amod(terminals-24, ancillary-23)
dobj(have-19, terminals-24)
det(heater-27, a-26)
prep_for(terminals-24, heater-27)
dep(heater-27, RBR-29)

Doom is a series of video games by id Software , and several licensed properties have been based on the series .

nsubj(series-4, Doom-1)
cop(series-4, is-2)
det(series-4, a-3)
root(ROOT-0, series-4)
amod(games-7, video-6)
prep_of(series-4, games-7)
nn(Software-10, id-9)
prep_by(games-7, Software-10)
amod(properties-15, several-13)
amod(properties-15, licensed-14)
nsubjpass(based-18, properties-15)
aux(based-18, have-16)
auxpass(based-18, been-17)
conj_and(series-4, based-18)
det(series-21, the-20)
prep_on(based-18, series-21)

In Greek mythology , Daedalus - LBR - Latin , also Hellenized Latin Daedalos , Greek Daidalos - LBR - Ã ⁄ Â ‰ Ã ⁄ Â ± Ã ⁄ Â ¯ Ã ⁄ Â ´ Ã ⁄ Â ± Ã ⁄ Â '' Ã ⁄ Â ¿ Ã ∂ Â ≠ - RBR - meaning `` cunning worker `` , and Etruscan Taitle - RBR - was a most skillful artificer , or craftsman , so skillful that he was said to have invented images that seemed to move about .

amod(mythology-3, Greek-2)
prep_in(skillful-78, mythology-3)
nsubjpass(skillful-78, Daedalus-5)
dep(Daedalus-5, LBR-7)
dep(LBR-7, Latin-9)
advmod(Hellenized-12, also-11)
partmod(Latin-9, Hellenized-12)
nn(Daidalos-17, Latin-13)
nn(Daidalos-17, Daedalos-14)
amod(Daidalos-17, Greek-16)
dobj(Hellenized-12, Daidalos-17)
dep(Daidalos-17, LBR-19)
nn(Â-23, Ã-21)
nn(Â-23, ⁄-22)
dep(Daidalos-17, Â-23)
advmod(Â-43, ‰-24)
nn(Â-43, Ã-25)
nn(Â-43, ⁄-26)
nn(Â-43, Â-27)
nn(Â-43, ±-28)
nn(Â-43, Ã-29)
nn(Â-43, ⁄-30)
nn(Â-43, Â-31)
nn(Â-43, ¯-32)
nn(Â-43, Ã-33)
nn(Â-43, ⁄-34)
nn(Â-43, Â-35)
nn(Â-43, ´-36)
nn(Â-43, Ã-37)
nn(Â-43, ⁄-38)
nn(Â-43, Â-39)
nn(Â-43, ±-40)
nn(Â-43, Ã-41)
nn(Â-43, ⁄-42)
rcmod(Â-23, Â-43)
nn(≠-52, Ã-45)
nn(≠-52, ⁄-46)
nn(≠-52, Â-47)
nn(≠-52, ¿-48)
nn(≠-52, Ã-49)
nn(≠-52, ∂-50)
nn(≠-52, Â-51)
dep(Daidalos-17, ≠-52)
dep(Daidalos-17, RBR-54)
dep(Daidalos-17, meaning-56)
amod(worker-59, cunning-58)
dep(meaning-56, worker-59)
nn(Taitle-64, Etruscan-63)
dep(LBR-7, Taitle-64)
conj_and(Latin-9, Taitle-64)
dep(Taitle-64, RBR-66)
auxpass(skillful-78, was-68)
det(artificer-72, a-69)
advmod(artificer-72, most-70)
amod(artificer-72, skillful-71)
npadvmod(so-77, artificer-72)
conj_or(artificer-72, craftsman-75)
npadvmod(so-77, craftsman-75)
advmod(skillful-78, so-77)
root(ROOT-0, skillful-78)
complm(said-82, that-79)
nsubjpass(said-82, he-80)
xsubj(invented-85, he-80)
auxpass(said-82, was-81)
ccomp(skillful-78, said-82)
aux(invented-85, to-83)
aux(invented-85, have-84)
xcomp(said-82, invented-85)
dobj(invented-85, images-86)
nsubj(seemed-88, images-86)
rcmod(images-86, seemed-88)
aux(move-90, to-89)
xcomp(seemed-88, move-90)
prt(move-90, about-91)

In religion , folklore , and mythology a Demon - LBR - or daemon , dÃ ∞ Âœmon , daimon from Greek : Ã ⁄ Â ´ Ã ⁄ Â ± Ã ⁄ Â ¯ Ã ⁄ ÂπÃ ∂ Â ≈ Ã ⁄ Â ∏ - RBR - is a supernatural being that has generally been described as a malevolent spirit , and in Christian terms it is generally understood as a fallen angel , formerly of God .

prep_in(being-52, religion-2)
conj_and(religion-2, folklore-4)
prep_in(being-52, folklore-4)
conj_and(religion-2, mythology-7)
prep_in(being-52, mythology-7)
det(Demon-9, a-8)
dep(mythology-7, Demon-9)
conj_and(religion-2, LBR-11)
prep_in(being-52, LBR-11)
conj_or(religion-2, daemon-14)
prep_in(being-52, daemon-14)
nn(Âœmon-18, dÃ-16)
nn(Âœmon-18, ∞-17)
nsubj(being-52, Âœmon-18)
appos(Âœmon-18, daimon-20)
dep(∏-45, from-21)
pobj(from-21, Greek-22)
nn(∏-45, Ã-24)
nn(∏-45, ⁄-25)
nn(∏-45, Â-26)
nn(∏-45, ´-27)
nn(∏-45, Ã-28)
nn(∏-45, ⁄-29)
nn(∏-45, Â-30)
nn(∏-45, ±-31)
nn(∏-45, Ã-32)
nn(∏-45, ⁄-33)
nn(∏-45, Â-34)
nn(∏-45, ¯-35)
nn(∏-45, Ã-36)
nn(∏-45, ⁄-37)
nn(∏-45, ÂπÃ-38)
nn(∏-45, ∂-39)
nn(∏-45, Â-40)
nn(∏-45, ≈-41)
nn(∏-45, Ã-42)
nn(∏-45, ⁄-43)
nn(∏-45, Â-44)
rcmod(daimon-20, ∏-45)
dep(Âœmon-18, RBR-47)
cop(being-52, is-49)
det(being-52, a-50)
amod(being-52, supernatural-51)
root(ROOT-0, being-52)
nsubjpass(described-57, being-52)
aux(described-57, has-54)
advmod(described-57, generally-55)
auxpass(described-57, been-56)
rcmod(being-52, described-57)
det(spirit-61, a-59)
amod(spirit-61, malevolent-60)
prep_as(described-57, spirit-61)
amod(terms-66, Christian-65)
prep_in(understood-70, terms-66)
nsubjpass(understood-70, it-67)
auxpass(understood-70, is-68)
advmod(understood-70, generally-69)
conj_and(being-52, understood-70)
nsubjpass(described-57, understood-70)
det(angel-74, a-72)
amod(angel-74, fallen-73)
prep_as(understood-70, angel-74)
advmod(angel-74, formerly-76)
prep_of(angel-74, God-78)

In vector calculus , the Divergence is an operator that measures the magnitude of a vector field 's source or sink at a given point ; the divergence of a vector field is a - LBR - signed - RBR - scalar .

nn(calculus-3, vector-2)
prep_in(operator-9, calculus-3)
det(Divergence-6, the-5)
nsubj(operator-9, Divergence-6)
cop(operator-9, is-7)
det(operator-9, an-8)
root(ROOT-0, operator-9)
nsubj(measures-11, operator-9)
rcmod(operator-9, measures-11)
det(magnitude-13, the-12)
dobj(measures-11, magnitude-13)
det(field-17, a-15)
nn(field-17, vector-16)
poss(source-19, field-17)
prep_of(magnitude-13, source-19)
prep_of(magnitude-13, sink-21)
conj_or(source-19, sink-21)
det(point-25, a-23)
amod(point-25, given-24)
prep_at(source-19, point-25)
det(divergence-28, the-27)
nsubj(scalar-42, divergence-28)
det(field-32, a-30)
nn(field-32, vector-31)
prep_of(divergence-28, field-32)
cop(scalar-42, is-33)
det(scalar-42, a-34)
dep(scalar-42, LBR-36)
nn(RBR-40, signed-38)
dep(LBR-36, RBR-40)
parataxis(operator-9, scalar-42)

In Christianity , Docetism - LBR - from the Greek Ã ⁄ Â ´ Ã ⁄ Â ¿ Ã ⁄ ÂºÃ ⁄ Â -- Ã ∂ Â ≈ , `` to seem `` - RBR - is the belief that Jesus ' physical body was an illusion , as was his crucifixion ; that is , Jesus only seemed to have a physical body and to physically die , but in reality he was incorporeal , a pure spirit , and hence could not physically die .

prep_in(seemed-59, Christianity-2)
appos(Christianity-2, Docetism-4)
nsubj(is-55, Docetism-4)
dep(Docetism-4, LBR-6)
det(Â-23, the-9)
amod(Â-23, Greek-10)
nn(Â-23, Ã-11)
nn(Â-23, ⁄-12)
nn(Â-23, Â-13)
nn(Â-23, ´-14)
nn(Â-23, Ã-15)
nn(Â-23, ⁄-16)
nn(Â-23, Â-17)
nn(Â-23, ¿-18)
nn(Â-23, Ã-19)
nn(Â-23, ⁄-20)
nn(Â-23, ÂºÃ-21)
nn(Â-23, ⁄-22)
prep_from(Docetism-4, Â-23)
nn(Â-27, Ã-25)
nn(Â-27, ∂-26)
dep(Â-23, Â-27)
xsubj(seem-32, Â-27)
partmod(Â-27, ≈-28)
aux(seem-32, to-31)
xcomp(≈-28, seem-32)
nsubj(belief-39, RBR-35)
cop(belief-39, is-37)
det(belief-39, the-38)
ccomp(seem-32, belief-39)
complm(illusion-47, that-40)
poss(body-44, Jesus-41)
amod(body-44, physical-43)
nsubj(illusion-47, body-44)
cop(illusion-47, was-45)
det(illusion-47, an-46)
ccomp(belief-39, illusion-47)
mark(crucifixion-52, as-49)
cop(crucifixion-52, was-50)
poss(crucifixion-52, his-51)
advcl(illusion-47, crucifixion-52)
rcmod(Docetism-4, is-55)
nsubj(seemed-59, Jesus-57)
advmod(seemed-59, only-58)
root(ROOT-0, seemed-59)
aux(have-61, to-60)
ccomp(seemed-59, have-61)
det(body-64, a-62)
amod(body-64, physical-63)
dobj(have-61, body-64)
aux(die-68, to-66)
advmod(die-68, physically-67)
ccomp(seemed-59, die-68)
conj_and(have-61, die-68)
prep_in(incorporeal-75, reality-72)
nsubj(incorporeal-75, he-73)
cop(incorporeal-75, was-74)
conj_but(seemed-59, incorporeal-75)
det(spirit-79, a-77)
amod(spirit-79, pure-78)
appos(incorporeal-75, spirit-79)
conj_but(seemed-59, hence-82)
conj_and(incorporeal-75, hence-82)
aux(die-86, could-83)
neg(die-86, not-84)
advmod(die-86, physically-85)
dep(hence-82, die-86)

The Dumnonii or Dumnones were a Celtic tribe who inhabited the farther parts of the South West peninsula of Britain , during the Iron Age and the early Roman period .

det(Dumnonii-2, The-1)
nsubj(tribe-8, Dumnonii-2)
conj_or(Dumnonii-2, Dumnones-4)
nsubj(tribe-8, Dumnones-4)
cop(tribe-8, were-5)
det(tribe-8, a-6)
amod(tribe-8, Celtic-7)
root(ROOT-0, tribe-8)
nsubj(inhabited-10, tribe-8)
rcmod(tribe-8, inhabited-10)
det(parts-13, the-11)
amod(parts-13, farther-12)
dobj(inhabited-10, parts-13)
det(peninsula-18, the-15)
amod(West-17, South-16)
amod(peninsula-18, West-17)
prep_of(parts-13, peninsula-18)
prep_of(peninsula-18, Britain-20)
det(Age-25, the-23)
nn(Age-25, Iron-24)
prep_during(inhabited-10, Age-25)
det(period-30, the-27)
amod(period-30, early-28)
nn(period-30, Roman-29)
prep_during(inhabited-10, period-30)
conj_and(Age-25, period-30)

A Draugr - LBR - original Old Norse plural draugar , as used here , not draugrs - RBR - , draug or draugen - LBR - Norwegian , Swedish and Danish , meaning the draug - RBR - is an undead creature from Norse mythology .

det(Draugr-2, A-1)
root(ROOT-0, Draugr-2)
dep(Draugr-2, LBR-4)
amod(draugar-10, original-6)
nn(draugar-10, Old-7)
nn(draugar-10, Norse-8)
nn(draugar-10, plural-9)
dep(LBR-4, draugar-10)
mark(creature-43, as-12)
csubj(creature-43, used-13)
advmod(used-13, here-14)
prep(used-13, not-16)
pobj(not-16, draugrs-17)
dep(draugrs-17, RBR-19)
pobj(not-16, draug-22)
conj_and(draugrs-17, draug-22)
conj_and(draugrs-17, draugen-24)
conj_or(draug-22, draugen-24)
pobj(not-16, LBR-26)
conj_and(draugrs-17, LBR-26)
pobj(not-16, Norwegian-28)
conj_and(draugrs-17, Norwegian-28)
pobj(not-16, Swedish-30)
conj_and(draugrs-17, Swedish-30)
pobj(not-16, Danish-32)
conj_and(draugrs-17, Danish-32)
xcomp(used-13, meaning-34)
det(draug-36, the-35)
dobj(meaning-34, draug-36)
dep(draug-36, RBR-38)
cop(creature-43, is-40)
det(creature-43, an-41)
amod(creature-43, undead-42)
dep(draugar-10, creature-43)
nn(mythology-46, Norse-45)
prep_from(creature-43, mythology-46)

A Day - LBR - symbol : d - RBR - is a unit of time equivalent to 24 hours .

det(Day-2, A-1)
nsubj(unit-14, Day-2)
nn(RBR-10, LBR-4)
dep(RBR-10, symbol-6)
dep(symbol-6, d-8)
dep(Day-2, RBR-10)
cop(unit-14, is-12)
det(unit-14, a-13)
root(ROOT-0, unit-14)
nn(equivalent-17, time-16)
prep_of(unit-14, equivalent-17)
num(hours-20, 24-19)
prep_to(equivalent-17, hours-20)

A Database is a structured collection of records or data .

det(Database-2, A-1)
nsubj(collection-6, Database-2)
cop(collection-6, is-3)
det(collection-6, a-4)
amod(collection-6, structured-5)
root(ROOT-0, collection-6)
prep_of(collection-6, records-8)
prep_of(collection-6, data-10)
conj_or(records-8, data-10)

In Roman mythology , Diana was the goddess of the hunt , in literature the equivalent of the Greek goddess Artemis , though in cult she was Italic in origin .

nn(mythology-3, Roman-2)
prep_in(goddess-8, mythology-3)
nsubj(goddess-8, Diana-5)
cop(goddess-8, was-6)
det(goddess-8, the-7)
root(ROOT-0, goddess-8)
det(hunt-11, the-10)
prep_of(goddess-8, hunt-11)
prepc_in(goddess-8, literature-14)
det(equivalent-16, the-15)
dobj(literature-14, equivalent-16)
det(Artemis-21, the-18)
amod(Artemis-21, Greek-19)
nn(Artemis-21, goddess-20)
prep_of(equivalent-16, Artemis-21)
mark(Italic-28, though-23)
prep_in(Italic-28, cult-25)
nsubj(Italic-28, she-26)
cop(Italic-28, was-27)
advcl(goddess-8, Italic-28)
prep_in(Italic-28, origin-30)

In mathematics the Dimension of a space is roughly defined as the minimum number of coordinates needed to specify every point within it .

prep_in(defined-10, mathematics-2)
det(Dimension-4, the-3)
nsubjpass(defined-10, Dimension-4)
det(space-7, a-6)
prep_of(Dimension-4, space-7)
auxpass(defined-10, is-8)
advmod(defined-10, roughly-9)
root(ROOT-0, defined-10)
det(number-14, the-12)
amod(number-14, minimum-13)
prep_as(defined-10, number-14)
prep_of(number-14, coordinates-16)
xsubj(specify-19, coordinates-16)
partmod(coordinates-16, needed-17)
aux(specify-19, to-18)
xcomp(needed-17, specify-19)
det(point-21, every-20)
dobj(specify-19, point-21)
prep_within(specify-19, it-23)

A Dodecahedron is any polyhedron with twelve faces , but usually a regular dodecahedron is meant : a Platonic solid composed of twelve regular pentagonal faces , with three meeting at each vertex .

det(Dodecahedron-2, A-1)
nsubj(polyhedron-5, Dodecahedron-2)
cop(polyhedron-5, is-3)
det(polyhedron-5, any-4)
root(ROOT-0, polyhedron-5)
num(faces-8, twelve-7)
prep_with(polyhedron-5, faces-8)
advmod(meant-16, usually-11)
det(dodecahedron-14, a-12)
amod(dodecahedron-14, regular-13)
nsubjpass(meant-16, dodecahedron-14)
auxpass(meant-16, is-15)
conj_but(polyhedron-5, meant-16)
det(composed-21, a-18)
amod(composed-21, Platonic-19)
amod(composed-21, solid-20)
nsubj(faces-26, composed-21)
num(pentagonal-25, twelve-23)
amod(pentagonal-25, regular-24)
prep_of(composed-21, pentagonal-25)
parataxis(polyhedron-5, faces-26)
num(meeting-30, three-29)
prep_with(faces-26, meeting-30)
det(vertex-33, each-32)
prep_at(faces-26, vertex-33)

A Dictator is an authoritarian ruler - LBR - e. g. absolutist or autocratic - RBR - who assumes sole power over his or her state , though the term is normally not applied to those who acquire such position by regular constitutional means , such as a hereditary absolute monarch , except to denote personal abuse of power .

det(Dictator-2, A-1)
nsubj(ruler-6, Dictator-2)
cop(ruler-6, is-3)
det(ruler-6, an-4)
amod(ruler-6, authoritarian-5)
root(ROOT-0, ruler-6)
nn(RBR-16, LBR-8)
nn(absolutist-12, e.-10)
nn(absolutist-12, g.-11)
dep(RBR-16, absolutist-12)
conj_or(absolutist-12, autocratic-14)
dep(RBR-16, autocratic-14)
dep(ruler-6, RBR-16)
nsubj(assumes-19, who-18)
dep(ruler-6, assumes-19)
amod(power-21, sole-20)
dobj(assumes-19, power-21)
amod(state-26, his-23)
conj_or(his-23, her-25)
poss(his-23, her-25)
amod(state-26, her-25)
prep_over(power-21, state-26)
mark(applied-34, though-28)
det(term-30, the-29)
nsubjpass(applied-34, term-30)
auxpass(applied-34, is-31)
advmod(applied-34, normally-32)
neg(applied-34, not-33)
advcl(assumes-19, applied-34)
prep_to(applied-34, those-36)
nsubj(acquire-38, those-36)
rcmod(those-36, acquire-38)
amod(position-40, such-39)
dobj(acquire-38, position-40)
amod(means-44, regular-42)
amod(means-44, constitutional-43)
prep_by(acquire-38, means-44)
det(monarch-51, a-48)
amod(monarch-51, hereditary-49)
amod(monarch-51, absolute-50)
prep_such_as(those-36, monarch-51)
dep(denote-55, except-53)
aux(denote-55, to-54)
parataxis(ruler-6, denote-55)
amod(abuse-57, personal-56)
dobj(denote-55, abuse-57)
prep_of(abuse-57, power-59)

The Decibel - LBR - dB - RBR - is a logarithmic unit of measurement that expresses the magnitude of a physical quantity - LBR - usually power or intensity - RBR - relative to a specified or implied reference level .

det(dB-6, The-1)
nn(dB-6, Decibel-2)
dep(dB-6, LBR-4)
nsubj(unit-13, dB-6)
dep(dB-6, RBR-8)
cop(unit-13, is-10)
det(unit-13, a-11)
amod(unit-13, logarithmic-12)
root(ROOT-0, unit-13)
nsubj(expresses-17, unit-13)
prep_of(unit-13, measurement-15)
rcmod(unit-13, expresses-17)
det(magnitude-19, the-18)
dobj(expresses-17, magnitude-19)
det(quantity-23, a-21)
amod(quantity-23, physical-22)
prep_of(magnitude-19, quantity-23)
amod(level-41, LBR-25)
advmod(power-28, usually-27)
dep(level-41, power-28)
conj_or(power-28, intensity-30)
dep(level-41, intensity-30)
dep(power-28, RBR-32)
amod(level-41, relative-34)
det(reference-40, a-36)
nn(reference-40, specified-37)
conj_or(specified-37, implied-39)
nn(reference-40, implied-39)
prep_to(relative-34, reference-40)
dep(magnitude-19, level-41)

The Dodo - LBR - Raphus cucullatus - RBR - was a flightless bird endemic to the Indian Ocean island of Mauritius .

nn(RBR-9, The-1)
nn(RBR-9, Dodo-2)
dep(RBR-9, LBR-4)
nn(cucullatus-7, Raphus-6)
dep(LBR-4, cucullatus-7)
root(ROOT-0, RBR-9)
cop(endemic-15, was-11)
det(bird-14, a-12)
amod(bird-14, flightless-13)
nsubj(endemic-15, bird-14)
dep(RBR-9, endemic-15)
det(island-20, the-17)
amod(island-20, Indian-18)
nn(island-20, Ocean-19)
prep_to(endemic-15, island-20)
prep_of(island-20, Mauritius-22)

A Diacritic - LBR - \/ daÃŸÂ ¡ iÃ ≈ Â˙Ã -- Â √ krÃ ≈ ÂªtÃ ≈ Âªk \/ - RBR - , or diacritical mark , is a small sign added to a letter to alter pronunciation or to distinguish between similar words .

det(\/-20, A-1)
nn(\/-20, Diacritic-2)
dep(\/-20, LBR-4)
nn(Â˙Ã-11, \/-6)
nn(Â˙Ã-11, daÃŸÂ-7)
nn(Â˙Ã-11, ¡-8)
nn(Â˙Ã-11, iÃ-9)
nn(Â˙Ã-11, ≈-10)
dep(LBR-4, Â˙Ã-11)
nn(\/-20, Â-13)
nn(\/-20, √-14)
nn(\/-20, krÃ-15)
nn(\/-20, ≈-16)
nn(\/-20, ÂªtÃ-17)
nn(\/-20, ≈-18)
nn(\/-20, Âªk-19)
nsubj(sign-32, \/-20)
dep(\/-20, RBR-22)
amod(mark-27, diacritical-26)
conj_or(\/-20, mark-27)
nsubj(sign-32, mark-27)
cop(sign-32, is-29)
det(sign-32, a-30)
amod(sign-32, small-31)
root(ROOT-0, sign-32)
partmod(sign-32, added-33)
det(letter-36, a-35)
prep_to(added-33, letter-36)
aux(alter-38, to-37)
ccomp(added-33, alter-38)
dobj(alter-38, pronunciation-39)
aux(distinguish-42, to-41)
ccomp(added-33, distinguish-42)
conj_or(alter-38, distinguish-42)
amod(words-45, similar-44)
prep_between(distinguish-42, words-45)

The Didgeridoo - LBR - also known as a didjeridu or didge - RBR - is a wind instrument of the Indigenous Australians of northern Australia .

det(Didgeridoo-2, The-1)
root(ROOT-0, Didgeridoo-2)
nsubj(instrument-19, LBR-4)
advmod(known-7, also-6)
partmod(LBR-4, known-7)
det(RBR-14, a-9)
amod(RBR-14, didjeridu-10)
conj_or(didjeridu-10, didge-12)
amod(RBR-14, didge-12)
prep_as(known-7, RBR-14)
cop(instrument-19, is-16)
det(instrument-19, a-17)
nn(instrument-19, wind-18)
dep(Didgeridoo-2, instrument-19)
det(Australians-23, the-21)
nn(Australians-23, Indigenous-22)
prep_of(instrument-19, Australians-23)
amod(Australia-26, northern-25)
prep_of(instrument-19, Australia-26)

A Disaccharide is a sugar - LBR - a carbohydrate - RBR - composed of two monosaccharides .

det(Disaccharide-2, A-1)
nsubj(sugar-5, Disaccharide-2)
cop(sugar-5, is-3)
det(sugar-5, a-4)
dep(LBR-7, sugar-5)
root(ROOT-0, LBR-7)
det(carbohydrate-10, a-9)
dep(LBR-7, carbohydrate-10)
dep(carbohydrate-10, RBR-12)
dep(LBR-7, composed-14)
num(monosaccharides-17, two-16)
prep_of(composed-14, monosaccharides-17)

Dorado - LBR - dÃ ≈ Â ‚ Ã -- Â √ rÃ ≈ ÂŒÃ -- Â ∆ doÃ ... Â ... , mahi-mahi or dolphin-fish - RBR - is a southern constellation .

nsubj(constellation-33, Dorado-1)
dep(Dorado-1, LBR-3)
nn(Â-7, dÃ-5)
nn(Â-7, ≈-6)
dep(LBR-3, Â-7)
nn(RBR-28, ‚-8)
nn(RBR-28, Ã-9)
nn(ÂŒÃ-15, Â-11)
nn(ÂŒÃ-15, √-12)
nn(ÂŒÃ-15, rÃ-13)
nn(ÂŒÃ-15, ≈-14)
dep(RBR-28, ÂŒÃ-15)
nn(doÃ-19, Â-17)
nn(doÃ-19, ∆-18)
dep(ÂŒÃ-15, doÃ-19)
dep(doÃ-19, Â-21)
appos(ÂŒÃ-15, mahi-mahi-24)
appos(ÂŒÃ-15, dolphin-fish-26)
conj_or(mahi-mahi-24, dolphin-fish-26)
dep(Â-7, RBR-28)
cop(constellation-33, is-30)
det(constellation-33, a-31)
amod(constellation-33, southern-32)
root(ROOT-0, constellation-33)

In algebra , a Determinant is a function depending on n that associates a scalar , det-LBR-A - RBR - , to every nÃ ∞ Â˜n square matrix A. Doublespeak is a disparaging label for any euphemistic term perceived to be uttered in bad faith .

prep_in(function-8, algebra-2)
det(Determinant-5, a-4)
nsubj(function-8, Determinant-5)
cop(function-8, is-6)
det(function-8, a-7)
root(ROOT-0, function-8)
prepc_depending_on(function-8, on-10)
pobj(function-8, n-11)
complm(label-34, that-12)
nsubj(label-34, associates-13)
det(scalar-15, a-14)
dep(associates-13, scalar-15)
advmod(associates-13, det-LBR-A-17)
dep(associates-13, RBR-19)
det(matrix-28, every-23)
nn(matrix-28, nÃ-24)
nn(matrix-28, ∞-25)
nn(matrix-28, Â˜n-26)
amod(matrix-28, square-27)
prep_to(associates-13, matrix-28)
nn(Doublespeak-30, A.-29)
dep(associates-13, Doublespeak-30)
cop(label-34, is-31)
det(label-34, a-32)
amod(label-34, disparaging-33)
ccomp(function-8, label-34)
det(term-38, any-36)
amod(term-38, euphemistic-37)
prep_for(label-34, term-38)
xsubj(uttered-42, term-38)
partmod(term-38, perceived-39)
aux(uttered-42, to-40)
auxpass(uttered-42, be-41)
xcomp(perceived-39, uttered-42)
amod(faith-45, bad-44)
prep_in(uttered-42, faith-45)

The Dragon is a mythical creature of which some interpretation or depiction appears in almost every culture worldwide .

det(Dragon-2, The-1)
nsubj(creature-6, Dragon-2)
cop(creature-6, is-3)
det(creature-6, a-4)
amod(creature-6, mythical-5)
root(ROOT-0, creature-6)
rel(appears-13, which-8)
det(interpretation-10, some-9)
nsubj(appears-13, interpretation-10)
conj_or(interpretation-10, depiction-12)
nsubj(appears-13, depiction-12)
rcmod(creature-6, appears-13)
advmod(culture-17, almost-15)
det(culture-17, every-16)
prep_in(appears-13, culture-17)
advmod(appears-13, worldwide-18)

In mathematics , a Diffeomorphism is a kind of isomorphism of smooth manifolds .

prep_in(kind-8, mathematics-2)
det(Diffeomorphism-5, a-4)
nsubj(kind-8, Diffeomorphism-5)
cop(kind-8, is-6)
det(kind-8, a-7)
root(ROOT-0, kind-8)
prep_of(kind-8, isomorphism-10)
amod(manifolds-13, smooth-12)
prep_of(isomorphism-10, manifolds-13)

In physics , the Dyne - LBR - symbol `` dyn `` , from Greek Ã ⁄ Â ´ Ã ∂ ÂŸÃ ⁄ Â ∏ Ã ⁄ Â ± Ã ⁄ ÂπÃ ⁄ Â ' Ã ∂ Â ≠ - LBR - dynamis - RBR - meaning power , force - RBR - is a unit of force specified in the centimetre-gram-second - LBR - CGS - RBR - system of units , a predecessor of the modern SI .

prep_in(symbol-9, physics-2)
det(Dyne-5, the-4)
nsubj(symbol-9, Dyne-5)
dep(Dyne-5, LBR-7)
root(ROOT-0, symbol-9)
dobj(symbol-9, dyn-11)
amod(ÂπÃ-32, Greek-15)
nn(ÂπÃ-32, Ã-16)
nn(ÂπÃ-32, ⁄-17)
nn(ÂπÃ-32, Â-18)
nn(ÂπÃ-32, ´-19)
nn(ÂπÃ-32, Ã-20)
nn(ÂπÃ-32, ∂-21)
nn(ÂπÃ-32, ÂŸÃ-22)
nn(ÂπÃ-32, ⁄-23)
nn(ÂπÃ-32, Â-24)
nn(ÂπÃ-32, ∏-25)
nn(ÂπÃ-32, Ã-26)
nn(ÂπÃ-32, ⁄-27)
nn(ÂπÃ-32, Â-28)
nn(ÂπÃ-32, ±-29)
nn(ÂπÃ-32, Ã-30)
nn(ÂπÃ-32, ⁄-31)
nsubj(⁄-33, ÂπÃ-32)
prepc_from(unit-56, ⁄-33)
poss(RBR-45, Â-34)
nn(RBR-45, Ã-36)
nn(RBR-45, ∂-37)
nn(RBR-45, Â-38)
nn(RBR-45, ≠-39)
dep(RBR-45, LBR-41)
dep(LBR-41, dynamis-43)
nsubj(meaning-47, RBR-45)
dep(⁄-33, meaning-47)
dobj(meaning-47, power-48)
nsubj(unit-56, force-50)
dep(force-50, RBR-52)
cop(unit-56, is-54)
det(unit-56, a-55)
rcmod(dyn-11, unit-56)
prep_of(unit-56, force-58)
partmod(force-58, specified-59)
det(centimetre-gram-second-62, the-61)
prep_in(specified-59, centimetre-gram-second-62)
dep(centimetre-gram-second-62, LBR-64)
dep(centimetre-gram-second-62, CGS-66)
dep(centimetre-gram-second-62, RBR-68)
dep(centimetre-gram-second-62, system-70)
prep_of(system-70, units-72)
det(predecessor-75, a-74)
appos(centimetre-gram-second-62, predecessor-75)
det(SI-79, the-77)
amod(SI-79, modern-78)
prep_of(predecessor-75, SI-79)

Titus Flavius Domitianus - LBR - 24 October 51 & amp ; amp ; ndash ; 18 September 96 - RBR - , commonly known as Domitian , was a Roman Emperor who reigned from 14 September 81 until his death on 18 September 96 .

nn(Domitianus-3, Titus-1)
nn(Domitianus-3, Flavius-2)
nsubj(Emperor-32, Domitianus-3)
dep(Domitianus-3, LBR-5)
num(October-8, 24-7)
dep(Domitianus-3, October-8)
num(October-8, 51-9)
dep(Domitianus-3, amp-11)
conj_and(October-8, amp-11)
dep(Domitianus-3, amp-13)
dep(amp-13, ndash-15)
dep(Domitianus-3, 18-17)
dep(18-17, September-18)
num(September-18, 96-19)
dep(Domitianus-3, RBR-21)
advmod(known-25, commonly-24)
partmod(Domitianus-3, known-25)
prep_as(known-25, Domitian-27)
cop(Emperor-32, was-29)
det(Emperor-32, a-30)
nn(Emperor-32, Roman-31)
root(ROOT-0, Emperor-32)
nsubj(reigned-34, Emperor-32)
rcmod(Emperor-32, reigned-34)
prep_from(reigned-34, 14-36)
tmod(reigned-34, September-37)
num(September-37, 81-38)
poss(death-41, his-40)
prep_until(reigned-34, death-41)
prep_on(death-41, 18-43)
dep(death-41, September-44)
num(September-44, 96-45)

A Dolmen - LBR - also known as cromlech , anta , HÃ ∞ Âπnengrab , Hunebed , quoit , and portal dolmen - RBR - is a type of single-chamber megalithic tomb , usually consisting of three or more upright stones supporting a large flat horizontal capstone - LBR - table - RBR - .

det(Dolmen-2, A-1)
nsubj(type-29, Dolmen-2)
dep(Dolmen-2, LBR-4)
advmod(known-7, also-6)
partmod(Dolmen-2, known-7)
prep_as(known-7, cromlech-9)
prep_as(known-7, anta-11)
conj_and(cromlech-9, anta-11)
nn(Âπnengrab-15, HÃ-13)
nn(Âπnengrab-15, ∞-14)
prep_as(known-7, Âπnengrab-15)
conj_and(cromlech-9, Âπnengrab-15)
prep_as(known-7, Hunebed-17)
conj_and(cromlech-9, Hunebed-17)
prep_as(known-7, quoit-19)
conj_and(cromlech-9, quoit-19)
amod(dolmen-23, portal-22)
prep_as(known-7, dolmen-23)
conj_and(cromlech-9, dolmen-23)
dep(Dolmen-2, RBR-25)
cop(type-29, is-27)
det(type-29, a-28)
root(ROOT-0, type-29)
amod(tomb-33, single-chamber-31)
amod(tomb-33, megalithic-32)
prep_of(type-29, tomb-33)
advmod(consisting-36, usually-35)
partmod(type-29, consisting-36)
xcomp(type-29, consisting-36)
num(stones-42, three-38)
conj_or(three-38, more-40)
quantmod(three-38, more-40)
num(stones-42, more-40)
amod(stones-42, upright-41)
prep_of(consisting-36, stones-42)
partmod(stones-42, supporting-43)
det(capstone-48, a-44)
amod(capstone-48, large-45)
amod(horizontal-47, flat-46)
amod(capstone-48, horizontal-47)
dobj(supporting-43, capstone-48)
nn(RBR-54, LBR-50)
dep(RBR-54, table-52)
dep(capstone-48, RBR-54)

In astronomy , Declination - LBR - abbrev .

prep_in(abbrev-8, astronomy-2)
nsubj(abbrev-8, Declination-4)
dep(Declination-4, LBR-6)
root(ROOT-0, abbrev-8)

dec or Ã ⁄ Â ´ - RBR - is one of the two coordinates of the equatorial coordinate system , the other being either right ascension or hour angle .

nsubj(one-11, dec-1)
nn(´-6, Ã-3)
nn(´-6, ⁄-4)
nn(´-6, Â-5)
conj_or(dec-1, ´-6)
nsubj(one-11, ´-6)
dep(dec-1, RBR-8)
cop(one-11, is-10)
root(ROOT-0, one-11)
det(coordinates-15, the-13)
num(coordinates-15, two-14)
prep_of(one-11, coordinates-15)
det(system-20, the-17)
amod(system-20, equatorial-18)
amod(system-20, coordinate-19)
prep_of(coordinates-15, system-20)
det(ascension-27, the-22)
amod(ascension-27, other-23)
cop(right-26, being-24)
advmod(right-26, either-25)
dep(other-23, right-26)
appos(system-20, ascension-27)
nn(angle-30, hour-29)
appos(system-20, angle-30)
conj_or(ascension-27, angle-30)

The term Diaspora - LBR - in Greek , Ã ⁄ Â ´ Ã ⁄ Â ' Ã ⁄ Â ± Ã ∂ Â ∞ Ã ∂ Â • Ã ⁄ Â ¿ Ã ∂ Â ™ Ã ⁄ Â ¬ & amp ; amp ; ndash ; `` a scattering or sowing of seeds `` - RBR - refers to the forced or voluntary dispersal of any population sharing common ethnic identity to leave their settled territory , and become residents in areas often far removed from the former .

det(Diaspora-3, The-1)
nn(Diaspora-3, term-2)
nsubj(refers-60, Diaspora-3)
dep(Diaspora-3, LBR-5)
prep_in(Diaspora-3, Greek-8)
nn(Â-16, Ã-10)
nn(Â-16, ⁄-11)
nn(Â-16, Â-12)
nn(Â-16, ´-13)
nn(Â-16, Ã-14)
nn(Â-16, ⁄-15)
poss(¬-41, Â-16)
nn(¬-41, Ã-18)
nn(¬-41, ⁄-19)
nn(¬-41, Â-20)
nn(¬-41, ±-21)
nn(¬-41, Ã-22)
nn(¬-41, ∂-23)
nn(¬-41, Â-24)
nn(¬-41, ∞-25)
nn(¬-41, Ã-26)
nn(¬-41, ∂-27)
nn(¬-41, Â-28)
nn(¬-41, •-29)
nn(¬-41, Ã-30)
nn(¬-41, ⁄-31)
nn(¬-41, Â-32)
nn(¬-41, ¿-33)
nn(¬-41, Ã-34)
nn(¬-41, ∂-35)
nn(¬-41, Â-36)
nn(¬-41, ™-37)
nn(¬-41, Ã-38)
nn(¬-41, ⁄-39)
nn(¬-41, Â-40)
appos(Diaspora-3, ¬-41)
appos(Diaspora-3, amp-43)
conj_and(¬-41, amp-43)
dep(¬-41, amp-45)
dep(amp-45, ndash-47)
det(scattering-51, a-50)
dep(¬-41, scattering-51)
dep(¬-41, sowing-53)
conj_or(scattering-51, sowing-53)
prep_of(scattering-51, seeds-55)
dep(seeds-55, RBR-58)
root(ROOT-0, refers-60)
det(dispersal-66, the-62)
amod(dispersal-66, forced-63)
conj_or(forced-63, voluntary-65)
amod(dispersal-66, voluntary-65)
prep_to(refers-60, dispersal-66)
det(population-69, any-68)
prep_of(dispersal-66, population-69)
partmod(population-69, sharing-70)
amod(identity-73, common-71)
amod(identity-73, ethnic-72)
dobj(sharing-70, identity-73)
aux(leave-75, to-74)
xcomp(sharing-70, leave-75)
poss(territory-78, their-76)
amod(territory-78, settled-77)
dobj(leave-75, territory-78)
cop(residents-82, become-81)
xcomp(sharing-70, residents-82)
conj_and(leave-75, residents-82)
prep_in(residents-82, areas-84)
advmod(far-86, often-85)
advmod(removed-87, far-86)
partmod(areas-84, removed-87)
det(former-90, the-89)
prep_from(removed-87, former-90)

The Dhole - LBR - Cuon alpinus - RBR - , also known as the Asiatic Wild Dog , Indian Wild Dog or Red Dog is a mammal of the order Carnivora , and the only member of the genus ` Cuon ' .

det(alpinus-7, The-1)
nn(alpinus-7, Dhole-2)
dep(alpinus-7, LBR-4)
nn(alpinus-7, Cuon-6)
nsubj(mammal-28, alpinus-7)
dep(alpinus-7, RBR-9)
advmod(known-13, also-12)
dep(mammal-28, known-13)
det(Dog-18, the-15)
nn(Dog-18, Asiatic-16)
nn(Dog-18, Wild-17)
prep_as(known-13, Dog-18)
nn(Dog-22, Indian-20)
nn(Dog-22, Wild-21)
nsubj(mammal-28, Dog-22)
nn(Dog-25, Red-24)
conj_or(Dog-22, Dog-25)
nsubj(mammal-28, Dog-25)
cop(mammal-28, is-26)
det(mammal-28, a-27)
root(ROOT-0, mammal-28)
det(Carnivora-32, the-30)
nn(Carnivora-32, order-31)
prep_of(mammal-28, Carnivora-32)
det(member-37, the-35)
amod(member-37, only-36)
conj_and(mammal-28, member-37)
det(Cuon-42, the-39)
nn(Cuon-42, genus-40)
prep_of(member-37, Cuon-42)

The Druze - LBR - Arabic : Ã˘Â ¯ Ã˘Â ± Ã˘Â '' Ã˙Â ... , derzÃ ≥ Â or durzÃ ≥ Â , plural Ã˘Â ¯ Ã˘Â ± Ã˙Â √ Ã˘Â '' , durÃ ∑ Â `` z ; Ã˜Â „ Ã˜Â ¨ Ã˜Â Ã˜ÂˆÃ˜Â˙Ã˜Â , Druzim ; also transliterated ` Druz ' or ` Druse ' - RBR - are a religious community found primarily in Lebanon , Israel and Syria whose traditional religion is said to have begun as an offshoot of the Ismaili sect of Islam , but is unique in its incorporation of Gnostic , neo-Platonic , pagan and other philosophies .

nn(Arabic-6, The-1)
nn(Arabic-6, Druze-2)
dep(Arabic-6, LBR-4)
ccomp(community-65, Arabic-6)
nn(Ã˙Â-14, Ã˘Â-8)
nn(Ã˙Â-14, ¯-9)
nn(Ã˙Â-14, Ã˘Â-10)
nn(Ã˙Â-14, ±-11)
nn(Ã˙Â-14, Ã˘Â-12)
dep(Arabic-6, Ã˙Â-14)
nn(Â-19, derzÃ-17)
nn(Â-19, ≥-18)
nsubj(community-65, Â-19)
nn(Â-23, durzÃ-21)
nn(Â-23, ≥-22)
conj_or(Â-19, Â-23)
nsubj(community-65, Â-23)
nn(Ã˘Â-32, plural-25)
nn(Ã˘Â-32, Ã˘Â-26)
nn(Ã˘Â-32, ¯-27)
nn(Ã˘Â-32, Ã˘Â-28)
nn(Ã˘Â-32, ±-29)
nn(Ã˘Â-32, Ã˙Â-30)
nn(Ã˘Â-32, √-31)
appos(Â-19, Ã˘Â-32)
nn(Â-37, durÃ-35)
nn(Â-37, ∑-36)
appos(Â-19, Â-37)
dep(Ã˜Â-43, z-39)
nn(Ã˜Â-43, Ã˜Â-41)
nn(Ã˜Â-43, „-42)
dep(RBR-60, Ã˜Â-43)
dep(Ã˜Â-43, ¨-44)
dep(Ã˜Â-43, Ã˜Â-45)
nn(Druzim-48, Ã˜ÂˆÃ˜Â˙Ã˜Â-46)
dobj(Ã˜Â-45, Druzim-48)
advmod(transliterated-51, also-50)
partmod(Druzim-48, transliterated-51)
dep(transliterated-51, Druz-53)
dep(transliterated-51, Druse-57)
conj_or(Druz-53, Druse-57)
dep(Â-37, RBR-60)
cop(community-65, are-62)
det(community-65, a-63)
amod(community-65, religious-64)
root(ROOT-0, community-65)
partmod(community-65, found-66)
advmod(found-66, primarily-67)
prep_in(found-66, Lebanon-69)
prep_in(found-66, Israel-71)
conj_and(Lebanon-69, Israel-71)
prep_in(found-66, Syria-73)
conj_and(Lebanon-69, Syria-73)
poss(religion-76, whose-74)
amod(religion-76, traditional-75)
nsubjpass(said-78, religion-76)
nsubj(unique-94, religion-76)
auxpass(said-78, is-77)
rcmod(community-65, said-78)
aux(begun-81, to-79)
aux(begun-81, have-80)
xcomp(said-78, begun-81)
det(offshoot-84, an-83)
prep_as(begun-81, offshoot-84)
det(sect-88, the-86)
nn(sect-88, Ismaili-87)
prep_of(offshoot-84, sect-88)
prep_of(sect-88, Islam-90)
cop(unique-94, is-93)
rcmod(community-65, unique-94)
conj_but(said-78, unique-94)
poss(incorporation-97, its-96)
prep_in(unique-94, incorporation-97)
amod(philosophies-106, Gnostic-99)
conj_and(Gnostic-99, neo-Platonic-101)
amod(philosophies-106, neo-Platonic-101)
conj_and(Gnostic-99, pagan-103)
amod(philosophies-106, pagan-103)
conj_and(Gnostic-99, other-105)
amod(philosophies-106, other-105)
prep_of(incorporation-97, philosophies-106)

A Door is a panel or barrier , usually hinged , sliding , or electronic , that is used to cover an opening in a wall or partition going into a building or space .

det(Door-2, A-1)
nsubj(panel-5, Door-2)
nsubj(hinged-10, Door-2)
nsubj(sliding-12, Door-2)
nsubj(electronic-15, Door-2)
cop(panel-5, is-3)
det(panel-5, a-4)
root(ROOT-0, panel-5)
conj_or(panel-5, barrier-7)
advmod(hinged-10, usually-9)
amod(panel-5, hinged-10)
conj_or(panel-5, hinged-10)
amod(panel-5, sliding-12)
conj_or(panel-5, sliding-12)
conj_or(panel-5, electronic-15)
complm(used-19, that-17)
auxpass(used-19, is-18)
ccomp(panel-5, used-19)
aux(cover-21, to-20)
xcomp(used-19, cover-21)
det(opening-23, an-22)
dobj(cover-21, opening-23)
det(wall-26, a-25)
prep_in(cover-21, wall-26)
prep_in(cover-21, partition-28)
conj_or(wall-26, partition-28)
partmod(wall-26, going-29)
det(building-32, a-31)
prep_into(going-29, building-32)
prep_into(going-29, space-34)
conj_or(building-32, space-34)

In linguistics , Declension - LBR - or declination - RBR - is the occurrence of inflection in nouns , pronouns and adjectives , indicating such features as number - LBR - typically singular vs. plural - RBR - , case - LBR - subject , object , and so on - RBR - , or gender .

prep_in(occurrence-15, linguistics-2)
nsubj(occurrence-15, Declension-4)
nn(RBR-11, LBR-6)
dep(declination-9, or-8)
dep(RBR-11, declination-9)
dep(Declension-4, RBR-11)
cop(occurrence-15, is-13)
det(occurrence-15, the-14)
root(ROOT-0, occurrence-15)
prep_of(occurrence-15, inflection-17)
prep_in(inflection-17, nouns-19)
prep_in(inflection-17, pronouns-21)
conj_and(nouns-19, pronouns-21)
prep_in(inflection-17, adjectives-23)
conj_and(nouns-19, adjectives-23)
partmod(occurrence-15, indicating-25)
xcomp(occurrence-15, indicating-25)
amod(features-27, such-26)
dobj(indicating-25, features-27)
prep_as(indicating-25, number-29)
prep_as(indicating-25, LBR-31)
conj_or(number-29, LBR-31)
advmod(singular-34, typically-33)
prep_as(indicating-25, singular-34)
conj_or(number-29, singular-34)
prep_vs.(singular-34, plural-36)
dep(plural-36, RBR-38)
appos(plural-36, case-41)
nn(RBR-53, LBR-43)
dep(RBR-53, subject-45)
conj_and(subject-45, object-47)
dep(RBR-53, object-47)
advmod(subject-45, so-50)
conj_and(subject-45, so-50)
dep(RBR-53, so-50)
conj_and(subject-45, on-51)
prep(subject-45, on-51)
dep(RBR-53, on-51)
dep(plural-36, RBR-53)
prep_as(indicating-25, gender-57)
conj_or(number-29, gender-57)

A Daffynition - LBR - portmanteau of daffy and definition - RBR - is a pun format involving the reinterpretation of an existing word , on the basis that it sounds like another word - LBR - or group of words - RBR - .

det(Daffynition-2, A-1)
nsubj(format-17, Daffynition-2)
nn(RBR-12, LBR-4)
dep(RBR-12, portmanteau-6)
prep_of(portmanteau-6, daffy-8)
prep_of(portmanteau-6, definition-10)
conj_and(daffy-8, definition-10)
dep(Daffynition-2, RBR-12)
cop(format-17, is-14)
det(format-17, a-15)
nn(format-17, pun-16)
root(ROOT-0, format-17)
partmod(format-17, involving-18)
det(reinterpretation-20, the-19)
dobj(involving-18, reinterpretation-20)
det(word-24, an-22)
amod(word-24, existing-23)
prep_of(reinterpretation-20, word-24)
det(basis-28, the-27)
prep_on(involving-18, basis-28)
dobj(sounds-31, basis-28)
complm(sounds-31, that-29)
nsubj(sounds-31, it-30)
dep(basis-28, sounds-31)
det(word-34, another-33)
prep_like(sounds-31, word-34)
prep_like(sounds-31, LBR-36)
conj_or(word-34, LBR-36)
prep_like(sounds-31, group-39)
conj_or(word-34, group-39)
prep_of(group-39, words-41)
dep(words-41, RBR-43)

According to Irish mythology , Donn , or the Dark One , is the Lord of the Dead and father of Diarmuid Ua Duibhne , whom he gave to Aengus Og to be nurtured .

prepc_according_to(Lord-15, to-2)
amod(mythology-4, Irish-3)
pobj(Lord-15, mythology-4)
nsubj(Lord-15, Donn-6)
det(One-11, the-9)
amod(One-11, Dark-10)
conj_or(Donn-6, One-11)
nsubj(Lord-15, One-11)
cop(Lord-15, is-13)
det(Lord-15, the-14)
root(ROOT-0, Lord-15)
det(Dead-18, the-17)
prep_of(Lord-15, Dead-18)
prep_of(Lord-15, father-20)
conj_and(Dead-18, father-20)
nn(Duibhne-24, Diarmuid-22)
nn(Duibhne-24, Ua-23)
prep_of(Dead-18, Duibhne-24)
rel(gave-28, whom-26)
nsubj(gave-28, he-27)
xsubj(nurtured-34, he-27)
rcmod(Duibhne-24, gave-28)
nn(Og-31, Aengus-30)
prep_to(gave-28, Og-31)
aux(nurtured-34, to-32)
cop(nurtured-34, be-33)
xcomp(gave-28, nurtured-34)

Dampf Kraft Wagen - LBR - German : steam-driven car - RBR - or DKW is a historic car and motorcycle marque .

csubj(car-19, Dampf-1)
nn(Wagen-3, Kraft-2)
dobj(Dampf-1, Wagen-3)
dobj(Dampf-1, LBR-5)
conj_or(Wagen-3, LBR-5)
dobj(Dampf-1, German-7)
conj_or(Wagen-3, German-7)
amod(car-10, steam-driven-9)
dobj(Dampf-1, car-10)
conj_or(Wagen-3, car-10)
dobj(Dampf-1, RBR-12)
conj_or(Wagen-3, RBR-12)
dobj(Dampf-1, DKW-15)
conj_or(Wagen-3, DKW-15)
cop(car-19, is-16)
det(car-19, a-17)
amod(car-19, historic-18)
root(ROOT-0, car-19)
nn(marque-22, motorcycle-21)
conj_and(car-19, marque-22)

Ã ⁄ Â ‰ T , Delta T , delta-T , deltaT , or DT is the time difference obtained by subtracting Universal Time from Terrestrial Time .

nn(T-5, Ã-1)
nn(T-5, ⁄-2)
nn(T-5, Â-3)
nn(T-5, ‰-4)
nsubj(difference-19, T-5)
nn(T-8, Delta-7)
conj_or(T-5, T-8)
nsubj(difference-19, T-8)
conj_or(T-5, delta-T-10)
nsubj(difference-19, delta-T-10)
conj_or(T-5, deltaT-12)
nsubj(difference-19, deltaT-12)
conj_or(T-5, DT-15)
nsubj(difference-19, DT-15)
cop(difference-19, is-16)
det(difference-19, the-17)
nn(difference-19, time-18)
root(ROOT-0, difference-19)
partmod(difference-19, obtained-20)
agent(obtained-20, subtracting-22)
nn(Time-24, Universal-23)
dobj(subtracting-22, Time-24)
nn(Time-27, Terrestrial-26)
prep_from(Time-24, Time-27)

The Volkssturm - LBR - lit .

det(Volkssturm-2, The-1)
nsubj(lit-6, Volkssturm-2)
dep(Volkssturm-2, LBR-4)
root(ROOT-0, lit-6)

`` Folkstorm `` ; `` People 's `` or `` National Militia `` ; Sturm means `` military assault `` - RBR - was a German national militia of the last months of World War II .

root(ROOT-0, Folkstorm-2)
nsubj('s-7, People-6)
ccomp(Folkstorm-2, 's-7)
cc(Militia-12, or-9)
nsubj(Militia-12, National-11)
dep('s-7, Militia-12)
nsubj(means-16, Sturm-15)
ccomp(Militia-12, means-16)
amod(assault-19, military-18)
dobj(means-16, assault-19)
nsubj(militia-28, RBR-22)
cop(militia-28, was-24)
det(militia-28, a-25)
amod(militia-28, German-26)
amod(militia-28, national-27)
rcmod(assault-19, militia-28)
det(months-32, the-30)
amod(months-32, last-31)
prep_of(militia-28, months-32)
nn(II-36, World-34)
nn(II-36, War-35)
prep_of(months-32, II-36)

Djbdns is a simple and security-aware DNS implementation created by Daniel J. Bernstein due to his frustrations with repeated BIND security holes .

nsubj(implementation-8, Djbdns-1)
cop(implementation-8, is-2)
det(implementation-8, a-3)
amod(implementation-8, simple-4)
conj_and(simple-4, security-aware-6)
amod(implementation-8, security-aware-6)
nn(implementation-8, DNS-7)
root(ROOT-0, implementation-8)
partmod(implementation-8, created-9)
nn(Bernstein-13, Daniel-11)
nn(Bernstein-13, J.-12)
agent(created-9, Bernstein-13)
poss(frustrations-17, his-16)
prep_due_to(Bernstein-13, frustrations-17)
amod(holes-22, repeated-19)
nn(holes-22, BIND-20)
nn(holes-22, security-21)
prep_with(frustrations-17, holes-22)

Dylan is a multi-paradigm language that includes support for functional and object-oriented programming , and is dynamic and reflective while providing a programming model designed to support efficient machine code generation , including fine-grained control over dynamic and static behaviors .

nsubj(language-5, Dylan-1)
cop(language-5, is-2)
det(language-5, a-3)
amod(language-5, multi-paradigm-4)
root(ROOT-0, language-5)
nsubj(includes-7, language-5)
nsubj(dynamic-17, language-5)
rcmod(language-5, includes-7)
dobj(includes-7, support-8)
amod(programming-13, functional-10)
conj_and(functional-10, object-oriented-12)
amod(programming-13, object-oriented-12)
prep_for(support-8, programming-13)
cop(dynamic-17, is-16)
rcmod(language-5, dynamic-17)
conj_and(includes-7, dynamic-17)
conj_and(includes-7, reflective-19)
conj_and(dynamic-17, reflective-19)
prepc_while(dynamic-17, providing-21)
det(model-24, a-22)
amod(model-24, programming-23)
dobj(providing-21, model-24)
xsubj(support-27, model-24)
partmod(model-24, designed-25)
aux(support-27, to-26)
xcomp(designed-25, support-27)
amod(generation-31, efficient-28)
nn(generation-31, machine-29)
nn(generation-31, code-30)
dobj(support-27, generation-31)
amod(control-35, fine-grained-34)
prep_including(generation-31, control-35)
amod(behaviors-40, dynamic-37)
conj_and(dynamic-37, static-39)
amod(behaviors-40, static-39)
prep_over(control-35, behaviors-40)

A Dominatrix - LBR - from the Latin dominatrix , meaning a female ruler or Mistress ; plural dominatrices or dominatrixes - RBR - or Mistress is a woman who takes the dominant role in bondage and discipline , dominance and submission or sado-masochistic sexual practices , which are commonly abbreviated as BDSM .

det(Dominatrix-2, A-1)
nsubj(woman-29, Dominatrix-2)
dep(Dominatrix-2, LBR-4)
det(dominatrix-9, the-7)
amod(dominatrix-9, Latin-8)
prep_from(LBR-4, dominatrix-9)
partmod(LBR-4, meaning-11)
det(ruler-14, a-12)
amod(ruler-14, female-13)
dobj(meaning-11, ruler-14)
dobj(meaning-11, Mistress-16)
conj_or(ruler-14, Mistress-16)
nn(dominatrices-19, plural-18)
dep(Dominatrix-2, dominatrices-19)
dep(Dominatrix-2, dominatrixes-21)
conj_or(dominatrices-19, dominatrixes-21)
conj_or(Dominatrix-2, RBR-23)
nsubj(woman-29, RBR-23)
conj_or(Dominatrix-2, Mistress-26)
nsubj(woman-29, Mistress-26)
cop(woman-29, is-27)
det(woman-29, a-28)
root(ROOT-0, woman-29)
nsubj(takes-31, woman-29)
rcmod(woman-29, takes-31)
det(role-34, the-32)
amod(role-34, dominant-33)
dobj(takes-31, role-34)
nsubj(abbreviated-51, role-34)
nn(dominance-40, bondage-36)
conj_and(bondage-36, discipline-38)
nn(dominance-40, discipline-38)
prep_in(role-34, dominance-40)
nn(practices-46, submission-42)
conj_or(submission-42, sado-masochistic-44)
nn(practices-46, sado-masochistic-44)
amod(practices-46, sexual-45)
prep_in(role-34, practices-46)
conj_and(dominance-40, practices-46)
cop(abbreviated-51, are-49)
advmod(abbreviated-51, commonly-50)
rcmod(role-34, abbreviated-51)
prep_as(abbreviated-51, BDSM-53)

In naval terminology , a Destroyer is a fast and maneuverable yet long-endurance warship intended to escort larger vessels in a fleet , convoy or battle group and defend them against smaller , short-range but powerful attackers - LBR - originally torpedo boats , later submarines and aircraft - RBR - .

amod(terminology-3, naval-2)
prep_in(warship-14, terminology-3)
det(Destroyer-6, a-5)
nsubj(warship-14, Destroyer-6)
cop(warship-14, is-7)
det(warship-14, a-8)
amod(warship-14, fast-9)
conj_and(fast-9, maneuverable-11)
amod(warship-14, maneuverable-11)
advmod(long-endurance-13, yet-12)
amod(warship-14, long-endurance-13)
root(ROOT-0, warship-14)
xsubj(escort-17, warship-14)
partmod(warship-14, intended-15)
aux(escort-17, to-16)
xcomp(intended-15, escort-17)
amod(vessels-19, larger-18)
dobj(escort-17, vessels-19)
det(fleet-22, a-21)
prep_in(escort-17, fleet-22)
prep_in(escort-17, convoy-24)
conj_or(fleet-22, convoy-24)
nn(group-27, battle-26)
prep_in(escort-17, group-27)
conj_or(fleet-22, group-27)
xcomp(intended-15, defend-29)
conj_and(escort-17, defend-29)
dobj(defend-29, them-30)
prep_against(defend-29, smaller-32)
amod(attackers-37, short-range-34)
conj_but(short-range-34, powerful-36)
amod(attackers-37, powerful-36)
appos(smaller-32, attackers-37)
dep(warship-14, LBR-39)
dep(boats-43, originally-41)
amod(boats-43, torpedo-42)
dep(LBR-39, boats-43)
advmod(submarines-46, later-45)
appos(boats-43, submarines-46)
appos(boats-43, aircraft-48)
conj_and(submarines-46, aircraft-48)
dep(LBR-39, RBR-50)

Datura species are used as food plants by the larvae of some Lepidoptera - LBR - butterfly and moth - RBR - species including Hypercompe indecisa .

nn(species-2, Datura-1)
nsubjpass(used-4, species-2)
auxpass(used-4, are-3)
root(ROOT-0, used-4)
nn(plants-7, food-6)
prep_as(used-4, plants-7)
det(larvae-10, the-9)
agent(used-4, larvae-10)
det(Lepidoptera-13, some-12)
prep_of(larvae-10, Lepidoptera-13)
dep(used-4, LBR-15)
dep(LBR-15, butterfly-17)
dep(LBR-15, moth-19)
conj_and(butterfly-17, moth-19)
dep(butterfly-17, RBR-21)
dep(LBR-15, species-23)
nn(indecisa-26, Hypercompe-25)
prep_including(species-23, indecisa-26)

A Dandy - LBR - also known as a beau , gallant or flamboyant person - RBR - is a man who places particular importance upon physical appearance , refined language , and leisurely hobbies .

det(Dandy-2, A-1)
nsubj(man-21, Dandy-2)
dep(Dandy-2, LBR-4)
advmod(known-7, also-6)
partmod(Dandy-2, known-7)
det(person-15, a-9)
amod(person-15, beau-10)
conj_or(beau-10, gallant-12)
amod(person-15, gallant-12)
conj_or(beau-10, flamboyant-14)
amod(person-15, flamboyant-14)
prep_as(known-7, person-15)
dep(person-15, RBR-17)
cop(man-21, is-19)
det(man-21, a-20)
root(ROOT-0, man-21)
nsubj(places-23, man-21)
rcmod(man-21, places-23)
amod(importance-25, particular-24)
dobj(places-23, importance-25)
amod(appearance-28, physical-27)
prep_upon(places-23, appearance-28)
amod(language-31, refined-30)
prep_upon(places-23, language-31)
conj_and(appearance-28, language-31)
amod(hobbies-35, leisurely-34)
prep_upon(places-23, hobbies-35)
conj_and(appearance-28, hobbies-35)

In filmmaking , Dubbing or looping is the process of recording or replacing voices for a motion picture .

prep_in(process-9, filmmaking-2)
nsubj(process-9, Dubbing-4)
conj_or(Dubbing-4, looping-6)
nsubj(process-9, looping-6)
cop(process-9, is-7)
det(process-9, the-8)
root(ROOT-0, process-9)
prepc_of(process-9, recording-11)
prepc_of(process-9, replacing-13)
conj_or(recording-11, replacing-13)
dobj(recording-11, voices-14)
det(picture-18, a-16)
nn(picture-18, motion-17)
prep_for(voices-14, picture-18)

In Greek mythology , Dryope was the daughter of Dryops - LBR - `` oak-man `` - RBR - or of Eurytus - LBR - and hence half-sister to Iole - RBR - .

amod(mythology-3, Greek-2)
prep_in(daughter-8, mythology-3)
nsubj(daughter-8, Dryope-5)
cop(daughter-8, was-6)
det(daughter-8, the-7)
root(ROOT-0, daughter-8)
prep_of(daughter-8, Dryops-10)
conj_or(daughter-8, LBR-12)
nn(RBR-18, oak-man-15)
conj_or(daughter-8, RBR-18)
dep(half-sister-28, of-21)
pobj(of-21, Eurytus-22)
dep(Eurytus-22, LBR-24)
conj_and(of-21, hence-27)
dep(half-sister-28, hence-27)
conj_or(daughter-8, half-sister-28)
dep(half-sister-28, to-29)
dep(half-sister-28, Iole-30)
dep(Iole-30, RBR-32)

In general , Discrimination , in a non-legal sense , is the discernment of qualities and recognition of the differences between things .

prep_in(discernment-13, general-2)
nsubj(discernment-13, Discrimination-4)
det(sense-9, a-7)
amod(sense-9, non-legal-8)
prep_in(Discrimination-4, sense-9)
cop(discernment-13, is-11)
det(discernment-13, the-12)
root(ROOT-0, discernment-13)
prep_of(discernment-13, qualities-15)
prep_of(discernment-13, recognition-17)
conj_and(qualities-15, recognition-17)
det(differences-20, the-19)
prep_of(discernment-13, differences-20)
prep_between(differences-20, things-22)

In computer science theory , a Deque - LBR - short for double-ended queue - Deque is usually pronounced deck .

nn(theory-4, computer-2)
nn(theory-4, science-3)
prep_in(deck-20, theory-4)
det(Deque-7, a-6)
nsubj(deck-20, Deque-7)
dep(Deque-16, LBR-9)
advmod(for-12, short-11)
dep(LBR-9, for-12)
amod(queue-14, double-ended-13)
pobj(for-12, queue-14)
dep(Deque-7, Deque-16)
cop(deck-20, is-17)
advmod(deck-20, usually-18)
amod(deck-20, pronounced-19)
root(ROOT-0, deck-20)

is an abstract list type data structure , also called a head-tail linked list , for which elements can be added to or removed from the front - LBR - head - RBR - or back - LBR - tail - RBR - .

cop(structure-7, is-1)
det(structure-7, an-2)
amod(structure-7, abstract-3)
nn(structure-7, list-4)
nn(structure-7, type-5)
nn(structure-7, data-6)
ccomp(called-10, structure-7)
advmod(called-10, also-9)
root(ROOT-0, called-10)
det(list-14, a-11)
amod(list-14, head-tail-12)
amod(list-14, linked-13)
nsubj(called-10, list-14)
rel(added-21, which-17)
nsubjpass(added-21, elements-18)
nsubjpass(removed-24, elements-18)
aux(added-21, can-19)
auxpass(added-21, be-20)
rcmod(list-14, added-21)
xcomp(added-21, to-22)
rcmod(list-14, removed-24)
conj_or(added-21, removed-24)
det(front-27, the-26)
prep_from(removed-24, front-27)
prep_from(removed-24, LBR-29)
conj_or(front-27, LBR-29)
prep_from(removed-24, head-31)
conj_or(front-27, head-31)
prep_from(removed-24, RBR-33)
conj_or(front-27, RBR-33)
amod(tail-40, back-36)
dep(tail-40, LBR-38)
prep_from(removed-24, tail-40)
conj_or(front-27, tail-40)
dep(tail-40, RBR-42)

The Diatessaron - LBR - -LRB- LST -RRB- c -LRB- \/ LST -RRB- 150 - 160 - RBR - is the most prominent Gospel harmony .

det(Diatessaron-2, The-1)
npadvmod(c-9, Diatessaron-2)
dep(Diatessaron-2, LBR-4)
abbrev(Diatessaron-2, LST-7)
advmod(harmony-25, c-9)
nn(LST-12, \/-11)
dep(harmony-25, LST-12)
num(160-16, 150-14)
nsubj(harmony-25, 160-16)
dep(160-16, RBR-18)
cop(harmony-25, is-20)
det(harmony-25, the-21)
advmod(prominent-23, most-22)
amod(harmony-25, prominent-23)
nn(harmony-25, Gospel-24)
root(ROOT-0, harmony-25)

Digital Access Signaling System 1 - LBR - DASS1 - RBR - is a protocol defined by British Telecom for digital links to PSTN based on ISDN .

nn(System-4, Digital-1)
nn(System-4, Access-2)
nn(System-4, Signaling-3)
nsubj(protocol-15, System-4)
num(System-4, 1-5)
nn(RBR-11, LBR-7)
dep(RBR-11, DASS1-9)
dep(System-4, RBR-11)
cop(protocol-15, is-13)
det(protocol-15, a-14)
root(ROOT-0, protocol-15)
xsubj(PSTN-24, protocol-15)
partmod(protocol-15, defined-16)
nn(Telecom-19, British-18)
agent(defined-16, Telecom-19)
amod(links-22, digital-21)
prep_for(Telecom-19, links-22)
aux(PSTN-24, to-23)
xcomp(defined-16, PSTN-24)
prepc_based_on(PSTN-24, on-26)
pobj(PSTN-24, ISDN-27)

DASS2 is an obsolescent protocol defined by British Telecom for digital links to PSTN based on ISDN .

nsubj(protocol-5, DASS2-1)
cop(protocol-5, is-2)
det(protocol-5, an-3)
amod(protocol-5, obsolescent-4)
root(ROOT-0, protocol-5)
xsubj(PSTN-14, protocol-5)
partmod(protocol-5, defined-6)
nn(Telecom-9, British-8)
agent(defined-6, Telecom-9)
amod(links-12, digital-11)
prep_for(Telecom-9, links-12)
aux(PSTN-14, to-13)
xcomp(defined-6, PSTN-14)
prepc_based_on(PSTN-14, on-16)
pobj(PSTN-14, ISDN-17)

A Dagger - LBR - from Vulgar Latin : ` daca ' - a Dacian knife - RBR - is a typically double-edged blade used for stabbing or thrusting .

det(Dagger-2, A-1)
nsubj(blade-24, Dagger-2)
dep(Dagger-2, LBR-4)
dep(LBR-4, from-6)
nn(Latin-8, Vulgar-7)
pobj(from-6, Latin-8)
dep(Latin-8, daca-11)
det(knife-16, a-14)
amod(knife-16, Dacian-15)
dep(Latin-8, knife-16)
dep(Latin-8, RBR-18)
cop(blade-24, is-20)
det(blade-24, a-21)
advmod(double-edged-23, typically-22)
amod(blade-24, double-edged-23)
root(ROOT-0, blade-24)
partmod(blade-24, used-25)
prepc_for(used-25, stabbing-27)
prepc_for(used-25, thrusting-29)
conj_or(stabbing-27, thrusting-29)

Dominion , often Dominion , and referred to in the monarchs style as the British Dominions beyond the Seas , is a term that particularly referred to an autonomous polity under sovereign authority within the British Empire and British Commonwealth from the late 19th century .

xsubj(in-9, Dominion-1)
nsubj(term-23, Dominion-1)
advmod(Dominion-4, often-3)
dep(Dominion-1, Dominion-4)
dep(Dominion-1, referred-7)
conj_and(Dominion-4, referred-7)
aux(in-9, to-8)
xcomp(referred-7, in-9)
det(style-12, the-10)
amod(style-12, monarchs-11)
pobj(in-9, style-12)
det(Dominions-16, the-14)
nn(Dominions-16, British-15)
prep_as(in-9, Dominions-16)
det(Seas-19, the-18)
prep_beyond(referred-7, Seas-19)
cop(term-23, is-21)
det(term-23, a-22)
root(ROOT-0, term-23)
nsubj(referred-26, term-23)
advmod(referred-26, particularly-25)
rcmod(term-23, referred-26)
det(polity-30, an-28)
amod(polity-30, autonomous-29)
prep_to(referred-26, polity-30)
amod(authority-33, sovereign-32)
prep_under(polity-30, authority-33)
det(Empire-37, the-35)
nn(Empire-37, British-36)
prep_within(referred-26, Empire-37)
nn(Commonwealth-40, British-39)
prep_within(referred-26, Commonwealth-40)
conj_and(Empire-37, Commonwealth-40)
det(century-45, the-42)
amod(century-45, late-43)
amod(century-45, 19th-44)
prep_from(referred-26, century-45)

A Dictatorship is an autocratic form of government in which the government is ruled by a dictator .

det(Dictatorship-2, A-1)
nsubj(form-6, Dictatorship-2)
cop(form-6, is-3)
det(form-6, an-4)
amod(form-6, autocratic-5)
root(ROOT-0, form-6)
prep_of(form-6, government-8)
rel(ruled-14, which-10)
det(government-12, the-11)
nsubjpass(ruled-14, government-12)
auxpass(ruled-14, is-13)
rcmod(form-6, ruled-14)
det(dictator-17, a-16)
agent(ruled-14, dictator-17)

In linguistics , Diaeresis , or dieresis , is the pronunciation of two adjacent vowels in two separate syllables rather than as a diphthong .

prep_in(pronunciation-11, linguistics-2)
nsubj(pronunciation-11, Diaeresis-4)
conj_or(Diaeresis-4, dieresis-7)
nsubj(pronunciation-11, dieresis-7)
cop(pronunciation-11, is-9)
det(pronunciation-11, the-10)
root(ROOT-0, pronunciation-11)
num(vowels-15, two-13)
amod(vowels-15, adjacent-14)
prep_of(pronunciation-11, vowels-15)
prep_of(pronunciation-11, vowels-15')
conj_negcc(vowels-15, vowels-15')
num(syllables-19, two-17)
amod(syllables-19, separate-18)
prep_in(vowels-15, syllables-19)
det(diphthong-24, a-23)
prep_as(vowels-15', diphthong-24)

Derry or Londonderry - LBR - Irish place name - RBR - , often called the Maiden City , is a city in Northern Ireland .

root(ROOT-0, Derry-1)
conj_or(Derry-1, Londonderry-3)
dep(Derry-1, LBR-5)
amod(name-9, Irish-7)
nn(name-9, place-8)
nsubj(city-22, name-9)
dep(name-9, RBR-11)
advmod(called-15, often-14)
partmod(name-9, called-15)
det(City-18, the-16)
nn(City-18, Maiden-17)
dobj(called-15, City-18)
cop(city-22, is-20)
det(city-22, a-21)
dep(Derry-1, city-22)
nn(Ireland-25, Northern-24)
prep_in(city-22, Ireland-25)

A Diuretic is any drug that elevates the rate of urination - LBR - diuresis - RBR - .

det(Diuretic-2, A-1)
nsubj(drug-5, Diuretic-2)
cop(drug-5, is-3)
det(drug-5, any-4)
root(ROOT-0, drug-5)
nsubj(elevates-7, drug-5)
rcmod(drug-5, elevates-7)
det(rate-9, the-8)
dobj(elevates-7, rate-9)
prep_of(rate-9, urination-11)
dep(diuresis-15, LBR-13)
parataxis(drug-5, diuresis-15)
dep(diuresis-15, RBR-17)

A Dhimmi is a non-Muslim subject of a state governed in accordance with sharia law .

det(Dhimmi-2, A-1)
nsubj(subject-6, Dhimmi-2)
cop(subject-6, is-3)
det(subject-6, a-4)
amod(subject-6, non-Muslim-5)
root(ROOT-0, subject-6)
det(state-9, a-8)
prep_of(subject-6, state-9)
partmod(state-9, governed-10)
prep_in(governed-10, accordance-12)
nn(law-15, sharia-14)
prep_with(governed-10, law-15)

A Druid was a member of the priestly and learned class in the ancient Celtic societies of Western Europe , Britain and Ireland .

det(Druid-2, A-1)
nsubj(member-5, Druid-2)
nsubj(learned-10, Druid-2)
cop(member-5, was-3)
det(member-5, a-4)
root(ROOT-0, member-5)
det(priestly-8, the-7)
prep_of(member-5, priestly-8)
conj_and(member-5, learned-10)
dobj(learned-10, class-11)
det(societies-16, the-13)
amod(societies-16, ancient-14)
amod(societies-16, Celtic-15)
prep_in(learned-10, societies-16)
nn(Europe-19, Western-18)
prep_of(societies-16, Europe-19)
prep_of(societies-16, Britain-21)
conj_and(Europe-19, Britain-21)
prep_of(societies-16, Ireland-23)
conj_and(Europe-19, Ireland-23)

A Dalek - LBR - Dalek .

det(Dalek-2, A-1)
root(ROOT-0, Dalek-2)
dep(Dalek-2, LBR-4)
dep(LBR-4, Dalek-6)

ogg `` dah-leck `` , Ã -- Â √ dÃ ≈ ÂŒÃ -- Â ∆ lÃ ⁄ Âµk - RBR - is a member of a fictional extraterrestrial race of mutants from the British science fiction television series Doctor Who .

root(ROOT-0, ogg-1)
dobj(ogg-1, dah-leck-3)
nsubj(RBR-20, Ã-6)
nn(ÂŒÃ-12, Â-8)
nn(ÂŒÃ-12, √-9)
nn(ÂŒÃ-12, dÃ-10)
nn(ÂŒÃ-12, ≈-11)
dep(Ã-6, ÂŒÃ-12)
nn(Âµk-18, Â-14)
nn(Âµk-18, ∆-15)
nn(Âµk-18, lÃ-16)
nn(Âµk-18, ⁄-17)
dep(ÂŒÃ-12, Âµk-18)
parataxis(member-24, RBR-20)
cop(member-24, is-22)
det(member-24, a-23)
rcmod(dah-leck-3, member-24)
det(race-29, a-26)
amod(race-29, fictional-27)
amod(race-29, extraterrestrial-28)
prep_of(member-24, race-29)
prep_of(race-29, mutants-31)
det(Doctor-39, the-33)
amod(Doctor-39, British-34)
nn(Doctor-39, science-35)
nn(Doctor-39, fiction-36)
nn(Doctor-39, television-37)
nn(Doctor-39, series-38)
prep_from(mutants-31, Doctor-39)
rcmod(Doctor-39, Who-40)

In biology , Evolution is the process of change in the inherited traits of a population of organisms from one generation to the next .

prep_in(process-7, biology-2)
nsubj(process-7, Evolution-4)
cop(process-7, is-5)
det(process-7, the-6)
root(ROOT-0, process-7)
prep_of(process-7, change-9)
det(traits-13, the-11)
amod(traits-13, inherited-12)
prep_in(change-9, traits-13)
det(population-16, a-15)
prep_of(traits-13, population-16)
prep_of(population-16, organisms-18)
num(generation-21, one-20)
prep_from(organisms-18, generation-21)
det(next-24, the-23)
prep_to(generation-21, next-24)

Epistemology - LBR - from Greek Ã ⁄ ÂµÃ ∂ Â • Ã ⁄ Â ' Ã ∂ Â ∞ Ã ∂ Â ≥ Ã ⁄ Â ® Ã ⁄ ÂπÃ ⁄ Â · - episteme , `` knowledge `` + Ã ⁄ Â '' Ã ∂ Â ` Ã ⁄ Â `` Ã ⁄ Â ¿ Ã ∂ Â ≠ , `` logos `` - RBR - or theory of knowledge is a branch of philosophy concerned with the nature and scope of knowledge .

root(ROOT-0, Epistemology-1)
dep(branch-75, LBR-3)
dep(LBR-3, from-5)
amod(∂-10, Greek-6)
nn(∂-10, Ã-7)
nn(∂-10, ⁄-8)
nn(∂-10, ÂµÃ-9)
pobj(from-5, ∂-10)
nn(Ã-13, Â-11)
nn(Ã-13, •-12)
nsubj(branch-75, Ã-13)
nn(Â-15, ⁄-14)
poss(·-34, Â-15)
nn(·-34, Ã-17)
nn(·-34, ∂-18)
nn(·-34, Â-19)
nn(·-34, ∞-20)
nn(·-34, Ã-21)
nn(·-34, ∂-22)
nn(·-34, Â-23)
nn(·-34, ≥-24)
nn(·-34, Ã-25)
nn(·-34, ⁄-26)
nn(·-34, Â-27)
nn(·-34, ®-28)
nn(·-34, Ã-29)
nn(·-34, ⁄-30)
nn(·-34, ÂπÃ-31)
nn(·-34, ⁄-32)
nn(·-34, Â-33)
dep(Ã-13, ·-34)
dep(Ã-13, episteme-36)
nn(Â-44, knowledge-39)
nn(Â-44, +-41)
nn(Â-44, Ã-42)
nn(Â-44, ⁄-43)
appos(episteme-36, Â-44)
advmod(∂-47, Ã-46)
partmod(Â-44, ∂-47)
nn(≠-61, Â-48)
nn(≠-61, Ã-50)
nn(≠-61, ⁄-51)
nn(≠-61, Â-52)
nn(≠-61, Ã-54)
nn(≠-61, ⁄-55)
nn(≠-61, Â-56)
nn(≠-61, ¿-57)
nn(≠-61, Ã-58)
nn(≠-61, ∂-59)
nn(≠-61, Â-60)
dobj(∂-47, ≠-61)
dep(≠-61, logos-64)
conj_or(Ã-13, RBR-67)
nsubj(branch-75, RBR-67)
conj_or(Ã-13, theory-70)
nsubj(branch-75, theory-70)
prep_of(theory-70, knowledge-72)
cop(branch-75, is-73)
det(branch-75, a-74)
dep(Epistemology-1, branch-75)
prep_of(branch-75, philosophy-77)
partmod(philosophy-77, concerned-78)
det(nature-81, the-80)
prep_with(concerned-78, nature-81)
prep_with(concerned-78, scope-83)
conj_and(nature-81, scope-83)
prep_of(nature-81, knowledge-85)

Education refers to all the experiences in which children can learn something .

nsubj(refers-2, Education-1)
root(ROOT-0, refers-2)
predet(experiences-6, all-4)
det(experiences-6, the-5)
prep_to(refers-2, experiences-6)
rel(learn-11, which-8)
nsubj(learn-11, children-9)
aux(learn-11, can-10)
ccomp(experiences-6, learn-11)
dobj(learn-11, something-12)

An Encyclopedia - LBR - or encyclopÃ ∞ Âœdia - RBR - is a comprehensive written compendium that contains information on either all branches of knowledge or a particular branch of knowledge .

det(Encyclopedia-2, An-1)
nsubj(compendium-17, Encyclopedia-2)
nn(RBR-11, LBR-4)
dep(Âœdia-9, or-6)
nn(Âœdia-9, encyclopÃ-7)
nn(Âœdia-9, ∞-8)
dep(RBR-11, Âœdia-9)
dep(Encyclopedia-2, RBR-11)
cop(compendium-17, is-13)
det(compendium-17, a-14)
amod(compendium-17, comprehensive-15)
amod(compendium-17, written-16)
root(ROOT-0, compendium-17)
nsubj(contains-19, compendium-17)
rcmod(compendium-17, contains-19)
dobj(contains-19, information-20)
advmod(branches-24, either-22)
det(branches-24, all-23)
prep_on(contains-19, branches-24)
prep_of(branches-24, knowledge-26)
det(branch-30, a-28)
amod(branch-30, particular-29)
prep_on(contains-19, branch-30)
conj_or(branches-24, branch-30)
prep_of(branch-30, knowledge-32)

Entertainment is an activity designed to give people pleasure or relaxation .

nsubj(activity-4, Entertainment-1)
cop(activity-4, is-2)
det(activity-4, an-3)
root(ROOT-0, activity-4)
xsubj(give-7, activity-4)
partmod(activity-4, designed-5)
aux(give-7, to-6)
xcomp(designed-5, give-7)
iobj(give-7, people-8)
dobj(give-7, pleasure-9)
dobj(give-7, relaxation-11)
conj_or(pleasure-9, relaxation-11)

The Ecliptic is the apparent path that the Sun traces -LRB- PRT -RRB- out -LRB- \/ PRT -RRB- in the sky during the year .

det(Ecliptic-2, The-1)
nsubj(path-6, Ecliptic-2)
cop(path-6, is-3)
det(path-6, the-4)
amod(path-6, apparent-5)
root(ROOT-0, path-6)
dobj(traces-10, path-6)
complm(traces-10, that-7)
det(Sun-9, the-8)
nsubj(traces-10, Sun-9)
dep(path-6, traces-10)
dep(traces-10, PRT-12)
advmod(PRT-12, out-14)
nn(PRT-17, \/-16)
abbrev(path-6, PRT-17)
det(sky-21, the-20)
prep_in(path-6, sky-21)
det(year-24, the-23)
prep_during(sky-21, year-24)

In mathematics , an Ellipse - LBR - from the Greek Ã ¡ ÂπÂ ‰ Ã ⁄ Â '' Ã ⁄ Â '' Ã ⁄ ÂµÃ ⁄ Â ' Ã ∂ Â √ Ã ⁄ Â ' Ã ∂ Â ≠ , literally absence - RBR - is a locus of points in a plane such that the sum of the distances to two fixed points is a constant .

prep_in(locus-50, mathematics-2)
det(Ellipse-5, an-4)
nsubj(locus-50, Ellipse-5)
dep(⁄-25, LBR-7)
dep(LBR-7, from-9)
det(⁄-17, the-10)
amod(⁄-17, Greek-11)
nn(⁄-17, Ã-12)
nn(⁄-17, ¡-13)
nn(⁄-17, ÂπÂ-14)
nn(⁄-17, ‰-15)
nn(⁄-17, Ã-16)
pobj(from-9, ⁄-17)
nn(Ã-24, Â-18)
nn(Ã-24, Ã-20)
nn(Ã-24, ⁄-21)
nn(Ã-24, Â-22)
nsubj(⁄-25, Ã-24)
dep(Ellipse-5, ⁄-25)
nn(Â-28, ÂµÃ-26)
nn(Â-28, ⁄-27)
poss(Â-36, Â-28)
nn(Â-36, Ã-30)
nn(Â-36, ∂-31)
nn(Â-36, Â-32)
nn(Â-36, √-33)
nn(Â-36, Ã-34)
nn(Â-36, ⁄-35)
poss(≠-41, Â-36)
nn(≠-41, Ã-38)
nn(≠-41, ∂-39)
nn(≠-41, Â-40)
dobj(⁄-25, ≠-41)
dep(absence-44, literally-43)
dep(≠-41, absence-44)
dep(absence-44, RBR-46)
cop(locus-50, is-48)
det(locus-50, a-49)
root(ROOT-0, locus-50)
prep_of(locus-50, points-52)
det(plane-55, a-54)
prep_in(points-52, plane-55)
amod(plane-55, such-56)
complm(constant-69, that-57)
det(sum-59, the-58)
nsubj(constant-69, sum-59)
det(distances-62, the-61)
prep_of(sum-59, distances-62)
num(points-66, two-64)
amod(points-66, fixed-65)
prep_to(distances-62, points-66)
cop(constant-69, is-67)
det(constant-69, a-68)
ccomp(locus-50, constant-69)

An Equation is a mathematical statement , in symbols , that two things are exactly the same - LBR - or equivalent - RBR - .

det(Equation-2, An-1)
nsubj(statement-6, Equation-2)
cop(statement-6, is-3)
det(statement-6, a-4)
amod(statement-6, mathematical-5)
root(ROOT-0, statement-6)
prep_in(statement-6, symbols-9)
dep(same-17, that-11)
num(things-13, two-12)
nsubj(same-17, things-13)
cop(same-17, are-14)
advmod(same-17, exactly-15)
det(same-17, the-16)
dep(symbols-9, same-17)
nn(RBR-24, LBR-19)
dep(equivalent-22, or-21)
dep(RBR-24, equivalent-22)
dep(same-17, RBR-24)

Erotica is a modern word used to describe the portrayal of the human anatomy and sexuality with high-art aspirations , differentiating such work from commercial pornography .

nsubj(word-5, Erotica-1)
cop(word-5, is-2)
det(word-5, a-3)
amod(word-5, modern-4)
root(ROOT-0, word-5)
xsubj(describe-8, word-5)
partmod(word-5, used-6)
aux(describe-8, to-7)
xcomp(used-6, describe-8)
det(portrayal-10, the-9)
dobj(describe-8, portrayal-10)
det(anatomy-14, the-12)
amod(anatomy-14, human-13)
prep_of(portrayal-10, anatomy-14)
prep_of(portrayal-10, sexuality-16)
conj_and(anatomy-14, sexuality-16)
amod(aspirations-19, high-art-18)
prep_with(describe-8, aspirations-19)
partmod(describe-8, differentiating-21)
xcomp(describe-8, differentiating-21)
amod(work-23, such-22)
dobj(differentiating-21, work-23)
amod(pornography-26, commercial-25)
prep_from(differentiating-21, pornography-26)

An Extractor is a bipartite graph with & amp ; lt ; math & amp ; gt ; N & amp ; lt ; \/ math & amp ; gt ; nodes on the left and & amp ; lt ; math & amp ; gt ; M & amp ; lt ; \/ math & amp ; gt ; nodes on the right such that each node on the left has & amp ; lt ; math & amp ; gt ; D & amp ; lt ; \/ math & amp ; gt ; neighbors - LBR - on the right - RBR - , which has the added property that for any subset & amp ; lt ; math & amp ; gt ; A & amp ; lt ; \/ math & amp ; gt ; of the left vertices of size at least & amp ; lt ; math & amp ; gt ; K & amp ; lt ; \/ math & amp ; gt ; , the distribution on right vertices obtained by choosing a random node in & amp ; lt ; math & amp ; gt ; A & amp ; lt ; \/ math & amp ; gt ; and then following a random edge to get a node x on the right side is & amp ; lt ; math & amp ; gt ; \ epsilon & amp ; lt ; \/ math & amp ; gt ; - close to the uniform distribution in terms of total variation distance .

det(Extractor-2, An-1)
nsubj(graph-6, Extractor-2)
cop(graph-6, is-3)
det(graph-6, a-4)
amod(graph-6, bipartite-5)
root(ROOT-0, graph-6)
cc(amp-9, &-8)
prep_with(graph-6, amp-9)
dep(amp-9, lt-11)
dep(amp-9, math-13)
dep(amp-9, amp-15)
conj_and(math-13, amp-15)
dep(amp-9, gt-17)
dep(amp-9, N-19)
dep(amp-9, amp-21)
conj_and(N-19, amp-21)
dep(amp-9, lt-23)
nn(math-26, \/-25)
dep(amp-9, math-26)
dep(amp-9, amp-28)
conj_and(math-26, amp-28)
dep(amp-9, gt-30)
dep(amp-9, nodes-32)
det(left-35, the-34)
prep_on(nodes-32, left-35)
cc(amp-38, &-37)
prep_on(nodes-32, amp-38)
conj_and(left-35, amp-38)
dep(amp-9, lt-40)
dep(amp-9, math-42)
dep(amp-9, amp-44)
conj_and(math-42, amp-44)
dep(amp-9, gt-46)
dep(amp-9, M-48)
dep(amp-9, amp-50)
conj_and(M-48, amp-50)
dep(amp-9, lt-52)
nn(math-55, \/-54)
dep(amp-9, math-55)
dep(amp-9, amp-57)
conj_and(math-55, amp-57)
dep(amp-9, gt-59)
dep(amp-9, nodes-61)
det(such-65, the-63)
amod(such-65, right-64)
prep_on(graph-6, such-65)
complm(has-72, that-66)
det(node-68, each-67)
nsubj(has-72, node-68)
det(left-71, the-70)
prep_on(node-68, left-71)
dep(such-65, has-72)
cc(amp-74, &-73)
dobj(has-72, amp-74)
dep(amp-74, lt-76)
dep(amp-74, math-78)
dep(amp-74, amp-80)
conj_and(math-78, amp-80)
dep(amp-74, gt-82)
dep(amp-74, D-84)
dep(amp-74, amp-86)
conj_and(D-84, amp-86)
dep(amp-74, lt-88)
nn(math-91, \/-90)
dep(amp-74, math-91)
dep(amp-74, amp-93)
conj_and(math-91, amp-93)
dep(amp-74, gt-95)
dep(amp-74, neighbors-97)
dep(amp-74, LBR-99)
det(right-103, the-102)
prep_on(amp-74, right-103)
dep(right-103, RBR-105)
nsubj(has-109, which-108)
rcmod(such-65, has-109)
det(property-112, the-110)
amod(property-112, added-111)
dobj(has-109, property-112)
advmod(property-112, that-113)
det(subset-116, any-115)
prep_for(property-112, subset-116)
prep_for(property-112, amp-118)
conj_and(subset-116, amp-118)
dep(subset-116, lt-120)
dep(subset-116, math-122)
dep(subset-116, amp-124)
conj_and(math-122, amp-124)
dep(subset-116, gt-126)
dep(subset-116, A-128)
dep(subset-116, amp-130)
conj_and(A-128, amp-130)
dep(subset-116, lt-132)
nn(math-135, \/-134)
dep(subset-116, math-135)
dep(subset-116, amp-137)
conj_and(math-135, amp-137)
dep(subset-116, gt-139)
det(vertices-144, the-142)
amod(vertices-144, left-143)
prep_of(subset-116, vertices-144)
prep_of(vertices-144, size-146)
advmod(vertices-144, at-147)
pobj(at-147, least-148)
cc(amp-150, &-149)
dep(subset-116, amp-150)
dep(amp-150, lt-152)
dep(amp-150, math-154)
dep(amp-150, amp-156)
conj_and(math-154, amp-156)
dep(amp-150, gt-158)
dep(amp-150, K-160)
dep(amp-150, amp-162)
conj_and(K-160, amp-162)
dep(amp-150, lt-164)
nn(math-167, \/-166)
dep(amp-150, math-167)
dep(amp-150, amp-169)
conj_and(math-167, amp-169)
dep(amp-150, gt-171)
det(distribution-175, the-174)
conj_and(graph-6, distribution-175)
amod(vertices-178, right-177)
prep_on(distribution-175, vertices-178)
partmod(vertices-178, obtained-179)
agent(obtained-179, choosing-181)
det(node-184, a-182)
amod(node-184, random-183)
dobj(choosing-181, node-184)
cc(amp-187, &-186)
prep_in(choosing-181, amp-187)
dep(amp-187, lt-189)
dep(amp-187, math-191)
dep(amp-187, amp-193)
conj_and(math-191, amp-193)
dep(amp-187, gt-195)
dep(amp-187, A-197)
dep(amp-187, amp-199)
conj_and(A-197, amp-199)
dep(amp-187, lt-201)
nn(math-204, \/-203)
dep(amp-187, math-204)
dep(amp-187, amp-206)
conj_and(math-204, amp-206)
dep(amp-187, gt-208)
conj_and(graph-6, then-211)
det(edge-215, a-213)
amod(edge-215, random-214)
prep_following(then-211, edge-215)
aux(get-217, to-216)
infmod(edge-215, get-217)
det(node-219, a-218)
dobj(get-217, node-219)
nsubj(amp-227, x-220)
det(side-224, the-222)
amod(side-224, right-223)
prep_on(x-220, side-224)
cop(amp-227, is-225)
cc(amp-227, &-226)
rcmod(node-219, amp-227)
dep(amp-227, lt-229)
dep(amp-227, math-231)
dep(amp-227, amp-233)
conj_and(math-231, amp-233)
dep(amp-227, gt-235)
nn(epsilon-238, \-237)
dep(amp-227, epsilon-238)
dep(amp-227, amp-240)
conj_and(epsilon-238, amp-240)
dep(amp-227, lt-242)
nn(math-245, \/-244)
dep(amp-227, math-245)
dep(amp-227, amp-247)
conj_and(math-245, amp-247)
dep(amp-227, gt-249)
det(distribution-256, the-254)
amod(distribution-256, uniform-255)
prep_close_to(amp-227, distribution-256)
prep_in(distribution-256, terms-258)
amod(distance-262, total-260)
nn(distance-262, variation-261)
prep_of(terms-258, distance-262)

The Ericales are a large and diverse order of dicotyledons , including for example tea , persimmon , blueberry , Brazil nut , and azalea .

det(Ericales-2, The-1)
nsubj(order-8, Ericales-2)
cop(order-8, are-3)
det(order-8, a-4)
amod(order-8, large-5)
conj_and(large-5, diverse-7)
amod(order-8, diverse-7)
root(ROOT-0, order-8)
prep_of(order-8, dicotyledons-10)
prep(order-8, including-12)
pcomp(including-12, for-13)
nn(tea-15, example-14)
prep_for(including-12, tea-15)
prep_for(including-12, persimmon-17)
conj_and(tea-15, persimmon-17)
prep_for(including-12, blueberry-19)
conj_and(tea-15, blueberry-19)
nn(nut-22, Brazil-21)
prep_for(including-12, nut-22)
conj_and(tea-15, nut-22)
prep_for(including-12, azalea-25)
conj_and(tea-15, azalea-25)

An Election is decision-making process by which a population chooses an individual to hold formal office .

det(Election-2, An-1)
nsubj(process-5, Election-2)
cop(process-5, is-3)
amod(process-5, decision-making-4)
root(ROOT-0, process-5)
rel(chooses-10, which-7)
det(population-9, a-8)
nsubj(chooses-10, population-9)
rcmod(process-5, chooses-10)
det(individual-12, an-11)
dobj(chooses-10, individual-12)
aux(hold-14, to-13)
infmod(individual-12, hold-14)
amod(office-16, formal-15)
dobj(hold-14, office-16)

Externalization means to put something outside of its original borders , especially to put a human function outside of the human body .

nsubj(means-2, Externalization-1)
xsubj(put-4, Externalization-1)
root(ROOT-0, means-2)
aux(put-4, to-3)
xcomp(means-2, put-4)
nn(outside-6, something-5)
dobj(put-4, outside-6)
poss(borders-10, its-8)
amod(borders-10, original-9)
prep_of(outside-6, borders-10)
advmod(put-14, especially-12)
aux(put-14, to-13)
xcomp(put-4, put-14)
det(outside-18, a-15)
amod(outside-18, human-16)
nn(outside-18, function-17)
dobj(put-14, outside-18)
det(body-22, the-20)
amod(body-22, human-21)
prep_of(outside-18, body-22)

The Euro - LBR - currency sign : Ã cents Â ≠ Â ¬ ; currency code : EUR - RBR - is the official currency of the European Union - LBR - EU - RBR - .

det(sign-7, The-1)
nn(sign-7, Euro-2)
dep(sign-7, LBR-4)
nn(sign-7, currency-6)
nsubj(currency-26, sign-7)
nn(cents-10, Ã-9)
dep(sign-7, cents-10)
nn(¬-14, Â-11)
nn(¬-14, ≠-12)
nn(¬-14, Â-13)
dep(cents-10, ¬-14)
nn(code-17, currency-16)
dep(sign-7, code-17)
dep(code-17, EUR-19)
dep(sign-7, RBR-21)
cop(currency-26, is-23)
det(currency-26, the-24)
amod(currency-26, official-25)
root(ROOT-0, currency-26)
det(EU-34, the-28)
amod(EU-34, European-29)
nn(EU-34, Union-30)
dep(EU-34, LBR-32)
prep_of(currency-26, EU-34)
dep(EU-34, RBR-36)

The Electron is a fundamental subatomic particle that carries a negative electric charge .

det(Electron-2, The-1)
nsubj(particle-7, Electron-2)
cop(particle-7, is-3)
det(particle-7, a-4)
amod(particle-7, fundamental-5)
amod(particle-7, subatomic-6)
root(ROOT-0, particle-7)
nsubj(carries-9, particle-7)
rcmod(particle-7, carries-9)
det(charge-13, a-10)
amod(charge-13, negative-11)
amod(charge-13, electric-12)
dobj(carries-9, charge-13)

In philosophy of mind , Epiphenomenalism , also known as ` Type-E Dualism ' is a view according to which some or all mental states are mere epiphenomena - LBR - side-effects or by-products - RBR - of physical states of the world .

prep_in(view-17, philosophy-2)
prep_of(philosophy-2, mind-4)
nsubj(view-17, Epiphenomenalism-6)
advmod(known-9, also-8)
partmod(Epiphenomenalism-6, known-9)
nn(Dualism-13, Type-E-12)
prep_as(known-9, Dualism-13)
cop(view-17, is-15)
det(view-17, a-16)
root(ROOT-0, view-17)
prepc_according_to(view-17, to-19)
dobj(epiphenomena-28, which-20)
nsubj(epiphenomena-28, some-21)
det(states-25, all-23)
amod(states-25, mental-24)
conj_or(some-21, states-25)
nsubj(epiphenomena-28, states-25)
cop(epiphenomena-28, are-26)
amod(epiphenomena-28, mere-27)
pcomp(view-17, epiphenomena-28)
dep(epiphenomena-28, LBR-30)
dep(epiphenomena-28, side-effects-32)
dep(epiphenomena-28, by-products-34)
conj_or(side-effects-32, by-products-34)
dep(epiphenomena-28, RBR-36)
amod(states-40, physical-39)
prep_of(epiphenomena-28, states-40)
det(world-43, the-42)
prep_of(states-40, world-43)

The Endometrium is the inner membrane of the mammalian uterus .

det(Endometrium-2, The-1)
nsubj(membrane-6, Endometrium-2)
cop(membrane-6, is-3)
det(membrane-6, the-4)
amod(membrane-6, inner-5)
root(ROOT-0, membrane-6)
det(uterus-10, the-8)
amod(uterus-10, mammalian-9)
prep_of(membrane-6, uterus-10)

A Euphemism is the substitution of an agreeable or less offensive expression in place of one that may offend or suggest something unpleasant to the listener ; or in the case of doublespeak , to make it less troublesome for the speaker .

det(Euphemism-2, A-1)
nsubj(substitution-5, Euphemism-2)
cop(substitution-5, is-3)
det(substitution-5, the-4)
root(ROOT-0, substitution-5)
nsubj(offend-19, substitution-5)
nsubj(suggest-21, substitution-5)
det(expression-12, an-7)
amod(expression-12, agreeable-8)
advmod(offensive-11, less-10)
conj_or(agreeable-8, offensive-11)
amod(expression-12, offensive-11)
prep_of(substitution-5, expression-12)
prep_in_place_of(expression-12, one-16)
aux(offend-19, may-18)
rcmod(substitution-5, offend-19)
rcmod(substitution-5, suggest-21)
conj_or(offend-19, suggest-21)
dobj(offend-19, something-22)
amod(something-22, unpleasant-23)
amod(something-22, unpleasant-23')
conj_or(unpleasant-23, unpleasant-23')
det(listener-26, the-25)
prep_to(unpleasant-23, listener-26)
det(case-31, the-30)
prep_in(unpleasant-23', case-31)
prep_of(case-31, doublespeak-33)
aux(make-36, to-35)
infmod(something-22, make-36)
nsubj(troublesome-39, it-37)
advmod(troublesome-39, less-38)
xcomp(make-36, troublesome-39)
det(speaker-42, the-41)
prep_for(troublesome-39, speaker-42)

Everything2 , or E2 for short , is a collaborative Web-based community consisting of a database of interlinked user-submitted written material .

nsubj(community-12, Everything2-1)
conj_or(Everything2-1, E2-4)
nsubj(community-12, E2-4)
prep_for(E2-4, short-6)
cop(community-12, is-8)
det(community-12, a-9)
amod(community-12, collaborative-10)
amod(community-12, Web-based-11)
root(ROOT-0, community-12)
partmod(community-12, consisting-13)
det(database-16, a-15)
prep_of(consisting-13, database-16)
amod(material-21, interlinked-18)
amod(material-21, user-submitted-19)
amod(material-21, written-20)
prep_of(database-16, material-21)

The Ericaceae - LBR - also called the heath family or ericaceous plants - RBR - are mostly lime-hating - LBR - calcifuge - RBR - plants that thrive in acid soils .

det(Ericaceae-2, The-1)
nsubj(called-7, Ericaceae-2)
dep(Ericaceae-2, LBR-4)
advmod(called-7, also-6)
root(ROOT-0, called-7)
det(family-10, the-8)
amod(family-10, heath-9)
nsubj(plants-27, family-10)
amod(plants-13, ericaceous-12)
conj_or(family-10, plants-13)
nsubj(plants-27, plants-13)
dep(family-10, RBR-15)
cop(plants-27, are-17)
advmod(plants-27, mostly-18)
amod(plants-27, lime-hating-19)
dep(plants-27, LBR-21)
nn(plants-27, calcifuge-23)
dep(plants-27, RBR-25)
ccomp(called-7, plants-27)
nsubj(thrive-29, plants-27)
rcmod(plants-27, thrive-29)
amod(soils-32, acid-31)
prep_in(thrive-29, soils-32)

In mathematics , an Endomorphism is a morphism - LBR - or homomorphism - RBR - from a mathematical object to itself .

prep_in(morphism-8, mathematics-2)
det(Endomorphism-5, an-4)
nsubj(morphism-8, Endomorphism-5)
cop(morphism-8, is-6)
det(morphism-8, a-7)
root(ROOT-0, morphism-8)
nn(RBR-15, LBR-10)
dep(homomorphism-13, or-12)
dep(RBR-15, homomorphism-13)
dep(morphism-8, RBR-15)
det(object-20, a-18)
amod(object-20, mathematical-19)
prep_from(morphism-8, object-20)
prep_to(object-20, itself-22)

The Electronvolt - LBR - symbol eV - RBR - is a unit of energy .

det(eV-7, The-1)
nn(eV-7, Electronvolt-2)
dep(eV-7, LBR-4)
nn(eV-7, symbol-6)
nsubj(unit-13, eV-7)
dep(eV-7, RBR-9)
cop(unit-13, is-11)
det(unit-13, a-12)
root(ROOT-0, unit-13)
prep_of(unit-13, energy-15)

An Extremophile is an organism that thrives in and may even require physically or geochemically extreme conditions that are detrimental to the majority of life on Earth .

det(Extremophile-2, An-1)
nsubj(organism-5, Extremophile-2)
cop(organism-5, is-3)
det(organism-5, an-4)
root(ROOT-0, organism-5)
nsubj(thrives-7, organism-5)
nsubj(require-12, organism-5)
rcmod(organism-5, thrives-7)
prt(thrives-7, in-8)
aux(require-12, may-10)
advmod(require-12, even-11)
rcmod(organism-5, require-12)
conj_and(thrives-7, require-12)
amod(conditions-17, physically-13)
advmod(extreme-16, geochemically-15)
conj_or(physically-13, extreme-16)
amod(conditions-17, extreme-16)
dobj(require-12, conditions-17)
nsubj(detrimental-20, conditions-17)
cop(detrimental-20, are-19)
rcmod(conditions-17, detrimental-20)
det(majority-23, the-22)
prep_to(detrimental-20, majority-23)
prep_of(majority-23, life-25)
prep_on(detrimental-20, Earth-27)

An Ecosystem is a natural unit consisting of all plants , animals and micro-organisms - LBR - biotic factors - RBR - in an area functioning together with all of the non-living physical - LBR - abiotic - RBR - factors of the environment .

det(Ecosystem-2, An-1)
nsubj(unit-6, Ecosystem-2)
cop(unit-6, is-3)
det(unit-6, a-4)
amod(unit-6, natural-5)
root(ROOT-0, unit-6)
partmod(unit-6, consisting-7)
det(plants-10, all-9)
prep_of(consisting-7, plants-10)
appos(plants-10, animals-12)
appos(plants-10, micro-organisms-14)
conj_and(animals-12, micro-organisms-14)
dep(plants-10, LBR-16)
amod(factors-19, biotic-18)
dep(plants-10, factors-19)
dep(plants-10, RBR-21)
det(area-25, an-24)
prep_in(plants-10, area-25)
partmod(plants-10, functioning-26)
prep_together_with(functioning-26, all-29)
det(factors-41, the-31)
amod(factors-41, non-living-32)
amod(factors-41, physical-33)
dep(factors-41, LBR-35)
nn(factors-41, abiotic-37)
dep(factors-41, RBR-39)
prep_of(all-29, factors-41)
det(environment-44, the-43)
prep_of(factors-41, environment-44)

An Engine is a mechanical device that produces some form of output from a given input .

det(Engine-2, An-1)
nsubj(device-6, Engine-2)
cop(device-6, is-3)
det(device-6, a-4)
amod(device-6, mechanical-5)
root(ROOT-0, device-6)
nsubj(produces-8, device-6)
rcmod(device-6, produces-8)
det(form-10, some-9)
dobj(produces-8, form-10)
prep_of(form-10, output-12)
det(input-16, a-14)
amod(input-16, given-15)
prep_from(produces-8, input-16)

EV refers to the official name of Estonia .

nsubj(refers-2, EV-1)
root(ROOT-0, refers-2)
det(name-6, the-4)
amod(name-6, official-5)
prep_to(refers-2, name-6)
prep_of(name-6, Estonia-8)

EV refers to a species of pokÃ ∞ Â © mon .

nsubj(refers-2, EV-1)
root(ROOT-0, refers-2)
det(species-5, a-4)
prep_to(refers-2, species-5)
nn(mon-11, pokÃ-7)
nn(mon-11, ∞-8)
nn(mon-11, Â-9)
nn(mon-11, ©-10)
prep_of(species-5, mon-11)

In physics and other sciences , Energy - LBR - from the Greek lang - energeia , `` activity , operation `` , from lang - energos , `` active , working `` - RBR - is a scalar physical quantity that is a property of objects and systems which is conserved by nature .

nn(sciences-5, physics-2)
conj_and(physics-2, other-4)
nn(sciences-5, other-4)
prep_in(energos-27, sciences-5)
nsubj(energos-27, Energy-7)
dep(Energy-7, LBR-9)
det(lang-14, the-12)
amod(lang-14, Greek-13)
prep_from(Energy-7, lang-14)
dep(lang-14, energeia-16)
appos(lang-14, activity-19)
partmod(activity-19, operation-21)
prep_from(lang-14, lang-25)
root(ROOT-0, energos-27)
acomp(energos-27, active-30)
xcomp(energos-27, working-32)
nsubj(quantity-41, RBR-35)
cop(quantity-41, is-37)
det(quantity-41, a-38)
amod(quantity-41, scalar-39)
amod(quantity-41, physical-40)
ccomp(working-32, quantity-41)
nsubj(property-45, quantity-41)
cop(property-45, is-43)
det(property-45, a-44)
rcmod(quantity-41, property-45)
nsubjpass(conserved-52, property-45)
prep_of(property-45, objects-47)
prep_of(property-45, systems-49)
conj_and(objects-47, systems-49)
auxpass(conserved-52, is-51)
rcmod(property-45, conserved-52)
agent(conserved-52, nature-54)

Electronics is the study of the flow of charge through various materials and devices such as semiconductors , resistors , inductors , capacitors , nano-structures and vacuum tubes .

nsubj(study-4, Electronics-1)
cop(study-4, is-2)
det(study-4, the-3)
root(ROOT-0, study-4)
det(flow-7, the-6)
prep_of(study-4, flow-7)
prep_of(flow-7, charge-9)
amod(materials-12, various-11)
prep_through(study-4, materials-12)
prep_through(study-4, devices-14)
conj_and(materials-12, devices-14)
nn(nano-structures-25, semiconductors-17)
dep(nano-structures-25, resistors-19)
dep(nano-structures-25, inductors-21)
dep(nano-structures-25, capacitors-23)
prep_such_as(materials-12, nano-structures-25)
nn(tubes-28, vacuum-27)
prep_such_as(materials-12, tubes-28)
conj_and(nano-structures-25, tubes-28)

In medicine an Ectopia is a displacement or malposition of an organ of the body .

prep_in(displacement-7, medicine-2)
det(Ectopia-4, an-3)
nsubj(displacement-7, Ectopia-4)
cop(displacement-7, is-5)
det(displacement-7, a-6)
root(ROOT-0, displacement-7)
conj_or(displacement-7, malposition-9)
det(organ-12, an-11)
prep_of(displacement-7, organ-12)
det(body-15, the-14)
prep_of(organ-12, body-15)

In mathematics , the Entscheidungsproblem - LBR - German for ` decision problem ' - RBR - is a challenge posed by David Hilbert in 1928 .

prep_in(challenge-20, mathematics-2)
det(Entscheidungsproblem-5, the-4)
nsubj(challenge-20, Entscheidungsproblem-5)
nn(RBR-16, LBR-7)
dep(RBR-16, German-9)
nn(problem-13, decision-12)
prep_for(German-9, problem-13)
dep(Entscheidungsproblem-5, RBR-16)
cop(challenge-20, is-18)
det(challenge-20, a-19)
root(ROOT-0, challenge-20)
partmod(challenge-20, posed-21)
nn(Hilbert-24, David-23)
agent(posed-21, Hilbert-24)
prep_in(Hilbert-24, 1928-26)

An Endosymbiont is any organism that lives within the body or cells of another organism .

det(Endosymbiont-2, An-1)
nsubj(organism-5, Endosymbiont-2)
cop(organism-5, is-3)
det(organism-5, any-4)
root(ROOT-0, organism-5)
nsubj(lives-7, organism-5)
rcmod(organism-5, lives-7)
det(body-10, the-9)
prep_within(lives-7, body-10)
prep_within(lives-7, cells-12)
conj_or(body-10, cells-12)
det(organism-15, another-14)
prep_of(body-10, organism-15)

Electronegativity is a chemical property that describes the ability of an atom - LBR - or , more rarely , a functional group - RBR - to attract electrons - LBR - or electron density - RBR - towards itself in a covalent bond .

nsubj(property-5, Electronegativity-1)
cop(property-5, is-2)
det(property-5, a-3)
amod(property-5, chemical-4)
root(ROOT-0, property-5)
nsubj(describes-7, property-5)
rcmod(property-5, describes-7)
det(ability-9, the-8)
nsubj(attract-28, ability-9)
det(atom-12, an-11)
prep_of(ability-9, atom-12)
prep_of(ability-9, LBR-14)
conj_or(atom-12, LBR-14)
dep(atom-12, more-18)
dep(more-18, rarely-19)
det(group-23, a-21)
amod(group-23, functional-22)
prep_of(ability-9, group-23)
conj_or(atom-12, group-23)
dep(ability-9, RBR-25)
aux(attract-28, to-27)
xcomp(describes-7, attract-28)
dobj(attract-28, electrons-29)
nn(RBR-37, LBR-31)
dep(density-35, or-33)
nn(density-35, electron-34)
dep(RBR-37, density-35)
dep(electrons-29, RBR-37)
prep_towards(attract-28, itself-40)
det(bond-44, a-42)
amod(bond-44, covalent-43)
prep_in(attract-28, bond-44)

Electronic mail , often abbreviated to E-mail , email , or simply mail , is a store-and-forward method of writing , sending , receiving and saving messages -LRB- PRT -RRB- over -LRB- \/ PRT -RRB- electronic communication systems .

amod(mail-2, Electronic-1)
nsubj(method-18, mail-2)
advmod(mail-13, often-4)
amod(mail-13, abbreviated-5)
dep(mail-13, to-6)
pobj(to-6, E-mail-7)
appos(E-mail-7, email-9)
conj_or(to-6, simply-12)
dep(mail-13, simply-12)
appos(mail-2, mail-13)
cop(method-18, is-15)
det(method-18, a-16)
amod(method-18, store-and-forward-17)
root(ROOT-0, method-18)
prep_of(method-18, writing-20)
partmod(method-18, sending-22)
xcomp(method-18, sending-22)
partmod(method-18, receiving-24)
xcomp(method-18, receiving-24)
conj_and(sending-22, receiving-24)
partmod(method-18, saving-26)
xcomp(method-18, saving-26)
conj_and(sending-22, saving-26)
dobj(sending-22, messages-27)
abbrev(messages-27, PRT-29)
nn(PRT-34, \/-33)
dep(messages-27, PRT-34)
amod(systems-38, electronic-36)
nn(systems-38, communication-37)
prep_over(messages-27, systems-38)

An Emoticon is a symbol or combination of symbols used to convey emotional content in written or message form .

det(Emoticon-2, An-1)
nsubj(symbol-5, Emoticon-2)
cop(symbol-5, is-3)
det(symbol-5, a-4)
root(ROOT-0, symbol-5)
conj_or(symbol-5, combination-7)
prep_of(symbol-5, symbols-9)
xsubj(convey-12, symbols-9)
partmod(symbols-9, used-10)
aux(convey-12, to-11)
xcomp(used-10, convey-12)
amod(content-14, emotional-13)
dobj(convey-12, content-14)
prep_in(convey-12, written-16)
nn(form-19, message-18)
prep_in(convey-12, form-19)
conj_or(written-16, form-19)

In the Latter Day Saint movement , an Evangelist is an ordained office of the ministry .

det(movement-6, the-2)
nn(movement-6, Latter-3)
nn(movement-6, Day-4)
nn(movement-6, Saint-5)
prep_in(office-13, movement-6)
det(Evangelist-9, an-8)
nsubj(office-13, Evangelist-9)
cop(office-13, is-10)
det(office-13, an-11)
amod(office-13, ordained-12)
root(ROOT-0, office-13)
det(ministry-16, the-15)
prep_of(office-13, ministry-16)

An Exabyte - LBR - derived from the SI prefix exa - - RBR - is a unit of information or computer storage equal to one quintillion bytes .

det(Exabyte-2, An-1)
root(ROOT-0, Exabyte-2)
nsubj(unit-18, LBR-4)
dep(LBR-4, derived-6)
det(exa-11, the-8)
nn(exa-11, SI-9)
nn(exa-11, prefix-10)
prep_from(derived-6, exa-11)
dep(LBR-4, RBR-14)
cop(unit-18, is-16)
det(unit-18, a-17)
dep(Exabyte-2, unit-18)
nn(storage-23, information-20)
conj_or(information-20, computer-22)
nn(storage-23, computer-22)
prep_of(unit-18, storage-23)
amod(unit-18, equal-24)
num(bytes-28, one-26)
num(bytes-28, quintillion-27)
prep_to(equal-24, bytes-28)

In general usage , an Eon - LBR - sometimes spelled Ã ∞ Âœon - RBR - is an arbitrarily designated period of time .

amod(usage-3, general-2)
prep_in(period-22, usage-3)
det(Eon-6, an-5)
nsubj(period-22, Eon-6)
nn(RBR-16, LBR-8)
dep(Âœon-14, sometimes-10)
nn(Âœon-14, spelled-11)
nn(Âœon-14, Ã-12)
nn(Âœon-14, ∞-13)
dep(RBR-16, Âœon-14)
dep(Eon-6, RBR-16)
cop(period-22, is-18)
det(period-22, an-19)
advmod(designated-21, arbitrarily-20)
amod(period-22, designated-21)
root(ROOT-0, period-22)
prep_of(period-22, time-24)

Eridanus refers to a river in Greek mythology , associated by Herodotus with the Po .

nsubj(refers-2, Eridanus-1)
root(ROOT-0, refers-2)
det(river-5, a-4)
prep_to(refers-2, river-5)
amod(mythology-8, Greek-7)
prep_in(river-5, mythology-8)
dep(refers-2, associated-10)
prep_by(associated-10, Herodotus-12)
det(Po-15, the-14)
prep_with(associated-10, Po-15)

Eridanos refers to a large river that flowed between 40 million and 700 thousand years ago from Lapland to the North Sea .

nsubj(refers-2, Eridanos-1)
root(ROOT-0, refers-2)
det(river-6, a-4)
amod(river-6, large-5)
prep_to(refers-2, river-6)
nsubj(flowed-8, river-6)
rcmod(river-6, flowed-8)
quantmod(thousand-14, between-9)
number(thousand-14, 40-10)
number(thousand-14, million-11)
conj_and(thousand-14, 700-13)
num(years-15, 700-13)
num(years-15, thousand-14)
npadvmod(ago-16, years-15)
advmod(flowed-8, ago-16)
prep_from(flowed-8, Lapland-18)
det(Sea-22, the-20)
nn(Sea-22, North-21)
prep_to(flowed-8, Sea-22)

Eucharist , also called Holy Communion or Lord 's Supper and other names , is of the Christian sacraments said to have been instituted by Jesus of Nazareth .

nsubj(is-15, Eucharist-1)
advmod(called-4, also-3)
partmod(Eucharist-1, called-4)
nn(Communion-6, Holy-5)
poss(Supper-10, Communion-6)
conj_or(Communion-6, Lord-8)
poss(Supper-10, Lord-8)
dobj(called-4, Supper-10)
amod(names-13, other-12)
dobj(called-4, names-13)
conj_and(Supper-10, names-13)
root(ROOT-0, is-15)
det(sacraments-19, the-17)
amod(sacraments-19, Christian-18)
prep_of(is-15, sacraments-19)
rcmod(sacraments-19, said-20)
aux(instituted-24, to-21)
aux(instituted-24, have-22)
auxpass(instituted-24, been-23)
xcomp(said-20, instituted-24)
agent(instituted-24, Jesus-26)
prep_of(Jesus-26, Nazareth-28)

An Eclipse is an astronomical event that occurs when one celestial object moves into the shadow of another .

det(Eclipse-2, An-1)
nsubj(event-6, Eclipse-2)
cop(event-6, is-3)
det(event-6, an-4)
amod(event-6, astronomical-5)
root(ROOT-0, event-6)
nsubj(occurs-8, event-6)
rcmod(event-6, occurs-8)
advmod(moves-13, when-9)
num(object-12, one-10)
amod(object-12, celestial-11)
nsubj(moves-13, object-12)
advcl(occurs-8, moves-13)
det(shadow-16, the-15)
prep_into(moves-13, shadow-16)
prep_of(shadow-16, another-18)

An Exploit - LBR - from the same word in the French language , meaning `` achievement `` , or `` accomplishment `` - RBR - is a piece of software , a chunk of data , or sequence of commands that take advantage of a bug , glitch or vulnerability in order to cause unintended or unanticipated behavior to occur on computer software , hardware , or something electronic - LBR - usually computerized - RBR - .

det(Exploit-2, An-1)
nsubj(piece-29, Exploit-2)
dep(Exploit-2, LBR-4)
det(word-9, the-7)
amod(word-9, same-8)
prep_from(Exploit-2, word-9)
det(language-13, the-11)
amod(language-13, French-12)
prep_in(word-9, language-13)
partmod(language-13, meaning-15)
dep(meaning-15, achievement-17)
prep_in(word-9, accomplishment-22)
conj_or(language-13, accomplishment-22)
dep(accomplishment-22, RBR-25)
cop(piece-29, is-27)
det(piece-29, a-28)
root(ROOT-0, piece-29)
prep_of(piece-29, software-31)
det(chunk-34, a-33)
conj_or(piece-29, chunk-34)
prep_of(chunk-34, data-36)
conj_or(piece-29, sequence-39)
prep_of(sequence-39, commands-41)
nsubj(take-43, commands-41)
rcmod(commands-41, take-43)
dobj(take-43, advantage-44)
det(bug-47, a-46)
prep_of(advantage-44, bug-47)
prep_of(advantage-44, glitch-49)
conj_or(bug-47, glitch-49)
prep_of(advantage-44, vulnerability-51)
conj_or(bug-47, vulnerability-51)
prep_in(bug-47, order-53)
aux(cause-55, to-54)
xcomp(take-43, cause-55)
amod(behavior-59, unintended-56)
conj_or(unintended-56, unanticipated-58)
amod(behavior-59, unanticipated-58)
dobj(cause-55, behavior-59)
aux(occur-61, to-60)
xcomp(cause-55, occur-61)
nn(software-64, computer-63)
prep_on(occur-61, software-64)
prep_on(occur-61, hardware-66)
conj_or(software-64, hardware-66)
prep_on(occur-61, something-69)
conj_or(software-64, something-69)
amod(something-69, electronic-70)
dobj(take-43, LBR-72)
advmod(RBR-77, usually-74)
amod(RBR-77, computerized-75)
dep(LBR-72, RBR-77)

An Erg is the unit of energy and mechanical work in the centimetre-gram-second - LBR - CGS - RBR - system of units , symbol `` erg `` .

det(Erg-2, An-1)
nsubj(unit-5, Erg-2)
cop(unit-5, is-3)
det(unit-5, the-4)
root(ROOT-0, unit-5)
nn(work-10, energy-7)
conj_and(energy-7, mechanical-9)
nn(work-10, mechanical-9)
prep_of(unit-5, work-10)
det(centimetre-gram-second-13, the-12)
prep_in(work-10, centimetre-gram-second-13)
dep(centimetre-gram-second-13, LBR-15)
dep(centimetre-gram-second-13, CGS-17)
dep(centimetre-gram-second-13, RBR-19)
dep(centimetre-gram-second-13, system-21)
prep_of(work-10, units-23)
appos(units-23, symbol-25)
dep(symbol-25, erg-27)

In thermodynamics - LBR - a branch of physics - RBR - , Entropy is a measure of the unavailability of a systemÃ cents Â • Â˙s energy to do work .

prep_in(measure-17, thermodynamics-2)
dep(thermodynamics-2, LBR-4)
det(branch-7, a-6)
dep(thermodynamics-2, branch-7)
prep_of(thermodynamics-2, physics-9)
dep(physics-9, RBR-11)
nsubj(measure-17, Entropy-14)
cop(measure-17, is-15)
det(measure-17, a-16)
root(ROOT-0, measure-17)
det(unavailability-20, the-19)
prep_of(measure-17, unavailability-20)
det(energy-28, a-22)
number(cents-24, systemÃ-23)
num(energy-28, cents-24)
nn(energy-28, Â-25)
nn(energy-28, •-26)
nn(energy-28, Â˙s-27)
prep_of(unavailability-20, energy-28)
aux(do-30, to-29)
infmod(measure-17, do-30)
dobj(do-30, work-31)

An Elf is a creature of Germanic mythology .

det(Elf-2, An-1)
nsubj(creature-5, Elf-2)
cop(creature-5, is-3)
det(creature-5, a-4)
root(ROOT-0, creature-5)
amod(mythology-8, Germanic-7)
prep_of(creature-5, mythology-8)

According to religious texts , Ezekiel was a prophet and priest in the Bible who prophesied for 22 years sometime in the 6th century BCE in the form of visions while exiled in Babylon , as recorded in the Book of Ezekiel .

prepc_according_to(prophet-9, to-2)
amod(texts-4, religious-3)
pobj(prophet-9, texts-4)
nsubj(prophet-9, Ezekiel-6)
cop(prophet-9, was-7)
det(prophet-9, a-8)
root(ROOT-0, prophet-9)
nsubj(prophesied-16, prophet-9)
nsubj(recorded-37, prophet-9)
conj_and(prophet-9, priest-11)
nsubj(prophesied-16, priest-11)
nsubj(recorded-37, priest-11)
det(Bible-14, the-13)
prep_in(prophet-9, Bible-14)
rcmod(prophet-9, prophesied-16)
num(years-19, 22-18)
prep_for(prophesied-16, years-19)
advmod(prophesied-16, sometime-20)
det(BCE-25, the-22)
amod(BCE-25, 6th-23)
nn(BCE-25, century-24)
prep_in(prophesied-16, BCE-25)
det(form-28, the-27)
prep_in(prophesied-16, form-28)
prep_of(form-28, visions-30)
mark(exiled-32, while-31)
dep(visions-30, exiled-32)
prep_in(exiled-32, Babylon-34)
mark(recorded-37, as-36)
advcl(prophesied-16, recorded-37)
det(Book-40, the-39)
prep_in(recorded-37, Book-40)
prep_of(Book-40, Ezekiel-42)

The Equator is the intersection of the Earth 's surface with the plane perpendicular to the Earth 's axis of rotation and containing the Earth 's center of mass .

det(Equator-2, The-1)
nsubj(intersection-5, Equator-2)
cop(intersection-5, is-3)
det(intersection-5, the-4)
root(ROOT-0, intersection-5)
det(Earth-8, the-7)
poss(surface-10, Earth-8)
prep_of(intersection-5, surface-10)
det(perpendicular-14, the-12)
nn(perpendicular-14, plane-13)
prep_with(surface-10, perpendicular-14)
det(Earth-17, the-16)
poss(axis-19, Earth-17)
prep_to(perpendicular-14, axis-19)
prepc_of(intersection-5, rotation-21)
prepc_of(intersection-5, containing-23)
conj_and(rotation-21, containing-23)
det(Earth-25, the-24)
poss(center-27, Earth-25)
dobj(rotation-21, center-27)
prep_of(center-27, mass-29)

or ETA - LBR - Basque for `` Basque Homeland and Freedom `` ; Ã -- Â √ Ã ≈ Â˝Ã -- Â ∆ ta - RBR - , is an armed Basque nationalist separatist organization .

cc(ETA-2, or-1)
num(LBR-4, ETA-2)
nsubj(Basque-6, LBR-4)
root(ROOT-0, Basque-6)
mark(organization-36, for-7)
amod(Homeland-10, Basque-9)
conj_and(Homeland-10, Basque-9)
nsubj(organization-36, Basque-9)
nsubj(organization-36, Homeland-10)
conj_and(Homeland-10, Freedom-12)
nsubj(organization-36, Freedom-12)
dep(√-18, Ã-15)
nn(√-18, Â-17)
dep(Homeland-10, √-18)
nn(Â˝Ã-21, Ã-19)
nn(Â˝Ã-21, ≈-20)
dep(√-18, Â˝Ã-21)
nn(ta-25, Â-23)
nn(ta-25, ∆-24)
dep(Â˝Ã-21, ta-25)
dep(ta-25, RBR-27)
cop(organization-36, is-30)
det(organization-36, an-31)
amod(organization-36, armed-32)
amod(organization-36, Basque-33)
amod(organization-36, nationalist-34)
amod(organization-36, separatist-35)
advcl(Basque-6, organization-36)

The Essenes were , strictly speaking , an ascetic Jewish religious group that flourished from the 2nd century BC to the 1st century AD .

det(Essenes-2, The-1)
nsubj(group-12, Essenes-2)
cop(group-12, were-3)
dep(group-12, strictly-5)
dep(strictly-5, speaking-6)
det(group-12, an-8)
amod(group-12, ascetic-9)
amod(group-12, Jewish-10)
amod(group-12, religious-11)
root(ROOT-0, group-12)
nsubj(flourished-14, group-12)
rcmod(group-12, flourished-14)
det(BC-19, the-16)
amod(BC-19, 2nd-17)
nn(BC-19, century-18)
prep_from(flourished-14, BC-19)
det(AD-24, the-21)
num(AD-24, 1st-22)
nn(AD-24, century-23)
prep_to(flourished-14, AD-24)

The Evoluon - LBR - coor dms - RBR - is a conference center and former science museum erected by the electronics and electrical company Philips in Eindhoven , the Netherlands , in 1966 .

det(dms-7, The-1)
nn(dms-7, Evoluon-2)
dep(dms-7, LBR-4)
nn(dms-7, coor-6)
nsubj(center-14, dms-7)
dep(dms-7, RBR-9)
cop(center-14, is-11)
det(center-14, a-12)
nn(center-14, conference-13)
root(ROOT-0, center-14)
amod(museum-18, former-16)
nn(museum-18, science-17)
conj_and(center-14, museum-18)
rcmod(center-14, erected-19)
det(Philips-26, the-21)
nn(Philips-26, electronics-22)
conj_and(electronics-22, electrical-24)
nn(Philips-26, electrical-24)
nn(Philips-26, company-25)
prep_by(erected-19, Philips-26)
prep_in(erected-19, Eindhoven-28)
det(Netherlands-31, the-30)
appos(Eindhoven-28, Netherlands-31)
prep_in(erected-19, 1966-34)

An Electrode is an electrical conductor used to make contact with a nonmetallic part of a circuit - LBR - e. g. a semiconductor , an electrolyte or a vacuum - RBR - .

det(Electrode-2, An-1)
nsubj(conductor-6, Electrode-2)
cop(conductor-6, is-3)
det(conductor-6, an-4)
amod(conductor-6, electrical-5)
root(ROOT-0, conductor-6)
xsubj(make-9, conductor-6)
partmod(conductor-6, used-7)
aux(make-9, to-8)
xcomp(used-7, make-9)
dobj(make-9, contact-10)
det(part-14, a-12)
amod(part-14, nonmetallic-13)
prep_with(make-9, part-14)
det(circuit-17, a-16)
prep_of(part-14, circuit-17)
nn(RBR-32, LBR-19)
nn(g.-22, e.-21)
dep(RBR-32, g.-22)
det(semiconductor-24, a-23)
dep(g.-22, semiconductor-24)
det(electrolyte-27, an-26)
dep(g.-22, electrolyte-27)
conj_or(semiconductor-24, electrolyte-27)
det(vacuum-30, a-29)
dep(g.-22, vacuum-30)
conj_or(semiconductor-24, vacuum-30)
dep(part-14, RBR-32)

Eurasia is also sometimes used in geopolitics as a neutral way to refer to organizations of affairs concerning the post-Soviet states , in particular Russia , the Central Asian republics , and the Transcaucasian republics .

nsubjpass(used-5, Eurasia-1)
xsubj(refer-13, Eurasia-1)
auxpass(used-5, is-2)
advmod(used-5, also-3)
advmod(used-5, sometimes-4)
root(ROOT-0, used-5)
prep_in(used-5, geopolitics-7)
det(way-11, a-9)
amod(way-11, neutral-10)
prep_as(geopolitics-7, way-11)
aux(refer-13, to-12)
xcomp(used-5, refer-13)
prep_to(refer-13, organizations-15)
prep_of(organizations-15, affairs-17)
det(states-21, the-19)
amod(states-21, post-Soviet-20)
prep_concerning(affairs-17, states-21)
amod(Russia-25, particular-24)
prep_in(states-21, Russia-25)
det(republics-30, the-27)
amod(Asian-29, Central-28)
amod(republics-30, Asian-29)
prep_of(organizations-15, republics-30)
conj_and(affairs-17, republics-30)
det(republics-35, the-33)
amod(republics-35, Transcaucasian-34)
prep_of(organizations-15, republics-35)
conj_and(affairs-17, republics-35)

In statistics , an Estimator is a function of the observable sample data that is used to estimate an unknown population parameter - LBR - which is called the estimand - RBR - ; an estimate is the result from the actual application of the function to a particular sample of data .

prep_in(function-8, statistics-2)
det(Estimator-5, an-4)
nsubj(function-8, Estimator-5)
cop(function-8, is-6)
det(function-8, a-7)
root(ROOT-0, function-8)
det(data-13, the-10)
amod(data-13, observable-11)
nn(data-13, sample-12)
prep_of(function-8, data-13)
nsubjpass(used-16, data-13)
auxpass(used-16, is-15)
rcmod(data-13, used-16)
aux(estimate-18, to-17)
xcomp(used-16, estimate-18)
det(parameter-22, an-19)
amod(parameter-22, unknown-20)
nn(parameter-22, population-21)
dobj(estimate-18, parameter-22)
nsubjpass(called-28, parameter-22)
dep(parameter-22, LBR-24)
auxpass(called-28, is-27)
rcmod(parameter-22, called-28)
det(estimand-30, the-29)
dobj(called-28, estimand-30)
dep(data-13, RBR-32)
det(estimate-36, an-35)
nsubj(result-39, estimate-36)
cop(result-39, is-37)
det(result-39, the-38)
parataxis(function-8, result-39)
det(application-43, the-41)
amod(application-43, actual-42)
prep_from(result-39, application-43)
det(function-46, the-45)
prep_of(application-43, function-46)
det(sample-50, a-48)
amod(sample-50, particular-49)
prep_to(function-46, sample-50)
prep_of(sample-50, data-52)

An Epitaph - LBR - in Greek , ÃƒÂ ¡ Ã ‚ Ï $ Ã ‚ âˆ † Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ â $ ™ Ãƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâ „ Ã ‚ Â ¬ Ãƒâˆ ‚ Ã ‚ âˆ `` Ãƒâ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; - literally `` on the gravestone `` - RBR - is a short text honoring a deceased person , strictly speaking that inscribed on their tombstone or plaque , but also used figuratively .

det(Epitaph-2, An-1)
nsubj(text-87, Epitaph-2)
dep(Epitaph-2, LBR-4)
dep(LBR-4, in-6)
pobj(in-6, Greek-7)
nn(Ï-13, ÃƒÂ-9)
nn(Ï-13, ¡-10)
nn(Ï-13, Ã-11)
nn(Ï-13, ‚-12)
appos(Greek-7, Ï-13)
num(â-30, $-14)
number($-14, Ã-15)
number($-14, ‚-16)
nn(â-30, âˆ-17)
nn(â-30, †-18)
amod(â-30, Ãƒâˆ-19)
nn(â-30, ‚-20)
nn(â-30, Ã-21)
nn(â-30, ‚-22)
dep($-24, â-23)
dep(â-30, $-24)
num($-24, cents-25)
nn(â-30, Ãƒâ-26)
nn(â-30, „-27)
nn(â-30, Ã-28)
nn(â-30, ‚-29)
dep(Ï-13, â-30)
num(âˆ-50, $-31)
number($-31, ™-32)
number($-31, Ãƒâˆ-33)
nn(âˆ-50, ‚-34)
nn(âˆ-50, Ã-35)
nn(âˆ-50, ‚-36)
nn(âˆ-50, â-37)
nn(âˆ-50, ‰-38)
nn(âˆ-50, ¥-39)
nn(âˆ-50, Ãƒâ-40)
nn(âˆ-50, „-41)
nn(âˆ-50, Ã-42)
nn(âˆ-50, ‚-43)
nn(âˆ-50, Â-44)
nn(âˆ-50, ¬-45)
nn(âˆ-50, Ãƒâˆ-46)
nn(âˆ-50, ‚-47)
nn(âˆ-50, Ã-48)
nn(âˆ-50, ‚-49)
dep(Ï-13, âˆ-50)
nn(‚-55, Ãƒâ-52)
nn(‚-55, „-53)
nn(‚-55, Ã-54)
dep(âˆ-50, ‚-55)
num(‰-70, â-56)
num(‰-70, $-57)
number($-57, ™-58)
nn(‰-70, Ãƒâ-59)
nn(‰-70, „-60)
nn(‰-70, Ã-61)
nn(‰-70, ‚-62)
nn(‰-70, Â-63)
nn(‰-70, ¿-64)
nn(‰-70, Ãƒâˆ-65)
nn(‰-70, ‚-66)
nn(‰-70, Ã-67)
nn(‰-70, ‚-68)
nn(‰-70, â-69)
dep(‚-55, ‰-70)
dep(‚-55, nbsp-72)
conj_and(‰-70, nbsp-72)
advmod(LBR-4, literally-75)
det(RBR-82, the-78)
nn(RBR-82, gravestone-79)
prep_on(LBR-4, RBR-82)
cop(text-87, is-84)
det(text-87, a-85)
amod(text-87, short-86)
root(ROOT-0, text-87)
partmod(text-87, honoring-88)
det(person-91, a-89)
amod(person-91, deceased-90)
dobj(honoring-88, person-91)
advmod(speaking-94, strictly-93)
partmod(honoring-88, speaking-94)
xcomp(honoring-88, speaking-94)
complm(inscribed-96, that-95)
ccomp(speaking-94, inscribed-96)
poss(tombstone-99, their-98)
prep_on(inscribed-96, tombstone-99)
prep_on(inscribed-96, plaque-101)
conj_or(tombstone-99, plaque-101)
advmod(used-105, also-104)
ccomp(speaking-94, used-105)
conj_but(inscribed-96, used-105)
acomp(used-105, figuratively-106)

An Epigram is a short poem , often with a clever twist at the end or a concise and witty statement .

det(Epigram-2, An-1)
nsubj(poem-6, Epigram-2)
cop(poem-6, is-3)
det(poem-6, a-4)
amod(poem-6, short-5)
root(ROOT-0, poem-6)
advmod(poem-6, often-8)
det(twist-12, a-10)
amod(twist-12, clever-11)
prep_with(often-8, twist-12)
det(end-15, the-14)
prep_at(twist-12, end-15)
det(concise-18, a-17)
conj_or(poem-6, concise-18)
amod(statement-21, witty-20)
conj_or(poem-6, statement-21)
conj_and(concise-18, statement-21)

An Escalator is a conveyor transport device for transporting people , consisting of individual , linked steps that move -LRB- PRT -RRB- up -LRB- \/ PRT -RRB- or -LRB- PRT -RRB- down -LRB- \/ PRT -RRB- on tracks , which keep the treads horizontal .

det(Escalator-2, An-1)
nsubj(device-7, Escalator-2)
cop(device-7, is-3)
det(device-7, a-4)
nn(device-7, conveyor-5)
nn(device-7, transport-6)
root(ROOT-0, device-7)
prepc_for(device-7, transporting-9)
nsubj(linked-16, people-10)
partmod(people-10, consisting-12)
prep_of(consisting-12, individual-14)
ccomp(transporting-9, linked-16)
dobj(linked-16, steps-17)
det(move-19, that-18)
npadvmod(up-23, move-19)
abbrev(move-19, PRT-21)
advmod(steps-17, up-23)
nn(PRT-26, \/-25)
abbrev(steps-17, PRT-26)
abbrev(steps-17, PRT-30)
dobj(linked-16, down-32)
conj_or(steps-17, down-32)
nn(PRT-35, \/-34)
abbrev(steps-17, PRT-35)
prep_on(linked-16, tracks-38)
nsubj(keep-41, tracks-38)
rcmod(tracks-38, keep-41)
det(horizontal-44, the-42)
amod(horizontal-44, treads-43)
dobj(keep-41, horizontal-44)

An Elevator or lift is a transport device used to move goods or people vertically , from one floor to another .

det(Elevator-2, An-1)
nsubj(device-8, Elevator-2)
conj_or(Elevator-2, lift-4)
nsubj(device-8, lift-4)
cop(device-8, is-5)
det(device-8, a-6)
nn(device-8, transport-7)
root(ROOT-0, device-8)
xsubj(move-11, device-8)
partmod(device-8, used-9)
aux(move-11, to-10)
xcomp(used-9, move-11)
dobj(move-11, goods-12)
dobj(move-11, people-14)
conj_or(goods-12, people-14)
advmod(move-11, vertically-15)
num(floor-19, one-18)
prep_from(move-11, floor-19)
prep_to(floor-19, another-21)

In astronomy , Equinox refers to the Sun which is positioned directly over the Earth 's equator and , by extension , the apparent position of the Sun at that moment , or the time that it happens .

prep_in(refers-5, astronomy-2)
nsubj(refers-5, Equinox-4)
root(ROOT-0, refers-5)
det(Sun-8, the-7)
prep_to(refers-5, Sun-8)
nsubjpass(positioned-11, Sun-8)
auxpass(positioned-11, is-10)
rcmod(Sun-8, positioned-11)
advmod(positioned-11, directly-12)
det(Earth-15, the-14)
poss(equator-17, Earth-15)
prep_over(positioned-11, equator-17)
dep(equator-17, by-20)
pobj(by-20, extension-21)
det(position-25, the-23)
amod(position-25, apparent-24)
prep_over(positioned-11, position-25)
conj_and(equator-17, position-25)
det(Sun-28, the-27)
prep_of(equator-17, Sun-28)
det(moment-31, that-30)
prep_at(positioned-11, moment-31)
det(time-35, the-34)
prep_to(refers-5, time-35)
conj_or(Sun-8, time-35)
nsubjpass(positioned-11, time-35)
dobj(happens-38, time-35)
complm(happens-38, that-36)
nsubj(happens-38, it-37)
dep(time-35, happens-38)

An Earthquake is the result of a sudden release of energy in the Earth 's crust that creates seismic waves .

det(Earthquake-2, An-1)
nsubj(result-5, Earthquake-2)
cop(result-5, is-3)
det(result-5, the-4)
root(ROOT-0, result-5)
nsubj(creates-18, result-5)
det(release-9, a-7)
amod(release-9, sudden-8)
prep_of(result-5, release-9)
prep_of(release-9, energy-11)
det(Earth-14, the-13)
poss(crust-16, Earth-14)
prep_in(energy-11, crust-16)
rcmod(result-5, creates-18)
amod(waves-20, seismic-19)
dobj(creates-18, waves-20)

An Emperor is a - LBR - male - RBR - monarch , usually the sovereign ruler of an empire or another type of imperial realm .

det(Emperor-2, An-1)
nsubj(RBR-10, Emperor-2)
cop(RBR-10, is-3)
det(RBR-10, a-4)
nn(RBR-10, LBR-6)
dep(RBR-10, male-8)
root(ROOT-0, RBR-10)
conj_or(RBR-10, monarch-12)
advmod(ruler-17, usually-14)
det(ruler-17, the-15)
amod(ruler-17, sovereign-16)
conj_or(RBR-10, ruler-17)
det(empire-20, an-19)
prep_of(ruler-17, empire-20)
det(type-23, another-22)
conj_or(RBR-10, type-23)
amod(realm-26, imperial-25)
prep_of(type-23, realm-26)

In Greek mythology the Erinyes - LBR - Ãƒâﾁ „ Ã ‚ ï # ¿ Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâﾁ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ âˆ Ãƒâˆ ‚ Ã ‚ Å ¸ Ãƒâ „ Ã ‚ ÂµÃƒâˆ ‚ Ã ‚ â ‰ & nbsp ; - RBR - or Eumenides - LBR - or Furies in Roman mythology - RBR - were female , chthonic deities of vengeance or supernatural personifications of the anger of the dead .

amod(mythology-3, Greek-2)
prep_in(deities-74, mythology-3)
det(Erinyes-5, the-4)
nsubj(deities-74, Erinyes-5)
dep(Erinyes-5, LBR-7)
number(„-10, Ãƒâﾁ-9)
dep(LBR-7, „-10)
nn(ï-13, Ã-11)
nn(ï-13, ‚-12)
dep(â-27, ï-13)
number(Ãƒâˆ-16, #-14)
number(Ãƒâˆ-16, ¿-15)
dep(ï-13, Ãƒâˆ-16)
nn(Ã-18, ‚-17)
dep(Ãƒâˆ-16, Ã-18)
nn(cents-22, ‚-19)
nn(cents-22, â-20)
amod(cents-22, „-21)
dep(â-27, cents-22)
nn(â-27, Ãƒâﾁ-23)
nn(â-27, „-24)
nn(â-27, Ã-25)
nn(â-27, ‚-26)
dep(‰-50, â-27)
dep(â-27, $-28)
num($-28, ™-29)
nn(‰-50, Ãƒâ-30)
nn(‰-50, „-31)
nn(‰-50, Ã-32)
nn(‰-50, ‚-33)
nn(‰-50, âˆ-34)
nn(‰-50, Ãƒâˆ-35)
nn(‰-50, ‚-36)
nn(‰-50, Ã-37)
nn(‰-50, ‚-38)
nn(‰-50, Å-39)
nn(‰-50, ¸-40)
nn(‰-50, Ãƒâ-41)
nn(‰-50, „-42)
nn(‰-50, Ã-43)
nn(‰-50, ‚-44)
nn(‰-50, ÂµÃƒâˆ-45)
nn(‰-50, ‚-46)
nn(‰-50, Ã-47)
nn(‰-50, ‚-48)
nn(‰-50, â-49)
dep(LBR-7, ‰-50)
dep(Erinyes-5, nbsp-52)
conj_and(LBR-7, nbsp-52)
nn(LBR-60, RBR-55)
dep(Eumenides-58, or-57)
dep(LBR-60, Eumenides-58)
dep(Erinyes-5, LBR-60)
dep(Furies-63, or-62)
dep(LBR-60, Furies-63)
nn(mythology-66, Roman-65)
prep_in(Furies-63, mythology-66)
dep(LBR-60, RBR-68)
cop(deities-74, were-70)
amod(deities-74, female-71)
amod(deities-74, chthonic-73)
root(ROOT-0, deities-74)
nn(personifications-79, vengeance-76)
conj_or(vengeance-76, supernatural-78)
nn(personifications-79, supernatural-78)
prep_of(deities-74, personifications-79)
det(anger-82, the-81)
prep_of(personifications-79, anger-82)
det(dead-85, the-84)
prep_of(anger-82, dead-85)

An Empire - LBR - from the Latin `` imperium `` , denoting military command within the ancient Roman government - RBR - is a state that extends dominion over populations distinct culturally and ethnically from the culture \/ ethnicity at the center of power .

det(Empire-2, An-1)
nsubj(state-26, Empire-2)
nn(RBR-22, LBR-4)
det(imperium-10, the-7)
amod(imperium-10, Latin-8)
prep_from(command-15, imperium-10)
amod(military-14, denoting-13)
dep(imperium-10, military-14)
dep(RBR-22, command-15)
det(government-20, the-17)
amod(government-20, ancient-18)
nn(government-20, Roman-19)
prep_within(command-15, government-20)
dep(Empire-2, RBR-22)
cop(state-26, is-24)
det(state-26, a-25)
root(ROOT-0, state-26)
nsubj(extends-28, state-26)
rcmod(state-26, extends-28)
dobj(extends-28, dominion-29)
prep_over(extends-28, populations-31)
amod(culturally-33, distinct-32)
amod(populations-31, culturally-33)
rcmod(state-26, ethnically-35)
conj_and(extends-28, ethnically-35)
det(ethnicity-40, the-37)
nn(ethnicity-40, culture-38)
nn(ethnicity-40, \/-39)
prep_from(ethnically-35, ethnicity-40)
det(center-43, the-42)
prep_at(ethnically-35, center-43)
prep_of(center-43, power-45)

In Greek mythology , Eurystheus was king of Tiryns , one of three Mycenaean strongholds in the Argolid : Sthenelus was his father and the `` horsewoman `` Nicippe his mother , and he was a grandson of the hero Perseus , as was his opponent Heracles .

amod(mythology-3, Greek-2)
prep_in(king-7, mythology-3)
nsubj(king-7, Eurystheus-5)
cop(king-7, was-6)
root(ROOT-0, king-7)
prep_of(king-7, Tiryns-9)
appos(Tiryns-9, one-11)
num(strongholds-15, three-13)
amod(strongholds-15, Mycenaean-14)
prep_of(one-11, strongholds-15)
det(Argolid-18, the-17)
prep_in(strongholds-15, Argolid-18)
nsubj(father-23, Sthenelus-20)
cop(father-23, was-21)
poss(father-23, his-22)
parataxis(king-7, father-23)
det(Nicippe-29, the-25)
amod(Nicippe-29, horsewoman-27)
parataxis(king-7, Nicippe-29)
conj_and(father-23, Nicippe-29)
poss(mother-31, his-30)
dep(Nicippe-29, mother-31)
nsubj(grandson-37, he-34)
cop(grandson-37, was-35)
det(grandson-37, a-36)
parataxis(king-7, grandson-37)
conj_and(father-23, grandson-37)
det(Perseus-41, the-39)
nn(Perseus-41, hero-40)
prep_of(grandson-37, Perseus-41)
mark(Heracles-47, as-43)
cop(Heracles-47, was-44)
poss(Heracles-47, his-45)
nn(Heracles-47, opponent-46)
advcl(grandson-37, Heracles-47)

In philosophy , Empiricism is a theory of knowledge that is practical rather than abstract , and asserts that knowledge arises from experience rather than revelation .

prep_in(theory-7, philosophy-2)
nsubj(theory-7, Empiricism-4)
cop(theory-7, is-5)
det(theory-7, a-6)
root(ROOT-0, theory-7)
nsubj(practical-12, theory-7)
nsubj(asserts-18, theory-7)
prep_of(theory-7, knowledge-9)
cop(practical-12, is-11)
rcmod(theory-7, practical-12)
advmod(practical-12, rather-13)
prep_than(practical-12, abstract-15)
rcmod(theory-7, asserts-18)
conj_and(practical-12, asserts-18)
complm(arises-21, that-19)
nsubj(arises-21, knowledge-20)
ccomp(asserts-18, arises-21)
prep_from(arises-21, experience-23)
prep_from(arises-21, revelation-26)
conj_negcc(experience-23, revelation-26)

In thermodynamics , the word Exothermic describes a process or reaction that releases energy usually in the form of heat , but it can also release energy in form of light - LBR - e. g. explosions - RBR - , sound , or electricity - LBR - e. g. a battery - RBR - .

prep_in(describes-7, thermodynamics-2)
det(Exothermic-6, the-4)
nn(Exothermic-6, word-5)
nsubj(describes-7, Exothermic-6)
dep(LBR-33, describes-7)
det(process-9, a-8)
dobj(describes-7, process-9)
nsubj(releases-13, process-9)
dobj(describes-7, reaction-11)
conj_or(process-9, reaction-11)
nsubj(releases-13, reaction-11)
rcmod(process-9, releases-13)
dobj(releases-13, energy-14)
advmod(releases-13, usually-15)
det(form-18, the-17)
prep_in(releases-13, form-18)
prep_of(form-18, heat-20)
nsubj(release-26, it-23)
aux(release-26, can-24)
advmod(release-26, also-25)
conj_but(describes-7, release-26)
dep(LBR-33, release-26)
dobj(release-26, energy-27)
prep_in(release-26, form-29)
prep_of(form-29, light-31)
root(ROOT-0, LBR-33)
nn(explosions-37, e.-35)
nn(explosions-37, g.-36)
dep(LBR-33, explosions-37)
dep(explosions-37, RBR-39)
dep(explosions-37, sound-42)
conj_or(RBR-39, sound-42)
dep(explosions-37, electricity-45)
conj_or(RBR-39, electricity-45)
dep(explosions-37, LBR-47)
dep(LBR-33, e.-49)
ccomp(e.-49, g.-50)
det(battery-52, a-51)
dobj(g.-50, battery-52)
dep(battery-52, RBR-54)

The Euphrates - LBR - Arabic : lang , transl ; Turkish : lang ; Syriac : lang , transl ; Hebrew : lang , transl - RBR - is the western of the two great rivers that define Mesopotamia - LBR - the other being the Tigris - RBR - which flows from Anatolia .

det(Euphrates-2, The-1)
root(ROOT-0, Euphrates-2)
dep(Euphrates-2, LBR-4)
dep(LBR-4, Arabic-6)
dep(Euphrates-2, lang-8)
dep(Euphrates-2, transl-10)
dep(transl-10, Turkish-12)
dep(Turkish-12, lang-14)
dep(lang-14, Syriac-16)
amod(transl-20, lang-18)
amod(Syriac-16, transl-20)
dep(Turkish-12, Hebrew-22)
dep(transl-10, lang-24)
nsubj(western-32, transl-26)
dep(transl-26, RBR-28)
cop(western-32, is-30)
det(western-32, the-31)
dep(LBR-42, western-32)
det(rivers-37, the-34)
num(rivers-37, two-35)
amod(rivers-37, great-36)
prep_of(western-32, rivers-37)
nsubj(define-39, rivers-37)
rcmod(rivers-37, define-39)
dobj(define-39, Mesopotamia-40)
dep(transl-10, LBR-42)
det(other-45, the-44)
nsubj(Tigris-48, other-45)
cop(Tigris-48, being-46)
det(Tigris-48, the-47)
dep(LBR-42, Tigris-48)
dep(Tigris-48, RBR-50)
nsubj(flows-53, which-52)
ccomp(Tigris-48, flows-53)
prep_from(flows-53, Anatolia-55)

In linguistics , E-Prime is a modified English syntax and vocabulary lacking all forms of the verb to be : be , is , am , are , was , were , been and being , and also their contractions .

prep_in(syntax-9, linguistics-2)
nsubj(syntax-9, E-Prime-4)
cop(syntax-9, is-5)
det(syntax-9, a-6)
amod(syntax-9, modified-7)
amod(syntax-9, English-8)
root(ROOT-0, syntax-9)
conj_and(syntax-9, vocabulary-11)
partmod(vocabulary-11, lacking-12)
det(forms-14, all-13)
dobj(lacking-12, forms-14)
det(verb-17, the-16)
prep_of(forms-14, verb-17)
aux(be-19, to-18)
infmod(verb-17, be-19)
dep(be-19, be-21)
ccomp(be-21, is-23)
dep(is-23, am-25)
dep(is-23, are-27)
dep(is-23, was-29)
dep(is-23, were-31)
ccomp(is-23, been-33)
ccomp(is-23, being-35)
conj_and(been-33, being-35)
advmod(contractions-40, also-38)
poss(contractions-40, their-39)
conj_and(syntax-9, contractions-40)

In psychology , Egolessness is an emotional state where one feels no ego - LBR - or self - RBR - ; of having no distinct being apart from the world around oneself .

prep_in(state-8, psychology-2)
nsubj(state-8, Egolessness-4)
cop(state-8, is-5)
det(state-8, an-6)
amod(state-8, emotional-7)
root(ROOT-0, state-8)
advmod(feels-11, where-9)
nsubj(feels-11, one-10)
rcmod(state-8, feels-11)
det(ego-13, no-12)
dobj(feels-11, ego-13)
nn(RBR-20, LBR-15)
dep(self-18, or-17)
dep(RBR-20, self-18)
dep(ego-13, RBR-20)
prepc_of(state-8, having-24)
det(being-27, no-25)
amod(being-27, distinct-26)
dobj(having-24, being-27)
det(world-31, the-30)
prep_apart_from(having-24, world-31)
prep_around(world-31, oneself-33)

The Enterobacteriaceae are a large family of bacteria , including many of the more familiar pathogens , such as Salmonella and Escherichia coli .

det(Enterobacteriaceae-2, The-1)
nsubj(family-6, Enterobacteriaceae-2)
cop(family-6, are-3)
det(family-6, a-4)
amod(family-6, large-5)
root(ROOT-0, family-6)
prep_of(family-6, bacteria-8)
prep_including(family-6, many-11)
det(pathogens-16, the-13)
advmod(familiar-15, more-14)
amod(pathogens-16, familiar-15)
prep_of(many-11, pathogens-16)
nn(coli-23, Salmonella-20)
conj_and(Salmonella-20, Escherichia-22)
nn(coli-23, Escherichia-22)
prep_such_as(many-11, coli-23)

The Epipaleolithic or `` peripheral old stone age `` is a term used for the hunter-gatherer cultures that existed after the end of the last Ice Age , before the Neolithic .

det(Epipaleolithic-2, The-1)
nsubj(term-12, Epipaleolithic-2)
advmod(age-8, peripheral-5)
amod(age-8, old-6)
nn(age-8, stone-7)
conj_or(Epipaleolithic-2, age-8)
nsubj(term-12, age-8)
cop(term-12, is-10)
det(term-12, a-11)
dep(existed-19, term-12)
partmod(term-12, used-13)
det(cultures-17, the-15)
amod(cultures-17, hunter-gatherer-16)
prep_for(used-13, cultures-17)
nsubj(existed-19, that-18)
root(ROOT-0, existed-19)
det(end-22, the-21)
prep_after(existed-19, end-22)
det(Age-27, the-24)
amod(Age-27, last-25)
nn(Age-27, Ice-26)
prep_of(end-22, Age-27)
det(Neolithic-31, the-30)
prep_before(existed-19, Neolithic-31)

In political science and constitutional law , the Executive is the branch of government responsible for the day-to-day management of the state .

amod(science-3, political-2)
prep_in(branch-12, science-3)
amod(law-6, constitutional-5)
conj_and(science-3, law-6)
prep_in(branch-12, law-6)
det(Executive-9, the-8)
nsubj(branch-12, Executive-9)
cop(branch-12, is-10)
det(branch-12, the-11)
root(ROOT-0, branch-12)
prep_of(branch-12, government-14)
amod(government-14, responsible-15)
det(management-19, the-17)
amod(management-19, day-to-day-18)
prep_for(responsible-15, management-19)
det(state-22, the-21)
prep_of(management-19, state-22)

An Emulsion is a mixture of two immiscible - LBR - unblendable - RBR - substances .

det(Emulsion-2, An-1)
nsubj(mixture-5, Emulsion-2)
cop(mixture-5, is-3)
det(mixture-5, a-4)
root(ROOT-0, mixture-5)
num(immiscible-8, two-7)
prep_of(mixture-5, immiscible-8)
dep(immiscible-8, LBR-10)
dep(immiscible-8, unblendable-12)
dep(immiscible-8, RBR-14)
dep(immiscible-8, substances-16)

In cryptography , Encryption is the process of transforming information - LBR - referred to as plaintext - RBR - using an algorithm - LBR - called cipher - RBR - to make it unreadable to anyone except those possessing special knowledge , usually referred to as a key .

prep_in(process-7, cryptography-2)
nsubj(process-7, Encryption-4)
cop(process-7, is-5)
det(process-7, the-6)
root(ROOT-0, process-7)
prepc_of(process-7, transforming-9)
dobj(transforming-9, information-10)
dep(information-10, LBR-12)
parataxis(LBR-12, referred-14)
xcomp(referred-14, to-15)
prep_as(referred-14, plaintext-17)
parataxis(LBR-12, RBR-19)
parataxis(LBR-12, using-21)
det(algorithm-23, an-22)
dobj(using-21, algorithm-23)
parataxis(LBR-12, LBR-25)
parataxis(LBR-12, called-27)
dobj(called-27, cipher-28)
parataxis(LBR-12, RBR-30)
aux(make-33, to-32)
parataxis(LBR-12, make-33)
nsubj(possessing-40, it-34)
dep(possessing-40, unreadable-35)
prep_to(unreadable-35, anyone-37)
prep_except(anyone-37, those-39)
xcomp(make-33, possessing-40)
amod(knowledge-42, special-41)
dobj(possessing-40, knowledge-42)
advmod(referred-45, usually-44)
dep(LBR-12, referred-45)
advmod(key-49, as-47)
det(key-49, a-48)
prep_to(referred-45, key-49)

An Esbat is a ritual observance of the full moon within Wicca and other Wiccan-influenced forms of Neopaganism .

det(Esbat-2, An-1)
nsubj(observance-6, Esbat-2)
cop(observance-6, is-3)
det(observance-6, a-4)
nn(observance-6, ritual-5)
root(ROOT-0, observance-6)
det(moon-10, the-8)
amod(moon-10, full-9)
prep_of(observance-6, moon-10)
prep_within(moon-10, Wicca-12)
amod(forms-16, other-14)
amod(forms-16, Wiccan-influenced-15)
prep_of(observance-6, forms-16)
conj_and(moon-10, forms-16)
prep_of(forms-16, Neopaganism-18)

The Embouchure is the use of facial muscles and the shaping of the lips to the mouthpiece of a wind instrument .

det(Embouchure-2, The-1)
nsubj(use-5, Embouchure-2)
cop(use-5, is-3)
det(use-5, the-4)
root(ROOT-0, use-5)
amod(muscles-8, facial-7)
prep_of(use-5, muscles-8)
det(shaping-11, the-10)
conj_and(use-5, shaping-11)
det(lips-14, the-13)
prep_of(shaping-11, lips-14)
det(mouthpiece-17, the-16)
prep_to(lips-14, mouthpiece-17)
det(instrument-21, a-19)
nn(instrument-21, wind-20)
prep_of(mouthpiece-17, instrument-21)

The Euphonium is a conical-bore , baritone-voiced brass instrument .

det(Euphonium-2, The-1)
nsubj(instrument-9, Euphonium-2)
cop(instrument-9, is-3)
det(instrument-9, a-4)
amod(instrument-9, conical-bore-5)
amod(instrument-9, baritone-voiced-7)
nn(instrument-9, brass-8)
root(ROOT-0, instrument-9)

An Essay is a short piece of writing .

det(Essay-2, An-1)
nsubj(piece-6, Essay-2)
cop(piece-6, is-3)
det(piece-6, a-4)
amod(piece-6, short-5)
root(ROOT-0, piece-6)
prepc_of(piece-6, writing-8)

An Emotion is a mental and physiological state associated with a wide variety of feelings , thoughts , and behaviors .

det(Emotion-2, An-1)
nsubj(state-8, Emotion-2)
cop(state-8, is-3)
det(state-8, a-4)
amod(state-8, mental-5)
conj_and(mental-5, physiological-7)
amod(state-8, physiological-7)
root(ROOT-0, state-8)
partmod(state-8, associated-9)
det(variety-13, a-11)
amod(variety-13, wide-12)
prep_with(associated-9, variety-13)
prep_of(variety-13, feelings-15)
prep_of(variety-13, thoughts-17)
conj_and(feelings-15, thoughts-17)
prep_of(variety-13, behaviors-20)
conj_and(feelings-15, behaviors-20)

Murakami - LBR - ÃƒÅ `` Ã ‚ Ë ‡ Ã ‚ Å ' Ãƒâ ‚ ¬ Ã ‚ Â ¸ Ã ‚ â $ ¦ `` upper village `` - RBR - is a Japanese surname .

nsubj(surname-37, Murakami-1)
dep(Murakami-1, LBR-3)
nn(Ã-11, ÃƒÅ-5)
nn(Ã-11, Ã-7)
nn(Ã-11, ‚-8)
nn(Ã-11, Ë-9)
nn(Ã-11, ‡-10)
dep(LBR-3, Ã-11)
nn(Å-13, ‚-12)
poss(â-24, Å-13)
nn(â-24, Ãƒâ-15)
nn(â-24, ‚-16)
nn(â-24, ¬-17)
nn(â-24, Ã-18)
nn(â-24, ‚-19)
nn(â-24, Â-20)
nn(â-24, ¸-21)
nn(â-24, Ã-22)
nn(â-24, ‚-23)
dep(Ã-11, â-24)
dep(Ã-11, $-25)
num($-25, ¦-26)
amod(RBR-32, upper-28)
nn(RBR-32, village-29)
dep($-25, RBR-32)
cop(surname-37, is-34)
det(surname-37, a-35)
amod(surname-37, Japanese-36)
root(ROOT-0, surname-37)

The Flute is a musical instrument of the woodwind family .

det(Flute-2, The-1)
nsubj(instrument-6, Flute-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, musical-5)
root(ROOT-0, instrument-6)
det(family-10, the-8)
nn(family-10, woodwind-9)
prep_of(instrument-6, family-10)

In abstract algebra , a Field is an algebraic structure in which the operations of addition , subtraction , multiplication and division - LBR - except division by zero - RBR - may be performed , and the same rules hold which are familiar from the arithmetic of ordinary numbers .

amod(algebra-3, abstract-2)
prep_in(structure-10, algebra-3)
det(Field-6, a-5)
nsubj(structure-10, Field-6)
cop(structure-10, is-7)
det(structure-10, an-8)
amod(structure-10, algebraic-9)
root(ROOT-0, structure-10)
rel(performed-35, which-12)
det(operations-14, the-13)
nsubjpass(performed-35, operations-14)
prep_of(operations-14, addition-16)
prep_of(operations-14, subtraction-18)
conj_and(addition-16, subtraction-18)
prep_of(operations-14, multiplication-20)
conj_and(addition-16, multiplication-20)
prep_of(operations-14, division-22)
conj_and(addition-16, division-22)
dep(operations-14, LBR-24)
prep_except(operations-14, division-27)
prep_by(division-27, zero-29)
dep(operations-14, RBR-31)
aux(performed-35, may-33)
auxpass(performed-35, be-34)
rcmod(structure-10, performed-35)
det(hold-41, the-38)
amod(hold-41, same-39)
nn(hold-41, rules-40)
conj_and(structure-10, hold-41)
nsubj(familiar-44, hold-41)
cop(familiar-44, are-43)
rcmod(hold-41, familiar-44)
det(arithmetic-47, the-46)
prep_from(familiar-44, arithmetic-47)
amod(numbers-50, ordinary-49)
prep_of(arithmetic-47, numbers-50)

The term Fiddle refers to a violin ; it is a colloquial term for the instrument used by players in all genres , including classical music .

det(Fiddle-3, The-1)
nn(Fiddle-3, term-2)
nsubj(refers-4, Fiddle-3)
root(ROOT-0, refers-4)
det(violin-7, a-6)
prep_to(refers-4, violin-7)
nsubj(term-13, it-9)
cop(term-13, is-10)
det(term-13, a-11)
amod(term-13, colloquial-12)
parataxis(refers-4, term-13)
det(instrument-16, the-15)
prep_for(term-13, instrument-16)
partmod(instrument-16, used-17)
agent(used-17, players-19)
det(genres-22, all-21)
prep_in(players-19, genres-22)
amod(music-26, classical-25)
prep_including(instrument-16, music-26)

The Flugelhorn - LBR - also spelled fluegelhorn or flÃƒâˆžÃ ‚ Ï $ gelhorn - RBR - is a brass instrument resembling a trumpet but with a wider , conical bore .

det(Flugelhorn-2, The-1)
nsubj(instrument-21, Flugelhorn-2)
nn(RBR-16, LBR-4)
dep(fluegelhorn-8, also-6)
amod(fluegelhorn-8, spelled-7)
dep(RBR-16, fluegelhorn-8)
nn(Ï-12, flÃƒâˆžÃ-10)
nn(Ï-12, ‚-11)
conj_or(fluegelhorn-8, Ï-12)
dep(RBR-16, Ï-12)
dep(fluegelhorn-8, $-13)
num($-13, gelhorn-14)
dep(Flugelhorn-2, RBR-16)
cop(instrument-21, is-18)
det(instrument-21, a-19)
nn(instrument-21, brass-20)
root(ROOT-0, instrument-21)
partmod(instrument-21, resembling-22)
det(trumpet-24, a-23)
attr(resembling-22, trumpet-24)
cc(resembling-22, but-25)
det(bore-31, a-27)
amod(bore-31, wider-28)
amod(bore-31, conical-30)
prep_with(resembling-22, bore-31)

In currency , Frank - LBR - or franc - RBR - refers to the currency of Switzerland since 1850 .

prep_in(refers-13, currency-2)
nsubj(refers-13, Frank-4)
amod(Frank-4, LBR-6)
amod(Frank-4, franc-9)
conj_or(LBR-6, franc-9)
dep(Frank-4, RBR-11)
root(ROOT-0, refers-13)
det(currency-16, the-15)
prep_to(refers-13, currency-16)
prep_of(currency-16, Switzerland-18)
prep_since(refers-13, 1850-20)

In mathematical terms , a Fullerene is a trivalent convex polyhedron with pentagonal and hexagonal faces .

amod(terms-3, mathematical-2)
prep_in(polyhedron-11, terms-3)
det(Fullerene-6, a-5)
nsubj(polyhedron-11, Fullerene-6)
cop(polyhedron-11, is-7)
det(polyhedron-11, a-8)
amod(polyhedron-11, trivalent-9)
nn(polyhedron-11, convex-10)
root(ROOT-0, polyhedron-11)
amod(faces-16, pentagonal-13)
conj_and(pentagonal-13, hexagonal-15)
amod(faces-16, hexagonal-15)
prep_with(polyhedron-11, faces-16)

The order Falconiformes is a group of about 290 species of birds that include the diurnal birds of prey .

det(Falconiformes-3, The-1)
nn(Falconiformes-3, order-2)
nsubj(group-6, Falconiformes-3)
cop(group-6, is-4)
det(group-6, a-5)
root(ROOT-0, group-6)
quantmod(290-9, about-8)
num(species-10, 290-9)
prep_of(group-6, species-10)
prep_of(species-10, birds-12)
nsubj(include-14, birds-12)
rcmod(birds-12, include-14)
det(birds-17, the-15)
amod(birds-17, diurnal-16)
dobj(include-14, birds-17)
prep_of(birds-17, prey-19)

The Fagales are an order of flowering plants , including some of the best known trees .

det(Fagales-2, The-1)
nsubj(order-5, Fagales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(plants-8, flowering-7)
prep_of(order-5, plants-8)
prep_including(plants-8, some-11)
det(trees-16, the-13)
dep(known-15, best-14)
amod(trees-16, known-15)
prep_of(some-11, trees-16)

A Fantasy is a situation imagined by an individual or group , which does not correspond with reality but expresses certain desires or aims of its creator .

det(Fantasy-2, A-1)
nsubj(situation-5, Fantasy-2)
cop(situation-5, is-3)
det(situation-5, a-4)
root(ROOT-0, situation-5)
partmod(situation-5, imagined-6)
det(individual-9, an-8)
agent(imagined-6, individual-9)
nsubj(correspond-16, individual-9)
nsubj(expresses-20, individual-9)
agent(imagined-6, group-11)
conj_or(individual-9, group-11)
nsubj(correspond-16, group-11)
aux(correspond-16, does-14)
neg(correspond-16, not-15)
rcmod(individual-9, correspond-16)
prep_with(correspond-16, reality-18)
rcmod(individual-9, expresses-20)
conj_but(correspond-16, expresses-20)
amod(desires-22, certain-21)
dobj(expresses-20, desires-22)
dobj(expresses-20, aims-24)
conj_or(desires-22, aims-24)
poss(creator-27, its-26)
prep_of(desires-22, creator-27)

A Stage is in stratigraphy the succession of rock strata laid -LRB- PRT -RRB- down -LRB- \/ PRT -RRB- in an age of the geologic timescale .

det(Stage-2, A-1)
nsubj(is-3, Stage-2)
root(ROOT-0, is-3)
advmod(succession-7, stratigraphy-5)
det(succession-7, the-6)
prep_in(is-3, succession-7)
nn(strata-10, rock-9)
prep_of(succession-7, strata-10)
partmod(strata-10, laid-11)
dep(laid-11, PRT-13)
advmod(PRT-13, down-15)
nn(PRT-18, \/-17)
abbrev(succession-7, PRT-18)
det(age-22, an-21)
prep_in(succession-7, age-22)
det(timescale-26, the-24)
amod(timescale-26, geologic-25)
prep_of(age-22, timescale-26)

A Fetus - LBR - or foetus or fÃƒâˆ ` Ã ‚ â $ žtus - RBR - is a developing mammal or other viviparous vertebrate , after the embryonic stage and before birth .

det(Fetus-2, A-1)
nsubj(mammal-22, Fetus-2)
nsubj(vertebrate-26, Fetus-2)
dep(Fetus-2, LBR-4)
conj_or(Fetus-2, foetus-7)
nsubj(mammal-22, foetus-7)
nn(‚-12, fÃƒâˆ-9)
nn(‚-12, Ã-11)
conj_or(Fetus-2, ‚-12)
conj_or(foetus-7, ‚-12)
num(‚-12, â-13)
amod(‚-12, $-14)
dep($-14, žtus-15)
dep(Fetus-2, RBR-17)
cop(mammal-22, is-19)
det(mammal-22, a-20)
amod(mammal-22, developing-21)
root(ROOT-0, mammal-22)
conj_and(mammal-22, mammal-22')
amod(viviparous-25, other-24)
npadvmod(vertebrate-26, viviparous-25)
conj_or(mammal-22, vertebrate-26)
det(stage-31, the-29)
amod(stage-31, embryonic-30)
prep_after(mammal-22, stage-31)
prep_before(mammal-22', birth-34)

In the broadest possible sense , Fencing is the art of armed combat involving cutting , stabbing , or bludgeoning weapons directly manipulated by hand , rather than shot , thrown or positioned .

det(sense-5, the-2)
dep(possible-4, broadest-3)
amod(sense-5, possible-4)
prep_in(art-10, sense-5)
nsubj(art-10, Fencing-7)
cop(art-10, is-8)
det(art-10, the-9)
root(ROOT-0, art-10)
amod(combat-13, armed-12)
prep_of(art-10, combat-13)
partmod(combat-13, involving-14)
ccomp(involving-14, cutting-15)
ccomp(involving-14, stabbing-17)
conj_or(cutting-15, stabbing-17)
ccomp(involving-14, bludgeoning-20)
conj_or(cutting-15, bludgeoning-20)
dobj(bludgeoning-20, weapons-21)
advmod(manipulated-23, directly-22)
dep(weapons-21, manipulated-23)
prep_by(manipulated-23, hand-25)
dep(weapons-21, shot-29)
conj_negcc(manipulated-23, shot-29)
conj_negcc(manipulated-23, thrown-31)
conj_or(shot-29, thrown-31)
conj_negcc(manipulated-23, positioned-33)
conj_or(shot-29, positioned-33)

In music , a Fugue - LBR - Ãƒâ $ '' Ã ‚ âˆšfjuÃƒâ $ '' Ã ‚ âˆ † g - RBR - is a type of contrapuntal composition or technique of composition for a fixed number of parts , normally referred to as `` voices `` .

prep_in(type-27, music-2)
det(Fugue-5, a-4)
nsubj(type-27, Fugue-5)
dep(Fugue-5, LBR-7)
nn($-10, Ãƒâ-9)
dep(Fugue-5, $-10)
dep(Fugue-5, Ã-12)
punct(Fugue-5, ‚-13)
nn($-15, âˆšfjuÃƒâ-14)
dep(Fugue-5, $-15)
dep(Fugue-5, Ã-17)
punct(Ã-17, ‚-18)
nn(Ã-17, âˆ-19)
nn(Ã-17, †-20)
dep(Ã-17, g-21)
dep(Ã-17, RBR-23)
cop(type-27, is-25)
det(type-27, a-26)
root(ROOT-0, type-27)
amod(composition-30, contrapuntal-29)
prep_of(type-27, composition-30)
prep_of(type-27, technique-32)
conj_or(composition-30, technique-32)
prep_of(type-27, composition-34)
det(number-38, a-36)
amod(number-38, fixed-37)
prep_for(composition-34, number-38)
prep_of(type-27, parts-40)
conj_of(composition-34, parts-40)
xsubj(to-44, parts-40)
advmod(referred-43, normally-42)
partmod(parts-40, referred-43)
xcomp(referred-43, to-44)
prep_as(referred-43, voices-47)

In physics , a Force is a push or pull that can cause an object with mass to accelerate .

prep_in(push-8, physics-2)
det(Force-5, a-4)
nsubj(push-8, Force-5)
cop(push-8, is-6)
det(push-8, a-7)
root(ROOT-0, push-8)
nsubj(cause-13, push-8)
conj_or(push-8, pull-10)
nsubj(cause-13, pull-10)
aux(cause-13, can-12)
rcmod(push-8, cause-13)
det(object-15, an-14)
dobj(cause-13, object-15)
prep_with(object-15, mass-17)
aux(accelerate-19, to-18)
xcomp(cause-13, accelerate-19)

A Fractal is generally `` a rough or fragmented geometric shape that can be split into parts , each of which is - LBR - at least approximately - RBR - a reduced-size copy of the whole , `` a property called self-similarity .

det(Fractal-2, A-1)
nsubj(shape-11, Fractal-2)
cop(shape-11, is-3)
advmod(shape-11, generally-4)
det(shape-11, a-6)
amod(shape-11, rough-7)
conj_or(rough-7, fragmented-9)
amod(shape-11, fragmented-9)
nn(shape-11, geometric-10)
root(ROOT-0, shape-11)
nsubjpass(split-15, shape-11)
aux(split-15, can-13)
auxpass(split-15, be-14)
rcmod(shape-11, split-15)
prep_into(split-15, parts-17)
prep_of(each-19, parts-17)
nsubj(RBR-30, each-19)
cop(RBR-30, is-22)
nn(RBR-30, LBR-24)
dep(RBR-30, at-26)
pobj(at-26, least-27)
advmod(at-26, approximately-28)
rcmod(parts-17, RBR-30)
det(copy-34, a-32)
amod(copy-34, reduced-size-33)
dep(RBR-30, copy-34)
det(whole-37, the-36)
prep_of(copy-34, whole-37)
det(property-41, a-40)
dep(whole-37, property-41)
partmod(property-41, called-42)
advmod(called-42, self-similarity-43)

A Fluid is defined as a substance that continually deforms - LBR - flows - RBR - under an applied shear stress regardless of how small the applied stress .

det(Fluid-2, A-1)
nsubjpass(defined-4, Fluid-2)
auxpass(defined-4, is-3)
root(ROOT-0, defined-4)
det(substance-7, a-6)
prep_as(defined-4, substance-7)
nsubj(deforms-10, substance-7)
advmod(deforms-10, continually-9)
rcmod(substance-7, deforms-10)
nsubj(stress-22, LBR-12)
dep(LBR-12, flows-14)
dep(flows-14, RBR-16)
det(shear-21, an-19)
amod(shear-21, applied-20)
prep_under(LBR-12, shear-21)
parataxis(defined-4, stress-22)
advmod(small-26, how-25)
prep_regardless_of(stress-22, small-26)
det(stress-29, the-27)
amod(stress-29, applied-28)
dobj(stress-22, stress-29)

In Norse mythology , Fenrir or Fenrisulfr is a wolf , the son of Loki and the giantess AngrboÃƒâˆžÃ ‚ Â ° a .

nn(mythology-3, Norse-2)
prep_in(wolf-10, mythology-3)
nsubj(wolf-10, Fenrir-5)
conj_or(Fenrir-5, Fenrisulfr-7)
nsubj(wolf-10, Fenrisulfr-7)
cop(wolf-10, is-8)
det(wolf-10, a-9)
root(ROOT-0, wolf-10)
det(son-13, the-12)
conj_and(wolf-10, son-13)
prep_of(son-13, Loki-15)
det(giantess-18, the-17)
conj_and(wolf-10, giantess-18)
nn(a-23, AngrboÃƒâˆžÃ-19)
nn(a-23, ‚-20)
nn(a-23, Â-21)
nn(a-23, °-22)
dep(giantess-18, a-23)

In category theory , a branch of mathematics , a Functor is a special type of mapping between categories .

nn(theory-3, category-2)
prep_in(type-15, theory-3)
det(branch-6, a-5)
appos(theory-3, branch-6)
prep_of(branch-6, mathematics-8)
det(Functor-11, a-10)
nsubj(type-15, Functor-11)
cop(type-15, is-12)
det(type-15, a-13)
amod(type-15, special-14)
root(ROOT-0, type-15)
prep_of(type-15, mapping-17)
prep_between(mapping-17, categories-19)

In Norse mythology , Fimbulwinter - LBR - Old Norse Fimbulvetr - RBR - is the immediate prelude to the end of the world , RagnarÃƒâˆžÃ ‚ Â ¶ k .

nn(mythology-3, Norse-2)
prep_in(prelude-18, mythology-3)
nsubj(prelude-18, Fimbulwinter-5)
dep(Fimbulwinter-5, LBR-7)
nn(Fimbulvetr-11, Old-9)
nn(Fimbulvetr-11, Norse-10)
dep(LBR-7, Fimbulvetr-11)
dep(Fimbulwinter-5, RBR-13)
cop(prelude-18, is-15)
det(prelude-18, the-16)
amod(prelude-18, immediate-17)
root(ROOT-0, prelude-18)
det(end-21, the-20)
prep_to(prelude-18, end-21)
det(world-24, the-23)
prep_of(end-21, world-24)
nn(k-30, RagnarÃƒâˆžÃ-26)
nn(k-30, ‚-27)
nn(k-30, Â-28)
nn(k-30, ¶-29)
appos(world-24, k-30)

A Formant is a peak in the frequency spectrum of a sound caused by acoustic resonance .

det(Formant-2, A-1)
nsubj(peak-5, Formant-2)
cop(peak-5, is-3)
det(peak-5, a-4)
root(ROOT-0, peak-5)
det(spectrum-9, the-7)
nn(spectrum-9, frequency-8)
prep_in(peak-5, spectrum-9)
det(sound-12, a-11)
prep_of(spectrum-9, sound-12)
partmod(sound-12, caused-13)
amod(resonance-16, acoustic-15)
agent(caused-13, resonance-16)

A Fin is a surface used to produce lift and thrust or to steer while traveling in water , air , or other fluid media .

det(Fin-2, A-1)
nsubj(surface-5, Fin-2)
cop(surface-5, is-3)
det(surface-5, a-4)
root(ROOT-0, surface-5)
partmod(surface-5, used-6)
aux(produce-8, to-7)
ccomp(used-6, produce-8)
dobj(produce-8, lift-9)
dobj(produce-8, thrust-11)
conj_and(lift-9, thrust-11)
aux(steer-14, to-13)
ccomp(used-6, steer-14)
conj_or(produce-8, steer-14)
mark(traveling-16, while-15)
advcl(steer-14, traveling-16)
prep_in(traveling-16, water-18)
prep_in(traveling-16, air-20)
conj_or(water-18, air-20)
amod(media-25, other-23)
nn(media-25, fluid-24)
prep_in(traveling-16, media-25)
conj_or(water-18, media-25)

Frankenstein is a novel infused with some elements of the Gothic novel and the Romantic movement .

nsubj(novel-4, Frankenstein-1)
cop(novel-4, is-2)
det(novel-4, a-3)
root(ROOT-0, novel-4)
partmod(novel-4, infused-5)
det(elements-8, some-7)
prep_with(infused-5, elements-8)
det(novel-12, the-10)
amod(novel-12, Gothic-11)
prep_of(elements-8, novel-12)
det(movement-16, the-14)
amod(movement-16, Romantic-15)
prep_of(elements-8, movement-16)
conj_and(novel-12, movement-16)

A Forge is the workplace of a smith or a blacksmith .

det(Forge-2, A-1)
nsubj(workplace-5, Forge-2)
cop(workplace-5, is-3)
det(workplace-5, the-4)
root(ROOT-0, workplace-5)
det(smith-8, a-7)
prep_of(workplace-5, smith-8)
det(blacksmith-11, a-10)
prep_of(workplace-5, blacksmith-11)
conj_or(smith-8, blacksmith-11)

A Forest is an area with a high density of trees .

det(Forest-2, A-1)
nsubj(area-5, Forest-2)
cop(area-5, is-3)
det(area-5, an-4)
root(ROOT-0, area-5)
det(density-9, a-7)
amod(density-9, high-8)
prep_with(area-5, density-9)
prep_of(density-9, trees-11)

A Kite is a flying tethered object that depends upon the tension of a tethering system .

det(Kite-2, A-1)
nsubj(object-7, Kite-2)
cop(object-7, is-3)
det(object-7, a-4)
amod(object-7, flying-5)
amod(object-7, tethered-6)
root(ROOT-0, object-7)
nsubj(depends-9, object-7)
rcmod(object-7, depends-9)
det(tension-12, the-11)
prep_upon(depends-9, tension-12)
det(system-16, a-14)
amod(system-16, tethering-15)
prep_of(tension-12, system-16)

A Fanzine - LBR - see also : zine - RBR - is a nonprofessional publication produced by fans of a particular cultural phenomenon - LBR - such as a literary or musical genre - RBR - for the pleasure of others who share their interest .

det(Fanzine-2, A-1)
nsubj(see-6, Fanzine-2)
dep(Fanzine-2, LBR-4)
root(ROOT-0, see-6)
advmod(see-6, also-7)
nsubj(publication-16, zine-9)
dep(zine-9, RBR-11)
cop(publication-16, is-13)
det(publication-16, a-14)
amod(publication-16, nonprofessional-15)
parataxis(see-6, publication-16)
partmod(publication-16, produced-17)
agent(produced-17, fans-19)
det(phenomenon-24, a-21)
amod(phenomenon-24, particular-22)
amod(phenomenon-24, cultural-23)
prep_of(fans-19, phenomenon-24)
nn(RBR-36, LBR-26)
det(genre-34, a-30)
amod(genre-34, literary-31)
conj_or(literary-31, musical-33)
amod(genre-34, musical-33)
prep_such_as(RBR-36, genre-34)
dep(fans-19, RBR-36)
det(pleasure-40, the-39)
prep_for(produced-17, pleasure-40)
prep_of(pleasure-40, others-42)
nsubj(share-44, others-42)
rcmod(others-42, share-44)
poss(interest-46, their-45)
dobj(share-44, interest-46)

The name `` Fudge `` was once an acronym for Freeform Universal Donated - LBR - later , Do-it-yourself - RBR - Gaming Engine and , though the acronym has since been dropped , that phrase remains a good summation of the game 's design goals .

det(name-2, The-1)
nsubj(acronym-9, name-2)
nsubj(acronym-9, Fudge-4)
cop(acronym-9, was-6)
advmod(acronym-9, once-7)
det(acronym-9, an-8)
root(ROOT-0, acronym-9)
nn(Donated-13, Freeform-11)
nn(Donated-13, Universal-12)
prep_for(acronym-9, Donated-13)
dep(Donated-13, LBR-15)
dep(Donated-13, later-17)
appos(later-17, Do-it-yourself-19)
dep(Donated-13, RBR-21)
nn(Engine-24, Gaming-23)
dep(Donated-13, Engine-24)
mark(dropped-33, though-27)
det(acronym-29, the-28)
nsubjpass(dropped-33, acronym-29)
aux(dropped-33, has-30)
advmod(dropped-33, since-31)
auxpass(dropped-33, been-32)
advcl(summation-40, dropped-33)
det(phrase-36, that-35)
nsubj(summation-40, phrase-36)
cop(summation-40, remains-37)
det(summation-40, a-38)
amod(summation-40, good-39)
ccomp(acronym-9, summation-40)
conj_and(acronym-9, summation-40)
det(game-43, the-42)
poss(goals-46, game-43)
nn(goals-46, design-45)
prep_of(summation-40, goals-46)

In J. R. R. Tolkien 's Middle-earth legendarium , Faramir is a fictional character appearing in The Lord of the Rings .

nn(Tolkien-5, J.-2)
nn(Tolkien-5, R.-3)
nn(Tolkien-5, R.-4)
poss(legendarium-8, Tolkien-5)
amod(legendarium-8, Middle-earth-7)
prep_in(character-14, legendarium-8)
nsubj(character-14, Faramir-10)
cop(character-14, is-11)
det(character-14, a-12)
amod(character-14, fictional-13)
root(ROOT-0, character-14)
partmod(character-14, appearing-15)
det(Lord-18, The-17)
prep_in(appearing-15, Lord-18)
det(Rings-21, the-20)
prep_of(Lord-18, Rings-21)

Fortran is a general-purpose , procedural , imperative programming language that is especially suited to numeric computation and scientific computing .

nsubj(language-10, Fortran-1)
cop(language-10, is-2)
det(language-10, a-3)
amod(language-10, general-purpose-4)
amod(language-10, procedural-6)
amod(language-10, imperative-8)
nn(language-10, programming-9)
root(ROOT-0, language-10)
nsubjpass(suited-14, language-10)
auxpass(suited-14, is-12)
advmod(suited-14, especially-13)
rcmod(language-10, suited-14)
amod(computation-17, numeric-16)
prep_to(suited-14, computation-17)
amod(computing-20, scientific-19)
prep_to(suited-14, computing-20)
conj_and(computation-17, computing-20)

The term Foobar is a common placeholder name , also referred to as metasyntactic variable , used in computer programming or computer-related documentation .

det(Foobar-3, The-1)
nn(Foobar-3, term-2)
nsubj(name-8, Foobar-3)
cop(name-8, is-4)
det(name-8, a-5)
amod(name-8, common-6)
nn(name-8, placeholder-7)
root(ROOT-0, name-8)
advmod(referred-11, also-10)
partmod(name-8, referred-11)
advmod(metasyntactic-14, as-13)
amod(variable-15, metasyntactic-14)
prep_to(referred-11, variable-15)
partmod(variable-15, used-17)
nn(programming-20, computer-19)
prep_in(used-17, programming-20)
amod(documentation-23, computer-related-22)
prep_in(used-17, documentation-23)
conj_or(programming-20, documentation-23)

A Funeral is a ceremony marking a person 's death .

det(Funeral-2, A-1)
nsubj(ceremony-5, Funeral-2)
cop(ceremony-5, is-3)
det(ceremony-5, a-4)
root(ROOT-0, ceremony-5)
partmod(ceremony-5, marking-6)
det(person-8, a-7)
poss(death-10, person-8)
dobj(marking-6, death-10)

Friesland - LBR - 439 Friesland .

root(ROOT-0, Friesland-1)
dep(Friesland-1, LBR-3)
nn(Friesland-6, 439-5)
dep(LBR-3, Friesland-6)

ogg , West Frisian : FryslÃƒâˆžÃ ‚ Â cents n , Dutch : Friesland - RBR - is a province in the north of the Netherlands and part of the bigger region known as Frisia .

advmod(province-20, ogg-1)
nn(Frisian-4, West-3)
nsubj(province-20, Frisian-4)
nn(n-10, FryslÃƒâˆžÃ-6)
nn(n-10, ‚-7)
nn(n-10, Â-8)
nn(n-10, cents-9)
dep(Frisian-4, n-10)
appos(n-10, Dutch-12)
dep(n-10, Friesland-14)
dep(Friesland-14, RBR-16)
cop(province-20, is-18)
det(province-20, a-19)
root(ROOT-0, province-20)
det(north-23, the-22)
prep_in(province-20, north-23)
det(Netherlands-26, the-25)
prep_of(north-23, Netherlands-26)
prep_in(province-20, part-28)
conj_and(north-23, part-28)
det(region-32, the-30)
amod(region-32, bigger-31)
prep_of(part-28, region-32)
partmod(region-32, known-33)
prep_as(known-33, Frisia-35)

A FatwÃƒâ ‰ ¥ Ã ‚ â „ cents - LBR - ÃƒË ™ Ã ‚ â „ cents ÃƒË˜Ã ‚ ÂªÃƒË ™ Ã ‚ âˆšÃƒË ™ Ã ‚ â ‰ ; plural fatÃƒâ ‰ ¥ Ã ‚ â „ cents wÃƒâ ‰ ¥ Ã ‚ â „ cents ÃƒË ™ Ã ‚ â „ cents ÃƒË˜Ã ‚ ÂªÃƒË˜Ã ‚ Â § ÃƒË ™ Ã ‚ âˆšÃƒË ™ Ã ‚ â ‰ - RBR - , in the Islamic faith is a religious opinion on Islamic law issued by an Islamic scholar .

det(â-7, A-1)
nn(â-7, FatwÃƒâ-2)
nn(â-7, ‰-3)
nn(â-7, ¥-4)
nn(â-7, Ã-5)
nn(â-7, ‚-6)
dep(â-54, â-7)
amod(cents-9, „-8)
dep(â-7, cents-9)
dep(â-7, LBR-11)
nn(â-17, ÃƒË-13)
nn(â-17, ™-14)
nn(â-17, Ã-15)
nn(â-17, ‚-16)
dep(LBR-11, â-17)
number(cents-19, „-18)
num(‰-31, cents-19)
nn(‰-31, ÃƒË˜Ã-20)
nn(‰-31, ‚-21)
nn(‰-31, ÂªÃƒË-22)
nn(‰-31, ™-23)
nn(‰-31, Ã-24)
nn(‰-31, ‚-25)
nn(‰-31, âˆšÃƒË-26)
nn(‰-31, ™-27)
nn(‰-31, Ã-28)
nn(‰-31, ‚-29)
nn(‰-31, â-30)
dep(â-17, ‰-31)
nn(‚-53, plural-33)
nn(‚-53, fatÃƒâ-34)
nn(‚-53, ‰-35)
nn(‚-53, ¥-36)
nn(‚-53, Ã-37)
nn(‚-53, ‚-38)
nn(‚-53, â-39)
nn(‚-53, „-40)
nn(‚-53, cents-41)
nn(‚-53, wÃƒâ-42)
nn(‚-53, ‰-43)
nn(‚-53, ¥-44)
nn(‚-53, Ã-45)
nn(‚-53, ‚-46)
nn(‚-53, â-47)
nn(‚-53, „-48)
nn(‚-53, cents-49)
nn(‚-53, ÃƒË-50)
nn(‚-53, ™-51)
nn(‚-53, Ã-52)
nsubj(â-54, ‚-53)
root(ROOT-0, â-54)
number(cents-56, „-55)
num(‰-72, cents-56)
nn(‰-72, ÃƒË˜Ã-57)
nn(‰-72, ‚-58)
nn(‰-72, ÂªÃƒË˜Ã-59)
nn(‰-72, ‚-60)
nn(‰-72, Â-61)
nn(‰-72, §-62)
nn(‰-72, ÃƒË-63)
nn(‰-72, ™-64)
nn(‰-72, Ã-65)
nn(‰-72, ‚-66)
nn(‰-72, âˆšÃƒË-67)
nn(‰-72, ™-68)
nn(‰-72, Ã-69)
nn(‰-72, ‚-70)
nn(‰-72, â-71)
dobj(â-54, ‰-72)
dep(‰-72, RBR-74)
det(faith-80, the-78)
amod(faith-80, Islamic-79)
prep_in(‰-72, faith-80)
cop(opinion-84, is-81)
det(opinion-84, a-82)
amod(opinion-84, religious-83)
rcmod(faith-80, opinion-84)
amod(law-87, Islamic-86)
prep_on(opinion-84, law-87)
partmod(law-87, issued-88)
det(scholar-92, an-90)
amod(scholar-92, Islamic-91)
agent(issued-88, scholar-92)

A Fare is the fee paid by a traveler allowing him or her to make use of a public transport system : rail , bus , taxi , etc. .

det(Fare-2, A-1)
nsubj(fee-5, Fare-2)
cop(fee-5, is-3)
det(fee-5, the-4)
root(ROOT-0, fee-5)
partmod(fee-5, paid-6)
det(traveler-9, a-8)
agent(paid-6, traveler-9)
partmod(traveler-9, allowing-10)
nsubj(make-15, him-11)
conj_or(him-11, her-13)
nsubj(make-15, her-13)
aux(make-15, to-14)
xcomp(allowing-10, make-15)
dobj(make-15, use-16)
det(system-21, a-18)
amod(system-21, public-19)
nn(system-21, transport-20)
prep_of(use-16, system-21)
dep(system-21, rail-23)
appos(rail-23, bus-25)
appos(rail-23, taxi-27)
dep(system-21, etc.-29)

In common law legal systems , a Felony is a serious crime , often contrasted with a misdemeanor .

amod(law-3, common-2)
prep_in(crime-12, law-3)
amod(systems-5, legal-4)
dep(law-3, systems-5)
det(Felony-8, a-7)
nsubj(crime-12, Felony-8)
cop(crime-12, is-9)
det(crime-12, a-10)
amod(crime-12, serious-11)
root(ROOT-0, crime-12)
advmod(contrasted-15, often-14)
partmod(crime-12, contrasted-15)
det(misdemeanor-18, a-17)
prep_with(contrasted-15, misdemeanor-18)

Fermentation refers to the process of energy production in a cell under anaerobic conditions - LBR - without oxygen - RBR - .

nsubj(refers-2, Fermentation-1)
root(ROOT-0, refers-2)
det(process-5, the-4)
prep_to(refers-2, process-5)
nn(production-8, energy-7)
prep_of(process-5, production-8)
det(cell-11, a-10)
prep_in(production-8, cell-11)
amod(conditions-14, anaerobic-13)
prep_under(cell-11, conditions-14)
dep(RBR-21, LBR-16)
dep(LBR-16, without-18)
pobj(without-18, oxygen-19)
dep(refers-2, RBR-21)

Fermentation refers to a form of anaerobic respiration used primarily by yeasts when oxygen is not present in sufficient quantity for normal cellular respiration .

nsubj(refers-2, Fermentation-1)
root(ROOT-0, refers-2)
det(form-5, a-4)
prep_to(refers-2, form-5)
amod(respiration-8, anaerobic-7)
prep_of(form-5, respiration-8)
partmod(respiration-8, used-9)
advmod(used-9, primarily-10)
agent(used-9, yeasts-12)
advmod(present-17, when-13)
nsubj(present-17, oxygen-14)
cop(present-17, is-15)
neg(present-17, not-16)
advcl(used-9, present-17)
amod(quantity-20, sufficient-19)
prep_in(present-17, quantity-20)
amod(respiration-24, normal-22)
amod(respiration-24, cellular-23)
prep_for(quantity-20, respiration-24)

In industry , Fermentation typically refers to the breakdown and re-assembly of biochemicals for industry , often in aerobic growth conditions .

prep_in(refers-6, industry-2)
nsubj(refers-6, Fermentation-4)
advmod(refers-6, typically-5)
root(ROOT-0, refers-6)
det(breakdown-9, the-8)
prep_to(refers-6, breakdown-9)
prep_to(refers-6, re-assembly-11)
conj_and(breakdown-9, re-assembly-11)
prep_of(breakdown-9, biochemicals-13)
prep_for(biochemicals-13, industry-15)
advmod(refers-6, often-17)
amod(conditions-21, aerobic-19)
nn(conditions-21, growth-20)
prep_in(refers-6, conditions-21)

In food science , Fermentation may refer to the conversion of carbohydrates into alcohols or acids under anaerobic conditions used for making certain foods .

nn(science-3, food-2)
prep_in(refer-7, science-3)
nsubj(refer-7, Fermentation-5)
aux(refer-7, may-6)
root(ROOT-0, refer-7)
det(conversion-10, the-9)
prep_to(refer-7, conversion-10)
prep_of(conversion-10, carbohydrates-12)
prep_into(refer-7, alcohols-14)
prep_into(refer-7, acids-16)
conj_or(alcohols-14, acids-16)
amod(conditions-19, anaerobic-18)
prep_under(refer-7, conditions-19)
partmod(conditions-19, used-20)
prepc_for(used-20, making-22)
amod(foods-24, certain-23)
dobj(making-22, foods-24)

Fermentation refers to the process of fermentation commonly used in winemaking .

nsubj(refers-2, Fermentation-1)
root(ROOT-0, refers-2)
det(process-5, the-4)
prep_to(refers-2, process-5)
prep_of(process-5, fermentation-7)
advmod(used-9, commonly-8)
partmod(fermentation-7, used-9)
prep_in(used-9, winemaking-11)

Fermentation is the process of fermentation commonly used in brewing beer .

nsubj(process-4, Fermentation-1)
cop(process-4, is-2)
det(process-4, the-3)
root(ROOT-0, process-4)
prep_of(process-4, fermentation-6)
advmod(used-8, commonly-7)
partmod(fermentation-6, used-8)
nn(beer-11, brewing-10)
prep_in(used-8, beer-11)

A Flag is a piece of cloth , often flown from a pole or mast , generally used symbolically for signaling or identification .

det(Flag-2, A-1)
nsubj(piece-5, Flag-2)
cop(piece-5, is-3)
det(piece-5, a-4)
root(ROOT-0, piece-5)
prep_of(piece-5, cloth-7)
advmod(flown-10, often-9)
partmod(cloth-7, flown-10)
det(pole-13, a-12)
prep_from(flown-10, pole-13)
prep_from(flown-10, mast-15)
conj_or(pole-13, mast-15)
advmod(used-18, generally-17)
partmod(cloth-7, used-18)
advmod(used-18, symbolically-19)
prep_for(used-18, signaling-21)
prep_for(used-18, identification-23)
conj_or(signaling-21, identification-23)

A Fungus - LBR - Ãƒâ $ '' Ã ‚ âˆšfÃƒâ $ ¦ Ã ‚ â $ ˜Ãƒâˆ ` Ã ‚ â $ '' gÃƒâ ‰ ˆÃ ‚ Ë ™ s - RBR - is a eukaryotic organism that is a member of the kingdom Fungi - LBR - Ãƒâ $ '' Ã ‚ âˆšfÃƒâ $ ¦ Ã ‚ â $ ˜ndÃƒâ $ ¦ Ã ‚ â $ šaÃƒâ ‰ ˆÃ ‚ Âª - RBR - .

det(Fungus-2, A-1)
root(ROOT-0, Fungus-2)
dep(Fungus-2, LBR-4)
nn(Ã-9, Ãƒâ-6)
nn(Ã-9, $-7)
dep(LBR-4, Ã-9)
punct(Fungus-2, ‚-10)
dep(Fungus-2, âˆšfÃƒâ-11)
dobj(âˆšfÃƒâ-11, $-12)
num($-12, ¦-13)
nn(‚-15, Ã-14)
poss(â-22, ‚-15)
amod(â-22, $-17)
number($-17, ˜Ãƒâˆ-18)
dep(â-22, Ã-20)
punct(â-22, ‚-21)
nsubj(organism-38, â-22)
amod(â-22, $-23)
number($-23, gÃƒâ-25)
punct(Ë-29, ‰-26)
dep(Ë-29, ˆÃ-27)
punct(Ë-29, ‚-28)
dep($-23, Ë-29)
punct(Ë-29, ™-30)
dep(RBR-33, s-31)
dep(Ë-29, RBR-33)
cop(organism-38, is-35)
det(organism-38, a-36)
amod(organism-38, eukaryotic-37)
rcmod($-12, organism-38)
nsubj(member-42, organism-38)
cop(member-42, is-40)
det(member-42, a-41)
rcmod(organism-38, member-42)
prep(member-42, of-43)
det(kingdom-45, the-44)
dep(of-43, kingdom-45)
dep(kingdom-45, Fungi-46)
dep(kingdom-45, LBR-48)
nn(Ã-53, Ãƒâ-50)
nn(Ã-53, $-51)
dep(LBR-48, Ã-53)
punct(kingdom-45, ‚-54)
dep(â-67, âˆšfÃƒâ-55)
amod(Ã-65, $-56)
number($-56, ¦-57)
nn(Ã-65, Ã-58)
punct($-63, ‚-59)
dep($-63, â-60)
pobj(â-60, $-61)
num($-61, ˜ndÃƒâ-62)
dep(Ã-65, $-63)
num($-63, ¦-64)
pobj(âˆšfÃƒâ-55, Ã-65)
punct(â-67, ‚-66)
dep(kingdom-45, â-67)
pobj(â-67, $-68)
num($-68, šaÃƒâ-69)
punct(â-67, ‰-70)
dep(Âª-73, ˆÃ-71)
punct(Âª-73, ‚-72)
dep(â-67, Âª-73)
dep(Âª-73, RBR-75)

The Horn is a brass instrument consisting of about 12 feet of tubing wrapped into a coil with a flared bell .

det(Horn-2, The-1)
nsubj(instrument-6, Horn-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
nn(instrument-6, brass-5)
root(ROOT-0, instrument-6)
partmod(instrument-6, consisting-7)
quantmod(12-10, about-9)
num(feet-11, 12-10)
prep_of(consisting-7, feet-11)
prep_of(feet-11, tubing-13)
partmod(tubing-13, wrapped-14)
det(coil-17, a-16)
prep_into(wrapped-14, coil-17)
det(bell-21, a-19)
amod(bell-21, flared-20)
prep_with(coil-17, bell-21)

A Frigate is a warship .

det(Frigate-2, A-1)
nsubj(warship-5, Frigate-2)
cop(warship-5, is-3)
det(warship-5, a-4)
root(ROOT-0, warship-5)

A Furlong is a measure of distance in imperial units and U. S. customary units .

det(Furlong-2, A-1)
nsubj(measure-5, Furlong-2)
cop(measure-5, is-3)
det(measure-5, a-4)
root(ROOT-0, measure-5)
prep_of(measure-5, distance-7)
amod(units-10, imperial-9)
prep_in(distance-7, units-10)
nn(S.-13, U.-12)
prep_of(measure-5, S.-13)
conj_and(distance-7, S.-13)
amod(units-15, customary-14)
dep(S.-13, units-15)

A Fable is a succinct story , in prose or verse , that features animals , plants , inanimate objects , or forces of nature which are anthropomorphized - LBR - given human qualities - RBR - , and that illustrates a moral lesson - LBR - a `` moral `` - RBR - , which may at the end be expressed explicitly in a pithy maxim .

det(Fable-2, A-1)
nsubj(story-6, Fable-2)
cop(story-6, is-3)
det(story-6, a-4)
amod(story-6, succinct-5)
root(ROOT-0, story-6)
prep_in(story-6, prose-9)
nsubj(features-14, prose-9)
prep_in(story-6, verse-11)
conj_or(prose-9, verse-11)
nsubj(features-14, verse-11)
rcmod(prose-9, features-14)
nn(objects-20, animals-15)
dep(objects-20, plants-17)
amod(objects-20, inanimate-19)
dobj(features-14, objects-20)
prep_in(story-6, forces-23)
conj_or(prose-9, forces-23)
nsubjpass(anthropomorphized-28, forces-23)
prep_of(forces-23, nature-25)
auxpass(anthropomorphized-28, are-27)
rcmod(forces-23, anthropomorphized-28)
prep_in(story-6, LBR-30)
conj_or(prose-9, LBR-30)
nsubj(features-14, LBR-30)
amod(qualities-34, given-32)
amod(qualities-34, human-33)
dep(LBR-30, qualities-34)
dep(qualities-34, RBR-36)
nsubj(illustrates-41, that-40)
conj_and(story-6, illustrates-41)
det(lesson-44, a-42)
amod(lesson-44, moral-43)
dobj(illustrates-41, lesson-44)
nsubjpass(expressed-62, lesson-44)
dep(lesson-44, LBR-46)
det(RBR-53, a-48)
nn(RBR-53, moral-50)
dep(LBR-46, RBR-53)
aux(expressed-62, may-57)
advmod(expressed-62, at-58)
det(end-60, the-59)
pobj(at-58, end-60)
auxpass(expressed-62, be-61)
rcmod(lesson-44, expressed-62)
advmod(expressed-62, explicitly-63)
det(maxim-67, a-65)
amod(maxim-67, pithy-66)
prep_in(expressed-62, maxim-67)

The Foot is a structure found in many animals that is used for locomotion .

det(Foot-2, The-1)
nsubj(structure-5, Foot-2)
cop(structure-5, is-3)
det(structure-5, a-4)
root(ROOT-0, structure-5)
partmod(structure-5, found-6)
amod(animals-9, many-8)
prep_in(found-6, animals-9)
nsubjpass(used-12, animals-9)
auxpass(used-12, is-11)
rcmod(animals-9, used-12)
prep_for(used-12, locomotion-14)

A Fleming is an inhabitant of Flanders , see Flemish people .

det(Fleming-2, A-1)
nsubj(inhabitant-5, Fleming-2)
cop(inhabitant-5, is-3)
det(inhabitant-5, an-4)
root(ROOT-0, inhabitant-5)
prep_of(inhabitant-5, Flanders-7)
dep(inhabitant-5, see-9)
amod(people-11, Flemish-10)
dobj(see-9, people-11)

The Futurians were an influential group of science fiction fans , many of whom became editors and writers as well .

det(Futurians-2, The-1)
nsubj(group-6, Futurians-2)
cop(group-6, were-3)
det(group-6, an-4)
amod(group-6, influential-5)
root(ROOT-0, group-6)
nn(fans-10, science-8)
nn(fans-10, fiction-9)
prep_of(group-6, fans-10)
pobj(of-13, fans-10)
dep(of-13, many-12)
nsubj(editors-16, of-13)
cop(editors-16, became-15)
rcmod(fans-10, editors-16)
rcmod(fans-10, writers-18)
conj_and(editors-16, writers-18)
advmod(well-20, as-19)
mwe(well-20, as-19)
advmod(editors-16, well-20)

The term Federalism is used to describe a system of the government in which sovereignty is constitutionally divided between a central governing authority and constituent political units - LBR - like states or provinces - RBR - .

det(Federalism-3, The-1)
nn(Federalism-3, term-2)
nsubjpass(used-5, Federalism-3)
xsubj(describe-7, Federalism-3)
auxpass(used-5, is-4)
root(ROOT-0, used-5)
aux(describe-7, to-6)
xcomp(used-5, describe-7)
det(system-9, a-8)
dobj(describe-7, system-9)
det(government-12, the-11)
prep_of(system-9, government-12)
rel(divided-18, which-14)
nsubjpass(divided-18, sovereignty-15)
auxpass(divided-18, is-16)
advmod(divided-18, constitutionally-17)
rcmod(system-9, divided-18)
det(authority-23, a-20)
amod(authority-23, central-21)
amod(authority-23, governing-22)
prep_between(describe-7, authority-23)
amod(units-27, constituent-25)
amod(units-27, political-26)
prep_between(describe-7, units-27)
conj_and(authority-23, units-27)
dep(RBR-36, LBR-29)
dep(LBR-29, like-31)
pobj(like-31, states-32)
pobj(like-31, provinces-34)
conj_or(states-32, provinces-34)
dep(describe-7, RBR-36)

The Futurama was an exhibit \/ ride at the 1939-40 New York World 's Fair held in the USA , designed by Norman Bel Geddes that tried to show the world 20 years into the future - LBR - 1960 - RBR - , including automated highways and vast suburbs .

det(Futurama-2, The-1)
nsubj(ride-7, Futurama-2)
cop(ride-7, was-3)
det(ride-7, an-4)
nn(ride-7, exhibit-5)
nn(ride-7, \/-6)
root(ROOT-0, ride-7)
det(World-13, the-9)
nn(World-13, 1939-40-10)
nn(World-13, New-11)
nn(World-13, York-12)
poss(Fair-15, World-13)
prep_at(ride-7, Fair-15)
amod(Fair-15, held-16)
det(USA-19, the-18)
prep_in(held-16, USA-19)
partmod(Fair-15, designed-21)
nn(Geddes-25, Norman-23)
nn(Geddes-25, Bel-24)
agent(designed-21, Geddes-25)
nsubj(tried-27, Geddes-25)
rcmod(Geddes-25, tried-27)
aux(show-29, to-28)
xcomp(tried-27, show-29)
det(world-31, the-30)
dobj(show-29, world-31)
num(years-33, 20-32)
npadvmod(show-29, years-33)
det(future-36, the-35)
prep_into(show-29, future-36)
dep(future-36, LBR-38)
dep(future-36, 1960-40)
dep(1960-40, RBR-42)
amod(highways-47, automated-46)
prep_including(ride-7, highways-47)
amod(suburbs-50, vast-49)
prep_including(ride-7, suburbs-50)
conj_and(highways-47, suburbs-50)

Furry refers to a member of the furry fandom .

nsubj(refers-2, Furry-1)
root(ROOT-0, refers-2)
det(member-5, a-4)
prep_to(refers-2, member-5)
det(fandom-9, the-7)
amod(fandom-9, furry-8)
prep_of(member-5, fandom-9)

Furry often refers to fans of artwork , stories , and related products - LBR - comics , movies , costumes , etc. - RBR - which feature anthropomorphic animals .

advmod(refers-3, Furry-1)
advmod(refers-3, often-2)
root(ROOT-0, refers-3)
prep_to(refers-3, fans-5)
prep_of(fans-5, artwork-7)
prep_to(refers-3, stories-9)
conj_and(fans-5, stories-9)
amod(products-13, related-12)
prep_to(refers-3, products-13)
conj_and(fans-5, products-13)
dep(products-13, LBR-15)
dep(LBR-15, comics-17)
appos(LBR-15, movies-19)
appos(LBR-15, costumes-21)
dep(LBR-15, etc.-23)
nsubj(refers-3, RBR-25)
nsubj(feature-28, which-27)
rcmod(RBR-25, feature-28)
amod(animals-30, anthropomorphic-29)
dobj(feature-28, animals-30)

Furry may refer to an animal character with anthropomorphic characteristics .

nsubj(refer-3, Furry-1)
aux(refer-3, may-2)
root(ROOT-0, refer-3)
det(character-7, an-5)
nn(character-7, animal-6)
prep_to(refer-3, character-7)
amod(characteristics-10, anthropomorphic-9)
prep_with(refer-3, characteristics-10)

A Gun is any of several types of object that propels another object or projectile .

det(Gun-2, A-1)
nsubj(any-4, Gun-2)
cop(any-4, is-3)
root(ROOT-0, any-4)
nsubj(propels-11, any-4)
amod(types-7, several-6)
prep_of(any-4, types-7)
prep_of(types-7, object-9)
rcmod(any-4, propels-11)
det(object-13, another-12)
dobj(propels-11, object-13)
dobj(propels-11, projectile-15)
conj_or(object-13, projectile-15)

A Factoid is a possibly spurious - LBR - unverified , incorrect , or invented - RBR - and often allegedly counterintuitive `` fact `` with little significance outside the possibility of its own statement .

det(Factoid-2, A-1)
nsubj(spurious-6, Factoid-2)
nsubj(invented-15, Factoid-2)
nsubj(RBR-17, Factoid-2)
nsubj(counterintuitive-22, Factoid-2)
cop(spurious-6, is-3)
det(spurious-6, a-4)
advmod(spurious-6, possibly-5)
root(ROOT-0, spurious-6)
dep(spurious-6, LBR-8)
amod(incorrect-12, unverified-10)
amod(spurious-6, incorrect-12)
conj_or(spurious-6, invented-15)
conj_or(spurious-6, RBR-17)
advmod(counterintuitive-22, often-20)
advmod(counterintuitive-22, allegedly-21)
conj_and(spurious-6, counterintuitive-22)
dobj(counterintuitive-22, fact-24)
amod(significance-28, little-27)
prep_with(fact-24, significance-28)
det(possibility-31, the-30)
prep_outside(significance-28, possibility-31)
poss(statement-35, its-33)
amod(statement-35, own-34)
prep_of(possibility-31, statement-35)

A Freeway - also known as a highway , superhighway , autoroute , autobahn , autopista , autovÃƒâˆžÃ ‚ â $ `` a , autostrada , dual carriageway , expressway , or motorway - is a type of road designed for safer high-speed operation of motor vehicles through the elimination of at-grade intersections .

det(Freeway-2, A-1)
nsubj(type-37, Freeway-2)
advmod(known-5, also-4)
partmod(Freeway-2, known-5)
det(â-20, a-7)
nn(â-20, highway-8)
dep(â-20, superhighway-10)
dep(â-20, autoroute-12)
dep(â-20, autobahn-14)
dep(â-20, autopista-16)
dep(â-20, autovÃƒâˆžÃ-18)
nn(â-20, ‚-19)
prep_as(known-5, â-20)
dep(â-20, $-21)
npadvmod(dual-27, a-23)
dep(a-23, autostrada-25)
dep(carriageway-28, dual-27)
num($-21, carriageway-28)
prep_as(known-5, expressway-30)
advmod(â-20, expressway-30)
conj_or(â-20, expressway-30)
prep_as(known-5, motorway-33)
conj_or(â-20, motorway-33)
cop(type-37, is-35)
det(type-37, a-36)
root(ROOT-0, type-37)
prep_of(type-37, road-39)
partmod(road-39, designed-40)
amod(operation-44, safer-42)
amod(operation-44, high-speed-43)
prep_for(designed-40, operation-44)
nn(vehicles-47, motor-46)
prep_of(operation-44, vehicles-47)
det(elimination-50, the-49)
prep_through(designed-40, elimination-50)
amod(intersections-53, at-grade-52)
prep_of(elimination-50, intersections-53)

The traditional Roman Fasces consisted of a bundle of white birch rods , tied together with a red leather ribbon into a cylinder , and often including a bronze axe - LBR - or sometimes two - RBR - amongst the rods , with the blade-LBR-s - RBR - on the side , projecting from the bundle .

det(consisted-5, The-1)
amod(consisted-5, traditional-2)
nn(consisted-5, Roman-3)
nn(consisted-5, Fasces-4)
root(ROOT-0, consisted-5)
det(bundle-8, a-7)
prep_of(consisted-5, bundle-8)
amod(rods-12, white-10)
nn(rods-12, birch-11)
prep_of(bundle-8, rods-12)
dep(consisted-5, tied-14)
det(ribbon-20, a-17)
amod(ribbon-20, red-18)
nn(ribbon-20, leather-19)
prep_together_with(tied-14, ribbon-20)
det(cylinder-23, a-22)
prep_into(tied-14, cylinder-23)
dep(consisted-5, often-26)
advmod(tied-14, often-26)
conj_and(tied-14, often-26)
dep(consisted-5, including-27)
conj_and(tied-14, including-27)
det(axe-30, a-28)
amod(axe-30, bronze-29)
dobj(including-27, axe-30)
nn(RBR-38, LBR-32)
dep(two-36, or-34)
dep(two-36, sometimes-35)
dep(RBR-38, two-36)
dep(axe-30, RBR-38)
det(rods-42, the-41)
prep_amongst(including-27, rods-42)
det(blade-LBR-s-46, the-45)
prep_with(including-27, blade-LBR-s-46)
dep(blade-LBR-s-46, RBR-48)
det(side-52, the-51)
prep_on(blade-LBR-s-46, side-52)
partmod(consisted-5, projecting-54)
det(bundle-57, the-56)
prep_from(projecting-54, bundle-57)

In digital circuits , a Flip-flop is an onomatopoeic term that refers a kind of bistable multivibrator , an electronic circuit that has two stable states and thereby is capable of serving as one bit of memory .

amod(circuits-3, digital-2)
prep_in(term-10, circuits-3)
det(Flip-flop-6, a-5)
nsubj(term-10, Flip-flop-6)
cop(term-10, is-7)
det(term-10, an-8)
amod(term-10, onomatopoeic-9)
root(ROOT-0, term-10)
nsubj(refers-12, term-10)
rcmod(term-10, refers-12)
det(kind-14, a-13)
dobj(refers-12, kind-14)
amod(multivibrator-17, bistable-16)
prep_of(kind-14, multivibrator-17)
det(circuit-21, an-19)
amod(circuit-21, electronic-20)
appos(multivibrator-17, circuit-21)
nsubj(has-23, circuit-21)
nsubj(capable-30, circuit-21)
rcmod(circuit-21, has-23)
num(states-26, two-24)
amod(states-26, stable-25)
dobj(has-23, states-26)
rcmod(circuit-21, thereby-28)
advmod(has-23, thereby-28)
conj_and(has-23, thereby-28)
cop(capable-30, is-29)
rcmod(circuit-21, capable-30)
conj_and(has-23, capable-30)
prepc_of(capable-30, serving-32)
num(bit-35, one-34)
prep_as(serving-32, bit-35)
prep_of(bit-35, memory-37)

The Frisians are an ethnic group of Germanic people living in coastal parts of The Netherlands and Germany .

det(Frisians-2, The-1)
nsubj(group-6, Frisians-2)
cop(group-6, are-3)
det(group-6, an-4)
amod(group-6, ethnic-5)
root(ROOT-0, group-6)
amod(people-9, Germanic-8)
prep_of(group-6, people-9)
partmod(people-9, living-10)
amod(parts-13, coastal-12)
prep_in(living-10, parts-13)
det(Netherlands-16, The-15)
prep_of(parts-13, Netherlands-16)
prep_of(parts-13, Germany-18)
conj_and(Netherlands-16, Germany-18)

The Guitar is a musical instrument with ancient roots that is used in a wide variety of musical styles .

det(Guitar-2, The-1)
nsubj(instrument-6, Guitar-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, musical-5)
root(ROOT-0, instrument-6)
nsubjpass(used-12, instrument-6)
amod(roots-9, ancient-8)
prep_with(instrument-6, roots-9)
auxpass(used-12, is-11)
rcmod(instrument-6, used-12)
det(variety-16, a-14)
amod(variety-16, wide-15)
prep_in(used-12, variety-16)
amod(styles-19, musical-18)
prep_of(variety-16, styles-19)

In Jewish folklore , a Golem - LBR - ÃƒËœÃ ‚ â $ šÃƒËœÃ ‚ ï # ¿ ÃƒËœÃ ‚ Ë ' ÃƒËœÃ ‚ Ë ‡ , sometimes , as in Yiddish , pronounced goilem - RBR - is an animated being created entirely from inanimate matter .

amod(folklore-3, Jewish-2)
prep_in(animated-41, folklore-3)
det(Golem-6, a-5)
nsubj(animated-41, Golem-6)
dep(Golem-6, LBR-8)
nn(‚-11, ÃƒËœÃ-10)
dep(LBR-8, ‚-11)
num(‚-20, â-12)
num(‚-20, $-13)
number($-13, šÃƒËœÃ-14)
number($-13, ‚-15)
amod(‚-20, ï-16)
number(ÃƒËœÃ-19, #-17)
number(ÃƒËœÃ-19, ¿-18)
num(‚-20, ÃƒËœÃ-19)
dep(‚-11, ‚-20)
poss(RBR-37, Ë-21)
nn(RBR-37, ÃƒËœÃ-23)
nn(RBR-37, ‚-24)
nn(RBR-37, Ë-25)
nn(RBR-37, ‡-26)
dep(goilem-35, sometimes-28)
advmod(in-31, as-30)
dep(goilem-35, in-31)
pobj(in-31, Yiddish-32)
amod(goilem-35, pronounced-34)
dep(RBR-37, goilem-35)
dep(‚-11, RBR-37)
cop(animated-41, is-39)
det(animated-41, an-40)
root(ROOT-0, animated-41)
auxpass(created-43, being-42)
partmod(animated-41, created-43)
advmod(created-43, entirely-44)
amod(matter-47, inanimate-46)
prep_from(created-43, matter-47)

A Firearm is a device that can be used as a weapon that fires either single or multiple projectiles propelled at high velocity by the gases produced through rapid , confined burning of a propellant .

det(Firearm-2, A-1)
nsubj(device-5, Firearm-2)
cop(device-5, is-3)
det(device-5, a-4)
root(ROOT-0, device-5)
nsubjpass(used-9, device-5)
aux(used-9, can-7)
auxpass(used-9, be-8)
rcmod(device-5, used-9)
det(weapon-12, a-11)
prep_as(used-9, weapon-12)
nsubj(fires-14, weapon-12)
rcmod(weapon-12, fires-14)
det(projectiles-19, either-15)
amod(projectiles-19, single-16)
conj_or(single-16, multiple-18)
amod(projectiles-19, multiple-18)
nsubj(propelled-20, projectiles-19)
ccomp(fires-14, propelled-20)
amod(velocity-23, high-22)
prep_at(propelled-20, velocity-23)
det(gases-26, the-25)
prep_by(propelled-20, gases-26)
partmod(gases-26, produced-27)
amod(burning-32, rapid-29)
amod(burning-32, confined-31)
prep_through(produced-27, burning-32)
det(propellant-35, a-34)
prep_of(burning-32, propellant-35)

A Game is a structured or semi-structured activity , usually undertaken for enjoyment and sometimes also used as an educational tool .

det(Game-2, A-1)
nsubj(activity-8, Game-2)
cop(activity-8, is-3)
det(activity-8, a-4)
amod(activity-8, structured-5)
conj_or(structured-5, semi-structured-7)
amod(activity-8, semi-structured-7)
root(ROOT-0, activity-8)
advmod(undertaken-11, usually-10)
dep(activity-8, undertaken-11)
prep_for(undertaken-11, enjoyment-13)
dep(activity-8, sometimes-15)
advmod(undertaken-11, sometimes-15)
conj_and(undertaken-11, sometimes-15)
advmod(used-17, also-16)
dep(activity-8, used-17)
conj_and(undertaken-11, used-17)
det(tool-21, an-19)
amod(tool-21, educational-20)
prep_as(used-17, tool-21)

The Girth of an object is a measurement around it .

det(Girth-2, The-1)
nsubj(measurement-8, Girth-2)
det(object-5, an-4)
prep_of(Girth-2, object-5)
cop(measurement-8, is-6)
det(measurement-8, a-7)
root(ROOT-0, measurement-8)
prep_around(measurement-8, it-10)

In physics , the Graviton is a hypothetical elementary particle that mediates the force of gravity in the framework of quantum field theory .

prep_in(particle-10, physics-2)
det(Graviton-5, the-4)
nsubj(particle-10, Graviton-5)
cop(particle-10, is-6)
det(particle-10, a-7)
amod(particle-10, hypothetical-8)
amod(particle-10, elementary-9)
root(ROOT-0, particle-10)
nsubj(mediates-12, particle-10)
rcmod(particle-10, mediates-12)
det(force-14, the-13)
dobj(mediates-12, force-14)
prep_of(force-14, gravity-16)
det(framework-19, the-18)
prep_in(mediates-12, framework-19)
nn(theory-23, quantum-21)
nn(theory-23, field-22)
prep_of(framework-19, theory-23)

A Geologist is a contributor to the science of geology , studying the physical structure and processes of the Earth and planets of the solar system - LBR - see planetary geology - RBR - .

det(Geologist-2, A-1)
nsubj(contributor-5, Geologist-2)
cop(contributor-5, is-3)
det(contributor-5, a-4)
root(ROOT-0, contributor-5)
det(science-8, the-7)
prep_to(contributor-5, science-8)
prep_of(science-8, geology-10)
partmod(contributor-5, studying-12)
xcomp(contributor-5, studying-12)
det(structure-15, the-13)
amod(structure-15, physical-14)
dobj(studying-12, structure-15)
nsubj(see-30, processes-17)
det(Earth-20, the-19)
prep_of(processes-17, Earth-20)
prep_of(processes-17, planets-22)
conj_and(Earth-20, planets-22)
det(system-26, the-24)
amod(system-26, solar-25)
prep_of(Earth-20, system-26)
dep(processes-17, LBR-28)
conj_and(contributor-5, see-30)
amod(geology-32, planetary-31)
dobj(see-30, geology-32)
dep(geology-32, RBR-34)

The ` Generic Universal RolePlaying System ' , commonly known as GURPS is a role-playing game system designed to adapt to any imaginary gaming environment .

det(System-6, The-1)
nn(System-6, Generic-3)
nn(System-6, Universal-4)
nn(System-6, RolePlaying-5)
nsubj(known-10, System-6)
advmod(known-10, commonly-9)
root(ROOT-0, known-10)
mark(system-17, as-11)
nsubj(system-17, GURPS-12)
cop(system-17, is-13)
det(system-17, a-14)
nn(system-17, role-playing-15)
nn(system-17, game-16)
advcl(known-10, system-17)
xsubj(adapt-20, system-17)
partmod(system-17, designed-18)
aux(adapt-20, to-19)
xcomp(designed-18, adapt-20)
det(environment-25, any-22)
amod(environment-25, imaginary-23)
nn(environment-25, gaming-24)
prep_to(adapt-20, environment-25)

A Government is the organization , that is the governing authority of a political unit , the ruling power in a political society , and the apparatus through which a governing body functions and exercises authority .

det(Government-2, A-1)
nsubj(organization-5, Government-2)
cop(organization-5, is-3)
det(organization-5, the-4)
root(ROOT-0, organization-5)
nsubj(authority-11, organization-5)
cop(authority-11, is-8)
det(authority-11, the-9)
amod(authority-11, governing-10)
rcmod(organization-5, authority-11)
det(unit-15, a-13)
amod(unit-15, political-14)
prep_of(authority-11, unit-15)
det(power-19, the-17)
amod(power-19, ruling-18)
rcmod(organization-5, power-19)
conj_and(authority-11, power-19)
det(society-23, a-21)
amod(society-23, political-22)
prep_in(power-19, society-23)
det(apparatus-27, the-26)
rcmod(organization-5, apparatus-27)
conj_and(authority-11, apparatus-27)
rel(functions-33, which-29)
det(body-32, a-30)
amod(body-32, governing-31)
nsubj(functions-33, body-32)
nsubj(exercises-35, body-32)
rcmod(apparatus-27, functions-33)
rcmod(apparatus-27, exercises-35)
conj_and(functions-33, exercises-35)
dobj(functions-33, authority-36)

A Goitre - LBR - BrE - RBR - , or goiter - LBR - AmE - RBR - - LBR - Latin struma - RBR - , also called a bronchocele , is a swelling in the neck - LBR - just below the Adam 's apple or larynx - RBR - due to an enlarged thyroid gland .

nn(BrE-6, A-1)
nn(BrE-6, Goitre-2)
dep(BrE-6, LBR-4)
nsubj(a-35, BrE-6)
dep(BrE-6, RBR-8)
conj_or(BrE-6, goiter-12)
nsubj(a-35, goiter-12)
dep(BrE-6, LBR-14)
dep(LBR-14, AmE-16)
dep(AmE-16, RBR-18)
dep(BrE-6, LBR-21)
nn(struma-24, Latin-23)
dep(LBR-21, struma-24)
dep(struma-24, RBR-26)
advmod(called-30, also-29)
partmod(BrE-6, called-30)
det(bronchocele-32, a-31)
dobj(called-30, bronchocele-32)
cop(a-35, is-34)
root(ROOT-0, a-35)
amod(a-35, swelling-36)
det(neck-39, the-38)
prep_in(a-35, neck-39)
dep(a-35, LBR-41)
advmod(below-44, just-43)
dep(LBR-41, below-44)
det(Adam-46, the-45)
poss(apple-48, Adam-46)
pobj(below-44, apple-48)
pobj(below-44, larynx-50)
conj_or(apple-48, larynx-50)
dep(LBR-41, RBR-52)
det(gland-59, an-56)
amod(gland-59, enlarged-57)
nn(gland-59, thyroid-58)
prep_due_to(RBR-52, gland-59)

In anatomy , a Ganglion - LBR - pl .

prep_in(pl-9, anatomy-2)
det(Ganglion-5, a-4)
nsubj(pl-9, Ganglion-5)
dep(Ganglion-5, LBR-7)
root(ROOT-0, pl-9)

ganglia - RBR - is a tissue mass .

nsubj(mass-8, ganglia-1)
dep(ganglia-1, RBR-3)
cop(mass-8, is-5)
det(mass-8, a-6)
nn(mass-8, tissue-7)
root(ROOT-0, mass-8)

A Grimoire is a textbook of magic .

det(Grimoire-2, A-1)
nsubj(textbook-5, Grimoire-2)
cop(textbook-5, is-3)
det(textbook-5, a-4)
root(ROOT-0, textbook-5)
prep_of(textbook-5, magic-7)

Gazpacho refers to a cold Spanish soup originating in the Southern region of Andalusia .

nsubj(refers-2, Gazpacho-1)
root(ROOT-0, refers-2)
det(soup-7, a-4)
amod(soup-7, cold-5)
amod(soup-7, Spanish-6)
prep_to(refers-2, soup-7)
partmod(soup-7, originating-8)
det(region-12, the-10)
amod(region-12, Southern-11)
prep_in(originating-8, region-12)
prep_of(region-12, Andalusia-14)

A Gnome is a mythical creature characterized by its extremely small size and subterranean lifestyle .

det(Gnome-2, A-1)
nsubj(creature-6, Gnome-2)
cop(creature-6, is-3)
det(creature-6, a-4)
amod(creature-6, mythical-5)
root(ROOT-0, creature-6)
partmod(creature-6, characterized-7)
poss(size-12, its-9)
advmod(small-11, extremely-10)
amod(size-12, small-11)
agent(characterized-7, size-12)
amod(lifestyle-15, subterranean-14)
agent(characterized-7, lifestyle-15)
conj_and(size-12, lifestyle-15)

A Guild is an association of craftsmen in a particular trade .

det(Guild-2, A-1)
nsubj(association-5, Guild-2)
cop(association-5, is-3)
det(association-5, an-4)
root(ROOT-0, association-5)
prep_of(association-5, craftsmen-7)
det(trade-11, a-9)
amod(trade-11, particular-10)
prep_in(craftsmen-7, trade-11)

A Gamemaster or Game Master - LBR - often abbreviated as GM - RBR - is a player in a multiplayer game who acts as organizer , arbitrator , and officiant in rules situations .

det(Master-5, A-1)
nn(Master-5, Gamemaster-2)
conj_or(Gamemaster-2, Game-4)
nn(Master-5, Game-4)
nsubj(abbreviated-10, Master-5)
dep(Master-5, LBR-7)
advmod(abbreviated-10, often-9)
root(ROOT-0, abbreviated-10)
mark(player-18, as-11)
nsubj(player-18, GM-12)
dep(GM-12, RBR-14)
cop(player-18, is-16)
det(player-18, a-17)
advcl(abbreviated-10, player-18)
nsubj(acts-24, player-18)
det(game-22, a-20)
nn(game-22, multiplayer-21)
prep_in(player-18, game-22)
rcmod(player-18, acts-24)
prep_as(acts-24, organizer-26)
prep_as(acts-24, arbitrator-28)
conj_and(organizer-26, arbitrator-28)
prep_as(acts-24, officiant-31)
conj_and(organizer-26, officiant-31)
nn(situations-34, rules-33)
prep_in(organizer-26, situations-34)

In physics , a Gas is a state of matter , consisting of a collection of particles - LBR - molecules , atoms , ions , electrons , etc. - RBR - without a definite shape or volume that are in more or less random motion .

prep_in(state-8, physics-2)
det(Gas-5, a-4)
nsubj(state-8, Gas-5)
cop(state-8, is-6)
det(state-8, a-7)
root(ROOT-0, state-8)
prep_of(state-8, matter-10)
partmod(state-8, consisting-12)
det(collection-15, a-14)
prep_of(consisting-12, collection-15)
prep_of(collection-15, particles-17)
nn(RBR-31, LBR-19)
dep(RBR-31, molecules-21)
appos(molecules-21, atoms-23)
appos(molecules-21, ions-25)
appos(molecules-21, electrons-27)
dep(molecules-21, etc.-29)
dep(collection-15, RBR-31)
det(shape-36, a-34)
amod(shape-36, definite-35)
prep_without(consisting-12, shape-36)
nsubj(are-40, shape-36)
prep_without(consisting-12, volume-38)
conj_or(shape-36, volume-38)
nsubj(are-40, volume-38)
rcmod(shape-36, are-40)
amod(motion-46, more-42)
advmod(random-45, less-44)
conj_or(more-42, random-45)
amod(motion-46, random-45)
prep_in(are-40, motion-46)

In biology the Genome of an organism is its whole hereditary information and is encoded in the DNA - LBR - or , for some viruses , RNA - RBR - .

prep_in(information-12, biology-2)
det(Genome-4, the-3)
nsubj(information-12, Genome-4)
nsubjpass(encoded-15, Genome-4)
det(organism-7, an-6)
prep_of(Genome-4, organism-7)
cop(information-12, is-8)
poss(information-12, its-9)
amod(information-12, whole-10)
amod(information-12, hereditary-11)
root(ROOT-0, information-12)
auxpass(encoded-15, is-14)
conj_and(information-12, encoded-15)
det(DNA-18, the-17)
prep_in(encoded-15, DNA-18)
dep(DNA-18, LBR-20)
dep(RNA-28, or-22)
dep(RNA-28, for-24)
det(viruses-26, some-25)
pobj(for-24, viruses-26)
dep(LBR-20, RNA-28)
dep(LBR-20, RBR-30)

A Genius is a person of great intelligence , who shows an exceptional natural capacity of intellect , especially as shown in creative and original work .

det(Genius-2, A-1)
nsubj(person-5, Genius-2)
cop(person-5, is-3)
det(person-5, a-4)
root(ROOT-0, person-5)
amod(intelligence-8, great-7)
prep_of(person-5, intelligence-8)
nsubj(shows-11, intelligence-8)
rcmod(intelligence-8, shows-11)
det(capacity-15, an-12)
amod(capacity-15, exceptional-13)
amod(capacity-15, natural-14)
dobj(shows-11, capacity-15)
prep_of(capacity-15, intellect-17)
advmod(shown-21, especially-19)
advmod(shown-21, as-20)
dep(shows-11, shown-21)
amod(work-26, creative-23)
conj_and(creative-23, original-25)
amod(work-26, original-25)
prep_in(shown-21, work-26)

A Grape is the non-climacteric fruit that grows on the perennial and deciduous woody vines of the genus Vitis .

det(Grape-2, A-1)
nsubj(fruit-6, Grape-2)
cop(fruit-6, is-3)
det(fruit-6, the-4)
amod(fruit-6, non-climacteric-5)
root(ROOT-0, fruit-6)
nsubj(grows-8, fruit-6)
rcmod(fruit-6, grows-8)
dep(perennial-11, the-10)
prep_on(grows-8, perennial-11)
amod(vines-15, deciduous-13)
nn(vines-15, woody-14)
prep_on(grows-8, vines-15)
conj_and(perennial-11, vines-15)
det(Vitis-19, the-17)
amod(Vitis-19, genus-18)
prep_of(perennial-11, Vitis-19)

The Ganges - LBR - Ãƒâ $ '' Ã ‚ âˆšgÃƒâˆžÃ ‚ Å `` nÃƒâ $ ¦ Ã ‚ â ‚ ¬ iÃƒâ $ '' Ã ‚ âˆ † z , also Ganga audio , DevanÃƒâ ‰ ¥ Ã ‚ â „ cents garÃƒâ ‰ ¥ Ã ‚ Â : lang , GaÃƒÂ ¡ Ã ‚ â $ ™ Ã ‚ âˆ ` gÃƒâ ‰ ¥ Ã ‚ â „ cents in most Indian languages - RBR - is a major river in the Indian subcontinent flowing east through the eponymous plains of northern India into Bangladesh .

det(Ganges-2, The-1)
root(ROOT-0, Ganges-2)
dep(Ganges-2, LBR-4)
nn(Ã-9, Ãƒâ-6)
nn(Ã-9, $-7)
dep(LBR-4, Ã-9)
punct(Ganges-2, ‚-10)
dep(Ganges-2, âˆšgÃƒâˆžÃ-11)
punct(nÃƒâ-15, ‚-12)
nsubj(nÃƒâ-15, Å-13)
parataxis(âˆšgÃƒâˆžÃ-11, nÃƒâ-15)
dep(Ã-18, $-16)
num(Ã-18, ¦-17)
dobj(nÃƒâ-15, Ã-18)
punct(Ã-18, ‚-19)
dep(Ã-18, â-20)
punct(Ã-18, ‚-21)
punct(nÃƒâ-15, ¬-22)
xcomp(âˆšgÃƒâˆžÃ-11, iÃƒâ-23)
dep(Ã-26, $-24)
dobj(iÃƒâ-23, Ã-26)
punct(Ã-26, ‚-27)
dep(Ã-26, âˆ-28)
punct(Ã-26, †-29)
dep(iÃƒâ-23, z-30)
advmod(GaÃƒÂ-53, also-32)
nn(GaÃƒÂ-53, Ganga-33)
nn(GaÃƒÂ-53, audio-34)
dep(GaÃƒÂ-53, DevanÃƒâ-36)
punct(DevanÃƒâ-36, ‰-37)
dep(Ã-39, ¥-38)
dep(â-41, Ã-39)
punct(â-41, ‚-40)
dep(DevanÃƒâ-36, â-41)
punct(â-41, „-42)
dep(â-41, cents-43)
dep(cents-43, garÃƒâ-44)
punct(cents-43, ‰-45)
punct(Â-49, ¥-46)
nn(Â-49, Ã-47)
punct(Â-49, ‚-48)
dep(cents-43, Â-49)
dep(Â-49, lang-51)
nsubj(â-57, GaÃƒÂ-53)
punct(Ã-55, ¡-54)
dep(GaÃƒÂ-53, Ã-55)
punct(Ã-55, ‚-56)
dep(Ã-67, â-57)
dep(âˆ-62, $-58)
num(âˆ-62, ™-59)
nn(âˆ-62, Ã-60)
punct(âˆ-62, ‚-61)
dobj(â-57, âˆ-62)
dep(âˆ-62, gÃƒâ-64)
punct(âˆ-62, ‰-65)
punct(Ã-67, ¥-66)
dep(Ganges-2, Ã-67)
punct(Ã-67, ‚-68)
nn(cents-71, â-69)
nn(cents-71, „-70)
nsubj(river-82, cents-71)
amod(languages-75, most-73)
amod(languages-75, Indian-74)
prep_in(cents-71, languages-75)
dep(cents-71, RBR-77)
cop(river-82, is-79)
det(river-82, a-80)
amod(river-82, major-81)
dep(Ã-67, river-82)
det(subcontinent-86, the-84)
amod(subcontinent-86, Indian-85)
prep_in(river-82, subcontinent-86)
partmod(subcontinent-86, flowing-87)
advmod(flowing-87, east-88)
det(plains-92, the-90)
amod(plains-92, eponymous-91)
prep_through(east-88, plains-92)
amod(India-95, northern-94)
prep_of(plains-92, India-95)
prep_into(flowing-87, Bangladesh-97)

In Germanic mythology , Ginnungagap was the vast , primordial void that existed prior to the creation of the manifest universe .

amod(mythology-3, Germanic-2)
prep_in(void-11, mythology-3)
nsubj(void-11, Ginnungagap-5)
cop(void-11, was-6)
det(void-11, the-7)
amod(void-11, vast-8)
amod(void-11, primordial-10)
root(ROOT-0, void-11)
nsubj(existed-13, void-11)
rcmod(void-11, existed-13)
det(creation-17, the-16)
prep_prior_to(existed-13, creation-17)
det(universe-21, the-19)
amod(universe-21, manifest-20)
prep_of(creation-17, universe-21)

In vector calculus , the Gradient of a scalar field is a vector field which points in the direction of the greatest rate of increase of the scalar field , and whose magnitude is the greatest rate of change .

nn(calculus-3, vector-2)
prep_in(field-14, calculus-3)
det(Gradient-6, the-5)
nsubj(field-14, Gradient-6)
det(field-10, a-8)
nn(field-10, scalar-9)
prep_of(Gradient-6, field-10)
cop(field-14, is-11)
det(field-14, a-12)
nn(field-14, vector-13)
root(ROOT-0, field-14)
nsubj(points-16, field-14)
rcmod(field-14, points-16)
det(direction-19, the-18)
prep_in(points-16, direction-19)
det(rate-23, the-21)
amod(rate-23, greatest-22)
prep_of(direction-19, rate-23)
prep_of(rate-23, increase-25)
det(field-29, the-27)
nn(field-29, scalar-28)
prep_of(increase-25, field-29)
poss(magnitude-33, whose-32)
nsubj(rate-37, magnitude-33)
cop(rate-37, is-34)
det(rate-37, the-35)
amod(rate-37, greatest-36)
conj_and(field-14, rate-37)
rcmod(field-14, rate-37)
nsubj(points-16, rate-37)
prep_of(rate-37, change-39)

The Gauss , abbreviated as G , is the cgs unit of magnetic flux density in a magnetic field - LBR - B - RBR - , named after the German mathematician and physicist Carl Friedrich Gauss .

det(Gauss-2, The-1)
nsubj(unit-11, Gauss-2)
appos(Gauss-2, abbreviated-4)
prep_as(abbreviated-4, G-6)
cop(unit-11, is-8)
det(unit-11, the-9)
nn(unit-11, cgs-10)
root(ROOT-0, unit-11)
amod(density-15, magnetic-13)
nn(density-15, flux-14)
prep_of(unit-11, density-15)
det(field-19, a-17)
amod(field-19, magnetic-18)
prep_in(density-15, field-19)
nn(RBR-25, LBR-21)
dep(RBR-25, B-23)
dep(density-15, RBR-25)
partmod(unit-11, named-28)
det(mathematician-32, the-30)
amod(mathematician-32, German-31)
prep_after(named-28, mathematician-32)
nn(Gauss-37, physicist-34)
nn(Gauss-37, Carl-35)
nn(Gauss-37, Friedrich-36)
prep_after(named-28, Gauss-37)
conj_and(mathematician-32, Gauss-37)

A Glacier is a large , slow-moving river of ice , formed from compacted layers of snow , that slowly deforms and flows in response to gravity and high pressure .

det(Glacier-2, A-1)
nsubj(river-8, Glacier-2)
cop(river-8, is-3)
det(river-8, a-4)
amod(river-8, large-5)
amod(river-8, slow-moving-7)
root(ROOT-0, river-8)
prep_of(river-8, ice-10)
partmod(river-8, formed-12)
amod(layers-15, compacted-14)
prep_from(formed-12, layers-15)
prep_of(layers-15, snow-17)
nsubj(deforms-21, that-19)
nsubj(flows-23, that-19)
advmod(deforms-21, slowly-20)
rcmod(river-8, deforms-21)
rcmod(river-8, flows-23)
conj_and(deforms-21, flows-23)
prep_in(deforms-21, response-25)
nn(pressure-30, gravity-27)
conj_and(gravity-27, high-29)
nn(pressure-30, high-29)
prep_to(response-25, pressure-30)

The Gylfaginning deals with the creation and destruction of the world of the Norse gods , and many other aspects of Norse mythology .

det(Gylfaginning-2, The-1)
nsubj(deals-3, Gylfaginning-2)
root(ROOT-0, deals-3)
det(creation-6, the-5)
prep_with(deals-3, creation-6)
prep_with(deals-3, destruction-8)
conj_and(creation-6, destruction-8)
det(world-11, the-10)
prep_of(creation-6, world-11)
det(gods-15, the-13)
nn(gods-15, Norse-14)
prep_of(world-11, gods-15)
amod(aspects-20, many-18)
amod(aspects-20, other-19)
prep_of(creation-6, aspects-20)
conj_and(world-11, aspects-20)
nn(mythology-23, Norse-22)
prep_of(aspects-20, mythology-23)

A Ghost is typically the apparition of a deceased person , frequently similar in appearance to that person , and usually encountered in places she or he frequented , or in association with the person 's former belongings .

det(Ghost-2, A-1)
nsubj(similar-13, Ghost-2)
nsubj(similar-13', Ghost-2)
cop(similar-13, is-3)
advmod(similar-13, typically-4)
det(apparition-6, the-5)
attr(similar-13, apparition-6)
det(person-10, a-8)
amod(person-10, deceased-9)
prep_of(apparition-6, person-10)
advmod(similar-13, frequently-12)
root(ROOT-0, similar-13)
conj_or(similar-13, similar-13')
prep_in(similar-13, appearance-15)
det(person-18, that-17)
nsubj(encountered-22, person-18)
dep(usually-21, and-20)
dep(person-18, usually-21)
prepc_to(similar-13, encountered-22)
prep_in(frequented-28, places-24)
nsubj(frequented-28, she-25)
conj_or(she-25, he-27)
nsubj(frequented-28, he-27)
ccomp(encountered-22, frequented-28)
prep_in(similar-13', association-32)
det(person-35, the-34)
poss(belongings-38, person-35)
amod(belongings-38, former-37)
prep_with(association-32, belongings-38)

In mathematics , especially -LRB- PRT -RRB- in -LRB- \/ PRT -RRB- category theory and homotopy theory , a Groupoid is a simultaneous generalisation of a group , a setoid - LBR - a set equipped with an equivalence relation - RBR - , and a -LRB- math -RRB- G -LRB- \/ math -RRB- - set - LBR - a set equipped with an action of a group -LRB- math -RRB- G -LRB- \/ math -RRB- - RBR - .

prep_in(generalisation-24, mathematics-2)
advmod(mathematics-2, especially-4)
abbrev(mathematics-2, PRT-6)
nn(PRT-11, \/-10)
dep(mathematics-2, PRT-11)
nn(theory-14, category-13)
prep_in(mathematics-2, theory-14)
amod(theory-17, homotopy-16)
prep_in(mathematics-2, theory-17)
conj_and(theory-14, theory-17)
det(Groupoid-20, a-19)
nsubj(generalisation-24, Groupoid-20)
cop(generalisation-24, is-21)
det(generalisation-24, a-22)
amod(generalisation-24, simultaneous-23)
root(ROOT-0, generalisation-24)
det(group-27, a-26)
prep_of(generalisation-24, group-27)
det(setoid-30, a-29)
appos(group-27, setoid-30)
dep(setoid-30, LBR-32)
det(set-35, a-34)
dep(LBR-32, set-35)
partmod(set-35, equipped-36)
det(relation-40, an-38)
amod(relation-40, equivalence-39)
prep_with(equipped-36, relation-40)
dep(relation-40, RBR-42)
det(math-48, a-46)
prep_with(equipped-36, math-48)
conj_and(relation-40, math-48)
dep(math-48, G-50)
amod(math-53, \/-52)
appos(G-50, math-53)
prep_with(equipped-36, set-56)
conj_and(relation-40, set-56)
prep_with(equipped-36, LBR-58)
conj_and(relation-40, LBR-58)
det(set-61, a-60)
prep_with(equipped-36, set-61)
conj_and(relation-40, set-61)
dep(set-61, equipped-62)
det(action-65, an-64)
prep_with(equipped-62, action-65)
det(G-72, a-67)
nn(G-72, group-68)
appos(G-72, math-70)
prep_of(action-65, G-72)
amod(math-75, \/-74)
appos(G-72, math-75)
prep_with(equipped-36, RBR-78)
conj_and(relation-40, RBR-78)

The Galliard - LBR - gaillarde , in French - RBR - was a form of Renaissance dance and music popular all over Europe in the 16th century .

det(gaillarde-6, The-1)
nn(gaillarde-6, Galliard-2)
dep(gaillarde-6, LBR-4)
nsubj(form-15, gaillarde-6)
prep_in(gaillarde-6, French-9)
dep(gaillarde-6, RBR-11)
cop(form-15, was-13)
det(form-15, a-14)
root(ROOT-0, form-15)
nn(dance-18, Renaissance-17)
prep_of(form-15, dance-18)
prep_of(form-15, music-20)
conj_and(dance-18, music-20)
amod(dance-18, popular-21)
dep(popular-21, all-22)
prep_over(dance-18, Europe-24)
det(century-28, the-26)
amod(century-28, 16th-27)
prep_in(Europe-24, century-28)

A Galaxy is a massive , gravitationally bound system consisting of stars , an interstellar medium of gas and dust , and dark matter .

det(Galaxy-2, A-1)
nsubj(system-9, Galaxy-2)
cop(system-9, is-3)
det(system-9, a-4)
amod(system-9, massive-5)
advmod(bound-8, gravitationally-7)
amod(system-9, bound-8)
root(ROOT-0, system-9)
partmod(system-9, consisting-10)
prep_of(consisting-10, stars-12)
det(medium-16, an-14)
nn(medium-16, interstellar-15)
prep_of(consisting-10, medium-16)
conj_and(stars-12, medium-16)
prep_of(medium-16, gas-18)
prep_of(medium-16, dust-20)
conj_and(gas-18, dust-20)
amod(matter-24, dark-23)
prep_of(consisting-10, matter-24)
conj_and(stars-12, matter-24)

A Gigabyte - LBR - derived from the SI prefix giga - - RBR - is a unit of information or computer storage meaning either exactly 1 billion bytes - LBR - 1000 -LRB- sup -RRB- 3 -LRB- \/ sup -RRB- , or 10 -LRB- sup -RRB- 9 -LRB- \/ sup -RRB- - RBR - or approximately 1.07 billion bytes - LBR - 1024 -LRB- sup -RRB- 3 -LRB- \/ sup -RRB- , or 2 -LRB- sup -RRB- 30 -LRB- \/ sup -RRB- - RBR - .

det(Gigabyte-2, A-1)
root(ROOT-0, Gigabyte-2)
nsubj(unit-18, LBR-4)
dep(LBR-4, derived-6)
det(giga-11, the-8)
nn(giga-11, SI-9)
nn(giga-11, prefix-10)
prep_from(derived-6, giga-11)
dep(LBR-4, RBR-14)
cop(unit-18, is-16)
det(unit-18, a-17)
dep(Gigabyte-2, unit-18)
nn(storage-23, information-20)
conj_or(information-20, computer-22)
nn(storage-23, computer-22)
prep_of(unit-18, storage-23)
partmod(storage-23, meaning-24)
preconj(unit-18, either-25)
dep(Gigabyte-2, exactly-26)
advmod(unit-18, exactly-26)
conj_or(unit-18, exactly-26)
number(billion-28, 1-27)
num(bytes-29, billion-28)
dep(unit-18, bytes-29)
nn(LBR-62, LBR-31)
num(sup-35, 1000-33)
dep(LBR-62, sup-35)
dep(sup-35, 3-37)
amod(sup-40, \/-39)
appos(3-37, sup-40)
cc(10-44, or-43)
dep(sup-35, 10-44)
conj_or(3-37, 10-44)
appos(10-44, sup-46)
dep(10-44, 9-48)
amod(sup-51, \/-50)
appos(10-44, sup-51)
dep(10-44, RBR-54)
quantmod(billion-59, approximately-57)
number(billion-59, 1.07-58)
num(bytes-60, billion-59)
dep(sup-35, bytes-60)
conj_or(3-37, bytes-60)
dep(bytes-29, LBR-62)
num(sup-66, 1024-64)
dep(Gigabyte-2, sup-66)
conj_or(unit-18, sup-66)
dep(sup-66, 3-68)
amod(sup-71, \/-70)
appos(3-68, sup-71)
num(sup-77, 2-75)
dep(Gigabyte-2, sup-77)
conj_or(unit-18, sup-77)
dep(sup-77, 30-79)
amod(sup-82, \/-81)
appos(30-79, sup-82)
dep(30-79, RBR-85)

Giga - - LBR - symbol : G - RBR - is a prefix in the SI system of units denoting 10 -LRB- ; 9 -LRB- ; , or 1,000,000,000 - LBR - -LRB- LST -RRB- 1 -LRB- \/ LST -RRB- thousand million - RBR - .

nsubj(prefix-14, Giga-1)
nn(RBR-10, LBR-4)
dep(RBR-10, symbol-6)
dep(symbol-6, G-8)
dep(Giga-1, RBR-10)
cop(prefix-14, is-12)
det(prefix-14, a-13)
root(ROOT-0, prefix-14)
det(system-18, the-16)
nn(system-18, SI-17)
prep_in(prefix-14, system-18)
prep_of(system-18, units-20)
partmod(units-20, denoting-21)
dep(denoting-21, 10-22)
dep(RBR-45, 9-25)
dep(1,000,000,000-30, or-29)
dep(LBR-32, 1,000,000,000-30)
dep(9-25, LBR-32)
abbrev(LBR-32, LST-35)
dep(LBR-32, 1-37)
nn(LST-40, \/-39)
abbrev(1-37, LST-40)
num(million-43, thousand-42)
dep(9-25, million-43)
partmod(10-22, RBR-45)

In typography , a Grapheme is the fundamental unit in written language .

prep_in(unit-9, typography-2)
det(Grapheme-5, a-4)
nsubj(unit-9, Grapheme-5)
cop(unit-9, is-6)
det(unit-9, the-7)
amod(unit-9, fundamental-8)
root(ROOT-0, unit-9)
amod(language-12, written-11)
prep_in(unit-9, language-12)

General Telephone and Electronics - LBR - GTE - RBR - was the largest of the `` independent `` US telephone companies during the days of the Bell System .

nn(Telephone-2, General-1)
nsubj(largest-14, Telephone-2)
conj_and(Telephone-2, Electronics-4)
nsubj(largest-14, Electronics-4)
nn(RBR-10, LBR-6)
dep(RBR-10, GTE-8)
dep(Telephone-2, RBR-10)
cop(largest-14, was-12)
det(largest-14, the-13)
root(ROOT-0, largest-14)
det(US-20, the-16)
amod(US-20, independent-18)
prep_of(largest-14, US-20)
nn(companies-22, telephone-21)
dep(US-20, companies-22)
det(days-25, the-24)
prep_during(largest-14, days-25)
det(System-29, the-27)
nn(System-29, Bell-28)
prep_of(days-25, System-29)

Properly , the term Gliding refers to descending flight of a heavier-than-air craft , whereas soaring is the correct term to use when the craft gains altitude or speed from rising air .

advmod(refers-6, Properly-1)
det(Gliding-5, the-3)
nn(Gliding-5, term-4)
nsubj(refers-6, Gliding-5)
root(ROOT-0, refers-6)
amod(flight-9, descending-8)
prep_to(refers-6, flight-9)
det(craft-13, a-11)
amod(craft-13, heavier-than-air-12)
prep_of(flight-9, craft-13)
mark(term-20, whereas-15)
nsubj(term-20, soaring-16)
cop(term-20, is-17)
det(term-20, the-18)
amod(term-20, correct-19)
advcl(refers-6, term-20)
aux(use-22, to-21)
infmod(term-20, use-22)
advmod(gains-26, when-23)
det(craft-25, the-24)
nsubj(gains-26, craft-25)
advcl(use-22, gains-26)
dobj(gains-26, altitude-27)
dobj(gains-26, speed-29)
conj_or(altitude-27, speed-29)
amod(air-32, rising-31)
prep_from(gains-26, air-32)

A Guitarist is a musician who plays the guitar .

det(Guitarist-2, A-1)
nsubj(musician-5, Guitarist-2)
cop(musician-5, is-3)
det(musician-5, a-4)
root(ROOT-0, musician-5)
nsubj(plays-7, musician-5)
rcmod(musician-5, plays-7)
det(guitar-9, the-8)
dobj(plays-7, guitar-9)

In Christianity , a Gospel - LBR - from Old English , `` good news `` - RBR - is generally one of four canonical books of the New Testament that describe the birth , life , ministry , crucifixion , and resurrection of Jesus .

prep_in(one-22, Christianity-2)
det(Gospel-5, a-4)
nsubj(one-22, Gospel-5)
dep(Gospel-5, LBR-7)
nn(English-11, Old-10)
prep_from(Gospel-5, English-11)
amod(RBR-18, good-14)
nn(RBR-18, news-15)
dep(Gospel-5, RBR-18)
cop(one-22, is-20)
advmod(one-22, generally-21)
root(ROOT-0, one-22)
nsubj(describe-32, one-22)
num(books-26, four-24)
amod(books-26, canonical-25)
prep_of(one-22, books-26)
det(Testament-30, the-28)
nn(Testament-30, New-29)
prep_of(books-26, Testament-30)
rcmod(one-22, describe-32)
det(birth-34, the-33)
dobj(describe-32, birth-34)
dobj(describe-32, life-36)
conj_and(birth-34, life-36)
dobj(describe-32, ministry-38)
conj_and(birth-34, ministry-38)
dobj(describe-32, crucifixion-40)
conj_and(birth-34, crucifixion-40)
dobj(describe-32, resurrection-43)
conj_and(birth-34, resurrection-43)
prep_of(birth-34, Jesus-45)

The GNU Image Manipulation Program , or GIMP , is a raster graphics editor used to process digital graphics and photographs .

det(Program-5, The-1)
nn(Program-5, GNU-2)
nn(Program-5, Image-3)
nn(Program-5, Manipulation-4)
nsubj(editor-14, Program-5)
dep(GIMP-8, or-7)
dep(Program-5, GIMP-8)
cop(editor-14, is-10)
det(editor-14, a-11)
nn(editor-14, raster-12)
nn(editor-14, graphics-13)
root(ROOT-0, editor-14)
xsubj(process-17, editor-14)
partmod(editor-14, used-15)
aux(process-17, to-16)
xcomp(used-15, process-17)
amod(graphics-19, digital-18)
dobj(process-17, graphics-19)
dobj(process-17, photographs-21)
conj_and(graphics-19, photographs-21)

The Goths were East Germanic tribes who , in the 3rd and 4th centuries , harried the Roman Empire and later adopted Arianism .

det(Goths-2, The-1)
nsubj(tribes-6, Goths-2)
cop(tribes-6, were-3)
nn(tribes-6, East-4)
nn(tribes-6, Germanic-5)
root(ROOT-0, tribes-6)
nsubj(harried-16, tribes-6)
nsubj(adopted-22, tribes-6)
det(centuries-14, the-10)
amod(centuries-14, 3rd-11)
conj_and(3rd-11, 4th-13)
amod(centuries-14, 4th-13)
prep_in(harried-16, centuries-14)
rcmod(tribes-6, harried-16)
det(Empire-19, the-17)
nn(Empire-19, Roman-18)
dobj(harried-16, Empire-19)
advmod(adopted-22, later-21)
rcmod(tribes-6, adopted-22)
conj_and(harried-16, adopted-22)
dobj(adopted-22, Arianism-23)

Glycolysis is the sequence of reactions that converts glucose into pyruvate with the concomitant production of a relatively small amount of adenosine triphosphate - LBR - ATP - RBR - .

nsubj(sequence-4, Glycolysis-1)
cop(sequence-4, is-2)
det(sequence-4, the-3)
root(ROOT-0, sequence-4)
prep_of(sequence-4, reactions-6)
nsubj(converts-8, reactions-6)
rcmod(reactions-6, converts-8)
dobj(converts-8, glucose-9)
prep_into(converts-8, pyruvate-11)
det(production-15, the-13)
amod(production-15, concomitant-14)
prep_with(pyruvate-11, production-15)
det(amount-20, a-17)
advmod(small-19, relatively-18)
amod(amount-20, small-19)
prep_of(production-15, amount-20)
amod(triphosphate-23, adenosine-22)
prep_of(amount-20, triphosphate-23)
nn(RBR-29, LBR-25)
dep(RBR-29, ATP-27)
dep(amount-20, RBR-29)

A Gambeson - LBR - or aketon or padded jack - RBR - is a padded defensive jacket , worn as armor separately , or combined with mail or plate armor .

det(Gambeson-2, A-1)
nsubj(jacket-18, Gambeson-2)
nsubj(combined-26, Gambeson-2)
nn(RBR-12, LBR-4)
dep(aketon-7, or-6)
dep(RBR-12, aketon-7)
amod(jack-10, padded-9)
conj_or(aketon-7, jack-10)
dep(RBR-12, jack-10)
dep(Gambeson-2, RBR-12)
cop(jacket-18, is-14)
det(jacket-18, a-15)
amod(jacket-18, padded-16)
amod(jacket-18, defensive-17)
root(ROOT-0, jacket-18)
partmod(jacket-18, worn-20)
prep_as(worn-20, armor-22)
advmod(worn-20, separately-23)
conj_or(jacket-18, combined-26)
nn(armor-31, mail-28)
conj_or(mail-28, plate-30)
nn(armor-31, plate-30)
prep_with(combined-26, armor-31)

Gauntlet refers to a video game originally produced in 1985 by Atari Games .

nsubj(refers-2, Gauntlet-1)
root(ROOT-0, refers-2)
det(game-6, a-4)
amod(game-6, video-5)
prep_to(refers-2, game-6)
advmod(produced-8, originally-7)
partmod(game-6, produced-8)
prep_in(produced-8, 1985-10)
nn(Games-13, Atari-12)
agent(produced-8, Games-13)

The Giraffe - LBR - Giraffa camelopardalis - RBR - is an African even-toed ungulate mammal , the tallest of all land-living animal species , and the largest ruminant .

det(camelopardalis-7, The-1)
nn(camelopardalis-7, Giraffe-2)
dep(camelopardalis-7, LBR-4)
nn(camelopardalis-7, Giraffa-6)
nsubj(mammal-16, camelopardalis-7)
nsubj(tallest-19, camelopardalis-7)
dep(camelopardalis-7, RBR-9)
cop(mammal-16, is-11)
det(mammal-16, an-12)
amod(mammal-16, African-13)
amod(mammal-16, even-toed-14)
nn(mammal-16, ungulate-15)
root(ROOT-0, mammal-16)
det(tallest-19, the-18)
conj_and(mammal-16, tallest-19)
det(species-24, all-21)
amod(species-24, land-living-22)
nn(species-24, animal-23)
prep_of(tallest-19, species-24)
det(ruminant-29, the-27)
amod(ruminant-29, largest-28)
conj_and(mammal-16, ruminant-29)

A Gardener is any person involved in the growing and maintenance of plants , notably in a garden .

det(Gardener-2, A-1)
nsubj(person-5, Gardener-2)
cop(person-5, is-3)
det(person-5, any-4)
root(ROOT-0, person-5)
partmod(person-5, involved-6)
det(growing-9, the-8)
prep_in(involved-6, growing-9)
prep_in(involved-6, maintenance-11)
conj_and(growing-9, maintenance-11)
prep_of(growing-9, plants-13)
advmod(involved-6, notably-15)
det(garden-18, a-17)
prep_in(involved-6, garden-18)

A Goddess is a female deity .

det(Goddess-2, A-1)
nsubj(deity-6, Goddess-2)
cop(deity-6, is-3)
det(deity-6, a-4)
amod(deity-6, female-5)
root(ROOT-0, deity-6)

Gramophone refers to a British publication devoted to classical music .

nsubj(refers-2, Gramophone-1)
root(ROOT-0, refers-2)
det(publication-6, a-4)
amod(publication-6, British-5)
prep_to(refers-2, publication-6)
partmod(publication-6, devoted-7)
amod(music-10, classical-9)
prep_to(devoted-7, music-10)

The Genotype is the genetic constitution of a cell , an organism , or an individual , that is the specific allele makeup of the individual , usually with reference to a specific character under consideration .

det(Genotype-2, The-1)
nsubj(constitution-6, Genotype-2)
cop(constitution-6, is-3)
det(constitution-6, the-4)
amod(constitution-6, genetic-5)
root(ROOT-0, constitution-6)
nsubj(makeup-23, constitution-6)
det(cell-9, a-8)
prep_of(constitution-6, cell-9)
det(organism-12, an-11)
prep_of(constitution-6, organism-12)
conj_or(cell-9, organism-12)
det(individual-16, an-15)
prep_of(constitution-6, individual-16)
conj_or(cell-9, individual-16)
cop(makeup-23, is-19)
det(makeup-23, the-20)
amod(makeup-23, specific-21)
nn(makeup-23, allele-22)
rcmod(constitution-6, makeup-23)
det(individual-26, the-25)
prep_of(makeup-23, individual-26)
advmod(makeup-23, usually-28)
prep_with(makeup-23, reference-30)
det(character-34, a-32)
amod(character-34, specific-33)
prep_to(reference-30, character-34)
prep_under(character-34, consideration-36)

A Gemstone or gem , also called a precious or semi-precious stone , is a piece of attractive mineral , which - when cut and polished - is used to make jewelry or other adornments .

det(Gemstone-2, A-1)
nsubj(piece-16, Gemstone-2)
conj_or(Gemstone-2, gem-4)
nsubj(piece-16, gem-4)
advmod(called-7, also-6)
partmod(Gemstone-2, called-7)
det(stone-12, a-8)
amod(stone-12, precious-9)
conj_or(precious-9, semi-precious-11)
amod(stone-12, semi-precious-11)
dobj(called-7, stone-12)
cop(piece-16, is-14)
det(piece-16, a-15)
root(ROOT-0, piece-16)
amod(mineral-19, attractive-18)
prep_of(piece-16, mineral-19)
nsubjpass(used-29, mineral-19)
advmod(cut-24, when-23)
parataxis(used-29, cut-24)
conj_and(cut-24, polished-26)
parataxis(used-29, polished-26)
auxpass(used-29, is-28)
rcmod(mineral-19, used-29)
aux(make-31, to-30)
xcomp(used-29, make-31)
nn(adornments-35, jewelry-32)
conj_or(jewelry-32, other-34)
nn(adornments-35, other-34)
dobj(make-31, adornments-35)

A Gate is a point of entry to a space enclosed by walls , or an opening in a fence .

det(Gate-2, A-1)
nsubj(point-5, Gate-2)
cop(point-5, is-3)
det(point-5, a-4)
root(ROOT-0, point-5)
prep_of(point-5, entry-7)
det(space-10, a-9)
prep_to(entry-7, space-10)
partmod(space-10, enclosed-11)
agent(enclosed-11, walls-13)
det(opening-17, an-16)
conj_or(point-5, opening-17)
det(fence-20, a-19)
prep_in(opening-17, fence-20)

In Greek mythology , Glaucus - LBR - `` shiny , `` `` bright `` or `` bluish-green `` - RBR - was the name of several different figures , including one god .

amod(mythology-3, Greek-2)
prep_in(shiny-10, mythology-3)
nsubj(shiny-10, Glaucus-5)
dep(Glaucus-5, LBR-7)
root(ROOT-0, shiny-10)
csubj(name-25, bright-14)
cc(bluish-green-18, or-16)
dobj(bright-14, bluish-green-18)
dep(bluish-green-18, RBR-21)
cop(name-25, was-23)
det(name-25, the-24)
ccomp(shiny-10, name-25)
amod(figures-29, several-27)
amod(figures-29, different-28)
prep_of(name-25, figures-29)
num(god-33, one-32)
prep_including(shiny-10, god-33)

A Gallon is a measure of volume .

det(Gallon-2, A-1)
nsubj(measure-5, Gallon-2)
cop(measure-5, is-3)
det(measure-5, a-4)
root(ROOT-0, measure-5)
prep_of(measure-5, volume-7)

A Glyph is an element of writing .

det(Glyph-2, A-1)
nsubj(element-5, Glyph-2)
cop(element-5, is-3)
det(element-5, an-4)
root(ROOT-0, element-5)
prepc_of(element-5, writing-7)

The Game.com - LBR - pronounced in TV commercials as `` game com `` , not `` game dot com `` and not capitalized in marketing material - RBR - was a handheld game console released by Tiger Electronics in September 1997 .

det(Game.com-2, The-1)
nsubj(pronounced-6, Game.com-2)
dep(Game.com-2, LBR-4)
root(ROOT-0, pronounced-6)
nn(commercials-9, TV-8)
prep_in(pronounced-6, commercials-9)
mark(console-35, as-10)
nn(com-13, game-12)
dobj(dot-19, com-13)
nsubj(console-35, com-13)
neg(dot-19, not-16)
nsubj(dot-19, game-18)
dep(com-13, dot-19)
dep(capitalized-24, com-20)
cc(capitalized-24, and-22)
neg(capitalized-24, not-23)
dep(dot-19, capitalized-24)
nn(material-27, marketing-26)
prep_in(capitalized-24, material-27)
dep(capitalized-24, RBR-29)
cop(console-35, was-31)
det(console-35, a-32)
amod(console-35, handheld-33)
nn(console-35, game-34)
advcl(pronounced-6, console-35)
partmod(console-35, released-36)
nn(Electronics-39, Tiger-38)
agent(released-36, Electronics-39)
prep_in(Electronics-39, September-41)
num(September-41, 1997-42)

Among heresiologists , Gnosis denotes different Jewish , Christian or Pagan belief systems of a religio-philosophical knowledge such as , first and foremost , Gnosticism and other dualist systems from the 1st and 2nd centuries A. D. In Australia , New Zealand , South Africa and Newfoundland , the term Gallipoli alone is used to describe the 8 month campaign .

prep_among(used-54, heresiologists-2)
nsubj(denotes-5, Gnosis-4)
parataxis(used-54, denotes-5)
amod(systems-13, different-6)
nn(systems-13, Jewish-7)
conj_or(Jewish-7, Christian-9)
nn(systems-13, Christian-9)
conj_or(Jewish-7, Pagan-11)
nn(systems-13, Pagan-11)
nn(systems-13, belief-12)
dobj(denotes-5, systems-13)
det(knowledge-17, a-15)
amod(knowledge-17, religio-philosophical-16)
prep_of(denotes-5, knowledge-17)
mwe(as-19, such-18)
prep(knowledge-17, as-19)
nsubj(centuries-35, first-21)
nn(Gnosticism-25, foremost-23)
nn(systems-29, Gnosticism-25)
conj_and(Gnosticism-25, other-27)
nn(systems-29, other-27)
nn(systems-29, dualist-28)
conj_and(first-21, systems-29)
nsubj(centuries-35, systems-29)
dep(1st-32, the-31)
prep_from(systems-29, 1st-32)
prep_from(systems-29, 2nd-34)
conj_and(1st-32, 2nd-34)
dep(as-19, centuries-35)
nn(D.-37, A.-36)
dep(centuries-35, D.-37)
dep(D.-37, In-38)
pobj(In-38, Australia-39)
nn(Zealand-42, New-41)
pobj(In-38, Zealand-42)
conj_and(Australia-39, Zealand-42)
nn(Africa-45, South-44)
pobj(In-38, Africa-45)
conj_and(Australia-39, Africa-45)
pobj(In-38, Newfoundland-47)
conj_and(Australia-39, Newfoundland-47)
det(Gallipoli-51, the-49)
nn(Gallipoli-51, term-50)
nsubjpass(used-54, Gallipoli-51)
xsubj(describe-56, Gallipoli-51)
advmod(used-54, alone-52)
auxpass(used-54, is-53)
root(ROOT-0, used-54)
aux(describe-56, to-55)
xcomp(used-54, describe-56)
det(campaign-60, the-57)
num(campaign-60, 8-58)
nn(campaign-60, month-59)
tmod(describe-56, campaign-60)

The Greyhound is a breed of dog that has been primarily bred for coursing game and racing .

det(Greyhound-2, The-1)
nsubj(breed-5, Greyhound-2)
cop(breed-5, is-3)
det(breed-5, a-4)
root(ROOT-0, breed-5)
nsubjpass(bred-12, breed-5)
prep_of(breed-5, dog-7)
aux(bred-12, has-9)
auxpass(bred-12, been-10)
advmod(bred-12, primarily-11)
rcmod(breed-5, bred-12)
prepc_for(bred-12, coursing-14)
dobj(coursing-14, game-15)
dobj(coursing-14, racing-17)
conj_and(game-15, racing-17)

The Gulag was the government agency that administered the penal labor camps of the Soviet Union .

det(Gulag-2, The-1)
nsubj(agency-6, Gulag-2)
cop(agency-6, was-3)
det(agency-6, the-4)
nn(agency-6, government-5)
root(ROOT-0, agency-6)
nsubj(administered-8, agency-6)
rcmod(agency-6, administered-8)
det(camps-12, the-9)
amod(camps-12, penal-10)
nn(camps-12, labor-11)
dobj(administered-8, camps-12)
det(Union-16, the-14)
nn(Union-16, Soviet-15)
prep_of(camps-12, Union-16)

In Arabian folklore , a Genie is a fiery creature with free will .

amod(folklore-3, Arabian-2)
prep_in(creature-10, folklore-3)
det(Genie-6, a-5)
nsubj(creature-10, Genie-6)
cop(creature-10, is-7)
det(creature-10, a-8)
amod(creature-10, fiery-9)
root(ROOT-0, creature-10)
amod(will-13, free-12)
prep_with(creature-10, will-13)

A Geyser is a hot spring characterized by intermittent discharge of water ejected turbulently and accomplished by a vapor phase .

det(Geyser-2, A-1)
nsubj(spring-6, Geyser-2)
cop(spring-6, is-3)
det(spring-6, a-4)
amod(spring-6, hot-5)
root(ROOT-0, spring-6)
partmod(spring-6, characterized-7)
amod(discharge-10, intermittent-9)
agent(characterized-7, discharge-10)
prep_of(discharge-10, water-12)
dep(water-12, ejected-13)
advmod(ejected-13, turbulently-14)
dep(water-12, accomplished-16)
conj_and(ejected-13, accomplished-16)
det(phase-20, a-18)
nn(phase-20, vapor-19)
prep_by(accomplished-16, phase-20)

A Gimlet is a hand tool for drilling small holes , mainly in wood , without splitting .

det(Gimlet-2, A-1)
nsubj(tool-6, Gimlet-2)
cop(tool-6, is-3)
det(tool-6, a-4)
nn(tool-6, hand-5)
root(ROOT-0, tool-6)
prepc_for(tool-6, drilling-8)
amod(holes-10, small-9)
dobj(drilling-8, holes-10)
advmod(drilling-8, mainly-12)
prep_in(drilling-8, wood-14)
prep_without(drilling-8, splitting-17)

Gent refers to a shortened form of gentleman .

nsubj(refers-2, Gent-1)
root(ROOT-0, refers-2)
det(form-6, a-4)
amod(form-6, shortened-5)
prep_to(refers-2, form-6)
prep_of(form-6, gentleman-8)

The Glottis is defined as the combination of the vocal folds and the space in between the folds - LBR - the rima glottidis - RBR - .

det(Glottis-2, The-1)
nsubjpass(defined-4, Glottis-2)
auxpass(defined-4, is-3)
root(ROOT-0, defined-4)
det(combination-7, the-6)
prep_as(defined-4, combination-7)
det(folds-11, the-9)
amod(folds-11, vocal-10)
prep_of(combination-7, folds-11)
det(space-14, the-13)
prep_as(defined-4, space-14)
conj_and(combination-7, space-14)
det(folds-18, the-17)
prep_between(glottidis-24, folds-18)
dep(folds-18, LBR-20)
det(glottidis-24, the-22)
nn(glottidis-24, rima-23)
prep_in(space-14, glottidis-24)
dep(glottidis-24, RBR-26)

The Goldfish , Carassius auratus , was one of the earliest fish to be domesticated , and is still one of the most commonly kept aquarium fish and water garden fish .

det(Goldfish-2, The-1)
nsubj(one-8, Goldfish-2)
nn(auratus-5, Carassius-4)
appos(Goldfish-2, auratus-5)
cop(one-8, was-7)
root(ROOT-0, one-8)
det(fish-12, the-10)
amod(fish-12, earliest-11)
prep_of(one-8, fish-12)
aux(domesticated-15, to-13)
auxpass(domesticated-15, be-14)
infmod(one-8, domesticated-15)
cop(one-20, is-18)
advmod(one-20, still-19)
infmod(one-8, one-20)
conj_and(domesticated-15, one-20)
det(fish-27, the-22)
advmod(kept-25, most-23)
advmod(kept-25, commonly-24)
amod(fish-27, kept-25)
nn(fish-27, aquarium-26)
prep_of(one-20, fish-27)
nn(fish-31, water-29)
nn(fish-31, garden-30)
prep_of(one-20, fish-31)
conj_and(fish-27, fish-31)

In plants and algae that undergo alternation of generations , a Gametophyte is the multicellular structure , or phase , that is haploid , containing a single set of chromosomes : The gametophyte produces male or female gametes - LBR - or both - RBR - , by a process of cell division called mitosis .

prep_in(structure-16, plants-2)
conj_and(plants-2, algae-4)
nsubj(undergo-6, algae-4)
prep_in(structure-16, algae-4)
rcmod(algae-4, undergo-6)
dobj(undergo-6, alternation-7)
prep_of(alternation-7, generations-9)
det(Gametophyte-12, a-11)
nsubj(structure-16, Gametophyte-12)
nsubj(containing-25, Gametophyte-12)
cop(structure-16, is-13)
det(structure-16, the-14)
nn(structure-16, multicellular-15)
root(ROOT-0, structure-16)
conj_or(structure-16, phase-19)
nsubjpass(haploid-23, phase-19)
auxpass(haploid-23, is-22)
rcmod(phase-19, haploid-23)
conj_or(structure-16, containing-25)
partmod(structure-16, containing-25)
det(set-28, a-26)
amod(set-28, single-27)
dobj(containing-25, set-28)
prep_of(set-28, chromosomes-30)
det(gametophyte-33, The-32)
nsubj(produces-34, gametophyte-33)
parataxis(structure-16, produces-34)
amod(gametes-38, male-35)
conj_or(male-35, female-37)
amod(gametes-38, female-37)
dobj(produces-34, gametes-38)
dep(gametes-38, LBR-40)
dep(both-43, or-42)
dep(LBR-40, both-43)
dep(both-43, RBR-45)
det(process-50, a-49)
prep_by(produces-34, process-50)
nn(division-53, cell-52)
prep_of(process-50, division-53)
partmod(division-53, called-54)
dobj(called-54, mitosis-55)

According to the Sumerian king list , Gilgamesh was the son of Lugalbanda and the fifth king of Uruk - LBR - Early Dynastic II , first dynasty of Uruk - RBR - .

prepc_according_to(son-11, to-2)
det(list-6, the-3)
nn(list-6, Sumerian-4)
nn(list-6, king-5)
pobj(son-11, list-6)
nsubj(son-11, Gilgamesh-8)
cop(son-11, was-9)
det(son-11, the-10)
root(ROOT-0, son-11)
prep_of(son-11, Lugalbanda-13)
det(king-17, the-15)
amod(king-17, fifth-16)
conj_and(son-11, king-17)
prep_of(king-17, Uruk-19)
dep(king-17, LBR-21)
advmod(king-17, Early-23)
nn(II-25, Dynastic-24)
dep(king-17, II-25)
amod(dynasty-28, first-27)
appos(II-25, dynasty-28)
prep_of(dynasty-28, Uruk-30)
dep(II-25, RBR-32)

Helium - LBR - He - RBR - is a colorless , odorless , tasteless , non-toxic , inert monatomic chemical element that heads the noble gas series in the periodic table and whose atomic number is 2 .

nsubj(element-22, Helium-1)
nn(RBR-7, LBR-3)
dep(RBR-7, He-5)
dep(Helium-1, RBR-7)
cop(element-22, is-9)
det(element-22, a-10)
amod(element-22, colorless-11)
amod(element-22, odorless-13)
amod(element-22, tasteless-15)
amod(element-22, non-toxic-17)
amod(element-22, inert-19)
amod(element-22, monatomic-20)
nn(element-22, chemical-21)
root(ROOT-0, element-22)
nsubj(heads-24, element-22)
rcmod(element-22, heads-24)
det(series-28, the-25)
amod(series-28, noble-26)
nn(series-28, gas-27)
dobj(heads-24, series-28)
det(table-32, the-30)
amod(table-32, periodic-31)
prep_in(series-28, table-32)
poss(number-36, whose-34)
amod(number-36, atomic-35)
nsubj(2-38, number-36)
cop(2-38, is-37)
dobj(heads-24, 2-38)
conj_and(series-28, 2-38)
rcmod(series-28, 2-38)

In organic chemistry , a Hydrocarbon is an organic compound consisting entirely of hydrogen and carbon .

amod(chemistry-3, organic-2)
prep_in(compound-10, chemistry-3)
det(Hydrocarbon-6, a-5)
nsubj(compound-10, Hydrocarbon-6)
cop(compound-10, is-7)
det(compound-10, an-8)
amod(compound-10, organic-9)
root(ROOT-0, compound-10)
partmod(compound-10, consisting-11)
advmod(consisting-11, entirely-12)
prep_of(consisting-11, hydrogen-14)
prep_of(consisting-11, carbon-16)
conj_and(hydrogen-14, carbon-16)

The Homepage - LBR - often written as home page - RBR - or main page is the URL or local file that automatically loads when a web browser starts and when the browser 's `` home `` button is pressed .

det(Homepage-2, The-1)
nsubj(URL-19, Homepage-2)
dep(Homepage-2, LBR-4)
advmod(written-7, often-6)
partmod(Homepage-2, written-7)
nn(page-10, home-9)
prep_as(written-7, page-10)
conj_or(Homepage-2, RBR-12)
nsubj(URL-19, RBR-12)
amod(page-16, main-15)
conj_or(Homepage-2, page-16)
nsubj(URL-19, page-16)
cop(URL-19, is-17)
det(URL-19, the-18)
root(ROOT-0, URL-19)
nsubj(loads-25, URL-19)
amod(file-22, local-21)
conj_or(URL-19, file-22)
nsubj(loads-25, file-22)
advmod(loads-25, automatically-24)
rcmod(URL-19, loads-25)
advmod(starts-30, when-26)
det(browser-29, a-27)
nn(browser-29, web-28)
nsubj(starts-30, browser-29)
dep(loads-25, starts-30)
advmod(pressed-41, when-32)
det(browser-34, the-33)
poss(home-37, browser-34)
nsubjpass(pressed-41, home-37)
advmod(pressed-41, button-39)
auxpass(pressed-41, is-40)
dep(loads-25, pressed-41)
conj_and(starts-30, pressed-41)

In mathematics and computer science , Hexadecimal - LBR - also base-16 , hexa , or hex - RBR - is a numeral system with a radix , or base , of 16 .

prep_in(system-24, mathematics-2)
nn(science-5, computer-4)
conj_and(mathematics-2, science-5)
prep_in(system-24, science-5)
nsubj(system-24, Hexadecimal-7)
nn(RBR-19, LBR-9)
dep(base-16-12, also-11)
dep(RBR-19, base-16-12)
conj_or(base-16-12, hexa-14)
dep(RBR-19, hexa-14)
conj_or(base-16-12, hex-17)
dep(RBR-19, hex-17)
dep(Hexadecimal-7, RBR-19)
cop(system-24, is-21)
det(system-24, a-22)
nn(system-24, numeral-23)
root(ROOT-0, system-24)
det(radix-27, a-26)
prep_with(system-24, radix-27)
prep_with(system-24, base-30)
conj_or(radix-27, base-30)
prep_of(radix-27, 16-33)

A Hex refers to a curse or magical spell or a female caster of such .

det(Hex-2, A-1)
nsubj(refers-3, Hex-2)
root(ROOT-0, refers-3)
det(spell-9, a-5)
amod(spell-9, curse-6)
conj_or(curse-6, magical-8)
amod(spell-9, magical-8)
prep_to(refers-3, spell-9)
det(caster-13, a-11)
amod(caster-13, female-12)
prep_to(refers-3, caster-13)
conj_or(spell-9, caster-13)
prep_of(caster-13, such-15)

In statistics , a Histogram is a graphical display of tabulated frequencies .

prep_in(display-9, statistics-2)
det(Histogram-5, a-4)
nsubj(display-9, Histogram-5)
cop(display-9, is-6)
det(display-9, a-7)
amod(display-9, graphical-8)
root(ROOT-0, display-9)
amod(frequencies-12, tabulated-11)
prep_of(display-9, frequencies-12)

A Hearse is a funeral vehicle , a conveyance for the coffin .

det(Hearse-2, A-1)
nsubj(vehicle-6, Hearse-2)
cop(vehicle-6, is-3)
det(vehicle-6, a-4)
amod(vehicle-6, funeral-5)
root(ROOT-0, vehicle-6)
det(conveyance-9, a-8)
appos(vehicle-6, conveyance-9)
det(coffin-12, the-11)
prep_for(conveyance-9, coffin-12)

A Hobby is a spare-time recreational pursuit .

det(Hobby-2, A-1)
nsubj(pursuit-7, Hobby-2)
cop(pursuit-7, is-3)
det(pursuit-7, a-4)
amod(pursuit-7, spare-time-5)
amod(pursuit-7, recreational-6)
root(ROOT-0, pursuit-7)

A Herb is a plant that is valued for qualities such as medicinal properties , flavor , scent , or the like .

det(Herb-2, A-1)
nsubj(plant-5, Herb-2)
cop(plant-5, is-3)
det(plant-5, a-4)
root(ROOT-0, plant-5)
nsubjpass(valued-8, plant-5)
auxpass(valued-8, is-7)
rcmod(plant-5, valued-8)
prep_for(valued-8, qualities-10)
amod(properties-14, medicinal-13)
prep_such_as(qualities-10, properties-14)
prep_such_as(qualities-10, flavor-16)
conj_or(properties-14, flavor-16)
prep_such_as(qualities-10, scent-18)
conj_or(properties-14, scent-18)
det(like-22, the-21)
prep_such_as(qualities-10, like-22)
conj_or(properties-14, like-22)

The word Hoplite - LBR - Greek ÃƒÂ ¡ Ã ‚ âˆ Ã ‚ â „ cents Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ¯ Ãƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâ „ Ã ‚ Â · Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , hoplitÃƒâ ‰ ¥ Ã ‚ â $ žs - RBR - derives from hoplon - LBR - ÃƒÂ ¡ Ã ‚ âˆ Ã ‚ âˆ ` Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ¿ Ãƒâ „ Ã ‚ âˆ , plural hopla , ÃƒÂ ¡ Ã ‚ âˆ Ã ‚ âˆ ` Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ± - RBR - meaning an item of armor or equipment , thus ` hoplite ' may approximate to ` armored man ' .

det(Hoplite-3, The-1)
nn(Hoplite-3, word-2)
nsubj(approximate-158, Hoplite-3)
dep(Hoplite-3, LBR-5)
amod(‚-11, Greek-7)
nn(‚-11, ÃƒÂ-8)
nn(‚-11, ¡-9)
nn(‚-11, Ã-10)
dep(â-22, ‚-11)
nn(Ã-13, âˆ-12)
dep(‚-11, Ã-13)
nn(cents-17, ‚-14)
nn(cents-17, â-15)
amod(cents-17, „-16)
dep(â-22, cents-17)
nn(â-22, Ãƒâˆ-18)
nn(â-22, ‚-19)
nn(â-22, Ã-20)
nn(â-22, ‚-21)
dep(â-54, â-22)
dep(â-22, $-23)
num($-23, cents-24)
nn(Â-29, Ãƒâ-25)
nn(Â-29, „-26)
nn(Â-29, Ã-27)
nn(Â-29, ‚-28)
dep($-23, Â-29)
nn(â-54, Ãƒâ-31)
nn(â-54, „-32)
nn(â-54, Ã-33)
nn(â-54, ‚-34)
nn(â-54, Â-35)
nn(â-54, ¯-36)
nn(â-54, Ãƒâˆ-37)
nn(â-54, ‚-38)
nn(â-54, Ã-39)
nn(â-54, ‚-40)
nn(â-54, â-41)
nn(â-54, ‰-42)
nn(â-54, ¥-43)
nn(â-54, Ãƒâ-44)
nn(â-54, „-45)
nn(â-54, Ã-46)
nn(â-54, ‚-47)
nn(â-54, Â-48)
nn(â-54, ·-49)
nn(â-54, Ãƒâˆ-50)
nn(â-54, ‚-51)
nn(â-54, Ã-52)
nn(â-54, ‚-53)
dep(‰-55, â-54)
dep(LBR-5, ‰-55)
dep(LBR-5, nbsp-57)
conj_and(‰-55, nbsp-57)
nn(‚-64, hoplitÃƒâ-60)
nn(‚-64, ‰-61)
nn(‚-64, ¥-62)
nn(‚-64, Ã-63)
nsubj(â-65, ‚-64)
parataxis(approximate-158, â-65)
dobj(â-65, $-66)
num($-66, žs-67)
dep($-66, RBR-69)
dep($-66, derives-71)
prep_from(derives-71, hoplon-73)
dep($-66, LBR-75)
nn(‚-89, ÃƒÂ-77)
nn(‚-89, ¡-78)
nn(‚-89, Ã-79)
nn(‚-89, ‚-80)
nn(‚-89, âˆ-81)
nn(‚-89, Ã-82)
nn(‚-89, ‚-83)
nn(‚-89, âˆ-84)
nn(‚-89, Ãƒâˆ-86)
nn(‚-89, ‚-87)
nn(‚-89, Ã-88)
dep($-66, ‚-89)
dep($-91, â-90)
dep(‚-89, $-91)
num($-91, cents-92)
nn(Â-97, Ãƒâ-93)
nn(Â-97, „-94)
nn(Â-97, Ã-95)
nn(Â-97, ‚-96)
dep(‚-89, Â-97)
nn(âˆ-109, Ãƒâ-99)
nn(âˆ-109, „-100)
nn(âˆ-109, Ã-101)
nn(âˆ-109, ‚-102)
nn(âˆ-109, Â-103)
nn(âˆ-109, ¿-104)
nn(âˆ-109, Ãƒâ-105)
nn(âˆ-109, „-106)
nn(âˆ-109, Ã-107)
nn(âˆ-109, ‚-108)
dep(âˆ-121, âˆ-109)
nn(hopla-112, plural-111)
dep(âˆ-109, hopla-112)
nn(âˆ-121, ÃƒÂ-114)
nn(âˆ-121, ¡-115)
nn(âˆ-121, Ã-116)
nn(âˆ-121, ‚-117)
nn(âˆ-121, âˆ-118)
nn(âˆ-121, Ã-119)
nn(âˆ-121, ‚-120)
dep($-66, âˆ-121)
nn(‚-126, Ãƒâˆ-123)
nn(‚-126, ‚-124)
nn(‚-126, Ã-125)
dep(âˆ-121, ‚-126)
dep($-128, â-127)
dep(‚-126, $-128)
num($-128, cents-129)
nn(Â-134, Ãƒâ-130)
nn(Â-134, „-131)
nn(Â-134, Ã-132)
nn(Â-134, ‚-133)
dep(‚-126, Â-134)
nn(±-141, Ãƒâ-136)
nn(±-141, „-137)
nn(±-141, Ã-138)
nn(±-141, ‚-139)
nn(±-141, Â-140)
dep($-66, ±-141)
dep($-66, RBR-143)
dep($-66, meaning-145)
det(item-147, an-146)
dep(meaning-145, item-147)
prep_of(item-147, armor-149)
prep_of(item-147, equipment-151)
conj_or(armor-149, equipment-151)
advmod(approximate-158, thus-153)
nsubj(approximate-158, hoplite-155)
aux(approximate-158, may-157)
root(ROOT-0, approximate-158)
amod(man-162, armored-161)
prep_to(approximate-158, man-162)

The Hittites were an ancient Anatolian people who spoke a language of the Anatolian branch of the Indo-European language family , and established a kingdom centered at Hattusa - LBR - Hittite ÃƒÂ ¡ Ã ‚ Â ¸ Ã ‚ ÂªattuÃƒâˆ ` Ã ‚ Â ¡ a - RBR - in north-central Anatolia ca .

det(Hittites-2, The-1)
nsubj(people-7, Hittites-2)
cop(people-7, were-3)
det(people-7, an-4)
amod(people-7, ancient-5)
nn(people-7, Anatolian-6)
root(ROOT-0, people-7)
nsubj(spoke-9, people-7)
nsubj(established-23, people-7)
rcmod(people-7, spoke-9)
det(language-11, a-10)
dobj(spoke-9, language-11)
det(branch-15, the-13)
amod(branch-15, Anatolian-14)
prep_of(language-11, branch-15)
det(family-20, the-17)
amod(family-20, Indo-European-18)
nn(family-20, language-19)
prep_of(branch-15, family-20)
rcmod(people-7, established-23)
conj_and(spoke-9, established-23)
det(kingdom-25, a-24)
dobj(established-23, kingdom-25)
partmod(kingdom-25, centered-26)
prep_at(centered-26, Hattusa-28)
dep(ÂªattuÃƒâˆ-41, LBR-30)
nn(ÂªattuÃƒâˆ-41, Hittite-32)
nn(ÂªattuÃƒâˆ-41, ÃƒÂ-33)
nn(ÂªattuÃƒâˆ-41, ¡-34)
nn(ÂªattuÃƒâˆ-41, Ã-35)
nn(ÂªattuÃƒâˆ-41, ‚-36)
nn(ÂªattuÃƒâˆ-41, Â-37)
nn(ÂªattuÃƒâˆ-41, ¸-38)
nn(ÂªattuÃƒâˆ-41, Ã-39)
nn(ÂªattuÃƒâˆ-41, ‚-40)
parataxis(people-7, ÂªattuÃƒâˆ-41)
nn(¡-46, Ã-43)
nn(¡-46, ‚-44)
nn(¡-46, Â-45)
dep(ÂªattuÃƒâˆ-41, ¡-46)
dep(ÂªattuÃƒâˆ-41, a-47)
dep(ca-54, RBR-49)
dep(RBR-49, in-51)
pobj(in-51, north-central-52)
nsubj(ca-54, Anatolia-53)
parataxis(people-7, ca-54)

The Holocene is a geological epoch , which began approximately 10,000 years ago - LBR - about 8000 BC - RBR - .

det(Holocene-2, The-1)
nsubj(epoch-6, Holocene-2)
cop(epoch-6, is-3)
det(epoch-6, a-4)
amod(epoch-6, geological-5)
root(ROOT-0, epoch-6)
nsubj(began-9, epoch-6)
rcmod(epoch-6, began-9)
quantmod(10,000-11, approximately-10)
num(years-12, 10,000-11)
npadvmod(ago-13, years-12)
advmod(began-9, ago-13)
dep(RBR-21, LBR-15)
dep(LBR-15, about-17)
nn(BC-19, 8000-18)
pobj(about-17, BC-19)
dep(ago-13, RBR-21)

A Harbor or harbor - LBR - see spelling differences - RBR - , or haven , is a place where ships may shelter from the weather or are stored .

det(Harbor-2, A-1)
nsubj(see-8, Harbor-2)
conj_or(Harbor-2, harbor-4)
nsubj(see-8, harbor-4)
dep(Harbor-2, LBR-6)
root(ROOT-0, see-8)
nn(differences-10, spelling-9)
nsubj(place-20, differences-10)
dep(differences-10, RBR-12)
conj_or(differences-10, haven-16)
nsubj(place-20, haven-16)
cop(place-20, is-18)
det(place-20, a-19)
ccomp(see-8, place-20)
advmod(shelter-24, where-21)
nsubj(shelter-24, ships-22)
nsubjpass(stored-30, ships-22)
aux(shelter-24, may-23)
rcmod(place-20, shelter-24)
det(weather-27, the-26)
prep_from(shelter-24, weather-27)
auxpass(stored-30, are-29)
rcmod(place-20, stored-30)
conj_or(shelter-24, stored-30)

German , H is typically used as a vowel lengthener , as well as the phoneme \/ h \/ .

ccomp(used-6, German-1)
nsubjpass(used-6, H-3)
auxpass(used-6, is-4)
advmod(used-6, typically-5)
root(ROOT-0, used-6)
det(lengthener-10, a-8)
nn(lengthener-10, vowel-9)
prep_as(used-6, lengthener-10)
det(\/-19, the-15)
amod(\/-19, phoneme-16)
amod(\/-19, \/-17)
nn(\/-19, h-18)
prep_as(used-6, \/-19)
conj_and(lengthener-10, \/-19)

A Horseshoe is a U-shaped item made of metal or of modern synthetic materials , nailed or glued to the hooves of horses and some other draught animals .

det(Horseshoe-2, A-1)
nsubj(item-6, Horseshoe-2)
cop(item-6, is-3)
det(item-6, a-4)
amod(item-6, U-shaped-5)
root(ROOT-0, item-6)
dep(item-6, made-7)
prep_of(made-7, metal-9)
amod(materials-14, modern-12)
amod(materials-14, synthetic-13)
prep_of(made-7, materials-14)
conj_or(metal-9, materials-14)
dep(item-6, nailed-16)
conj_or(made-7, nailed-16)
dep(item-6, glued-18)
conj_or(made-7, glued-18)
det(hooves-21, the-20)
prep_to(glued-18, hooves-21)
prep_of(hooves-21, horses-23)
det(animals-28, some-25)
amod(animals-28, other-26)
nn(animals-28, draught-27)
prep_of(hooves-21, animals-28)
conj_and(horses-23, animals-28)

In computer science , Transclusion refers to the inclusion of part of a document into another document by reference .

nn(science-3, computer-2)
prep_in(refers-6, science-3)
nsubj(refers-6, Transclusion-5)
root(ROOT-0, refers-6)
det(inclusion-9, the-8)
prep_to(refers-6, inclusion-9)
prep_of(inclusion-9, part-11)
det(document-14, a-13)
prep_of(part-11, document-14)
det(document-17, another-16)
prep_into(refers-6, document-17)
prep_by(document-17, reference-19)

The Huns were an early confederation of Central Asian equestrian nomads or semi-nomads , with a Turkic core of aristocracy .

det(Huns-2, The-1)
nsubj(confederation-6, Huns-2)
cop(confederation-6, were-3)
det(confederation-6, an-4)
amod(confederation-6, early-5)
root(ROOT-0, confederation-6)
amod(nomads-11, Central-8)
amod(nomads-11, Asian-9)
nn(nomads-11, equestrian-10)
prep_of(confederation-6, nomads-11)
prep_of(confederation-6, semi-nomads-13)
conj_or(nomads-11, semi-nomads-13)
det(core-18, a-16)
amod(core-18, Turkic-17)
prep_with(confederation-6, core-18)
prep_of(core-18, aristocracy-20)

In computing , Hacker refers to people engaged in circumvention of computer security .

prep_in(refers-5, computing-2)
nsubj(refers-5, Hacker-4)
root(ROOT-0, refers-5)
prep_to(refers-5, people-7)
partmod(people-7, engaged-8)
prep_in(engaged-8, circumvention-10)
nn(security-13, computer-12)
prep_of(circumvention-10, security-13)

Huckleberry is a name used in North America for several plants in two closely related genera in the family Ericaceae : Gaylussacia and Vaccinium .

nsubj(name-4, Huckleberry-1)
cop(name-4, is-2)
det(name-4, a-3)
root(ROOT-0, name-4)
partmod(name-4, used-5)
nn(America-8, North-7)
prep_in(used-5, America-8)
amod(plants-11, several-10)
prep_for(America-8, plants-11)
num(genera-16, two-13)
advmod(related-15, closely-14)
amod(genera-16, related-15)
prep_in(used-5, genera-16)
det(Ericaceae-20, the-18)
nn(Ericaceae-20, family-19)
prep_in(genera-16, Ericaceae-20)
dep(name-4, Gaylussacia-22)
dep(name-4, Vaccinium-24)
conj_and(Gaylussacia-22, Vaccinium-24)

In abstract algebra , a Homomorphism is a structure-preserving map between two algebraic structures - LBR - such as groups , rings , or vector spaces - RBR - .

amod(algebra-3, abstract-2)
prep_in(map-10, algebra-3)
det(Homomorphism-6, a-5)
nsubj(map-10, Homomorphism-6)
cop(map-10, is-7)
det(map-10, a-8)
amod(map-10, structure-preserving-9)
root(ROOT-0, map-10)
num(structures-14, two-12)
amod(structures-14, algebraic-13)
prep_between(map-10, structures-14)
dep(map-10, LBR-16)
nn(rings-22, groups-20)
prep_such_as(LBR-16, rings-22)
nn(spaces-26, vector-25)
prep_such_as(LBR-16, spaces-26)
conj_or(rings-22, spaces-26)
dep(LBR-16, RBR-28)

Horror refers to an album by Cannae A Historian is an individual who studies and writes about history , and is regarded as an authority on it .

nsubj(refers-2, Horror-1)
nsubjpass(regarded-22, Horror-1)
root(ROOT-0, refers-2)
det(album-5, an-4)
prep_to(refers-2, album-5)
nn(Historian-9, Cannae-7)
nn(Historian-9, A-8)
prep_by(refers-2, Historian-9)
cop(individual-12, is-10)
det(individual-12, an-11)
rcmod(Historian-9, individual-12)
nsubj(studies-14, individual-12)
nsubj(writes-16, individual-12)
rcmod(individual-12, studies-14)
rcmod(individual-12, writes-16)
conj_and(studies-14, writes-16)
prep_about(studies-14, history-18)
auxpass(regarded-22, is-21)
conj_and(refers-2, regarded-22)
det(authority-25, an-24)
prep_as(regarded-22, authority-25)
prep_on(authority-25, it-27)

Homeschooling may also refer to instruction in the home under the supervision of correspondence schools or umbrella schools .

nsubj(refer-4, Homeschooling-1)
aux(refer-4, may-2)
advmod(refer-4, also-3)
root(ROOT-0, refer-4)
prep_to(refer-4, instruction-6)
det(home-9, the-8)
prep_in(instruction-6, home-9)
det(supervision-12, the-11)
prep_under(refer-4, supervision-12)
nn(schools-15, correspondence-14)
prep_of(supervision-12, schools-15)
nn(schools-18, umbrella-17)
prep_of(supervision-12, schools-18)
conj_or(schools-15, schools-18)

In the nomenclature of organic chemistry , a Heteroatom - LBR - from Ancient Greek heteros , different , + atomos - RBR - is any atom that is not carbon or hydrogen .

det(nomenclature-3, the-2)
prep_in(atom-27, nomenclature-3)
amod(chemistry-6, organic-5)
prep_of(nomenclature-3, chemistry-6)
det(Heteroatom-9, a-8)
nsubj(atom-27, Heteroatom-9)
nn(RBR-23, LBR-11)
dep(different-18, from-13)
amod(heteros-16, Ancient-14)
amod(heteros-16, Greek-15)
pobj(from-13, heteros-16)
dep(RBR-23, different-18)
amod(atomos-21, +-20)
appos(different-18, atomos-21)
dep(Heteroatom-9, RBR-23)
cop(atom-27, is-25)
det(atom-27, any-26)
root(ROOT-0, atom-27)
nsubj(carbon-31, atom-27)
cop(carbon-31, is-29)
neg(carbon-31, not-30)
rcmod(atom-27, carbon-31)
rcmod(atom-27, hydrogen-33)
conj_or(carbon-31, hydrogen-33)

Using a modified Doom engine , Heretic was one of the first first-person games to feature inventory manipulation and the ability to look -LRB- PRT -RRB- up -LRB- \/ PRT -RRB- and -LRB- PRT -RRB- down -LRB- \/ PRT -RRB- .

partmod(one-9, Using-1)
det(engine-5, a-2)
amod(engine-5, modified-3)
nn(engine-5, Doom-4)
dobj(Using-1, engine-5)
nsubj(one-9, Heretic-7)
cop(one-9, was-8)
root(ROOT-0, one-9)
det(games-14, the-11)
amod(games-14, first-12)
nn(games-14, first-person-13)
prep_of(one-9, games-14)
aux(feature-16, to-15)
infmod(one-9, feature-16)
nn(manipulation-18, inventory-17)
dobj(feature-16, manipulation-18)
det(ability-21, the-20)
conj_and(one-9, ability-21)
aux(look-23, to-22)
infmod(ability-21, look-23)
dep(look-23, PRT-25)
advmod(PRT-25, up-27)
nn(PRT-30, \/-29)
abbrev(ability-21, PRT-30)
conj_and(one-9, PRT-34)
advmod(PRT-34, down-36)
nn(PRT-39, \/-38)
abbrev(PRT-34, PRT-39)

In Greek mythology , Hypnos was the personification of sleep ; the Roman equivalent was known as Somnus .

amod(mythology-3, Greek-2)
prep_in(personification-8, mythology-3)
nsubj(personification-8, Hypnos-5)
cop(personification-8, was-6)
det(personification-8, the-7)
root(ROOT-0, personification-8)
prep_of(personification-8, sleep-10)
det(equivalent-14, the-12)
nn(equivalent-14, Roman-13)
nsubjpass(known-16, equivalent-14)
auxpass(known-16, was-15)
parataxis(personification-8, known-16)
prep_as(known-16, Somnus-18)

In physics , Heat , symbolized by Q , is energy transferred from one body or system to another due to a difference in temperature .

prep_in(energy-11, physics-2)
nsubj(energy-11, Heat-4)
partmod(Heat-4, symbolized-6)
agent(symbolized-6, Q-8)
cop(energy-11, is-10)
root(ROOT-0, energy-11)
partmod(energy-11, transferred-12)
num(body-15, one-14)
prep_from(transferred-12, body-15)
prep_from(transferred-12, system-17)
conj_or(body-15, system-17)
det(due-20, another-19)
prep_to(transferred-12, due-20)
det(difference-23, a-22)
prep_to(due-20, difference-23)
prep_in(difference-23, temperature-25)

The Horse - LBR - Equus caballus - RBR - is a large odd-toed ungulate mammal , one of ten living species of the family Equidae .

det(Horse-2, The-1)
root(ROOT-0, Horse-2)
dep(Horse-2, LBR-4)
nn(caballus-7, Equus-6)
dep(LBR-4, caballus-7)
dep(Horse-2, RBR-9)
dep(mammal-16, is-11)
det(mammal-16, a-12)
amod(mammal-16, large-13)
amod(mammal-16, odd-toed-14)
nn(mammal-16, ungulate-15)
dep(Horse-2, mammal-16)
appos(mammal-16, one-18)
num(species-22, ten-20)
nn(species-22, living-21)
prep_of(one-18, species-22)
det(Equidae-26, the-24)
nn(Equidae-26, family-25)
prep_of(species-22, Equidae-26)

In Norse mythology , Hel - LBR - sometimes Anglicized or Latinized as Hela - RBR - is the ruler of Hel , the Norse underworld .

nn(mythology-3, Norse-2)
prep_in(ruler-20, mythology-3)
nsubj(ruler-20, Hel-5)
nn(RBR-16, LBR-7)
advmod(Anglicized-10, sometimes-9)
dep(RBR-16, Anglicized-10)
conj_or(Anglicized-10, Latinized-12)
dep(RBR-16, Latinized-12)
prep_as(Anglicized-10, Hela-14)
dep(Hel-5, RBR-16)
cop(ruler-20, is-18)
det(ruler-20, the-19)
root(ROOT-0, ruler-20)
prep_of(ruler-20, Hel-22)
det(underworld-26, the-24)
amod(underworld-26, Norse-25)
appos(Hel-22, underworld-26)

A Hindu - LBR - Audio , Devanagari : Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ â $ ™ Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Â ¿ Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Â ¨ Ãƒ & nbsp ; Ã ‚ Â ¥ Ã ‚ Å ¸ Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Å `` Ãƒ & nbsp ; Ã ‚ Â ¥ Ã ‚ â ‰ & nbsp ; - RBR - is an adherent of the philosophies and scriptures of Hinduism , a set of religious , philosophical and cultural systems that originated in the Indian subcontinent .

det(Hindu-2, A-1)
nsubj(adherent-95, Hindu-2)
dep(Hindu-2, LBR-4)
dep(Hindu-2, Audio-6)
appos(Audio-6, Devanagari-8)
dep(Hindu-2, Ãƒ-10)
dep(Hindu-2, nbsp-12)
conj_and(Ãƒ-10, nbsp-12)
nn(Ãƒ-24, Ã-14)
nn(Ãƒ-24, ‚-15)
nn(Ãƒ-24, â-16)
nn(Ãƒ-24, ‚-17)
nn(Ãƒ-24, ¬-18)
nn(Ãƒ-24, Ã-19)
nn(Ãƒ-24, ‚-20)
nn(Ãƒ-24, â-21)
amod(Ãƒ-24, $-22)
dep($-22, ™-23)
dep(Hindu-2, Ãƒ-24)
dep(Hindu-2, nbsp-26)
conj_and(Ãƒ-24, nbsp-26)
nn(Ãƒ-37, Ã-28)
nn(Ãƒ-37, ‚-29)
nn(Ãƒ-37, â-30)
nn(Ãƒ-37, ‚-31)
nn(Ãƒ-37, ¬-32)
nn(Ãƒ-37, Ã-33)
nn(Ãƒ-37, ‚-34)
nn(Ãƒ-37, Â-35)
nn(Ãƒ-37, ¿-36)
dep(Hindu-2, Ãƒ-37)
dep(Hindu-2, nbsp-39)
conj_and(Ãƒ-37, nbsp-39)
nn(Ãƒ-50, Ã-41)
nn(Ãƒ-50, ‚-42)
nn(Ãƒ-50, â-43)
nn(Ãƒ-50, ‚-44)
nn(Ãƒ-50, ¬-45)
nn(Ãƒ-50, Ã-46)
nn(Ãƒ-50, ‚-47)
nn(Ãƒ-50, Â-48)
nn(Ãƒ-50, ¨-49)
dep(Hindu-2, Ãƒ-50)
dep(Hindu-2, nbsp-52)
conj_and(Ãƒ-50, nbsp-52)
nn(Ãƒ-62, Ã-54)
nn(Ãƒ-62, ‚-55)
nn(Ãƒ-62, Â-56)
nn(Ãƒ-62, ¥-57)
nn(Ãƒ-62, Ã-58)
nn(Ãƒ-62, ‚-59)
nn(Ãƒ-62, Å-60)
nn(Ãƒ-62, ¸-61)
dep(Hindu-2, Ãƒ-62)
dep(Hindu-2, nbsp-64)
conj_and(Ãƒ-62, nbsp-64)
nn(Å-73, Ã-66)
nn(Å-73, ‚-67)
nn(Å-73, â-68)
nn(Å-73, ‚-69)
nn(Å-73, ¬-70)
nn(Å-73, Ã-71)
nn(Å-73, ‚-72)
dep(Hindu-2, Å-73)
dep(Å-73, Ãƒ-75)
dep(Å-73, nbsp-77)
conj_and(Ãƒ-75, nbsp-77)
nn(‚-84, Ã-79)
nn(‚-84, ‚-80)
nn(‚-84, Â-81)
nn(‚-84, ¥-82)
nn(‚-84, Ã-83)
dep(Hindu-2, ‚-84)
amod(‰-86, â-85)
dep(‚-84, ‰-86)
dep(‚-84, nbsp-88)
conj_and(‰-86, nbsp-88)
dep(Hindu-2, RBR-91)
cop(adherent-95, is-93)
det(adherent-95, an-94)
root(ROOT-0, adherent-95)
det(philosophies-98, the-97)
prep_of(adherent-95, philosophies-98)
prep_of(adherent-95, scriptures-100)
conj_and(philosophies-98, scriptures-100)
prep_of(philosophies-98, Hinduism-102)
det(set-105, a-104)
appos(Hinduism-102, set-105)
nsubj(originated-114, set-105)
amod(systems-112, religious-107)
amod(systems-112, philosophical-109)
conj_and(philosophical-109, cultural-111)
amod(systems-112, cultural-111)
prep_of(set-105, systems-112)
rcmod(set-105, originated-114)
det(subcontinent-118, the-116)
amod(subcontinent-118, Indian-117)
prep_in(originated-114, subcontinent-118)

In economics , Hyperinflation is inflation that is `` out of control , `` a condition in which prices increase rapidly as a currency loses its value .

prep_in(inflation-6, economics-2)
nsubj(inflation-6, Hyperinflation-4)
cop(inflation-6, is-5)
root(ROOT-0, inflation-6)
nsubj(is-8, inflation-6)
rcmod(inflation-6, is-8)
prep_out_of(is-8, control-12)
det(condition-16, a-15)
dep(is-8, condition-16)
rel(increase-20, which-18)
nsubj(increase-20, prices-19)
rcmod(condition-16, increase-20)
advmod(increase-20, rapidly-21)
mark(loses-25, as-22)
det(currency-24, a-23)
nsubj(loses-25, currency-24)
advcl(increase-20, loses-25)
poss(value-27, its-26)
dobj(loses-25, value-27)

In chemistry , Hydroxide is the most common name for the diatomic anion OH -LRB- ; ÃƒÂ cents Ã ‚ âˆšÃ ‚ â $ š -LRB- ; , consisting of oxygen and hydrogen atoms , usually derived from the dissociation of a base .

prep_in(name-9, chemistry-2)
nsubj(name-9, Hydroxide-4)
cop(name-9, is-5)
det(name-9, the-6)
advmod(common-8, most-7)
amod(name-9, common-8)
root(ROOT-0, name-9)
det(OH-14, the-11)
amod(OH-14, diatomic-12)
nn(OH-14, anion-13)
prep_for(name-9, OH-14)
dep(cents-18, ÃƒÂ-17)
dep(OH-14, cents-18)
nn(â-23, Ã-19)
nn(â-23, ‚-20)
nn(â-23, âˆšÃ-21)
nn(â-23, ‚-22)
dep(cents-18, â-23)
dep(OH-14, $-24)
num($-24, š-25)
dep(of-30, consisting-29)
dep(atoms-34, of-30)
pobj(of-30, oxygen-31)
pobj(of-30, hydrogen-33)
conj_and(oxygen-31, hydrogen-33)
dep($-24, atoms-34)
advmod(atoms-34, usually-36)
det(dissociation-40, the-39)
prep_from(of-41, dissociation-40)
dep($-24, of-41)
conj_derived(atoms-34, of-41)
det(base-43, a-42)
pobj(of-41, base-43)

A Hogshead is a large cask of liquid - LBR - less often , of a food commodity - RBR - .

det(Hogshead-2, A-1)
nsubj(cask-6, Hogshead-2)
cop(cask-6, is-3)
det(cask-6, a-4)
amod(cask-6, large-5)
root(ROOT-0, cask-6)
prep_of(cask-6, liquid-8)
dep(liquid-8, LBR-10)
advmod(often-13, less-12)
dep(RBR-20, often-13)
dep(RBR-20, of-15)
det(commodity-18, a-16)
nn(commodity-18, food-17)
pobj(of-15, commodity-18)
dep(liquid-8, RBR-20)

A Hull is the body of a ship or boat .

det(Hull-2, A-1)
nsubj(body-5, Hull-2)
cop(body-5, is-3)
det(body-5, the-4)
root(ROOT-0, body-5)
det(ship-8, a-7)
prep_of(body-5, ship-8)
prep_of(body-5, boat-10)
conj_or(ship-8, boat-10)

A Hymn is a type of song , usually religious , specifically written for the purpose of praise , adoration or prayer , and typically addressed to a deity \/ deities , a prominent figure or an epic tale .

det(Hymn-2, A-1)
nsubj(type-5, Hymn-2)
cop(type-5, is-3)
det(type-5, a-4)
ccomp(religious-10, type-5)
prep_of(type-5, song-7)
advmod(religious-10, usually-9)
root(ROOT-0, religious-10)
advmod(written-13, specifically-12)
dep(religious-10, written-13)
det(purpose-16, the-15)
prep_for(written-13, purpose-16)
prep_of(purpose-16, praise-18)
prep_of(purpose-16, adoration-20)
conj_or(praise-18, adoration-20)
prep_of(purpose-16, prayer-22)
conj_or(praise-18, prayer-22)
advmod(addressed-26, typically-25)
dep(religious-10, addressed-26)
conj_and(written-13, addressed-26)
det(deity-29, a-28)
prep_to(addressed-26, deity-29)
amod(deities-31, \/-30)
nsubj(religious-10, deities-31)
det(figure-35, a-33)
amod(figure-35, prominent-34)
appos(deities-31, figure-35)
det(tale-39, an-37)
nn(tale-39, epic-38)
appos(deities-31, tale-39)
conj_or(figure-35, tale-39)

A Hydrofoil is a boat with wing-like foils mounted on struts below the hull .

det(Hydrofoil-2, A-1)
nsubj(boat-5, Hydrofoil-2)
cop(boat-5, is-3)
det(boat-5, a-4)
root(ROOT-0, boat-5)
amod(foils-8, wing-like-7)
prep_with(boat-5, foils-8)
partmod(foils-8, mounted-9)
prep_on(mounted-9, struts-11)
det(hull-14, the-13)
prep_below(mounted-9, hull-14)

Hydra is a small animal with a body length ranging from 1 mm to 20 mm when fully extended .

nsubj(animal-5, Hydra-1)
cop(animal-5, is-2)
det(animal-5, a-3)
amod(animal-5, small-4)
root(ROOT-0, animal-5)
det(length-9, a-7)
nn(length-9, body-8)
prep_with(animal-5, length-9)
partmod(length-9, ranging-10)
num(mm-13, 1-12)
prep_from(ranging-10, mm-13)
num(mm-16, 20-15)
prep_to(mm-13, mm-16)
advmod(extended-19, when-17)
advmod(extended-19, fully-18)
advcl(ranging-10, extended-19)

A Hammer is a tool meant to deliver an impact to an object .

det(Hammer-2, A-1)
nsubj(tool-5, Hammer-2)
cop(tool-5, is-3)
det(tool-5, a-4)
root(ROOT-0, tool-5)
xsubj(deliver-8, tool-5)
partmod(tool-5, meant-6)
aux(deliver-8, to-7)
xcomp(meant-6, deliver-8)
det(impact-10, an-9)
dobj(deliver-8, impact-10)
det(object-13, an-12)
prep_to(deliver-8, object-13)

In Greek mythology , Heracles or Herakles was a divine hero , the son of Zeus and Alcmene , nephew of Amphitryon and great-grandson - LBR - and half-brother - RBR - of Perseus .

amod(mythology-3, Greek-2)
prep_in(hero-11, mythology-3)
nsubj(hero-11, Heracles-5)
conj_or(Heracles-5, Herakles-7)
nsubj(hero-11, Herakles-7)
cop(hero-11, was-8)
det(hero-11, a-9)
amod(hero-11, divine-10)
root(ROOT-0, hero-11)
det(son-14, the-13)
conj_and(hero-11, son-14)
prep_of(son-14, Zeus-16)
prep_of(son-14, Alcmene-18)
conj_and(Zeus-16, Alcmene-18)
conj_and(hero-11, nephew-20)
prep_of(nephew-20, Amphitryon-22)
prep_of(nephew-20, great-grandson-24)
conj_and(Amphitryon-22, great-grandson-24)
conj_and(hero-11, LBR-26)
conj_and(hero-11, half-brother-29)
dep(half-brother-29, RBR-31)
prep_of(half-brother-29, Perseus-34)

A Hadron , in particle physics , is any strongly interacting composite subatomic particle .

det(Hadron-2, A-1)
nsubj(interacting-11, Hadron-2)
nn(physics-6, particle-5)
prep_in(interacting-11, physics-6)
aux(interacting-11, is-8)
advmod(strongly-10, any-9)
advmod(interacting-11, strongly-10)
root(ROOT-0, interacting-11)
amod(particle-14, composite-12)
amod(particle-14, subatomic-13)
dobj(interacting-11, particle-14)

Historically , Handloading referred to the private manufacture of cartridges and shells using all newly-manufactured components , whereas reloading referred to the private manufacture of cartridges and shells using previously-fired cartridge brass and shells with new bullets , shot , primers , and powder .

nn(Handloading-3, Historically-1)
nsubj(referred-4, Handloading-3)
root(ROOT-0, referred-4)
det(manufacture-8, the-6)
amod(manufacture-8, private-7)
prep_to(referred-4, manufacture-8)
prep_of(manufacture-8, cartridges-10)
prep_of(manufacture-8, shells-12)
conj_and(cartridges-10, shells-12)
xcomp(referred-4, using-13)
det(components-16, all-14)
amod(components-16, newly-manufactured-15)
dobj(using-13, components-16)
mark(referred-20, whereas-18)
nsubj(referred-20, reloading-19)
advcl(referred-4, referred-20)
det(manufacture-24, the-22)
amod(manufacture-24, private-23)
prep_to(referred-20, manufacture-24)
prep_of(manufacture-24, cartridges-26)
prep_of(manufacture-24, shells-28)
conj_and(cartridges-26, shells-28)
xcomp(referred-20, using-29)
amod(brass-32, previously-fired-30)
nn(brass-32, cartridge-31)
dobj(using-29, brass-32)
dobj(using-29, shells-34)
conj_and(brass-32, shells-34)
amod(bullets-37, new-36)
prep_with(using-29, bullets-37)
prep_with(using-29, shot-39)
conj_and(bullets-37, shot-39)
prep_with(using-29, primers-41)
conj_and(bullets-37, primers-41)
prep_with(using-29, powder-44)
conj_and(bullets-37, powder-44)

The Helvetii were a Celtic tribe and the main occupants of the Swiss plateau in the 1st century BC .

det(Helvetii-2, The-1)
nsubj(tribe-6, Helvetii-2)
cop(tribe-6, were-3)
det(tribe-6, a-4)
amod(tribe-6, Celtic-5)
root(ROOT-0, tribe-6)
det(occupants-10, the-8)
amod(occupants-10, main-9)
conj_and(tribe-6, occupants-10)
det(plateau-14, the-12)
amod(plateau-14, Swiss-13)
prep_of(occupants-10, plateau-14)
det(BC-19, the-16)
num(BC-19, 1st-17)
nn(BC-19, century-18)
prep_in(plateau-14, BC-19)

The Harp is a stringed instrument which has the plane of its strings positioned perpendicular to the soundboard .

det(Harp-2, The-1)
nsubj(instrument-6, Harp-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, stringed-5)
root(ROOT-0, instrument-6)
nsubj(has-8, instrument-6)
rcmod(instrument-6, has-8)
det(plane-10, the-9)
dobj(has-8, plane-10)
poss(strings-13, its-12)
prep_of(plane-10, strings-13)
partmod(strings-13, positioned-14)
dobj(positioned-14, perpendicular-15)
det(soundboard-18, the-17)
prep_to(positioned-14, soundboard-18)

A Homeland - LBR - rel .

det(Homeland-2, A-1)
nsubj(rel-6, Homeland-2)
dep(Homeland-2, LBR-4)
root(ROOT-0, rel-6)

country of origin and native land - RBR - is the concept of the territory - LBR - cultural geography - RBR - to which an ethnic group holds a long history and a deep cultural association with - the country in which a particular national identity began .

nsubj(concept-12, country-1)
nn(land-6, origin-3)
conj_and(origin-3, native-5)
nn(land-6, native-5)
prep_of(country-1, land-6)
dep(country-1, RBR-8)
cop(concept-12, is-10)
det(concept-12, the-11)
root(ROOT-0, concept-12)
det(territory-15, the-14)
prep_of(concept-12, territory-15)
dep(concept-12, LBR-17)
amod(geography-20, cultural-19)
dep(LBR-17, geography-20)
dep(geography-20, RBR-22)
rel(holds-29, which-25)
det(group-28, an-26)
amod(group-28, ethnic-27)
nsubj(holds-29, group-28)
rcmod(LBR-17, holds-29)
det(history-32, a-30)
amod(history-32, long-31)
dobj(holds-29, history-32)
det(association-37, a-34)
amod(association-37, deep-35)
amod(association-37, cultural-36)
dobj(holds-29, association-37)
conj_and(history-32, association-37)
det(country-41, the-40)
prep_with(holds-29, country-41)
rel(began-48, which-43)
det(identity-47, a-44)
amod(identity-47, particular-45)
amod(identity-47, national-46)
nsubj(began-48, identity-47)
rcmod(country-41, began-48)

The dominant version of hockey in a particular region tends to be known simply as !

det(version-3, The-1)
amod(version-3, dominant-2)
nsubj(tends-10, version-3)
xsubj(known-13, version-3)
prep_of(version-3, hockey-5)
det(region-9, a-7)
amod(region-9, particular-8)
prep_in(hockey-5, region-9)
root(ROOT-0, tends-10)
aux(known-13, to-11)
auxpass(known-13, be-12)
xcomp(tends-10, known-13)
advmod(known-13, simply-14)
prep(known-13, as-15)

Hockey , other forms being more fully qualified - LBR - e. g. hockey for field hockey in Germany , for ice hockey in North America - RBR - .

root(ROOT-0, Hockey-1)
amod(forms-4, other-3)
appos(Hockey-1, forms-4)
auxpass(qualified-8, being-5)
advmod(fully-7, more-6)
advmod(qualified-8, fully-7)
partmod(forms-4, qualified-8)
dep(forms-4, LBR-10)
nn(hockey-14, e.-12)
nn(hockey-14, g.-13)
dep(LBR-10, hockey-14)
nn(hockey-17, field-16)
prep_for(hockey-14, hockey-17)
prep_in(hockey-17, Germany-19)
nn(hockey-23, ice-22)
prep_for(Hockey-1, hockey-23)
nn(America-26, North-25)
prep_in(hockey-23, America-26)
dep(America-26, RBR-28)

A Honeymoon is the traditional holiday taken by newlyweds to celebrate their marriage in intimacy and seclusion .

det(Honeymoon-2, A-1)
nsubj(holiday-6, Honeymoon-2)
cop(holiday-6, is-3)
det(holiday-6, the-4)
amod(holiday-6, traditional-5)
root(ROOT-0, holiday-6)
xsubj(celebrate-11, holiday-6)
partmod(holiday-6, taken-7)
agent(taken-7, newlyweds-9)
aux(celebrate-11, to-10)
xcomp(taken-7, celebrate-11)
poss(marriage-13, their-12)
dobj(celebrate-11, marriage-13)
prep_in(celebrate-11, intimacy-15)
prep_in(celebrate-11, seclusion-17)
conj_and(intimacy-15, seclusion-17)

In computer science , a Heap is a specialized tree-based data structure that satisfies the heap property : if B is a child node of A , then key-LBR-A - RBR - & amp ; ; ge ; key-LBR-B - RBR - .

nn(science-3, computer-2)
prep_in(structure-12, science-3)
det(Heap-6, a-5)
nsubj(structure-12, Heap-6)
cop(structure-12, is-7)
det(structure-12, a-8)
amod(structure-12, specialized-9)
amod(structure-12, tree-based-10)
nn(structure-12, data-11)
root(ROOT-0, structure-12)
nsubj(satisfies-14, structure-12)
rcmod(structure-12, satisfies-14)
det(property-17, the-15)
nn(property-17, heap-16)
dobj(satisfies-14, property-17)
mark(node-24, if-19)
nsubj(node-24, B-20)
cop(node-24, is-21)
det(node-24, a-22)
nn(node-24, child-23)
advcl(satisfies-14, node-24)
parataxis(satisfies-14, node-24)
nn(RBR-31, A-26)
dep(key-LBR-A-29, then-28)
dep(RBR-31, key-LBR-A-29)
prep_of(node-24, RBR-31)
advcl(satisfies-14, amp-34)
parataxis(satisfies-14, amp-34)
conj_and(node-24, amp-34)
dep(key-LBR-B-39, ge-37)
parataxis(structure-12, key-LBR-B-39)
dep(key-LBR-B-39, RBR-41)

A Hierarchy is an arrangement of objects , people , elements , values , grades , orders , classes , etc. .

det(Hierarchy-2, A-1)
nsubj(arrangement-5, Hierarchy-2)
cop(arrangement-5, is-3)
det(arrangement-5, an-4)
root(ROOT-0, arrangement-5)
nn(classes-19, objects-7)
dep(classes-19, people-9)
dep(classes-19, elements-11)
dep(classes-19, values-13)
dep(classes-19, grades-15)
dep(classes-19, orders-17)
prep_of(arrangement-5, classes-19)
dep(classes-19, etc.-21)

The Hour - LBR - symbol : h - RBR - is a unit of time .

det(Hour-2, The-1)
nsubj(unit-14, Hour-2)
nn(RBR-10, LBR-4)
dep(RBR-10, symbol-6)
dep(symbol-6, h-8)
dep(Hour-2, RBR-10)
cop(unit-14, is-12)
det(unit-14, a-13)
root(ROOT-0, unit-14)
prep_of(unit-14, time-16)

In mathematics , a Hyperbola - LBR - Greek ÃƒÂ ¡ Ã ‚ âˆﾏÃ ‚ Å ' Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ ÂµÃƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ â $ Ãƒâ „ Ã ‚ Â ¿ Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ® , `` over-thrown `` - RBR - is a type of conic section defined as the intersection between a right circular conical surface and a plane which cuts through both halves of the cone .

prep_in(„-43, mathematics-2)
det(â-40, a-4)
nn(â-40, Hyperbola-5)
dep(â-40, LBR-7)
amod(Å-16, Greek-9)
nn(Å-16, ÃƒÂ-10)
nn(Å-16, ¡-11)
nn(Å-16, Ã-12)
nn(Å-16, ‚-13)
nn(Å-16, âˆﾏÃ-14)
nn(Å-16, ‚-15)
poss(â-33, Å-16)
nn(â-33, Ãƒâˆ-18)
nn(â-33, ‚-19)
nn(â-33, Ã-20)
nn(â-33, ‚-21)
dep($-23, â-22)
dep(â-33, $-23)
num($-23, cents-24)
nn(â-33, Ãƒâ-25)
nn(â-33, „-26)
nn(â-33, Ã-27)
nn(â-33, ‚-28)
nn(â-33, ÂµÃƒâˆ-29)
nn(â-33, ‚-30)
nn(â-33, Ã-31)
nn(â-33, ‚-32)
dep(LBR-7, â-33)
amod(cents-35, „-34)
dep(â-33, cents-35)
nn(â-40, Ãƒâ-36)
nn(â-40, „-37)
nn(â-40, Ã-38)
nn(â-40, ‚-39)
nsubj(„-43, â-40)
amod(â-40, $-41)
dep($-41, Ãƒâ-42)
root(ROOT-0, „-43)
nn(Â-52, Ã-44)
nn(Â-52, ‚-45)
nn(Â-52, Â-46)
nn(Â-52, ¿-47)
nn(Â-52, Ãƒâ-48)
nn(Â-52, „-49)
nn(Â-52, Ã-50)
nn(Â-52, ‚-51)
dobj(„-43, Â-52)
nn(®-59, Ãƒâ-54)
nn(®-59, „-55)
nn(®-59, Ã-56)
nn(®-59, ‚-57)
nn(®-59, Â-58)
dobj(„-43, ®-59)
conj_and(Â-52, ®-59)
appos(®-59, over-thrown-62)
dep(over-thrown-62, RBR-65)
auxpass(defined-73, is-67)
det(type-69, a-68)
nsubjpass(defined-73, type-69)
amod(section-72, conic-71)
prep_of(type-69, section-72)
dep(over-thrown-62, defined-73)
det(intersection-76, the-75)
prep_as(defined-73, intersection-76)
det(surface-82, a-78)
amod(surface-82, right-79)
amod(surface-82, circular-80)
nn(surface-82, conical-81)
prep_between(intersection-76, surface-82)
det(plane-85, a-84)
dobj(„-43, plane-85)
conj_and(Â-52, plane-85)
nsubj(cuts-87, plane-85)
rcmod(plane-85, cuts-87)
det(halves-90, both-89)
prep_through(cuts-87, halves-90)
det(cone-93, the-92)
prep_of(halves-90, cone-93)

The Halfbakery is a community-based ideas bank used by people who wish to propose and develop - LBR - not always serious - RBR - half-baked inventions .

det(Halfbakery-2, The-1)
nsubj(bank-7, Halfbakery-2)
cop(bank-7, is-3)
det(bank-7, a-4)
amod(bank-7, community-based-5)
nn(bank-7, ideas-6)
root(ROOT-0, bank-7)
partmod(bank-7, used-8)
agent(used-8, people-10)
nsubj(wish-12, people-10)
rcmod(people-10, wish-12)
aux(propose-14, to-13)
xcomp(wish-12, propose-14)
xcomp(wish-12, develop-16)
conj_and(propose-14, develop-16)
nn(RBR-24, LBR-18)
dep(serious-22, not-20)
advmod(serious-22, always-21)
dep(RBR-24, serious-22)
dep(bank-7, RBR-24)
amod(inventions-27, half-baked-26)
dep(RBR-24, inventions-27)

The Hertz - LBR - symbol : Hz - RBR - is the International System of Units - LBR - SI - RBR - base unit of frequency .

det(Hertz-2, The-1)
nsubj(System-15, Hertz-2)
nn(RBR-10, LBR-4)
dep(RBR-10, symbol-6)
dep(symbol-6, Hz-8)
dep(Hertz-2, RBR-10)
cop(System-15, is-12)
det(System-15, the-13)
nn(System-15, International-14)
root(ROOT-0, System-15)
prep_of(System-15, Units-17)
dep(System-15, LBR-19)
dep(System-15, SI-21)
dep(System-15, RBR-23)
nn(unit-26, base-25)
dep(System-15, unit-26)
prep_of(unit-26, frequency-28)

The Hebrides - LBR - HEB-ri-deez , Gaelic : Innse Gall - RBR - comprise a widespread and diverse archipelago off the west coast of Scotland , and in geological terms are composed of the oldest rocks in Europe .

det(Hebrides-2, The-1)
nsubj(comprise-15, Hebrides-2)
nn(RBR-13, LBR-4)
nn(Gaelic-8, HEB-ri-deez-6)
dep(RBR-13, Gaelic-8)
nn(Gall-11, Innse-10)
dep(Gaelic-8, Gall-11)
dep(Hebrides-2, RBR-13)
root(ROOT-0, comprise-15)
det(archipelago-20, a-16)
amod(archipelago-20, widespread-17)
conj_and(widespread-17, diverse-19)
amod(archipelago-20, diverse-19)
conj_and(archipelago-20, archipelago-20')
nsubjpass(composed-33, archipelago-20)
nsubjpass(composed-33, archipelago-20')
det(coast-24, the-22)
amod(coast-24, west-23)
prep_off(archipelago-20, coast-24)
prep_of(coast-24, Scotland-26)
amod(terms-31, geological-30)
prep_in(archipelago-20', terms-31)
auxpass(composed-33, are-32)
ccomp(comprise-15, composed-33)
det(rocks-37, the-35)
amod(rocks-37, oldest-36)
prep_of(composed-33, rocks-37)
prep_in(rocks-37, Europe-39)

The Heracleidae or Heraclids were the numerous descendants of Heracles - LBR - Hercules - RBR - , especially applied in a narrower sense to the descendants of Hyllus , the eldest of his four sons by Deianira - LBR - Hyllus was also sometimes thought of as a son of Melite with Heracles - RBR - .

det(Heracleidae-2, The-1)
nsubj(descendants-8, Heracleidae-2)
conj_or(Heracleidae-2, Heraclids-4)
nsubj(descendants-8, Heraclids-4)
cop(descendants-8, were-5)
det(descendants-8, the-6)
amod(descendants-8, numerous-7)
ccomp(thought-46, descendants-8)
nn(Hercules-14, Heracles-10)
dep(Hercules-14, LBR-12)
prep_of(descendants-8, Hercules-14)
dep(Hercules-14, RBR-16)
advmod(applied-20, especially-19)
partmod(descendants-8, applied-20)
det(sense-24, a-22)
amod(sense-24, narrower-23)
prep_in(applied-20, sense-24)
det(descendants-27, the-26)
prep_to(sense-24, descendants-27)
prep_of(descendants-27, Hyllus-29)
det(eldest-32, the-31)
nsubjpass(thought-46, eldest-32)
poss(sons-36, his-34)
num(sons-36, four-35)
prep_of(eldest-32, sons-36)
nn(Hyllus-42, Deianira-38)
dep(Hyllus-42, LBR-40)
prep_by(sons-36, Hyllus-42)
auxpass(thought-46, was-43)
advmod(thought-46, also-44)
advmod(thought-46, sometimes-45)
root(ROOT-0, thought-46)
det(son-50, a-49)
prep_as_of(thought-46, son-50)
prep_of(son-50, Melite-52)
prep_with(thought-46, Heracles-54)
dep(Heracles-54, RBR-56)

Human immunodeficiency virus - LBR - HIV - RBR - is a lentivirus - LBR - a member of the retrovirus family - RBR - that can lead to acquired immunodeficiency syndrome - LBR - AIDS - RBR - , a condition in humans in which the immune system begins to fail , leading to life-threatening opportunistic infections .

amod(virus-3, Human-1)
nn(virus-3, immunodeficiency-2)
nsubj(lentivirus-13, virus-3)
nn(RBR-9, LBR-5)
dep(RBR-9, HIV-7)
dep(virus-3, RBR-9)
cop(lentivirus-13, is-11)
det(lentivirus-13, a-12)
root(ROOT-0, lentivirus-13)
dep(lentivirus-13, LBR-15)
det(member-18, a-17)
dep(LBR-15, member-18)
det(family-22, the-20)
amod(family-22, retrovirus-21)
prep_of(member-18, family-22)
nsubj(lead-28, family-22)
dep(family-22, RBR-24)
aux(lead-28, can-27)
rcmod(family-22, lead-28)
amod(syndrome-32, acquired-30)
nn(syndrome-32, immunodeficiency-31)
prep_to(lead-28, syndrome-32)
nn(RBR-38, LBR-34)
dep(RBR-38, AIDS-36)
dep(member-18, RBR-38)
det(condition-42, a-41)
appos(lentivirus-13, condition-42)
prep_in(condition-42, humans-44)
rel(begins-50, which-46)
det(system-49, the-47)
amod(system-49, immune-48)
nsubj(begins-50, system-49)
xsubj(fail-52, system-49)
rcmod(humans-44, begins-50)
aux(fail-52, to-51)
xcomp(begins-50, fail-52)
partmod(lentivirus-13, leading-54)
amod(opportunistic-57, life-threatening-56)
amod(infections-58, opportunistic-57)
prep_to(leading-54, infections-58)

HOL can refer to the House of Lords - the upper house of the Parliament of the United Kingdom of Great Britain and Northern Ireland .

nsubj(refer-3, HOL-1)
aux(refer-3, can-2)
root(ROOT-0, refer-3)
det(House-6, the-5)
prep_to(refer-3, House-6)
prep_of(House-6, Lords-8)
det(house-12, the-10)
amod(house-12, upper-11)
dep(House-6, house-12)
det(Parliament-15, the-14)
prep_of(house-12, Parliament-15)
det(Kingdom-19, the-17)
nn(Kingdom-19, United-18)
prep_of(Parliament-15, Kingdom-19)
nn(Britain-22, Great-21)
prep_of(Kingdom-19, Britain-22)
nn(Ireland-25, Northern-24)
prep_of(Kingdom-19, Ireland-25)
conj_and(Britain-22, Ireland-25)

HOL is an abbreviation for higher-order language , aka , High-level programming language , such as Fortran , COBOL , ALGOL , PL \/ 1 , or SNOBOL to distinguish such programming languages from assembly language .

nsubj(abbreviation-4, HOL-1)
cop(abbreviation-4, is-2)
det(abbreviation-4, an-3)
root(ROOT-0, abbreviation-4)
amod(language-7, higher-order-6)
prep_for(abbreviation-4, language-7)
appos(language-7, aka-9)
amod(language-13, High-level-11)
nn(language-13, programming-12)
appos(language-7, language-13)
nn(\/-24, Fortran-17)
appos(\/-24, COBOL-19)
appos(\/-24, ALGOL-21)
appos(\/-24, PL-23)
prep_such_as(language-7, \/-24)
num(\/-24, 1-25)
prep_such_as(language-7, SNOBOL-28)
conj_or(\/-24, SNOBOL-28)
aux(distinguish-30, to-29)
infmod(abbreviation-4, distinguish-30)
amod(languages-33, such-31)
nn(languages-33, programming-32)
dobj(distinguish-30, languages-33)
nn(language-36, assembly-35)
prep_from(distinguish-30, language-36)

The Hamoaze - LBR - Ãƒâ $ '' Ã ‚ âˆšhÃƒâ ‰ ˆÃ ‚ â $ šmÃƒâˆžÃ ‚ Â ¸ z in Cornish - RBR - is an estuarine stretch of water at the point where the tidal River Tamar , the River Tavy , and the River Lynher meet , prior to entering Plymouth Sound .

det(Ãƒâ-6, The-1)
nn(Ãƒâ-6, Hamoaze-2)
dep(Ãƒâ-6, LBR-4)
nsubj(stretch-30, Ãƒâ-6)
amod(Ãƒâ-6, $-7)
number($-7, Ã-9)
punct(âˆšhÃƒâ-11, ‚-10)
dep($-7, âˆšhÃƒâ-11)
punct(âˆšhÃƒâ-11, ‰-12)
punct(âˆšhÃƒâ-11, ˆÃ-13)
dep(â-15, ‚-14)
dep(Â-19, â-15)
dep(â-15, $-16)
num($-16, šmÃƒâˆžÃ-17)
punct(Â-19, ‚-18)
dep(âˆšhÃƒâ-11, Â-19)
punct(Â-19, ¸-20)
dep(in-22, z-21)
dep(RBR-25, in-22)
pobj(in-22, Cornish-23)
dep(Â-19, RBR-25)
cop(stretch-30, is-27)
det(stretch-30, an-28)
amod(stretch-30, estuarine-29)
root(ROOT-0, stretch-30)
prep_of(stretch-30, water-32)
det(point-35, the-34)
prep_at(stretch-30, point-35)
advmod(meet-50, where-36)
det(Tamar-40, the-37)
amod(Tamar-40, tidal-38)
nn(Tamar-40, River-39)
nsubj(meet-50, Tamar-40)
det(Tavy-44, the-42)
nn(Tavy-44, River-43)
conj_and(Tamar-40, Tavy-44)
nsubj(meet-50, Tavy-44)
det(Lynher-49, the-47)
nn(Lynher-49, River-48)
conj_and(Tamar-40, Lynher-49)
nsubj(meet-50, Lynher-49)
rcmod(point-35, meet-50)
prepc_prior_to(stretch-30, entering-54)
nn(Sound-56, Plymouth-55)
dobj(entering-54, Sound-56)

A hair pin or Hairpin is a long device used to hold a person 's hair in place .

det(pin-3, A-1)
nn(pin-3, hair-2)
nsubj(device-9, pin-3)
conj_or(pin-3, Hairpin-5)
nsubj(device-9, Hairpin-5)
cop(device-9, is-6)
det(device-9, a-7)
amod(device-9, long-8)
root(ROOT-0, device-9)
xsubj(hold-12, device-9)
partmod(device-9, used-10)
aux(hold-12, to-11)
xcomp(used-10, hold-12)
det(person-14, a-13)
poss(hair-16, person-14)
dobj(hold-12, hair-16)
prep_in(hair-16, place-18)

A Hotel is an establishment that provides paid lodging , usually on a short-term basis .

det(Hotel-2, A-1)
nsubj(establishment-5, Hotel-2)
cop(establishment-5, is-3)
det(establishment-5, an-4)
root(ROOT-0, establishment-5)
nsubj(provides-7, establishment-5)
rcmod(establishment-5, provides-7)
dep(provides-7, paid-8)
xcomp(paid-8, lodging-9)
advmod(lodging-9, usually-11)
det(basis-15, a-13)
amod(basis-15, short-term-14)
prep_on(lodging-9, basis-15)

A Hypothesis - LBR - from Greek ÃƒÂ ¡ Ã ‚ âˆ Ã ‚ Å ' Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâˆ ‚ Ã ‚ â $ ˜Ãƒâ „ Ã ‚ Â ¸ Ãƒâ „ Ã ‚ ÂµÃƒâˆ ‚ Ã ‚ âˆžÃƒâ „ Ã ‚ â $ ™ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; - RBR - consists either of a suggested explanation for a phenomenon or of a reasoned proposal suggesting a possible correlation between multiple phenomena .

det(Hypothesis-2, A-1)
root(ROOT-0, Hypothesis-2)
nsubj(consists-63, LBR-4)
amod(Å-15, Greek-7)
nn(Å-15, ÃƒÂ-8)
nn(Å-15, ¡-9)
nn(Å-15, Ã-10)
nn(Å-15, ‚-11)
nn(Å-15, âˆ-12)
nn(Å-15, Ã-13)
nn(Å-15, ‚-14)
poss(â-28, Å-15)
nn(â-28, Ãƒâˆ-17)
nn(â-28, ‚-18)
nn(â-28, Ã-19)
nn(â-28, ‚-20)
dep($-22, â-21)
dep(â-28, $-22)
num($-22, cents-23)
number(cents-23, Ãƒâˆ-24)
nn(â-28, ‚-25)
nn(â-28, Ã-26)
nn(â-28, ‚-27)
prep_from(‰-56, â-28)
num(â-48, $-29)
number($-29, ˜Ãƒâ-30)
number($-29, „-31)
nn(â-48, Ã-32)
nn(â-48, ‚-33)
nn(â-48, Â-34)
nn(â-48, ¸-35)
nn(â-48, Ãƒâ-36)
nn(â-48, „-37)
nn(â-48, Ã-38)
nn(â-48, ‚-39)
nn(â-48, ÂµÃƒâˆ-40)
nn(â-48, ‚-41)
nn(â-48, Ã-42)
nn(â-48, ‚-43)
nn(â-48, âˆžÃƒâ-44)
nn(â-48, „-45)
nn(â-48, Ã-46)
nn(â-48, ‚-47)
dep(â-28, â-48)
num(‰-56, $-49)
number($-49, ™-50)
number($-49, Ãƒâˆ-51)
nn(‰-56, ‚-52)
nn(‰-56, Ã-53)
nn(‰-56, ‚-54)
nn(‰-56, â-55)
dep(LBR-4, ‰-56)
dep(LBR-4, nbsp-58)
conj_and(‰-56, nbsp-58)
dep(LBR-4, RBR-61)
dep(Hypothesis-2, consists-63)
preconj(consists-63, either-64)
det(explanation-68, a-66)
amod(explanation-68, suggested-67)
prep_of(consists-63, explanation-68)
det(phenomenon-71, a-70)
prep_for(explanation-68, phenomenon-71)
det(proposal-76, a-74)
amod(proposal-76, reasoned-75)
prep_of(consists-63, proposal-76)
conj_or(explanation-68, proposal-76)
partmod(proposal-76, suggesting-77)
det(correlation-80, a-78)
amod(correlation-80, possible-79)
dobj(suggesting-77, correlation-80)
amod(phenomena-83, multiple-82)
prep_between(correlation-80, phenomena-83)

A Harpsichord is a musical instrument played by means of a keyboard .

det(Harpsichord-2, A-1)
nsubj(instrument-6, Harpsichord-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, musical-5)
root(ROOT-0, instrument-6)
partmod(instrument-6, played-7)
det(keyboard-12, a-11)
prep_by_means_of(played-7, keyboard-12)

A Harmonica is a free reed wind instrument which is played by blowing air into or drawing air -LRB- PRT -RRB- out -LRB- \/ PRT -RRB- by placing lips over individual holes - LBR - reed chambers - RBR - or multiple holes .

det(Harmonica-2, A-1)
nsubj(instrument-8, Harmonica-2)
cop(instrument-8, is-3)
det(instrument-8, a-4)
amod(instrument-8, free-5)
amod(instrument-8, reed-6)
nn(instrument-8, wind-7)
root(ROOT-0, instrument-8)
nsubjpass(played-11, instrument-8)
auxpass(played-11, is-10)
rcmod(instrument-8, played-11)
agent(played-11, blowing-13)
dobj(blowing-13, air-14)
prep(blowing-13, into-15)
agent(played-11, drawing-17)
conj_or(blowing-13, drawing-17)
npadvmod(out-22, air-18)
abbrev(air-18, PRT-20)
advmod(drawing-17, out-22)
nn(PRT-25, \/-24)
dep(out-22, PRT-25)
prepc_by(drawing-17, placing-28)
dobj(placing-28, lips-29)
amod(holes-32, individual-31)
prep_over(placing-28, holes-32)
prep_over(placing-28, LBR-34)
conj_or(holes-32, LBR-34)
amod(chambers-37, reed-36)
prep_over(placing-28, chambers-37)
conj_or(holes-32, chambers-37)
prep_over(placing-28, RBR-39)
conj_or(holes-32, RBR-39)
amod(holes-43, multiple-42)
prep_over(placing-28, holes-43)
conj_or(holes-32, holes-43)

Helium-3 - LBR - He-3 - RBR - is a light , non-radioactive isotope of helium with two protons and one neutron , rare on Earth , sought for use in nuclear fusion research .

nsubj(isotope-14, Helium-3-1)
nn(RBR-7, LBR-3)
dep(RBR-7, He-3-5)
dep(Helium-3-1, RBR-7)
cop(isotope-14, is-9)
det(isotope-14, a-10)
amod(isotope-14, light-11)
amod(isotope-14, non-radioactive-13)
root(ROOT-0, isotope-14)
prep_of(isotope-14, helium-16)
num(protons-19, two-18)
prep_with(helium-16, protons-19)
num(neutron-22, one-21)
prep_with(helium-16, neutron-22)
conj_and(protons-19, neutron-22)
amod(helium-16, rare-24)
prep_on(rare-24, Earth-26)
partmod(helium-16, sought-28)
prep_for(sought-28, use-30)
amod(research-34, nuclear-32)
nn(research-34, fusion-33)
prep_in(use-30, research-34)

In quantum mechanics , the Hamiltonian H is the observable corresponding to the total energy of the system .

nn(mechanics-3, quantum-2)
prep_in(corresponding-11, mechanics-3)
det(H-7, the-5)
nn(H-7, Hamiltonian-6)
nsubj(corresponding-11, H-7)
cop(corresponding-11, is-8)
det(corresponding-11, the-9)
amod(corresponding-11, observable-10)
root(ROOT-0, corresponding-11)
det(energy-15, the-13)
amod(energy-15, total-14)
prep_to(corresponding-11, energy-15)
det(system-18, the-17)
prep_of(energy-15, system-18)

A Hi-hat , or hihat , is a type of cymbal and stand used as a typical part of a drum kit by percussionists in R & amp ; ; B , hip-hop , disco , jazz , rock and roll , house , and other forms of contemporary popular music .

det(Hi-hat-2, A-1)
nsubj(type-9, Hi-hat-2)
conj_or(Hi-hat-2, hihat-5)
nsubj(type-9, hihat-5)
cop(type-9, is-7)
det(type-9, a-8)
root(ROOT-0, type-9)
prep_of(type-9, cymbal-11)
prep_of(type-9, stand-13)
conj_and(cymbal-11, stand-13)
partmod(type-9, used-14)
det(part-18, a-16)
amod(part-18, typical-17)
prep_as(used-14, part-18)
det(kit-22, a-20)
amod(kit-22, drum-21)
prep_of(part-18, kit-22)
agent(used-14, percussionists-24)
prep_in(percussionists-24, R-26)
prep_in(percussionists-24, amp-28)
conj_and(R-26, amp-28)
conj_and(type-9, B-31)
conj_and(type-9, hip-hop-33)
conj_and(B-31, hip-hop-33)
conj_and(type-9, disco-35)
conj_and(B-31, disco-35)
conj_and(type-9, jazz-37)
conj_and(B-31, jazz-37)
conj_and(type-9, rock-39)
conj_and(B-31, rock-39)
conj_and(type-9, roll-41)
conj_and(B-31, roll-41)
appos(B-31, house-43)
amod(forms-47, other-46)
conj_and(type-9, forms-47)
amod(music-51, contemporary-49)
amod(music-51, popular-50)
prep_of(forms-47, music-51)

The addition of a molecule of water to a chemical compound , without forming any other products is usually known as hydration , rather than !

det(addition-2, The-1)
nsubjpass(known-20, addition-2)
det(molecule-5, a-4)
prep_of(addition-2, molecule-5)
prep_of(molecule-5, water-7)
det(compound-11, a-9)
nn(compound-11, chemical-10)
prep_to(water-7, compound-11)
prepc_without(molecule-5, forming-14)
det(products-17, any-15)
amod(products-17, other-16)
dobj(forming-14, products-17)
auxpass(known-20, is-18)
advmod(known-20, usually-19)
root(ROOT-0, known-20)
prep_as(known-20, hydration-22)
advmod(known-20, rather-24)
prep(known-20, than-25)

Hydrolysis .

root(ROOT-0, Hydrolysis-1)

Hydroxyl in chemistry stands for a molecule consisting of an oxygen atom and a hydrogen atom connected by a covalent bond .

nsubj(stands-4, Hydroxyl-1)
prep_in(Hydroxyl-1, chemistry-3)
root(ROOT-0, stands-4)
det(molecule-7, a-6)
prep_for(stands-4, molecule-7)
partmod(molecule-7, consisting-8)
det(atom-12, an-10)
nn(atom-12, oxygen-11)
prep_of(consisting-8, atom-12)
det(atom-16, a-14)
nn(atom-16, hydrogen-15)
prep_of(consisting-8, atom-16)
conj_and(atom-12, atom-16)
partmod(atom-16, connected-17)
det(bond-21, a-19)
amod(bond-21, covalent-20)
agent(connected-17, bond-21)

In biology , a Warm-blooded animal species is one whose members maintain thermal homeostasis ; that is , they keep their body temperature at a roughly constant level , regardless of the ambient temperature .

prep_in(one-9, biology-2)
det(species-7, a-4)
amod(species-7, Warm-blooded-5)
nn(species-7, animal-6)
nsubj(one-9, species-7)
cop(one-9, is-8)
root(ROOT-0, one-9)
poss(members-11, one-9)
nsubj(maintain-12, members-11)
rcmod(one-9, maintain-12)
amod(homeostasis-14, thermal-13)
dobj(maintain-12, homeostasis-14)
nsubj(is-17, that-16)
rcmod(one-9, is-17)
nsubj(keep-20, they-19)
ccomp(is-17, keep-20)
poss(temperature-23, their-21)
nn(temperature-23, body-22)
dobj(keep-20, temperature-23)
det(level-28, a-25)
advmod(constant-27, roughly-26)
amod(level-28, constant-27)
prep_at(keep-20, level-28)
det(temperature-34, the-32)
amod(temperature-34, ambient-33)
prep_regardless_of(level-28, temperature-34)

A Howitzer is a type of artillery piece that is characterized by a relatively short barrel and the use of comparatively small explosive charges to propel projectiles at trajectories with a steep angle of descent .

det(Howitzer-2, A-1)
nsubj(type-5, Howitzer-2)
cop(type-5, is-3)
det(type-5, a-4)
root(ROOT-0, type-5)
nsubjpass(characterized-11, type-5)
nn(piece-8, artillery-7)
prep_of(type-5, piece-8)
auxpass(characterized-11, is-10)
rcmod(type-5, characterized-11)
det(barrel-16, a-13)
advmod(short-15, relatively-14)
amod(barrel-16, short-15)
agent(characterized-11, barrel-16)
det(use-19, the-18)
agent(characterized-11, use-19)
conj_and(barrel-16, use-19)
advmod(small-22, comparatively-21)
amod(charges-24, small-22)
amod(charges-24, explosive-23)
prep_of(use-19, charges-24)
aux(propel-26, to-25)
xcomp(characterized-11, propel-26)
dobj(propel-26, projectiles-27)
prep_at(propel-26, trajectories-29)
det(angle-33, a-31)
amod(angle-33, steep-32)
prep_with(trajectories-29, angle-33)
prep_of(angle-33, descent-35)

Hummer is a brand of off-road vehicles sold by General Motors , also known as GM .

nsubj(brand-4, Hummer-1)
cop(brand-4, is-2)
det(brand-4, a-3)
root(ROOT-0, brand-4)
amod(vehicles-7, off-road-6)
prep_of(brand-4, vehicles-7)
partmod(vehicles-7, sold-8)
nn(Motors-11, General-10)
agent(sold-8, Motors-11)
advmod(known-14, also-13)
partmod(Motors-11, known-14)
prep_as(known-14, GM-16)

The Hasdingi were the southern tribes of the Vandals , an East Germanic tribe .

det(Hasdingi-2, The-1)
nsubj(tribes-6, Hasdingi-2)
cop(tribes-6, were-3)
det(tribes-6, the-4)
amod(tribes-6, southern-5)
root(ROOT-0, tribes-6)
det(Vandals-9, the-8)
prep_of(tribes-6, Vandals-9)
det(tribe-14, an-11)
nn(tribe-14, East-12)
nn(tribe-14, Germanic-13)
appos(Vandals-9, tribe-14)

The Hellbender - LBR - Cryptobranchus alleganiensis - RBR - is a large salamander , native to North America , which inhabits large , swiftly flowing streams with rocky bottoms .

det(alleganiensis-7, The-1)
nn(alleganiensis-7, Hellbender-2)
dep(alleganiensis-7, LBR-4)
nn(alleganiensis-7, Cryptobranchus-6)
nsubj(salamander-14, alleganiensis-7)
dep(alleganiensis-7, RBR-9)
cop(salamander-14, is-11)
det(salamander-14, a-12)
amod(salamander-14, large-13)
root(ROOT-0, salamander-14)
amod(salamander-14, native-16)
nn(America-19, North-18)
prep_to(native-16, America-19)
nsubj(inhabits-22, which-21)
rcmod(salamander-14, inhabits-22)
acomp(inhabits-22, large-23)
advmod(flowing-26, swiftly-25)
ccomp(inhabits-22, flowing-26)
xcomp(inhabits-22, flowing-26)
advmod(flowing-26, streams-27)
amod(bottoms-30, rocky-29)
prep_with(flowing-26, bottoms-30)

The Internet is a worldwide , publicly accessible series of interconnected computer networks that transmit data by packet switching using the standard Internet Protocol - LBR - IP - RBR - .

det(Internet-2, The-1)
nsubj(series-9, Internet-2)
cop(series-9, is-3)
det(series-9, a-4)
amod(series-9, worldwide-5)
advmod(accessible-8, publicly-7)
amod(series-9, accessible-8)
root(ROOT-0, series-9)
nsubj(transmit-15, series-9)
amod(networks-13, interconnected-11)
nn(networks-13, computer-12)
prep_of(series-9, networks-13)
rcmod(series-9, transmit-15)
dobj(transmit-15, data-16)
prep_by(transmit-15, packet-18)
partmod(packet-18, switching-19)
xcomp(switching-19, using-20)
det(Protocol-24, the-21)
amod(Protocol-24, standard-22)
nn(Protocol-24, Internet-23)
dobj(using-20, Protocol-24)
nn(RBR-30, LBR-26)
dep(RBR-30, IP-28)
dep(Protocol-24, RBR-30)

An Industry or sector - LBR - from Latin industrius , `` diligent , industrious `` - RBR - is the manufacturing of a good or service within a category .

det(Industry-2, An-1)
nsubj(industrious-15, Industry-2)
conj_or(Industry-2, sector-4)
nsubj(industrious-15, sector-4)
dep(Industry-2, LBR-6)
amod(industrius-10, Latin-9)
prep_from(Industry-2, industrius-10)
dep(Industry-2, diligent-13)
root(ROOT-0, industrious-15)
nsubj(manufacturing-22, RBR-18)
cop(manufacturing-22, is-20)
det(manufacturing-22, the-21)
ccomp(industrious-15, manufacturing-22)
det(good-25, a-24)
prep_of(manufacturing-22, good-25)
prep_of(manufacturing-22, service-27)
conj_or(good-25, service-27)
det(category-30, a-29)
prep_within(good-25, category-30)

The Indridae - LBR - also spelled Indriidae - RBR - are a family of strepsirrhine primates .

det(Indridae-2, The-1)
nsubj(family-14, Indridae-2)
nn(RBR-10, LBR-4)
dep(Indriidae-8, also-6)
nn(Indriidae-8, spelled-7)
dep(RBR-10, Indriidae-8)
dep(Indridae-2, RBR-10)
cop(family-14, are-12)
det(family-14, a-13)
root(ROOT-0, family-14)
amod(primates-17, strepsirrhine-16)
prep_of(family-14, primates-17)

In computing , Input\/output , or I \/ O , refers to the communication between an information processing system - LBR - such as a computer - RBR - , and the outside world ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ž possibly a human , or another information processing system .

prep_in(refers-11, computing-2)
nsubj(refers-11, Input\/output-4)
nn(O-9, I-7)
nn(O-9, \/-8)
conj_or(Input\/output-4, O-9)
nsubj(refers-11, O-9)
root(ROOT-0, refers-11)
det(communication-14, the-13)
prep_to(refers-11, communication-14)
det(system-19, an-16)
nn(system-19, information-17)
nn(system-19, processing-18)
prep_between(communication-14, system-19)
dep(RBR-28, LBR-21)
det(computer-26, a-25)
prep_such_as(LBR-21, computer-26)
dep(refers-11, RBR-28)
det(‚-38, the-32)
amod(‚-38, outside-33)
nn(‚-38, world-34)
nn(‚-38, ÃƒÂ-35)
nn(‚-38, cents-36)
nn(‚-38, Ã-37)
nsubj(â-39, ‚-38)
conj_and(refers-11, â-39)
dobj(â-39, $-40)
num($-40, cents-41)
nn(‚-43, Ã-42)
nsubj(â-44, ‚-43)
rcmod($-40, â-44)
dobj(â-44, $-45)
num($-45, ž-46)
advmod(human-49, possibly-47)
det(human-49, a-48)
dep($-45, human-49)
det(system-55, another-52)
nn(system-55, information-53)
amod(system-55, processing-54)
dobj(â-44, system-55)
conj_or($-45, system-55)

In the common law legal system , an Indictment - LBR - Ãƒâ ‰ ˆÃ ‚ ÂªnÃƒâ $ '' Ã ‚ âˆšdaÃƒâ ‰ ˆÃ ‚ ÂªtmÃƒâ ‰ ˆÃ ‚ Ë ™ nt - LBR - in-DITE-mint - RBR - - RBR - is a formal accusation of having committed a criminal offense .

dep(system-6, In-1)
det(law-4, the-2)
amod(law-4, common-3)
pobj(In-1, law-4)
amod(system-6, legal-5)
dep(accusation-46, system-6)
det(Indictment-9, an-8)
appos(system-6, Indictment-9)
dep(system-6, LBR-11)
dep(system-6, Ãƒâ-13)
punct(Ãƒâ-13, ‰-14)
punct(Ãƒâ-13, ˆÃ-15)
dep(ÂªnÃƒâ-17, ‚-16)
dep(Ã-20, ÂªnÃƒâ-17)
dep(ÂªnÃƒâ-17, $-18)
dep(Ãƒâ-13, Ã-20)
punct(Ã-20, ‚-21)
dep(Ã-20, âˆšdaÃƒâ-22)
punct(âˆšdaÃƒâ-22, ‰-23)
dep(ÂªtmÃƒâ-26, ˆÃ-24)
punct(ÂªtmÃƒâ-26, ‚-25)
dep(âˆšdaÃƒâ-22, ÂªtmÃƒâ-26)
punct(ÂªtmÃƒâ-26, ‰-27)
dep(Ë-30, ˆÃ-28)
punct(Ë-30, ‚-29)
dep(ÂªtmÃƒâ-26, Ë-30)
punct(Ë-30, ™-31)
dep(LBR-34, nt-32)
dep(Ë-30, LBR-34)
nsubj(accusation-46, in-DITE-mint-36)
dep(in-DITE-mint-36, RBR-38)
dep(in-DITE-mint-36, RBR-41)
cop(accusation-46, is-43)
det(accusation-46, a-44)
amod(accusation-46, formal-45)
root(ROOT-0, accusation-46)
aux(committed-49, having-48)
prepc_of(accusation-46, committed-49)
det(offense-52, a-50)
amod(offense-52, criminal-51)
dobj(committed-49, offense-52)

In the mathematical subfield of numerical analysis , Interpolation is a method of constructing new data points within the range of a discrete set of known data points .

det(subfield-4, the-2)
amod(subfield-4, mathematical-3)
prep_in(method-12, subfield-4)
amod(analysis-7, numerical-6)
prep_of(subfield-4, analysis-7)
nsubj(method-12, Interpolation-9)
cop(method-12, is-10)
det(method-12, a-11)
root(ROOT-0, method-12)
prepc_of(method-12, constructing-14)
amod(points-17, new-15)
nn(points-17, data-16)
dobj(constructing-14, points-17)
det(range-20, the-19)
prep_within(constructing-14, range-20)
det(set-24, a-22)
amod(set-24, discrete-23)
prep_of(range-20, set-24)
amod(points-28, known-26)
nn(points-28, data-27)
prep_of(set-24, points-28)

In linguistics , logic , philosophy , and other fields , an Intension is any property or quality connoted by a word , phrase or other symbol .

prep_in(property-16, linguistics-2)
conj_and(linguistics-2, logic-4)
prep_in(property-16, logic-4)
conj_and(linguistics-2, philosophy-6)
prep_in(property-16, philosophy-6)
amod(fields-10, other-9)
conj_and(linguistics-2, fields-10)
prep_in(property-16, fields-10)
det(Intension-13, an-12)
nsubj(property-16, Intension-13)
cop(property-16, is-14)
det(property-16, any-15)
root(ROOT-0, property-16)
conj_or(property-16, quality-18)
partmod(property-16, connoted-19)
det(word-22, a-21)
agent(connoted-19, word-22)
agent(connoted-19, phrase-24)
conj_or(word-22, phrase-24)
amod(symbol-27, other-26)
agent(connoted-19, symbol-27)
conj_or(word-22, symbol-27)

An Island - LBR - Ãƒâ $ '' Ã ‚ âˆšaÃƒâ ‰ ˆÃ ‚ ÂªlÃƒâ ‰ ˆÃ ‚ Ë ™ nd - RBR - or isle - LBR - \/ Ãƒâ $ '' Ã ‚ âˆšaÃƒâ ‰ ˆÃ ‚ Âªl \/ - RBR - is any piece of land that is completely surrounded by water in two dimensions , above high tide , and isolated from other significant landmasses .

det(Ãƒâ-6, An-1)
nn(Ãƒâ-6, Island-2)
dep(Ãƒâ-6, LBR-4)
nsubj(piece-47, Ãƒâ-6)
amod(Ãƒâ-6, $-7)
number($-7, Ã-9)
punct(âˆšaÃƒâ-11, ‚-10)
dep($-7, âˆšaÃƒâ-11)
punct(âˆšaÃƒâ-11, ‰-12)
dep(ÂªlÃƒâ-15, ˆÃ-13)
punct(ÂªlÃƒâ-15, ‚-14)
dep(âˆšaÃƒâ-11, ÂªlÃƒâ-15)
punct(ÂªlÃƒâ-15, ‰-16)
dep(Ë-19, ˆÃ-17)
punct(Ë-19, ‚-18)
dep(ÂªlÃƒâ-15, Ë-19)
punct(Ë-19, ™-20)
dep(Ë-19, nd-21)
npadvmod(âˆšaÃƒâ-36, RBR-23)
dep(isle-26, or-25)
dep(RBR-23, isle-26)
dep(isle-26, LBR-28)
punct(Ãƒâ-31, \/-30)
dep(RBR-23, Ãƒâ-31)
num(Ãƒâ-31, $-32)
number($-32, Ã-34)
punct(Ãƒâ-31, ‚-35)
dep(nd-21, âˆšaÃƒâ-36)
punct(nd-21, ‰-37)
dep(Âªl-40, ˆÃ-38)
punct(Âªl-40, ‚-39)
dep(nd-21, Âªl-40)
punct(âˆšaÃƒâ-11, \/-41)
dep(Ãƒâ-6, RBR-43)
cop(piece-47, is-45)
det(piece-47, any-46)
root(ROOT-0, piece-47)
nsubjpass(surrounded-53, piece-47)
nsubjpass(isolated-65, piece-47)
prep_of(piece-47, land-49)
auxpass(surrounded-53, is-51)
advmod(surrounded-53, completely-52)
rcmod(piece-47, surrounded-53)
agent(surrounded-53, water-55)
num(dimensions-58, two-57)
prep_in(surrounded-53, dimensions-58)
amod(tide-62, high-61)
prep_above(surrounded-53, tide-62)
rcmod(piece-47, isolated-65)
conj_and(surrounded-53, isolated-65)
amod(landmasses-69, other-67)
amod(landmasses-69, significant-68)
prep_from(isolated-65, landmasses-69)

An Internet troll , or simply Troll in Internet slang , is someone who posts controversial and usually irrelevant or JJf-topic messages in an online community , such as an online discussion forum or chat room , with the intention of baiting other users into an emotional response or to generally disrupt normal on-topic discussion .

det(troll-3, An-1)
nn(troll-3, Internet-2)
nsubj(someone-13, troll-3)
advmod(troll-3, simply-6)
conj_or(troll-3, simply-6)
nsubj(someone-13, simply-6)
conj_or(troll-3, Troll-7)
nsubj(someone-13, Troll-7)
nn(slang-10, Internet-9)
prep_in(Troll-7, slang-10)
cop(someone-13, is-12)
root(ROOT-0, someone-13)
nsubj(posts-15, someone-13)
rcmod(someone-13, posts-15)
amod(messages-22, controversial-16)
advmod(irrelevant-19, usually-18)
conj_and(controversial-16, irrelevant-19)
amod(messages-22, irrelevant-19)
conj_and(controversial-16, JJf-topic-21)
conj_or(irrelevant-19, JJf-topic-21)
dobj(posts-15, messages-22)
det(community-26, an-24)
amod(community-26, online-25)
prep_in(messages-22, community-26)
det(forum-33, an-30)
amod(forum-33, online-31)
nn(forum-33, discussion-32)
prep_such_as(messages-22, forum-33)
nn(room-36, chat-35)
prep_such_as(messages-22, room-36)
conj_or(forum-33, room-36)
det(intention-40, the-39)
prep_with(forum-33, intention-40)
prepc_of(intention-40, baiting-42)
amod(users-44, other-43)
dobj(baiting-42, users-44)
det(response-48, an-46)
amod(response-48, emotional-47)
prep_into(baiting-42, response-48)
aux(disrupt-52, to-50)
advmod(disrupt-52, generally-51)
dobj(posts-15, disrupt-52)
conj_or(messages-22, disrupt-52)
amod(discussion-55, normal-53)
amod(discussion-55, on-topic-54)
dobj(disrupt-52, discussion-55)

In law , Interrogatories - LBR - also known as Requests for Further Information - RBR - are a formal set of written questions propounded by one litigant and required to be answered by an adversary , in order to clarify matters of evidence and help to determine -LRB- PRT -RRB- in -LRB- \/ PRT -RRB- advance what facts will be presented at any trial in the case .

prep_in(known-9, law-2)
nsubj(known-9, Interrogatories-4)
dep(Interrogatories-4, LBR-6)
advmod(known-9, also-8)
root(ROOT-0, known-9)
mark(set-21, as-10)
nsubj(set-21, Requests-11)
amod(Information-14, Further-13)
prep_for(Requests-11, Information-14)
dep(Requests-11, RBR-16)
cop(set-21, are-18)
det(set-21, a-19)
amod(set-21, formal-20)
advcl(known-9, set-21)
amod(questions-24, written-23)
prep_of(set-21, questions-24)
xsubj(answered-33, questions-24)
dep(questions-24, propounded-25)
num(litigant-28, one-27)
prep_by(propounded-25, litigant-28)
dep(questions-24, required-30)
conj_and(propounded-25, required-30)
aux(answered-33, to-31)
auxpass(answered-33, be-32)
xcomp(required-30, answered-33)
det(adversary-36, an-35)
agent(answered-33, adversary-36)
mark(clarify-41, in-38)
dep(clarify-41, order-39)
aux(clarify-41, to-40)
purpcl(required-30, clarify-41)
dobj(clarify-41, matters-42)
prep_of(matters-42, evidence-44)
purpcl(required-30, help-46)
conj_and(clarify-41, help-46)
aux(determine-48, to-47)
xcomp(help-46, determine-48)
dobj(determine-48, PRT-50)
dobj(presented-62, PRT-50)
nn(PRT-55, \/-54)
abbrev(advance-57, PRT-55)
prep_in(PRT-50, advance-57)
rel(presented-62, what-58)
nsubjpass(presented-62, facts-59)
aux(presented-62, will-60)
auxpass(presented-62, be-61)
rcmod(PRT-50, presented-62)
det(trial-65, any-64)
prep_at(presented-62, trial-65)
det(case-68, the-67)
prep_in(trial-65, case-68)

In film , an Insert is a shot of part of a scene as filmed from a different angle and \/ or focal length from the master shot .

prep_in(shot-8, film-2)
det(Insert-5, an-4)
nsubj(shot-8, Insert-5)
cop(shot-8, is-6)
det(shot-8, a-7)
root(ROOT-0, shot-8)
prep_of(shot-8, part-10)
det(scene-13, a-12)
prep_of(part-10, scene-13)
mark(filmed-15, as-14)
advcl(shot-8, filmed-15)
det(angle-19, a-17)
amod(angle-19, different-18)
prep_from(filmed-15, angle-19)
prep_from(filmed-15, \/-21)
conj_and(angle-19, \/-21)
amod(length-24, focal-23)
prep_from(filmed-15, length-24)
conj_or(angle-19, length-24)
det(shot-28, the-26)
nn(shot-28, master-27)
prep_from(filmed-15, shot-28)

An Inventor is a person who creates or discovers a new method , form , device or other useful means .

det(Inventor-2, An-1)
nsubj(person-5, Inventor-2)
cop(person-5, is-3)
det(person-5, a-4)
root(ROOT-0, person-5)
nsubj(creates-7, person-5)
nsubj(discovers-9, person-5)
rcmod(person-5, creates-7)
rcmod(person-5, discovers-9)
conj_or(creates-7, discovers-9)
det(method-12, a-10)
amod(method-12, new-11)
dobj(creates-7, method-12)
dobj(creates-7, form-14)
conj_or(method-12, form-14)
dobj(creates-7, device-16)
conj_or(method-12, device-16)
amod(means-20, other-18)
amod(means-20, useful-19)
dobj(creates-7, means-20)
conj_or(method-12, means-20)

The Undernet is one of the largest Internet Relay Chat - LBR - IRC - RBR - networks .

det(Undernet-2, The-1)
nsubj(one-4, Undernet-2)
cop(one-4, is-3)
root(ROOT-0, one-4)
det(Internet-8, the-6)
amod(Internet-8, largest-7)
prep_of(one-4, Internet-8)
nn(RBR-16, Relay-9)
nn(RBR-16, Chat-10)
dep(RBR-16, LBR-12)
dep(LBR-12, IRC-14)
dep(Internet-8, RBR-16)
dep(Internet-8, networks-18)

XChat , commonly written X-Chat or XChat , is one of the most popular IRC clients for Unix-like systems .

nsubj(one-10, XChat-1)
advmod(written-4, commonly-3)
partmod(XChat-1, written-4)
dep(written-4, X-Chat-5)
dep(written-4, XChat-7)
conj_or(X-Chat-5, XChat-7)
cop(one-10, is-9)
root(ROOT-0, one-10)
det(clients-16, the-12)
advmod(popular-14, most-13)
amod(clients-16, popular-14)
nn(clients-16, IRC-15)
prep_of(one-10, clients-16)
amod(systems-19, Unix-like-18)
prep_for(one-10, systems-19)

An Ideogram or ideograph - LBR - from Greek ÃƒÂ ¡ Ã ‚ Ï $ Ã ‚ Â ° Ãƒâ „ Ã ‚ Â ´ Ãƒâ „ Ã ‚ â $ `` Ãƒâ „ Ã ‚ Â ± idea `` idea `` + Ãƒâ „ Ã ‚ â $ œÃƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ Â ¬ Ãƒâˆ ‚ Ã ‚ âˆ `` Ãƒâˆ ‚ Ã ‚ â ‰ grafo `` to write `` - RBR - is a graphic symbol that represents an idea , rather than a group of letters arranged according to the phonemes of a spoken language , as is done in alphabetic languages , or a strictly representational picture of a subject as may be done in illustration or photography .

det(Ideogram-2, An-1)
dep(â-73, Ideogram-2)
conj_or(Ideogram-2, ideograph-4)
dep(â-73, ideograph-4)
dep(â-73, LBR-6)
dep(LBR-6, from-8)
amod(Ã-12, Greek-9)
nn(Ã-12, ÃƒÂ-10)
nn(Ã-12, ¡-11)
pobj(from-8, Ã-12)
nn(Ï-14, ‚-13)
dep(â-54, Ï-14)
dep(Ï-14, $-15)
num($-15, Ã-16)
nn(â-30, ‚-17)
nn(â-30, Â-18)
nn(â-30, °-19)
nn(â-30, Ãƒâ-20)
nn(â-30, „-21)
nn(â-30, Ã-22)
nn(â-30, ‚-23)
nn(â-30, Â-24)
nn(â-30, ´-25)
nn(â-30, Ãƒâ-26)
nn(â-30, „-27)
nn(â-30, Ã-28)
nn(â-30, ‚-29)
dep(â-54, â-30)
nn(â-54, $-31)
nn(Â-37, Ãƒâ-33)
nn(Â-37, „-34)
nn(Â-37, Ã-35)
nn(Â-37, ‚-36)
npadvmod(idea-39, Â-37)
advmod(Â-37, ±-38)
dep(‚-51, idea-39)
nn(Ã-46, +-43)
nn(Ã-46, Ãƒâ-44)
nn(Ã-46, „-45)
prep_idea(idea-39, Ã-46)
prep(idea-39, ‚-47)
dep(‚-47, â-48)
dep(idea-39, $-49)
num($-49, œÃƒâˆ-50)
num($-31, ‚-51)
nn(â-54, Ã-52)
nn(â-54, ‚-53)
dep(âˆ-67, â-54)
num(cents-56, „-55)
dep(â-54, cents-56)
nn(âˆ-67, Ãƒâ-57)
nn(âˆ-67, „-58)
nn(âˆ-67, Ã-59)
nn(âˆ-67, ‚-60)
nn(âˆ-67, Â-61)
nn(âˆ-67, ¬-62)
nn(âˆ-67, Ãƒâˆ-63)
nn(âˆ-67, ‚-64)
nn(âˆ-67, Ã-65)
nn(âˆ-67, ‚-66)
dep(â-73, âˆ-67)
nn(‚-72, Ãƒâˆ-69)
nn(‚-72, ‚-70)
nn(‚-72, Ã-71)
nsubj(â-73, ‚-72)
root(ROOT-0, â-73)
nn(grafo-75, ‰-74)
nsubj(write-78, grafo-75)
aux(write-78, to-77)
xcomp(â-73, write-78)
nsubj(symbol-86, RBR-81)
cop(symbol-86, is-83)
det(symbol-86, a-84)
amod(symbol-86, graphic-85)
ccomp(write-78, symbol-86)
nsubj(represents-88, symbol-86)
rcmod(symbol-86, represents-88)
det(idea-90, an-89)
dobj(represents-88, idea-90)
det(group-95, a-94)
ccomp(write-78, group-95)
conj_negcc(symbol-86, group-95)
nsubj(represents-88, group-95)
prep_of(group-95, letters-97)
partmod(letters-97, arranged-98)
prepc_according_to(arranged-98, to-100)
det(phonemes-102, the-101)
pobj(arranged-98, phonemes-102)
det(language-106, a-104)
amod(language-106, spoken-105)
prep_of(phonemes-102, language-106)
mark(done-110, as-108)
auxpass(done-110, is-109)
advcl(â-73, done-110)
amod(languages-113, alphabetic-112)
prep_in(done-110, languages-113)
det(picture-119, a-116)
advmod(representational-118, strictly-117)
amod(picture-119, representational-118)
nsubjpass(done-126, picture-119)
det(subject-122, a-121)
prep_of(picture-119, subject-122)
amod(subject-122, as-123)
aux(done-126, may-124)
auxpass(done-126, be-125)
conj_or(â-73, done-126)
prep_in(done-126, illustration-128)
prep_in(done-126, photography-130)
conj_or(illustration-128, photography-130)

An Ion is an atom or molecule which has lost or gained one or more valence electrons , giving it a positive or negative electrical charge .

det(Ion-2, An-1)
nsubj(atom-5, Ion-2)
cop(atom-5, is-3)
det(atom-5, an-4)
root(ROOT-0, atom-5)
nsubj(lost-10, atom-5)
nsubj(gained-12, atom-5)
nsubj(giving-19, atom-5)
conj_or(atom-5, molecule-7)
nsubj(lost-10, molecule-7)
aux(lost-10, has-9)
rcmod(atom-5, lost-10)
rcmod(atom-5, gained-12)
conj_or(lost-10, gained-12)
num(electrons-17, one-13)
conj_or(one-13, more-15)
quantmod(one-13, more-15)
num(electrons-17, more-15)
amod(electrons-17, valence-16)
dobj(lost-10, electrons-17)
rcmod(atom-5, giving-19)
conj_or(lost-10, giving-19)
partmod(lost-10, giving-19)
xcomp(lost-10, giving-19)
iobj(giving-19, it-20)
det(charge-26, a-21)
amod(charge-26, positive-22)
conj_or(positive-22, negative-24)
amod(charge-26, negative-24)
amod(charge-26, electrical-25)
dobj(giving-19, charge-26)

An Inch - LBR - plural : inches ; symbol or abbreviation : in or , sometimes , & amp ; Prime ; ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ž a double prime - RBR - is the name of a unit of length in a number of different systems , including English units , Imperial units , and United States customary units .

det(plural-6, An-1)
nn(plural-6, Inch-2)
dep(plural-6, LBR-4)
root(ROOT-0, plural-6)
dep(plural-6, inches-8)
dep(inches-8, symbol-10)
dep(inches-8, abbreviation-12)
conj_or(symbol-10, abbreviation-12)
dep(amp-20, or-15)
dep(amp-20, sometimes-17)
cc(amp-20, &-19)
dep(symbol-10, amp-20)
dep(amp-20, Prime-22)
nn(â-28, ÃƒÂ-24)
nn(â-28, cents-25)
nn(â-28, Ã-26)
nn(â-28, ‚-27)
dep(Prime-22, â-28)
dep(â-28, $-29)
num($-29, cents-30)
nn(â-33, Ã-31)
nn(â-33, ‚-32)
prep_in(symbol-10, â-33)
dep(â-33, $-34)
num($-34, ž-35)
det(prime-38, a-36)
amod(prime-38, double-37)
nsubj(name-44, prime-38)
dep(prime-38, RBR-40)
cop(name-44, is-42)
det(name-44, the-43)
rcmod(symbol-10, name-44)
det(unit-47, a-46)
prep_of(name-44, unit-47)
prep_of(unit-47, length-49)
det(number-52, a-51)
prep_in(length-49, number-52)
amod(systems-55, different-54)
prep_of(number-52, systems-55)
amod(units-59, English-58)
prep_including(name-44, units-59)
amod(units-62, Imperial-61)
prep_including(name-44, units-62)
conj_and(units-59, units-62)
nn(units-68, United-65)
nn(units-68, States-66)
amod(units-68, customary-67)
prep_including(name-44, units-68)
conj_and(units-59, units-68)

In computer science , the term Integer is used to refer to a data type which represents some finite subset of the mathematical integers .

nn(science-3, computer-2)
prep_in(used-9, science-3)
det(Integer-7, the-5)
nn(Integer-7, term-6)
nsubjpass(used-9, Integer-7)
xsubj(refer-11, Integer-7)
auxpass(used-9, is-8)
root(ROOT-0, used-9)
aux(refer-11, to-10)
xcomp(used-9, refer-11)
det(type-15, a-13)
nn(type-15, data-14)
prep_to(refer-11, type-15)
nsubj(represents-17, type-15)
rcmod(type-15, represents-17)
det(subset-20, some-18)
amod(subset-20, finite-19)
dobj(represents-17, subset-20)
det(integers-24, the-22)
amod(integers-24, mathematical-23)
prep_of(subset-20, integers-24)

An Icon - LBR - from Greek Ãƒâ „ Ã ‚ ÂµÃƒÂ ¡ Ã ‚ Ï $ Ã ‚ Â ° Ãƒâ „ Ã ‚ ÂºÃƒâˆ ‚ Ã ‚ â „ Ãƒâ „ Ã ‚ âˆ , eikÃƒâˆ ` Ã ‚ Å ¸ n , `` image `` - RBR - is an image , picture , or representation ; it is a sign or likeness that stands for an object by signifying or representing it either concretely or by analogy , as in semiotics ; by extension , ` icon ' is also used , particularly in modern culture , in the general sense of symbol .

det(Icon-2, An-1)
root(ROOT-0, Icon-2)
dep(image-47, LBR-4)
dep(LBR-4, from-6)
amod(Ï-16, Greek-7)
nn(Ï-16, Ãƒâ-8)
nn(Ï-16, „-9)
nn(Ï-16, Ã-10)
nn(Ï-16, ‚-11)
nn(Ï-16, ÂµÃƒÂ-12)
nn(Ï-16, ¡-13)
nn(Ï-16, Ã-14)
nn(Ï-16, ‚-15)
pobj(from-6, Ï-16)
num(âˆ-36, $-17)
number($-17, Ã-18)
number($-17, ‚-19)
nn(âˆ-36, Â-20)
nn(âˆ-36, °-21)
nn(âˆ-36, Ãƒâ-22)
nn(âˆ-36, „-23)
nn(âˆ-36, Ã-24)
nn(âˆ-36, ‚-25)
nn(âˆ-36, ÂºÃƒâˆ-26)
nn(âˆ-36, ‚-27)
nn(âˆ-36, Ã-28)
nn(âˆ-36, ‚-29)
nn(âˆ-36, â-30)
nn(âˆ-36, „-31)
nn(âˆ-36, Ãƒâ-32)
nn(âˆ-36, „-33)
nn(âˆ-36, Ã-34)
nn(âˆ-36, ‚-35)
nsubj(image-47, âˆ-36)
nn(n-44, eikÃƒâˆ-38)
nn(n-44, Ã-40)
nn(n-44, ‚-41)
nn(n-44, Å-42)
nn(n-44, ¸-43)
appos(âˆ-36, n-44)
dep(used-95, image-47)
nsubj(image-54, RBR-50)
cop(image-54, is-52)
det(image-54, an-53)
ccomp(image-47, image-54)
ccomp(image-47, picture-56)
conj_or(image-54, picture-56)
ccomp(image-47, representation-59)
conj_or(image-54, representation-59)
nsubj(sign-64, it-61)
cop(sign-64, is-62)
det(sign-64, a-63)
dep(image-54, sign-64)
nsubj(stands-68, sign-64)
dep(image-54, likeness-66)
conj_or(sign-64, likeness-66)
nsubj(stands-68, likeness-66)
rcmod(sign-64, stands-68)
det(object-71, an-70)
prep_for(stands-68, object-71)
prepc_by(stands-68, signifying-73)
prepc_by(stands-68, representing-75)
conj_or(signifying-73, representing-75)
dobj(signifying-73, it-76)
dep(it-76, either-77)
dep(either-77, concretely-78)
dep(it-76, by-80)
conj_or(either-77, by-80)
pobj(by-80, analogy-81)
advmod(analogy-81, as-83)
prep_in(as-83, semiotics-85)
prep_by(signifying-73, extension-88)
nsubjpass(used-95, icon-91)
auxpass(used-95, is-93)
advmod(used-95, also-94)
dep(Icon-2, used-95)
advmod(used-95, particularly-97)
amod(culture-100, modern-99)
prep_in(particularly-97, culture-100)
det(sense-105, the-103)
amod(sense-105, general-104)
prep_in(used-95, sense-105)
prep_of(sense-105, symbol-107)

The Iliad is together with the Odyssey , one of two ancient Greek epic poems traditionally attributed to Homer .

det(Iliad-2, The-1)
nsubj(is-3, Iliad-2)
ccomp(attributed-17, is-3)
det(Odyssey-7, the-6)
prep_together_with(is-3, Odyssey-7)
nsubj(attributed-17, one-9)
num(poems-15, two-11)
amod(poems-15, ancient-12)
amod(poems-15, Greek-13)
nn(poems-15, epic-14)
prep_of(one-9, poems-15)
advmod(attributed-17, traditionally-16)
root(ROOT-0, attributed-17)
prep_to(attributed-17, Homer-19)

In abstract algebra , an Isomorphism - LBR - Greek : ison `` equal `` , and morphe `` shape `` - RBR - is a bijective map f such that both f and its inverse f -LRB- sup -RRB- & amp ; nbsp ; & amp ; minus ; -LRB- LST -RRB- 1 -LRB- \/ LST -RRB- -LRB- \/ sup -RRB- are homomorphisms .

amod(algebra-3, abstract-2)
prep_in(homomorphisms-64, algebra-3)
det(Isomorphism-6, an-5)
nsubj(homomorphisms-64, Isomorphism-6)
dep(Isomorphism-6, LBR-8)
dep(LBR-8, Greek-10)
partmod(Isomorphism-6, ison-12)
acomp(ison-12, equal-14)
dep(morphe-18, and-17)
dep(map-28, morphe-18)
csubj(map-28, shape-20)
nsubj(bijective-27, RBR-23)
cop(bijective-27, is-25)
det(bijective-27, a-26)
ccomp(shape-20, bijective-27)
dep(homomorphisms-64, map-28)
dobj(map-28, f-29)
dep(f-29, such-30)
preconj(f-33, both-32)
prep_that(f-29, f-33)
poss(f-37, its-35)
amod(f-37, inverse-36)
prep_that(f-29, f-37)
conj_and(f-33, f-37)
appos(f-37, sup-39)
conj_and(f-33, amp-42)
conj_and(f-37, amp-42)
dep(f-33, nbsp-44)
cc(amp-47, &-46)
dep(f-33, amp-47)
dep(f-33, minus-49)
dep(f-33, LST-52)
nsubj(homomorphisms-64, 1-54)
nn(LST-57, \/-56)
abbrev(1-54, LST-57)
amod(sup-61, \/-60)
appos(1-54, sup-61)
cop(homomorphisms-64, are-63)
root(ROOT-0, homomorphisms-64)

An Incunabulum is a book , single sheet , or image that was printed - not handwritten - before the year 1501 in Europe .

det(Incunabulum-2, An-1)
nsubj(book-5, Incunabulum-2)
cop(book-5, is-3)
det(book-5, a-4)
root(ROOT-0, book-5)
amod(sheet-8, single-7)
conj_or(book-5, sheet-8)
conj_or(book-5, image-11)
nsubjpass(printed-14, image-11)
auxpass(printed-14, was-13)
rcmod(image-11, printed-14)
neg(handwritten-17, not-16)
dep(printed-14, handwritten-17)
det(year-21, the-20)
prep_before(printed-14, year-21)
num(year-21, 1501-22)
prep_in(printed-14, Europe-24)

An Inductor is a passive electrical device employed in electrical circuits for its property of inductance .

det(Inductor-2, An-1)
nsubj(device-7, Inductor-2)
cop(device-7, is-3)
det(device-7, a-4)
amod(device-7, passive-5)
amod(device-7, electrical-6)
root(ROOT-0, device-7)
partmod(device-7, employed-8)
amod(circuits-11, electrical-10)
prep_in(employed-8, circuits-11)
poss(property-14, its-13)
prep_for(circuits-11, property-14)
prep_of(property-14, inductance-16)

An Instrumental is , in contrast to a song , a musical composition or recording without lyrics or any other sort of vocal music ; all of the music is produced by musical instruments .

det(Instrumental-2, An-1)
nsubj(is-3, Instrumental-2)
root(ROOT-0, is-3)
prep_in(is-3, contrast-6)
det(song-9, a-8)
prep_to(contrast-6, song-9)
det(composition-13, a-11)
amod(composition-13, musical-12)
prep_to(contrast-6, composition-13)
conj_or(song-9, composition-13)
prep_to(contrast-6, recording-15)
conj_or(song-9, recording-15)
prep_without(is-3, lyrics-17)
det(sort-21, any-19)
amod(sort-21, other-20)
prep_without(is-3, sort-21)
conj_or(lyrics-17, sort-21)
amod(music-24, vocal-23)
prep_of(sort-21, music-24)
nsubjpass(produced-31, all-26)
det(music-29, the-28)
prep_of(all-26, music-29)
auxpass(produced-31, is-30)
parataxis(is-3, produced-31)
amod(instruments-34, musical-33)
agent(produced-31, instruments-34)

An Icosahedron - LBR - Greek : eikosaedron , from eikosi twenty + hedron seat ; \/ Ãƒâ $ '' Ã ‚ â $ ˜aÃƒâ ‰ ˆÃ ‚ Âª .

det(Icosahedron-2, An-1)
root(ROOT-0, Icosahedron-2)
dep(Icosahedron-2, LBR-4)
dep(LBR-4, Greek-6)
dep(Icosahedron-2, eikosaedron-8)
prep(eikosaedron-8, from-10)
dep(from-10, eikosi-11)
dep(eikosi-11, twenty-12)
punct(eikosi-11, +-13)
nn(seat-15, hedron-14)
dep(eikosi-11, seat-15)
nn(Ã-21, \/-17)
nn(Ã-21, Ãƒâ-18)
nn(Ã-21, $-19)
dep(seat-15, Ã-21)
punct(eikosi-11, ‚-22)
dep(eikosi-11, â-23)
pobj(â-23, $-24)
num($-24, ˜aÃƒâ-25)
punct(â-23, ‰-26)
punct(â-23, ˆÃ-27)
dep(Âª-29, ‚-28)
dep(â-23, Âª-29)

kÃƒâ ‰ ˆÃ ‚ Ë ™ Ãƒâ $ ¦ Ã ‚ â $ ¦ .

nn(Ãƒâ-7, kÃƒâ-1)
nn(Ãƒâ-7, ‰-2)
nn(Ãƒâ-7, ˆÃ-3)
nn(Ãƒâ-7, ‚-4)
nn(Ãƒâ-7, Ë-5)
nn(Ãƒâ-7, ™-6)
nsubj(â-12, Ãƒâ-7)
dep(Ãƒâ-7, $-8)
num($-8, ¦-9)
nn(‚-11, Ã-10)
dep(Ãƒâ-7, ‚-11)
root(ROOT-0, â-12)
dobj(â-12, $-13)
num($-13, ¦-14)

sÃƒâ ‰ ˆÃ ‚ Ë ™ .

nn(Ë-5, sÃƒâ-1)
nn(Ë-5, ‰-2)
nn(Ë-5, ˆÃ-3)
nn(Ë-5, ‚-4)
nsubj(™-6, Ë-5)
root(ROOT-0, ™-6)

Ãƒâ $ '' Ã ‚ âˆšhi .

nn(Ã-4, Ãƒâ-1)
nn(Ã-4, $-2)
nsubj(âˆšhi-6, Ã-4)
dep(âˆšhi-6, ‚-5)
root(ROOT-0, âˆšhi-6)

dÃƒâ ‰ ˆÃ ‚ â $ ™ Ãƒâ ‰ ˆÃ ‚ Ë ™ n \/ ; plural : - drons , - dra \/ - dÃƒâ ‰ ˆÃ ‚ â $ ™ Ãƒâ ‰ ˆÃ ‚ Ë ™ \/ - RBR - is any polyhedron having 20 faces , but usually a regular icosahedron is implied , which has equilateral triangles as faces .

nn(‚-4, dÃƒâ-1)
nn(‚-4, ‰-2)
nn(‚-4, ˆÃ-3)
nsubj(â-5, ‚-4)
root(ROOT-0, â-5)
num(\/-15, $-6)
number($-6, ™-7)
nn(\/-15, Ãƒâ-8)
nn(\/-15, ‰-9)
nn(\/-15, ˆÃ-10)
nn(\/-15, ‚-11)
nn(\/-15, Ë-12)
nn(\/-15, ™-13)
nn(\/-15, n-14)
dobj(â-5, \/-15)
dep(\/-15, plural-17)
nsubj(â-30, drons-20)
dep(\/-24, dra-23)
dep(drons-20, \/-24)
nn(‚-29, dÃƒâ-26)
nn(‚-29, ‰-27)
nn(‚-29, ˆÃ-28)
dep(\/-24, ‚-29)
parataxis(â-5, â-30)
dobj(â-30, $-31)
num($-31, ™-32)
nn(\/-39, Ãƒâ-33)
nn(\/-39, ‰-34)
nn(\/-39, ˆÃ-35)
nn(\/-39, ‚-36)
nn(\/-39, Ë-37)
nn(\/-39, ™-38)
nsubj(polyhedron-45, \/-39)
dep(\/-39, RBR-41)
cop(polyhedron-45, is-43)
det(polyhedron-45, any-44)
rcmod($-31, polyhedron-45)
partmod(polyhedron-45, having-46)
num(faces-48, 20-47)
dobj(having-46, faces-48)
dobj(having-46, usually-51)
advmod(faces-48, usually-51)
conj_but(faces-48, usually-51)
det(icosahedron-54, a-52)
amod(icosahedron-54, regular-53)
dep(faces-48, icosahedron-54)
auxpass(implied-56, is-55)
rcmod(faces-48, implied-56)
rcmod(icosahedron-54, implied-56)
nsubj(has-59, which-58)
rcmod(faces-48, has-59)
rcmod(icosahedron-54, has-59)
amod(triangles-61, equilateral-60)
dobj(has-59, triangles-61)
prep_as(triangles-61, faces-63)

Islamism - LBR - Arabic : al - ` islÃƒâ ‰ ¥ Ã ‚ â „ cents miyya - RBR - is a term that denotes a set of ideologies holding that Islam is not only a religion but also a political system ; that Muslims must return to their roots of their religion , and unite politically .

nsubj(al-7, Islamism-1)
dep(Islamism-1, LBR-3)
dep(LBR-3, Arabic-5)
root(ROOT-0, al-7)
nn(‚-14, islÃƒâ-10)
nn(‚-14, ‰-11)
nn(‚-14, ¥-12)
nn(‚-14, Ã-13)
nsubj(â-15, ‚-14)
nsubj(unite-57, ‚-14)
ccomp(al-7, â-15)
amod(cents-17, „-16)
dobj(â-15, cents-17)
nsubj(term-24, miyya-18)
dep(miyya-18, RBR-20)
cop(term-24, is-22)
det(term-24, a-23)
rcmod(cents-17, term-24)
nsubj(denotes-26, term-24)
rcmod(term-24, denotes-26)
det(set-28, a-27)
dobj(denotes-26, set-28)
prep_of(set-28, ideologies-30)
partmod(ideologies-30, holding-31)
complm(religion-38, that-32)
nsubj(religion-38, Islam-33)
cop(religion-38, is-34)
neg(only-36, not-35)
preconj(religion-38, only-36)
det(religion-38, a-37)
ccomp(holding-31, religion-38)
det(system-43, a-41)
amod(system-43, political-42)
ccomp(holding-31, system-43)
conj_and(religion-38, system-43)
dobj(return-48, system-43)
dep(return-48, that-45)
nsubj(return-48, Muslims-46)
aux(return-48, must-47)
dep(system-43, return-48)
poss(roots-51, their-50)
prep_to(return-48, roots-51)
poss(religion-54, their-53)
prep_of(roots-51, religion-54)
ccomp(al-7, unite-57)
conj_and(â-15, unite-57)
advmod(unite-57, politically-58)

ISIS - LBR - ` Image and Scanner Interface Specification - RBR - is an industry standard interface for image scanning technologies , developed by Pixel Translations in 1990 - LBR - today : EMC captiva - RBR - .

root(ROOT-0, ISIS-1)
dep(ISIS-1, LBR-3)
dep(ISIS-1, Image-6)
nn(Specification-10, Scanner-8)
nn(Specification-10, Interface-9)
dep(ISIS-1, Specification-10)
conj_and(Image-6, Specification-10)
dep(Image-6, RBR-12)
dep(Image-6, is-14)
det(interface-18, an-15)
nn(interface-18, industry-16)
nn(interface-18, standard-17)
nsubj(is-14, interface-18)
prep_for(interface-18, image-20)
amod(technologies-22, scanning-21)
dep(ISIS-1, technologies-22)
partmod(technologies-22, developed-24)
nn(Translations-27, Pixel-26)
agent(developed-24, Translations-27)
prep_in(Translations-27, 1990-29)
nn(RBR-38, LBR-31)
dep(RBR-38, today-33)
nn(captiva-36, EMC-35)
dep(today-33, captiva-36)
dep(Translations-27, RBR-38)

An Insulator is a material that resists the flow of electric current .

det(Insulator-2, An-1)
nsubj(material-5, Insulator-2)
cop(material-5, is-3)
det(material-5, a-4)
root(ROOT-0, material-5)
nsubj(resists-7, material-5)
rcmod(material-5, resists-7)
det(flow-9, the-8)
dobj(resists-7, flow-9)
amod(current-12, electric-11)
prep_of(flow-9, current-12)

The Infantry are a type of soldiers who are primarily trained for the role of fighting on foot .

det(Infantry-2, The-1)
nsubj(type-5, Infantry-2)
cop(type-5, are-3)
det(type-5, a-4)
root(ROOT-0, type-5)
prep_of(type-5, soldiers-7)
nsubjpass(trained-11, soldiers-7)
auxpass(trained-11, are-9)
advmod(trained-11, primarily-10)
rcmod(soldiers-7, trained-11)
det(role-14, the-13)
prep_for(trained-11, role-14)
prepc_of(role-14, fighting-16)
prep_on(fighting-16, foot-18)

The Ionosphere is the uppermost part of the atmosphere , distinguished because it is ionized by solar radiation .

det(Ionosphere-2, The-1)
nsubj(part-6, Ionosphere-2)
cop(part-6, is-3)
det(part-6, the-4)
amod(part-6, uppermost-5)
root(ROOT-0, part-6)
det(atmosphere-9, the-8)
prep_of(part-6, atmosphere-9)
dep(ionized-15, distinguished-11)
mark(ionized-15, because-12)
nsubjpass(ionized-15, it-13)
auxpass(ionized-15, is-14)
dep(part-6, ionized-15)
amod(radiation-18, solar-17)
agent(ionized-15, radiation-18)

In physics , Interference is the addition - LBR - superposition - RBR - of two or more waves that result in a new wave pattern .

prep_in(addition-7, physics-2)
nsubj(addition-7, Interference-4)
cop(addition-7, is-5)
det(addition-7, the-6)
root(ROOT-0, addition-7)
dep(addition-7, LBR-9)
dep(addition-7, superposition-11)
dep(addition-7, RBR-13)
num(waves-19, two-16)
conj_or(two-16, more-18)
quantmod(two-16, more-18)
num(waves-19, more-18)
prep_of(addition-7, waves-19)
complm(result-21, that-20)
ccomp(addition-7, result-21)
det(pattern-26, a-23)
amod(pattern-26, new-24)
nn(pattern-26, wave-25)
prep_in(result-21, pattern-26)

The name ICQ is an initialism on the phrase `` I seek you `` .

det(ICQ-3, The-1)
nn(ICQ-3, name-2)
nsubj(initialism-6, ICQ-3)
cop(initialism-6, is-4)
det(initialism-6, an-5)
root(ROOT-0, initialism-6)
prep_on(initialism-6, the-8)
advmod(seek-12, phrase-9)
nsubj(seek-12, I-11)
advcl(initialism-6, seek-12)
dobj(seek-12, you-13)

An Impi is an isiZulu word for any armed body of men .

det(Impi-2, An-1)
nsubj(word-6, Impi-2)
cop(word-6, is-3)
det(word-6, an-4)
amod(word-6, isiZulu-5)
root(ROOT-0, word-6)
det(body-10, any-8)
amod(body-10, armed-9)
prep_for(word-6, body-10)
prep_of(body-10, men-12)

According to the Hebrew Bible , Isaac - LBR - Hebrew : Yitzchak ÃƒËœÃ ‚ Ë ™ ÃƒË † Ã ‚ Â ´ ÃƒËœÃ ‚ Å `` ÃƒË † Ã ‚ Â ° ÃƒËœÃ ‚ ËœÃƒË † Ã ‚ Â ¸ ÃƒËœÃ ‚ Â § , Standard YiÃƒÂ ¡ Ã ‚ ÂºÃ ‚ â $ žÃƒÂ ¡ Ã ‚ Â ¸ Ã ‚ Â ¥ aq Tiberian YiÃƒÂ ¡ Ã ‚ â $ ™ Ã ‚ Â # ÃƒÂ ¡ Ã ‚ Â ¸ Ã ‚ Â ¥ Ãƒâ ‰ ¥ Ã ‚ â „ cents q ; Arabic : ÃƒË˜Ã ‚ Â ¥ ÃƒË˜Ã ‚ â $ œÃƒË˜Ã ‚ â $ `` ÃƒË ™ Ã ‚ Â ° ÃƒË ™ Ã ‚ â ‰ & nbsp ; , Ãƒâ $ ¦ Ã ‚ â ‰ $ IsÃƒÂ ¡ Ã ‚ Â ¸ Ã ‚ Â ¥ Ãƒâ ‰ ¥ Ã ‚ â „ cents q ; `` he will laugh `` - RBR - is the son of Abraham and Sarah , and the father of Jacob and Esau .

prepc_according_to(q-156, to-2)
det(Bible-5, the-3)
nn(Bible-5, Hebrew-4)
pobj(q-156, Bible-5)
dep(q-156, Isaac-7)
dep(Isaac-7, LBR-9)
dep(Isaac-7, Hebrew-11)
nn(â-54, Yitzchak-13)
nn(â-54, ÃƒËœÃ-14)
punct(Â-44, ‚-15)
nn(Â-44, Ë-16)
punct(Â-44, ™-17)
nn(Â-44, ÃƒË-18)
punct(Â-44, †-19)
nn(Â-44, Ã-20)
punct(Â-44, ‚-21)
nn(Â-44, Â-22)
punct(Â-44, ´-23)
nn(Â-44, ÃƒËœÃ-24)
punct(Â-44, ‚-25)
nn(Â-44, Å-26)
nn(Â-44, ÃƒË-28)
punct(Â-44, †-29)
nn(Â-44, Ã-30)
punct(Â-44, ‚-31)
nn(Â-44, Â-32)
punct(Â-44, °-33)
nn(Â-44, ÃƒËœÃ-34)
punct(Â-44, ‚-35)
nn(Â-44, ËœÃƒË-36)
punct(Â-44, †-37)
nn(Â-44, Ã-38)
punct(Â-44, ‚-39)
nn(Â-44, Â-40)
punct(Â-44, ¸-41)
nn(Â-44, ÃƒËœÃ-42)
punct(Â-44, ‚-43)
dep(â-54, Â-44)
punct(Â-44, §-45)
nn(ÂºÃ-52, Standard-47)
nn(ÂºÃ-52, YiÃƒÂ-48)
punct(ÂºÃ-52, ¡-49)
nn(ÂºÃ-52, Ã-50)
punct(ÂºÃ-52, ‚-51)
appos(Â-44, ÂºÃ-52)
punct(Â-44, ‚-53)
dep(Hebrew-11, â-54)
dep(â-54, $-55)
num($-55, žÃƒÂ-56)
punct(Isaac-7, ¡-57)
dep(Â-87, Ã-58)
dep(Â-87, ‚-59)
dep(Â-87, Â-60)
dep(Â-87, ¸-61)
dep(Â-87, Ã-62)
dep(Â-87, ‚-63)
dep(Â-87, Â-64)
dep(Â-87, ¥-65)
dep(Â-87, aq-66)
dep(Â-87, Tiberian-67)
dep(Â-87, YiÃƒÂ-68)
dep(Â-87, ¡-69)
dep(Â-87, Ã-70)
dep(Â-87, ‚-71)
dep(Â-87, â-72)
dep(Â-87, $-73)
dep(Â-87, ™-74)
dep(Â-87, Ã-75)
dep(Â-87, ‚-76)
dep(Â-87, Â-77)
dep(Â-87, #-78)
dep(Â-87, ÃƒÂ-79)
dep(Â-87, ¡-80)
dep(Â-87, Ã-81)
dep(Â-87, ‚-82)
dep(Â-87, Â-83)
dep(Â-87, ¸-84)
dep(Â-87, Ã-85)
dep(Â-87, ‚-86)
dep(Ãƒâ-89, Â-87)
punct(Ãƒâ-89, ¥-88)
dep(Isaac-7, Ãƒâ-89)
punct(Ãƒâ-89, ‰-90)
dep(Ã-92, ¥-91)
dep(â-94, Ã-92)
punct(â-94, ‚-93)
dep(Ãƒâ-89, â-94)
punct(â-94, „-95)
dep(â-94, cents-96)
dep(cents-96, q-97)
dep(cents-96, Arabic-99)
nn(ÃƒË˜Ã-105, ÃƒË˜Ã-101)
punct(ÃƒË˜Ã-105, ‚-102)
nn(ÃƒË˜Ã-105, Â-103)
punct(ÃƒË˜Ã-105, ¥-104)
dep(Arabic-99, ÃƒË˜Ã-105)
punct(cents-96, ‚-106)
dep(â-135, â-107)
dep(â-107, $-108)
num($-108, œÃƒË˜Ã-109)
punct(â-124, ‚-110)
nn(â-124, â-111)
nn(â-124, $-112)
nn(â-124, ÃƒË-114)
punct(â-124, ™-115)
nn(â-124, Ã-116)
punct(â-124, ‚-117)
nn(â-124, Â-118)
punct(â-124, °-119)
nn(â-124, ÃƒË-120)
punct(â-124, ™-121)
nn(â-124, Ã-122)
punct(â-124, ‚-123)
dep($-108, â-124)
punct(â-124, ‰-125)
dep($-108, nbsp-127)
conj_and(â-124, nbsp-127)
appos($-108, Ãƒâ-130)
dep(â-135, $-131)
num($-131, ¦-132)
nn(â-135, Ã-133)
punct(â-135, ‚-134)
dep(Ã-140, â-135)
punct(â-135, ‰-136)
dep(â-135, $-137)
num($-137, IsÃƒÂ-138)
punct(Ã-140, ¡-139)
dep(cents-96, Ã-140)
punct(Ã-140, ‚-141)
dep(Â-146, Â-142)
dep(Â-146, ¸-143)
dep(Â-146, Ã-144)
dep(Â-146, ‚-145)
dep(Ãƒâ-148, Â-146)
punct(Ãƒâ-148, ¥-147)
dep(Ã-140, Ãƒâ-148)
punct(Ãƒâ-148, ‰-149)
dep(Ã-151, ¥-150)
dep(Ãƒâ-148, Ã-151)
punct(Ã-151, ‚-152)
dep(Ã-151, â-153)
punct(â-153, „-154)
nsubj(q-156, cents-155)
root(ROOT-0, q-156)
nsubj(laugh-161, he-159)
aux(laugh-161, will-160)
ccomp(q-156, laugh-161)
nsubj(son-168, RBR-164)
cop(son-168, is-166)
det(son-168, the-167)
ccomp(laugh-161, son-168)
prep_of(son-168, Abraham-170)
prep_of(son-168, Sarah-172)
conj_and(Abraham-170, Sarah-172)
det(father-176, the-175)
ccomp(laugh-161, father-176)
conj_and(son-168, father-176)
prep_of(father-176, Jacob-178)
prep_of(father-176, Esau-180)
conj_and(Jacob-178, Esau-180)

The ITU Radiocommunication Sector - LBR - ITU-R - RBR - is one of the three sectors - LBR - divisions or units - RBR - of the International Telecommunication Union - LBR - ITU - RBR - and is responsible for radio communication .

det(Sector-4, The-1)
nn(Sector-4, ITU-2)
nn(Sector-4, Radiocommunication-3)
nsubj(one-13, Sector-4)
nsubj(responsible-41, Sector-4)
nn(RBR-10, LBR-6)
dep(RBR-10, ITU-R-8)
dep(Sector-4, RBR-10)
cop(one-13, is-12)
root(ROOT-0, one-13)
det(sectors-17, the-15)
num(sectors-17, three-16)
prep_of(one-13, sectors-17)
dep(sectors-17, LBR-19)
dep(sectors-17, divisions-21)
dep(sectors-17, units-23)
conj_or(divisions-21, units-23)
dep(divisions-21, RBR-25)
det(Union-31, the-28)
nn(Union-31, International-29)
nn(Union-31, Telecommunication-30)
prep_of(divisions-21, Union-31)
dep(sectors-17, LBR-33)
dep(sectors-17, ITU-35)
dep(sectors-17, RBR-37)
cop(responsible-41, is-40)
conj_and(one-13, responsible-41)
nn(communication-44, radio-43)
prep_for(responsible-41, communication-44)

An Invertebrate is an animal lacking a vertebral column .

det(Invertebrate-2, An-1)
nsubj(animal-5, Invertebrate-2)
cop(animal-5, is-3)
det(animal-5, an-4)
root(ROOT-0, animal-5)
partmod(animal-5, lacking-6)
det(column-9, a-7)
amod(column-9, vertebral-8)
dobj(lacking-6, column-9)

An Imam - LBR - ÃƒË˜Ã ‚ Â ¥ ÃƒË ™ Ã ‚ âˆ ` ÃƒË˜Ã ‚ Â § ÃƒË ™ Ã ‚ â ` , ÃƒË˜Ã ‚ Â § ÃƒË ™ Ã ‚ âˆ ` ÃƒË˜Ã ‚ Â § ÃƒË ™ Ã ‚ â ` - RBR - is an Islamic leader , often the leader of a mosque and \/ or community .

det(Imam-2, An-1)
root(ROOT-0, Imam-2)
dep(Imam-2, LBR-4)
nn(‚-13, ÃƒË˜Ã-6)
nn(‚-13, ‚-7)
nn(‚-13, Â-8)
nn(‚-13, ¥-9)
nn(‚-13, ÃƒË-10)
nn(‚-13, ™-11)
nn(‚-13, Ã-12)
nsubj(âˆ-14, ‚-13)
dep(Imam-2, âˆ-14)
nn(â-24, ÃƒË˜Ã-16)
nn(â-24, ‚-17)
nn(â-24, Â-18)
nn(â-24, §-19)
nn(â-24, ÃƒË-20)
nn(â-24, ™-21)
nn(â-24, Ã-22)
nn(â-24, ‚-23)
dobj(âˆ-14, â-24)
dobj(â-45, â-24)
nn(‚-34, ÃƒË˜Ã-27)
nn(‚-34, ‚-28)
nn(‚-34, Â-29)
nn(‚-34, §-30)
nn(‚-34, ÃƒË-31)
nn(‚-34, ™-32)
nn(‚-34, Ã-33)
nsubj(âˆ-35, ‚-34)
parataxis(â-45, âˆ-35)
nn(‚-44, ÃƒË˜Ã-37)
nn(‚-44, ‚-38)
nn(‚-44, Â-39)
nn(‚-44, §-40)
nn(‚-44, ÃƒË-41)
nn(‚-44, ™-42)
nn(‚-44, Ã-43)
nsubj(â-45, ‚-44)
rcmod(â-24, â-45)
nsubj(leader-53, RBR-48)
cop(leader-53, is-50)
det(leader-53, an-51)
amod(leader-53, Islamic-52)
ccomp(â-45, leader-53)
advmod(leader-57, often-55)
det(leader-57, the-56)
rcmod(leader-53, leader-57)
det(mosque-60, a-59)
prep_of(leader-57, mosque-60)
prep_of(leader-57, \/-62)
conj_and(mosque-60, \/-62)
prep_of(leader-57, community-64)
conj_or(mosque-60, community-64)

In grammar , Infinitive is the name for certain verb forms that exist in many languages .

prep_in(name-7, grammar-2)
nsubj(name-7, Infinitive-4)
cop(name-7, is-5)
det(name-7, the-6)
root(ROOT-0, name-7)
nsubj(exist-13, name-7)
amod(forms-11, certain-9)
nn(forms-11, verb-10)
prep_for(name-7, forms-11)
rcmod(name-7, exist-13)
amod(languages-16, many-15)
prep_in(exist-13, languages-16)

An Index is a system used to make finding information easier .

det(Index-2, An-1)
nsubj(system-5, Index-2)
cop(system-5, is-3)
det(system-5, a-4)
root(ROOT-0, system-5)
xsubj(make-8, system-5)
partmod(system-5, used-6)
aux(make-8, to-7)
xcomp(used-6, make-8)
xcomp(make-8, finding-9)
nsubj(easier-11, information-10)
xcomp(finding-9, easier-11)

In computing , an Interrupt is an asynchronous signal from hardware indicating the need for attention or a synchronous event in software indicating the need for a change in execution .

prep_in(signal-9, computing-2)
det(Interrupt-5, an-4)
nsubj(signal-9, Interrupt-5)
cop(signal-9, is-6)
det(signal-9, an-7)
amod(signal-9, asynchronous-8)
root(ROOT-0, signal-9)
prep_from(signal-9, hardware-11)
partmod(hardware-11, indicating-12)
det(need-14, the-13)
dobj(indicating-12, need-14)
prep_for(need-14, attention-16)
det(event-20, a-18)
amod(event-20, synchronous-19)
prep_for(need-14, event-20)
conj_or(attention-16, event-20)
prep_in(indicating-12, software-22)
xcomp(indicating-12, indicating-23)
det(need-25, the-24)
dobj(indicating-23, need-25)
det(change-28, a-27)
prep_for(indicating-23, change-28)
prep_in(change-28, execution-30)

An Ink is a liquid containing various pigments and \/ or dyes used for coloring a surface to produce an image , text , or design .

det(Ink-2, An-1)
nsubj(liquid-5, Ink-2)
cop(liquid-5, is-3)
det(liquid-5, a-4)
root(ROOT-0, liquid-5)
partmod(liquid-5, containing-6)
amod(pigments-8, various-7)
dobj(containing-6, pigments-8)
dobj(containing-6, \/-10)
conj_and(pigments-8, \/-10)
conj_or(liquid-5, dyes-12)
partmod(dyes-12, used-13)
prepc_for(used-13, coloring-15)
det(surface-17, a-16)
dobj(coloring-15, surface-17)
aux(produce-19, to-18)
infmod(surface-17, produce-19)
det(image-21, an-20)
dobj(produce-19, image-21)
dobj(produce-19, text-23)
conj_or(image-21, text-23)
dobj(produce-19, design-26)
conj_or(image-21, design-26)

Internet Protocol version 4 - LBR - IPv4 - RBR - is the fourth iteration of the Internet Protocol - LBR - IP - RBR - and it is the first version of the protocol to be widely deployed .

nn(version-3, Internet-1)
nn(version-3, Protocol-2)
root(ROOT-0, version-3)
num(version-3, 4-4)
nsubj(iteration-15, LBR-6)
dep(LBR-6, IPv4-8)
dep(IPv4-8, RBR-10)
cop(iteration-15, is-12)
det(iteration-15, the-13)
amod(iteration-15, fourth-14)
dep(version-3, iteration-15)
det(Protocol-19, the-17)
nn(Protocol-19, Internet-18)
prep_of(iteration-15, Protocol-19)
nsubj(RBR-25, LBR-21)
dep(LBR-21, IP-23)
dep(version-3, RBR-25)
conj_and(iteration-15, RBR-25)
parataxis(iteration-15, RBR-25)
nsubj(version-32, it-28)
cop(version-32, is-29)
det(version-32, the-30)
amod(version-32, first-31)
dep(version-3, version-32)
conj_and(iteration-15, version-32)
det(protocol-35, the-34)
prep_of(version-32, protocol-35)
aux(deployed-39, to-36)
auxpass(deployed-39, be-37)
advmod(deployed-39, widely-38)
infmod(protocol-35, deployed-39)

Internet Protocol version 6 - LBR - IPv6 - RBR - is a network layer for packet-switched internetworks .

nn(version-3, Internet-1)
nn(version-3, Protocol-2)
nsubj(layer-15, version-3)
num(version-3, 6-4)
nn(RBR-10, LBR-6)
dep(RBR-10, IPv6-8)
dep(version-3, RBR-10)
cop(layer-15, is-12)
det(layer-15, a-13)
nn(layer-15, network-14)
root(ROOT-0, layer-15)
amod(internetworks-18, packet-switched-17)
prep_for(layer-15, internetworks-18)

Inheritance is the practice of passing on property , titles , debts , and obligations upon the death of an individual .

nsubj(practice-4, Inheritance-1)
cop(practice-4, is-2)
det(practice-4, the-3)
root(ROOT-0, practice-4)
prepc_of(practice-4, passing-6)
prep_on(passing-6, property-8)
prep_on(passing-6, titles-10)
conj_and(property-8, titles-10)
prep_on(passing-6, debts-12)
conj_and(property-8, debts-12)
prep_on(passing-6, obligations-15)
conj_and(property-8, obligations-15)
det(death-18, the-17)
prep_upon(passing-6, death-18)
det(individual-21, an-20)
prep_of(death-18, individual-21)

An Infundibulum - LBR - Latin for funnel ; plural , infundibula - RBR - is a funnel-shape cavity or organ .

det(Infundibulum-2, An-1)
nsubj(cavity-19, Infundibulum-2)
dep(Infundibulum-2, LBR-4)
dep(Infundibulum-2, Latin-6)
prep_for(Latin-6, funnel-8)
dep(Infundibulum-2, plural-10)
appos(plural-10, infundibula-12)
dep(Infundibulum-2, RBR-14)
cop(cavity-19, is-16)
det(cavity-19, a-17)
amod(cavity-19, funnel-shape-18)
root(ROOT-0, cavity-19)
conj_or(cavity-19, organ-21)

Originally formed as International Telecommunications Satellite Organization - LBR - Intelsat - RBR - , it was an intergovernmental consortium owning and managing a constellation of communications satellites providing international broadcast services .

advmod(formed-2, Originally-1)
partmod(consortium-20, formed-2)
nn(Telecommunications-5, International-4)
prep_as(formed-2, Telecommunications-5)
nn(Intelsat-11, Satellite-6)
nn(Intelsat-11, Organization-7)
dep(Intelsat-11, LBR-9)
dobj(formed-2, Intelsat-11)
dep(Intelsat-11, RBR-13)
nsubj(consortium-20, it-16)
cop(consortium-20, was-17)
det(consortium-20, an-18)
amod(consortium-20, intergovernmental-19)
root(ROOT-0, consortium-20)
partmod(consortium-20, owning-21)
partmod(consortium-20, managing-23)
conj_and(owning-21, managing-23)
det(constellation-25, a-24)
dobj(owning-21, constellation-25)
nn(satellites-28, communications-27)
prep_of(constellation-25, satellites-28)
xcomp(owning-21, providing-29)
amod(services-32, international-30)
nn(services-32, broadcast-31)
dobj(providing-29, services-32)

The Jurassic is a geologic period and system that extends from about period startperiod start error Ma - LBR - million years ago - RBR - to period endperiod end error & amp ; ; nbsp ; Ma , that is , from the end of the Triassic to the beginning of the Cretaceous .

det(Jurassic-2, The-1)
nsubj(period-6, Jurassic-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
nsubj(extends-10, period-6)
conj_and(period-6, system-8)
nsubj(extends-10, system-8)
rcmod(period-6, extends-10)
advmod(error-16, about-12)
nn(error-16, period-13)
nn(error-16, startperiod-14)
nn(error-16, start-15)
prep_from(extends-10, error-16)
nn(RBR-25, Ma-17)
dep(RBR-25, LBR-19)
num(years-22, million-21)
npadvmod(ago-23, years-22)
dep(LBR-19, ago-23)
dep(error-16, RBR-25)
prep_to(error-16, period-28)
partmod(period-28, endperiod-29)
nn(error-31, end-30)
dobj(endperiod-29, error-31)
dobj(endperiod-29, amp-33)
conj_and(error-31, amp-33)
dep(period-6, nbsp-36)
dep(nbsp-36, Ma-38)
nsubj(is-41, Ma-38)
rcmod(Ma-38, is-41)
det(end-45, the-44)
prep_from(is-41, end-45)
det(Triassic-48, the-47)
prep_of(end-45, Triassic-48)
det(beginning-51, the-50)
prep_to(is-41, beginning-51)
det(Cretaceous-54, the-53)
prep_of(beginning-51, Cretaceous-54)

The word Jabberwocky itself is sometimes used to refer to nonsense language .

det(word-2, The-1)
nsubj(Jabberwocky-3, word-2)
root(ROOT-0, Jabberwocky-3)
nsubjpass(used-7, itself-4)
xsubj(refer-9, itself-4)
auxpass(used-7, is-5)
advmod(used-7, sometimes-6)
ccomp(Jabberwocky-3, used-7)
aux(refer-9, to-8)
xcomp(used-7, refer-9)
amod(language-12, nonsense-11)
prep_to(refer-9, language-12)

A Jew - LBR - Hebrew : ÃƒËœÃ ‚ Ë ™ ÃƒË † Ã ‚ Â ° ÃƒËœÃ ‚ â $ ° ÃƒËœÃ ‚ ï # ¿ ÃƒË † Ã ‚ Ï $ ÃƒËœÃ ‚ â $ žÃƒË † Ã ‚ Â ´ ÃƒËœÃ ‚ Ë ™ , Yehudi - LBR - sl .

nn(Hebrew-6, A-1)
nn(Hebrew-6, Jew-2)
dep(Hebrew-6, LBR-4)
root(ROOT-0, Hebrew-6)
nn(‚-19, ÃƒËœÃ-8)
nn(‚-19, ‚-9)
nn(‚-19, Ë-10)
nn(‚-19, ™-11)
nn(‚-19, ÃƒË-12)
nn(‚-19, †-13)
nn(‚-19, Ã-14)
nn(‚-19, ‚-15)
nn(‚-19, Â-16)
nn(‚-19, °-17)
nn(‚-19, ÃƒËœÃ-18)
nsubj(â-20, ‚-19)
dep(Hebrew-6, â-20)
num(ï-25, $-21)
number($-21, °-22)
number($-21, ÃƒËœÃ-23)
amod(ï-25, ‚-24)
dobj(â-20, ï-25)
dep(¿-27, #-26)
dep(â-36, ¿-27)
nn(Ï-32, ÃƒË-28)
nn(Ï-32, †-29)
nn(Ï-32, Ã-30)
nn(Ï-32, ‚-31)
dep(¿-27, Ï-32)
dep(â-36, $-33)
num($-33, ÃƒËœÃ-34)
amod(â-36, ‚-35)
dep(sl-53, â-36)
num(™-47, $-37)
number($-37, žÃƒË-38)
number($-37, †-39)
nn(™-47, Ã-40)
nn(™-47, ‚-41)
nn(™-47, Â-42)
nn(™-47, ´-43)
nn(™-47, ÃƒËœÃ-44)
nn(™-47, ‚-45)
nn(™-47, Ë-46)
dep(â-36, ™-47)
nn(LBR-51, Yehudi-49)
appos(™-47, LBR-51)
dep(Hebrew-6, sl-53)

- RBR - ; lang , Yehudim - LBR - pl .

root(ROOT-0, RBR-2)
amod(pl-11, lang-5)
dep(pl-11, Yehudim-7)
dep(pl-11, LBR-9)
dep(RBR-2, pl-11)

- RBR - ; Ladino : ÃƒËœÃ ‚ â $ šÃƒËœÃ ‚ â $ œÃƒËœÃ ‚ ï # ¿ ÃƒËœÃ ‚ â $ žÃƒËœÃ ‚ Ë ™ ÃƒËœÃ ‚ ï # ¿ , Djudio - LBR - sl .

root(ROOT-0, RBR-2)
dep(RBR-2, Ladino-5)
advmod(‚-8, ÃƒËœÃ-7)
amod(â-22, ‚-8)
amod(â-22, â-9)
num(â-22, $-10)
number($-10, šÃƒËœÃ-11)
number($-10, ‚-12)
amod(â-22, â-13)
num(â-22, $-14)
number($-14, œÃƒËœÃ-15)
number($-14, ‚-16)
amod(â-22, ï-17)
number(ÃƒËœÃ-20, #-18)
number(ÃƒËœÃ-20, ¿-19)
num(â-22, ÃƒËœÃ-20)
amod(â-22, ‚-21)
dep(RBR-2, â-22)
dep(RBR-2, $-23)
num($-23, žÃƒËœÃ-24)
nn(‚-29, ‚-25)
nn(‚-29, Ë-26)
nn(‚-29, ™-27)
nn(‚-29, ÃƒËœÃ-28)
nsubj(ï-30, ‚-29)
rcmod($-23, ï-30)
dep(¿-32, #-31)
dobj(ï-30, ¿-32)
nn(sl-38, Djudio-34)
dep(sl-38, LBR-36)
appos(¿-32, sl-38)

- RBR - ; ÃƒËœÃ ‚ â $ šÃƒËœÃ ‚ â $ œÃƒËœÃ ‚ ï # ¿ ÃƒËœÃ ‚ â $ žÃƒËœÃ ‚ Ë ™ ÃƒËœÃ ‚ ï # ¿ ÃƒËœÃ ‚ Â ¡ , Djudios - LBR - pl .

root(ROOT-0, RBR-2)
advmod(‚-6, ÃƒËœÃ-5)
amod(pl-40, ‚-6)
amod(pl-40, â-7)
num(pl-40, $-8)
number($-8, šÃƒËœÃ-9)
number($-8, ‚-10)
amod(pl-40, â-11)
num(pl-40, $-12)
number($-12, œÃƒËœÃ-13)
number($-12, ‚-14)
amod(pl-40, ï-15)
number(ÃƒËœÃ-18, #-16)
number(ÃƒËœÃ-18, ¿-17)
num(pl-40, ÃƒËœÃ-18)
amod(pl-40, ‚-19)
nn(pl-40, â-20)
amod(pl-40, $-21)
dep($-21, žÃƒËœÃ-22)
nn(‚-27, ‚-23)
nn(‚-27, Ë-24)
nn(‚-27, ™-25)
nn(‚-27, ÃƒËœÃ-26)
nsubj(ï-28, ‚-27)
dep($-21, ï-28)
number(ÃƒËœÃ-31, #-29)
number(ÃƒËœÃ-31, ¿-30)
num(¡-34, ÃƒËœÃ-31)
amod(¡-34, ‚-32)
nn(¡-34, Â-33)
dobj(ï-28, ¡-34)
nn(pl-40, Djudios-36)
dep(pl-40, LBR-38)
dep(RBR-2, pl-40)

- RBR - ; Yiddish : ÃƒËœÃ ‚ Ë ™ ÃƒËœÃ ‚ Ë ™ ÃƒË † Ã ‚ Â ´ ÃƒËœÃ ‚ â $ ž , Yid - LBR - sl .

root(ROOT-0, RBR-2)
dep(RBR-2, Yiddish-5)
number(‚-8, ÃƒËœÃ-7)
num(â-23, ‚-8)
nn(â-23, Ë-9)
nn(â-23, ™-10)
nn(â-23, ÃƒËœÃ-11)
nn(â-23, ‚-12)
nn(â-23, Ë-13)
nn(â-23, ™-14)
nn(â-23, ÃƒË-15)
nn(â-23, †-16)
nn(â-23, Ã-17)
nn(â-23, ‚-18)
nn(â-23, Â-19)
nn(â-23, ´-20)
nn(â-23, ÃƒËœÃ-21)
nn(â-23, ‚-22)
dep(RBR-2, â-23)
dep(â-23, $-24)
num($-24, ž-25)
appos(RBR-2, Yid-27)
dep(Yid-27, LBR-29)
partmod(Yid-27, sl-31)

- RBR - ; lang , Yidn - LBR - pl .

root(ROOT-0, RBR-2)
amod(pl-11, lang-5)
dep(pl-11, Yidn-7)
dep(pl-11, LBR-9)
dep(RBR-2, pl-11)

- RBR - - RBR - is a member of the Jewish people , an ethnoreligious group originating from the Israelites or Hebrews of the ancient Middle East .

dep(RBR-5, RBR-2)
root(ROOT-0, RBR-5)
dep(RBR-5, is-7)
det(member-9, a-8)
nsubj(is-7, member-9)
det(people-13, the-11)
amod(people-13, Jewish-12)
prep_of(member-9, people-13)
det(group-17, an-15)
amod(group-17, ethnoreligious-16)
appos(people-13, group-17)
partmod(group-17, originating-18)
det(Israelites-21, the-20)
prep_from(originating-18, Israelites-21)
prep_from(originating-18, Hebrews-23)
conj_or(Israelites-21, Hebrews-23)
det(East-28, the-25)
amod(East-28, ancient-26)
nn(East-28, Middle-27)
prep_of(Israelites-21, East-28)

In computing , JPEG - LBR - pronounced JAY-peg ; Ãƒâ $ '' Ã ‚ âˆšdÃƒâ $ ¦ Ã ‚ â $ šeÃƒâ ‰ ˆÃ ‚ ÂªpÃƒâ ‰ ˆÃ ‚ Ë Ãƒâ ‰ ˆÃ ‚ Â ¡ - RBR - is a commonly used method of compression for photographic images .

prep_in(method-45, computing-2)
nsubj(method-45, JPEG-4)
nn(âˆšdÃƒâ-16, LBR-6)
amod(JAY-peg-9, pronounced-8)
dep(âˆšdÃƒâ-16, JAY-peg-9)
nn(Ã-14, Ãƒâ-11)
nn(Ã-14, $-12)
dep(JAY-peg-9, Ã-14)
punct(JAY-peg-9, ‚-15)
dep(JPEG-4, âˆšdÃƒâ-16)
amod(âˆšdÃƒâ-16, $-17)
number($-17, ¦-18)
number($-17, Ã-19)
punct(â-21, ‚-20)
dep($-17, â-21)
pobj(â-21, $-22)
num($-22, šeÃƒâ-23)
punct(â-21, ‰-24)
punct(â-21, ˆÃ-25)
dep(ÂªpÃƒâ-27, ‚-26)
dep(â-21, ÂªpÃƒâ-27)
punct(ÂªpÃƒâ-27, ‰-28)
dep(Ãƒâ-32, ˆÃ-29)
punct(Ãƒâ-32, ‚-30)
nn(Ãƒâ-32, Ë-31)
dep(ÂªpÃƒâ-27, Ãƒâ-32)
punct(Ãƒâ-32, ‰-33)
dep(Â-36, ˆÃ-34)
punct(Â-36, ‚-35)
dep(Ãƒâ-32, Â-36)
punct(â-21, ¡-37)
dep(âˆšdÃƒâ-16, RBR-39)
cop(method-45, is-41)
det(method-45, a-42)
advmod(used-44, commonly-43)
amod(method-45, used-44)
root(ROOT-0, method-45)
prep_of(method-45, compression-47)
amod(images-50, photographic-49)
prep_for(compression-47, images-50)

Jutland - LBR - Jylland ; JÃƒâˆžÃ ‚ Ï $ tland ; Low German : JÃƒâˆžÃ ‚ Ï $ ÃƒâˆžÃ ‚ Ï $ tland ; Ãƒâ $ '' Ã ‚ âˆšdÃƒâ $ ¦ Ã ‚ â $ šÃƒâ $ ¦ Ã ‚ â $ ˜tlÃƒâ ‰ ˆÃ ‚ Ë ™ nd in English - RBR - is the western , continental part of Denmark as well as one of the three historical Lands of Denmark , dividing the North Sea from the Kattegat and the Baltic Sea .

dep(LBR-3, Jutland-1)
root(ROOT-0, LBR-3)
dep(LBR-3, Jylland-5)
nn(Ï-9, JÃƒâˆžÃ-7)
nn(Ï-9, ‚-8)
dep(Jylland-5, Ï-9)
amod(Ï-9, $-10)
dep($-10, tland-11)
dep(Ï-9, Low-13)
amod(Low-13, German-14)
nn(Ï-22, JÃƒâˆžÃ-16)
punct($-19, ‚-17)
dep($-19, Ï-18)
dep(Ï-22, $-19)
num($-19, ÃƒâˆžÃ-20)
punct($-19, ‚-21)
dep(Ï-9, Ï-22)
amod(Ï-22, $-23)
dep($-23, tland-24)
nn(Ã-29, Ãƒâ-26)
nn(Ã-29, $-27)
dep(Jylland-5, Ã-29)
punct(LBR-3, ‚-30)
dep(LBR-3, âˆšdÃƒâ-31)
dobj(âˆšdÃƒâ-31, $-32)
num($-32, ¦-33)
nn(‚-35, Ã-34)
poss(nd-51, ‚-35)
amod(nd-51, $-37)
number($-37, šÃƒâ-38)
amod(nd-51, $-39)
number($-39, ¦-40)
number($-39, Ã-41)
punct(â-43, ‚-42)
dep($-39, â-43)
pobj(â-43, $-44)
num($-44, ˜tlÃƒâ-45)
punct(â-43, ‰-46)
punct(â-43, ˆÃ-47)
dep(Ë-49, ‚-48)
dep(â-43, Ë-49)
punct(â-43, ™-50)
nsubj(part-62, nd-51)
prep_in(nd-51, English-53)
dep(nd-51, RBR-55)
cop(part-62, is-57)
det(part-62, the-58)
amod(part-62, western-59)
amod(part-62, continental-61)
rcmod($-32, part-62)
prep_of(part-62, Denmark-64)
rcmod($-32, one-68)
conj_and(part-62, one-68)
det(Lands-73, the-70)
num(Lands-73, three-71)
amod(Lands-73, historical-72)
prep_of(one-68, Lands-73)
prep_of(Lands-73, Denmark-75)
partmod(âˆšdÃƒâ-31, dividing-77)
xcomp(âˆšdÃƒâ-31, dividing-77)
det(Sea-80, the-78)
nn(Sea-80, North-79)
dobj(dividing-77, Sea-80)
det(Kattegat-83, the-82)
prep_from(dividing-77, Kattegat-83)
det(Sea-87, the-85)
amod(Sea-87, Baltic-86)
prep_from(dividing-77, Sea-87)
conj_and(Kattegat-83, Sea-87)

Jehoshaphat or Jehosaphat or Josaphat or Yehoshafat - LBR - Hebrew Name - RBR - was the successor of Asa , king of Judah .

nsubj(successor-18, Jehoshaphat-1)
conj_or(Jehoshaphat-1, Jehosaphat-3)
nsubj(successor-18, Jehosaphat-3)
conj_or(Jehoshaphat-1, Josaphat-5)
nsubj(successor-18, Josaphat-5)
conj_or(Jehoshaphat-1, Yehoshafat-7)
conj_or(Josaphat-5, Yehoshafat-7)
dep(Jehoshaphat-1, LBR-9)
nn(Name-12, Hebrew-11)
dep(LBR-9, Name-12)
dep(Jehoshaphat-1, RBR-14)
cop(successor-18, was-16)
det(successor-18, the-17)
root(ROOT-0, successor-18)
prep_of(successor-18, Asa-20)
appos(Asa-20, king-22)
prep_of(king-22, Judah-24)

The Jutes , Iuti , or Iutae were a Germanic people who , according to Bede , were one of the three most powerful Germanic peoples of the time .

det(Iuti-4, The-1)
nn(Iuti-4, Jutes-2)
nsubj(people-11, Iuti-4)
conj_or(Iuti-4, Iutae-7)
nsubj(people-11, Iutae-7)
cop(people-11, were-8)
det(people-11, a-9)
amod(people-11, Germanic-10)
root(ROOT-0, people-11)
nsubj(one-19, people-11)
prepc_according_to(one-19, to-15)
pobj(one-19, Bede-16)
cop(one-19, were-18)
rcmod(people-11, one-19)
det(peoples-26, the-21)
num(peoples-26, three-22)
amod(peoples-26, most-23)
amod(peoples-26, powerful-24)
amod(peoples-26, Germanic-25)
prep_of(one-19, peoples-26)
det(time-29, the-28)
prep_of(peoples-26, time-29)

In the context of the French Revolution , a Jacobin originally meant a member of the Jacobin Club - LBR - 1789-1794 - RBR - , but even at that time , the term Jacobins had been popularly applied to all promulgators of revolutionary opinions .

det(context-3, the-2)
prep_in(meant-12, context-3)
det(Revolution-7, the-5)
amod(Revolution-7, French-6)
prep_of(context-3, Revolution-7)
det(Jacobin-10, a-9)
nsubj(meant-12, Jacobin-10)
advmod(meant-12, originally-11)
root(ROOT-0, meant-12)
det(member-14, a-13)
dobj(meant-12, member-14)
det(Club-18, the-16)
nn(Club-18, Jacobin-17)
prep_of(member-14, Club-18)
dep(Club-18, LBR-20)
dep(Club-18, 1789-1794-22)
dep(1789-1794-22, RBR-24)
advmod(applied-39, even-28)
advcl(applied-39, at-29)
det(time-31, that-30)
prep_at(applied-39, time-31)
det(Jacobins-35, the-33)
nn(Jacobins-35, term-34)
nsubjpass(applied-39, Jacobins-35)
aux(applied-39, had-36)
auxpass(applied-39, been-37)
advmod(applied-39, popularly-38)
conj_but(meant-12, applied-39)
det(promulgators-42, all-41)
prep_to(applied-39, promulgators-42)
amod(opinions-45, revolutionary-44)
prep_of(promulgators-42, opinions-45)

The Jaguar - LBR - Panthera onca , Ãƒâ $ '' Ã ‚ Â ¡ dÃƒâ $ ¦ Ã ‚ â $ šÃƒâˆžÃ ‚ Å `` gjuÃƒâ ‰ ˆÃ ‚ Ëš in British English , or \/ Ãƒâ $ '' Ã ‚ Â ¡ dÃƒâ $ ¦ Ã ‚ â $ šÃƒâˆžÃ ‚ Å `` gwÃƒâ ‰ ˆÃ ‚ Å ' r \/ in American English - RBR - is a New World mammal of the Felidae family and one of four `` big cats `` in the Panthera genus , along with the tiger , lion , and leopard of the Old World .

det(Jaguar-2, The-1)
root(ROOT-0, Jaguar-2)
dep(Jaguar-2, LBR-4)
nn($-10, Panthera-6)
nn($-10, onca-7)
appos($-10, Ãƒâ-9)
dep(LBR-4, $-10)
nn(Â-14, Ã-12)
nn(Â-14, ‚-13)
dep($-10, Â-14)
punct(Jaguar-2, ¡-15)
dep(Jaguar-2, dÃƒâ-16)
dobj(dÃƒâ-16, $-17)
num($-17, ¦-18)
nsubj(‚-20, Ã-19)
rcmod($-17, ‚-20)
advmod(‚-20, â-21)
pobj(â-21, $-22)
num($-22, šÃƒâˆžÃ-23)
punct(Ëš-31, ‚-24)
nn(Ëš-31, Å-25)
nn(Ëš-31, gjuÃƒâ-27)
punct(Ëš-31, ‰-28)
nn(Ëš-31, ˆÃ-29)
punct(Ëš-31, ‚-30)
dobj(‚-20, Ëš-31)
nn(English-34, British-33)
prep_in(Ëš-31, English-34)
dep(Jaguar-2, or-36)
dep(Ã-41, \/-37)
nn(Ã-41, Ãƒâ-38)
nn(Ã-41, $-39)
dep(dÃƒâ-45, Ã-41)
nn(Â-43, ‚-42)
dep(Ã-41, Â-43)
punct(dÃƒâ-45, ¡-44)
dep(Jaguar-2, dÃƒâ-45)
iobj(dÃƒâ-45, $-46)
num($-46, ¦-47)
nsubj(mammal-74, Ã-48)
punct(â-50, ‚-49)
dep(Ã-48, â-50)
dep(â-50, $-51)
num($-51, šÃƒâˆžÃ-52)
punct(â-50, ‚-53)
nn(ˆÃ-58, Å-54)
nn(ˆÃ-58, gwÃƒâ-56)
punct(ˆÃ-58, ‰-57)
dep(â-50, ˆÃ-58)
punct(ˆÃ-58, ‚-59)
poss(r-62, Å-60)
dep(ˆÃ-58, r-62)
punct(â-50, \/-63)
dep(RBR-68, in-64)
nn(English-66, American-65)
pobj(in-64, English-66)
dep(â-50, RBR-68)
cop(mammal-74, is-70)
det(mammal-74, a-71)
nn(mammal-74, New-72)
nn(mammal-74, World-73)
rcmod($-46, mammal-74)
det(family-78, the-76)
nn(family-78, Felidae-77)
prep_of(mammal-74, family-78)
rcmod($-46, one-80)
conj_and(mammal-74, one-80)
prep_of(one-80, four-82)
amod(cats-85, big-84)
dobj(dÃƒâ-45, cats-85)
det(genus-90, the-88)
nn(genus-90, Panthera-89)
prep_in(cats-85, genus-90)
det(tiger-95, the-94)
prep_along_with(genus-90, tiger-95)
prep_along_with(genus-90, lion-97)
conj_and(tiger-95, lion-97)
prep_along_with(genus-90, leopard-100)
conj_and(tiger-95, leopard-100)
det(World-104, the-102)
nn(World-104, Old-103)
prep_of(tiger-95, World-104)

Joel is the surname - LBR - last name - RBR - of Joel family , a British family of brothers who made a fortune in diamond and gold mining in South Africa .

nsubj(surname-4, Joel-1)
cop(surname-4, is-2)
det(surname-4, the-3)
root(ROOT-0, surname-4)
dep(surname-4, LBR-6)
amod(name-9, last-8)
dep(surname-4, name-9)
dep(surname-4, RBR-11)
nn(family-15, Joel-14)
prep_of(surname-4, family-15)
det(family-19, a-17)
amod(family-19, British-18)
dep(surname-4, family-19)
prep_of(family-19, brothers-21)
nsubj(made-23, brothers-21)
rcmod(brothers-21, made-23)
det(fortune-25, a-24)
dobj(made-23, fortune-25)
nn(mining-30, diamond-27)
conj_and(diamond-27, gold-29)
nn(mining-30, gold-29)
prep_in(made-23, mining-30)
nn(Africa-33, South-32)
prep_in(made-23, Africa-33)

According to the Hebrew Bible - LBR - Tanakh \/ Old Testament - RBR - and Qur ` an , Jonah - LBR - Hebrew Name ; Arabic : ÃƒË ™ Ã ‚ â $ ¦ ÃƒË ™ Ã ‚ âˆšÃƒË ™ Ã ‚ âˆ `` ÃƒË˜Ã ‚ â $ , Yunus or ÃƒË ™ Ã ‚ â $ ¦ ÃƒË ™ Ã ‚ âˆšÃƒË ™ Ã ‚ âˆ `` ÃƒË˜Ã ‚ Â § ÃƒË ™ Ã ‚ âˆ , Yunaan ; Latin Ionas ; `` Dove `` - RBR - was a prophet who was swallowed by a great fish .

prepc_according_to(prophet-94, to-2)
det(Bible-5, the-3)
nn(Bible-5, Hebrew-4)
pobj(prophet-94, Bible-5)
conj_and(Bible-5, LBR-7)
pobj(prophet-94, LBR-7)
nn(Testament-12, Tanakh-9)
nn(Testament-12, \/-10)
nn(Testament-12, Old-11)
conj_and(Bible-5, Testament-12)
pobj(prophet-94, Testament-12)
conj_and(Bible-5, RBR-14)
pobj(prophet-94, RBR-14)
conj_and(Bible-5, Qur-17)
pobj(prophet-94, Qur-17)
nsubj(prophet-94, an-19)
appos(an-19, Jonah-21)
dep(an-19, LBR-23)
nn(Name-26, Hebrew-25)
dep(an-19, Name-26)
dep(an-19, Arabic-28)
nn(Yunaan-81, ÃƒË-30)
punct(Yunaan-81, ™-31)
nn(Yunaan-81, Ã-32)
punct(Yunaan-81, ‚-33)
amod(Yunaan-81, â-34)
amod(Yunaan-81, $-35)
punct(Yunaan-81, ¦-36)
nn(Yunaan-81, ÃƒË-37)
punct(Yunaan-81, ™-38)
nn(Yunaan-81, Ã-39)
punct(Yunaan-81, ‚-40)
nn(Yunaan-81, âˆšÃƒË-41)
punct(Yunaan-81, ™-42)
nn(Yunaan-81, Ã-43)
punct(Yunaan-81, ‚-44)
nn(Yunaan-81, âˆ-45)
nn(Yunaan-81, ÃƒË˜Ã-47)
punct(Yunaan-81, ‚-48)
amod(Yunaan-81, â-49)
nn(Yunaan-81, $-50)
conj_or($-50, Yunus-52)
nn(Yunaan-81, Yunus-52)
conj_or($-50, ÃƒË-54)
nn(Yunaan-81, ÃƒË-54)
punct(Yunaan-81, ™-55)
nn(Yunaan-81, Ã-56)
punct(Yunaan-81, ‚-57)
amod(Yunaan-81, â-58)
amod(Yunaan-81, $-59)
punct(Yunaan-81, ¦-60)
nn(Yunaan-81, ÃƒË-61)
punct(Yunaan-81, ™-62)
nn(Yunaan-81, Ã-63)
punct(Yunaan-81, ‚-64)
nn(Yunaan-81, âˆšÃƒË-65)
punct(Yunaan-81, ™-66)
nn(Yunaan-81, Ã-67)
punct(Yunaan-81, ‚-68)
nn(Yunaan-81, âˆ-69)
nn(Yunaan-81, ÃƒË˜Ã-71)
punct(Yunaan-81, ‚-72)
nn(Yunaan-81, Â-73)
punct(Yunaan-81, §-74)
nn(Yunaan-81, ÃƒË-75)
punct(Yunaan-81, ™-76)
nn(Yunaan-81, Ã-77)
punct(Yunaan-81, ‚-78)
nn(Yunaan-81, âˆ-79)
dep(an-19, Yunaan-81)
nn(Ionas-84, Latin-83)
dep(an-19, Ionas-84)
nn(RBR-90, Dove-87)
dep(an-19, RBR-90)
cop(prophet-94, was-92)
det(prophet-94, a-93)
root(ROOT-0, prophet-94)
nsubjpass(swallowed-97, prophet-94)
auxpass(swallowed-97, was-96)
rcmod(prophet-94, swallowed-97)
det(fish-101, a-99)
amod(fish-101, great-100)
agent(swallowed-97, fish-101)

A Joystick is an input device consisting of a stick that pivots on a base and reports its angle or direction to the device it is controlling .

det(Joystick-2, A-1)
nsubj(device-6, Joystick-2)
cop(device-6, is-3)
det(device-6, an-4)
nn(device-6, input-5)
dep(controlling-27, device-6)
partmod(device-6, consisting-7)
det(stick-10, a-9)
prep_of(consisting-7, stick-10)
nsubj(pivots-12, stick-10)
nsubj(reports-17, stick-10)
rcmod(stick-10, pivots-12)
det(base-15, a-14)
prep_on(pivots-12, base-15)
rcmod(stick-10, reports-17)
conj_and(pivots-12, reports-17)
poss(angle-19, its-18)
dobj(reports-17, angle-19)
dobj(reports-17, direction-21)
conj_or(angle-19, direction-21)
det(device-24, the-23)
prep_to(reports-17, device-24)
nsubj(controlling-27, it-25)
aux(controlling-27, is-26)
root(ROOT-0, controlling-27)

A Joke is a short story or ironic depiction of a situation communicated with the intent of being humorous .

det(Joke-2, A-1)
nsubj(story-6, Joke-2)
cop(story-6, is-3)
det(story-6, a-4)
amod(story-6, short-5)
root(ROOT-0, story-6)
amod(depiction-9, ironic-8)
conj_or(story-6, depiction-9)
det(situation-12, a-11)
prep_of(story-6, situation-12)
partmod(situation-12, communicated-13)
det(intent-16, the-15)
prep_with(communicated-13, intent-16)
cop(humorous-19, being-18)
prepc_of(intent-16, humorous-19)

In physics , Jerk , jolt - LBR - especially in British English - RBR - , surge or lurch , is the rate of change of acceleration ; that is , the derivative of acceleration with respect to time , the second derivative of velocity , or the third derivative of displacement .

prep_in(rate-24, physics-2)
nsubj(rate-24, Jerk-4)
appos(Jerk-4, jolt-6)
dep(jolt-6, LBR-8)
advmod(Jerk-4, especially-10)
nn(English-13, British-12)
prep_in(Jerk-4, English-13)
dep(Jerk-4, RBR-15)
appos(Jerk-4, surge-18)
appos(Jerk-4, lurch-20)
conj_or(surge-18, lurch-20)
cop(rate-24, is-22)
det(rate-24, the-23)
root(ROOT-0, rate-24)
prep_of(rate-24, change-26)
prep_of(rate-24, acceleration-28)
nsubj(is-31, that-30)
rcmod(rate-24, is-31)
det(derivative-34, the-33)
conj_or(rate-24, derivative-34)
prep_of(derivative-34, acceleration-36)
prep_with_respect_to(acceleration-36, time-40)
det(derivative-44, the-42)
amod(derivative-44, second-43)
conj_or(rate-24, derivative-44)
prep_of(derivative-44, velocity-46)
det(derivative-51, the-49)
amod(derivative-51, third-50)
conj_or(rate-24, derivative-51)
prep_of(derivative-51, displacement-53)

The Joule - LBR - written in lower case , Ãƒâ $ '' Ã ‚ âˆšdÃƒâ $ ¦ Ã ‚ â $ šuÃƒâ $ '' Ã ‚ âˆ † l or \/ Ãƒâ $ '' Ã ‚ âˆšdÃƒâ $ ¦ Ã ‚ â $ šaÃƒâ $ ¦ Ã ‚ â $ ¦ l \/ - RBR - - LBR - symbol : J - RBR - is the SI unit of energy measuring heat , electricity and mechanical work .

det(Joule-2, The-1)
root(ROOT-0, Joule-2)
dep(Joule-2, LBR-4)
partmod(‚-15, written-6)
amod(case-9, lower-8)
prep_in(written-6, case-9)
nn(Ã-14, Ãƒâ-11)
nn(Ã-14, $-12)
nsubj(‚-15, Ã-14)
dep(Joule-2, ‚-15)
dep(‚-15, âˆšdÃƒâ-16)
dep(Ã-19, $-17)
num(Ã-19, ¦-18)
dobj(âˆšdÃƒâ-16, Ã-19)
punct(Ã-19, ‚-20)
nn(Ã-19, â-21)
nn(Ã-19, $-22)
nn(Ã-19, šuÃƒâ-23)
dep(Ã-19, $-24)
advmod(âˆšdÃƒâ-16, Ã-26)
punct(RBR-56, ‚-27)
dep(RBR-56, âˆ-28)
punct(âˆ-28, †-29)
dep(âˆ-28, l-30)
nn(Ã-36, \/-32)
nn(Ã-36, Ãƒâ-33)
nn(Ã-36, $-34)
dep(âˆ-28, Ã-36)
conj_or(l-30, Ã-36)
punct(âˆ-28, ‚-37)
dep(âˆ-28, âˆšdÃƒâ-38)
iobj(âˆšdÃƒâ-38, $-39)
number($-39, ¦-40)
number($-39, Ã-41)
punct($-46, ‚-42)
dep($-46, â-43)
pobj(â-43, $-44)
num($-44, šaÃƒâ-45)
dep($-39, $-46)
number($-46, ¦-47)
number($-46, Ã-48)
punct($-46, ‚-49)
advmod(l-53, â-50)
pobj(â-50, $-51)
num($-51, ¦-52)
dobj(âˆšdÃƒâ-38, l-53)
punct(RBR-56, \/-54)
dobj(âˆšdÃƒâ-16, RBR-56)
nsubj(unit-70, LBR-59)
dep(LBR-59, symbol-61)
dep(symbol-61, J-63)
dep(LBR-59, RBR-65)
cop(unit-70, is-67)
det(unit-70, the-68)
nn(unit-70, SI-69)
dep(RBR-56, unit-70)
prep_of(unit-70, energy-72)
partmod(energy-72, measuring-73)
nn(electricity-76, heat-74)
nn(work-79, electricity-76)
conj_and(electricity-76, mechanical-78)
nn(work-79, mechanical-78)
dobj(measuring-73, work-79)

The Jedi are members of an ancient and noble monastic order in the fictional Star Wars universe .

det(Jedi-2, The-1)
nsubj(members-4, Jedi-2)
cop(members-4, are-3)
root(ROOT-0, members-4)
det(order-11, an-6)
amod(order-11, ancient-7)
conj_and(ancient-7, noble-9)
amod(order-11, noble-9)
amod(order-11, monastic-10)
prep_of(members-4, order-11)
det(universe-17, the-13)
amod(universe-17, fictional-14)
nn(universe-17, Star-15)
nn(universe-17, Wars-16)
prep_in(order-11, universe-17)

In law , Jurisdiction - LBR - from the Latin ius , iuris meaning `` law `` and dicere meaning `` to speak `` - RBR - is the practical authority granted to a formally constituted legal body or to a political leader to deal with and make pronouncements on legal matters and , by implication , to administer justice within a defined area of responsibility .

prep_in(authority-31, law-2)
nsubj(authority-31, Jurisdiction-4)
dep(Jurisdiction-4, LBR-6)
dep(iuris-13, from-8)
det(ius-11, the-9)
amod(ius-11, Latin-10)
pobj(from-8, ius-11)
dep(Jurisdiction-4, iuris-13)
dep(iuris-13, meaning-14)
dobj(meaning-14, law-16)
conj_and(Jurisdiction-4, dicere-19)
xsubj(speak-23, dicere-19)
nsubj(authority-31, dicere-19)
partmod(dicere-19, meaning-20)
aux(speak-23, to-22)
xcomp(meaning-20, speak-23)
dobj(speak-23, RBR-26)
cop(authority-31, is-28)
det(authority-31, the-29)
amod(authority-31, practical-30)
root(ROOT-0, authority-31)
partmod(authority-31, granted-32)
det(body-38, a-34)
advmod(constituted-36, formally-35)
amod(body-38, constituted-36)
amod(body-38, legal-37)
prep_to(granted-32, body-38)
det(leader-43, a-41)
amod(leader-43, political-42)
prep_to(granted-32, leader-43)
conj_or(body-38, leader-43)
aux(deal-45, to-44)
dep(leader-43, deal-45)
prep(deal-45, with-46)
dep(leader-43, make-48)
conj_and(deal-45, make-48)
dobj(make-48, pronouncements-49)
amod(matters-52, legal-51)
prep_on(make-48, matters-52)
prep_by(administer-59, implication-56)
aux(administer-59, to-58)
dep(leader-43, administer-59)
conj_and(deal-45, administer-59)
dobj(administer-59, justice-60)
det(area-64, a-62)
amod(area-64, defined-63)
prep_within(administer-59, area-64)
prep_of(area-64, responsibility-66)

JANET is a private British government-funded computer network dedicated to education and research .

nsubj(network-8, JANET-1)
cop(network-8, is-2)
det(network-8, a-3)
amod(network-8, private-4)
amod(network-8, British-5)
amod(network-8, government-funded-6)
nn(network-8, computer-7)
root(ROOT-0, network-8)
partmod(network-8, dedicated-9)
prep_to(dedicated-9, education-11)
prep_to(dedicated-9, research-13)
conj_and(education-11, research-13)

Java is a German-style board game designed by Wolfgang Kramer and Michael Kiesling and published in 2000 by Ravensburger in Germany and by Rio Grande Games in England .

nsubj(game-6, Java-1)
cop(game-6, is-2)
det(game-6, a-3)
amod(game-6, German-style-4)
nn(game-6, board-5)
root(ROOT-0, game-6)
dep(game-6, designed-7)
nn(Kramer-10, Wolfgang-9)
prep_by(designed-7, Kramer-10)
nn(Kiesling-13, Michael-12)
prep_by(designed-7, Kiesling-13)
conj_and(Kramer-10, Kiesling-13)
dep(game-6, published-15)
conj_and(designed-7, published-15)
prep_in(published-15, 2000-17)
prep_by(published-15, Ravensburger-19)
prep_in(Ravensburger-19, Germany-21)
nn(Games-26, Rio-24)
nn(Games-26, Grande-25)
prep_by(published-15, Games-26)
conj_and(Ravensburger-19, Games-26)
prep_in(Games-26, England-28)

Jewel may mean Gemstone or jewellery .

nsubj(mean-3, Jewel-1)
aux(mean-3, may-2)
root(ROOT-0, mean-3)
dobj(mean-3, Gemstone-4)
dobj(mean-3, jewellery-6)
conj_or(Gemstone-4, jewellery-6)

The Koto - LBR - ÃƒÂ § Ã ‚ âˆ † Ã ‚ Â ´ or ÃƒÂ § Ã ‚ Â ® Ã ‚ â ‚ - RBR - is a traditional Japanese stringed musical instrument derived from Chinese zither - LBR - Guzheng - RBR - .

det(Koto-2, The-1)
nsubj(instrument-36, Koto-2)
nn(RBR-28, LBR-4)
nn(´-15, ÃƒÂ-6)
nn(´-15, §-7)
nn(´-15, Ã-8)
nn(´-15, ‚-9)
nn(´-15, âˆ-10)
nn(´-15, †-11)
nn(´-15, Ã-12)
nn(´-15, ‚-13)
nn(´-15, Â-14)
dep(RBR-28, ´-15)
nn(‚-26, ÃƒÂ-17)
nn(‚-26, §-18)
nn(‚-26, Ã-19)
nn(‚-26, ‚-20)
nn(‚-26, Â-21)
nn(‚-26, ®-22)
nn(‚-26, Ã-23)
nn(‚-26, ‚-24)
nn(‚-26, â-25)
conj_or(´-15, ‚-26)
dep(RBR-28, ‚-26)
dep(Koto-2, RBR-28)
cop(instrument-36, is-30)
det(instrument-36, a-31)
amod(instrument-36, traditional-32)
amod(instrument-36, Japanese-33)
amod(instrument-36, stringed-34)
amod(instrument-36, musical-35)
root(ROOT-0, instrument-36)
partmod(instrument-36, derived-37)
nn(Guzheng-44, Chinese-39)
nn(Guzheng-44, zither-40)
dep(Guzheng-44, LBR-42)
prep_from(derived-37, Guzheng-44)
dep(Guzheng-44, RBR-46)

A Kludge - LBR - or , alternatively , kluge - RBR - is a clumsy or inelegant solution to a problem or difficulty .

det(Kludge-2, A-1)
nsubj(solution-19, Kludge-2)
nn(RBR-12, LBR-4)
dep(kluge-10, or-6)
dep(kluge-10, alternatively-8)
dep(RBR-12, kluge-10)
dep(Kludge-2, RBR-12)
cop(solution-19, is-14)
det(solution-19, a-15)
amod(solution-19, clumsy-16)
conj_or(clumsy-16, inelegant-18)
amod(solution-19, inelegant-18)
root(ROOT-0, solution-19)
det(problem-22, a-21)
prep_to(solution-19, problem-22)
prep_to(solution-19, difficulty-24)
conj_or(problem-22, difficulty-24)

The Kilogram or kilogramme - LBR - symbol : kg - RBR - is the base unit of mass in the International System of Units - LBR - known also by its French-language initials ÃƒÂ cents Ã ‚ â $ cents Ã ‚ Ë ' SIÃƒÂ cents Ã ‚ â $ cents Ã ‚ ‡ - RBR - .

det(Kilogram-2, The-1)
nsubj(unit-17, Kilogram-2)
conj_or(Kilogram-2, kilogramme-4)
nsubj(unit-17, kilogramme-4)
nn(RBR-12, LBR-6)
dep(RBR-12, symbol-8)
dep(symbol-8, kg-10)
dep(Kilogram-2, RBR-12)
cop(unit-17, is-14)
det(unit-17, the-15)
nn(unit-17, base-16)
dep(â-50, unit-17)
prep_of(unit-17, mass-19)
det(System-23, the-21)
nn(System-23, International-22)
prep_in(mass-19, System-23)
prep_of(System-23, Units-25)
nsubj(â-39, LBR-27)
parataxis(â-39, known-29)
advmod(known-29, also-30)
poss(cents-36, its-32)
amod(cents-36, French-language-33)
nn(cents-36, initials-34)
nn(cents-36, ÃƒÂ-35)
prep_by(known-29, cents-36)
nn(‚-38, Ã-37)
nsubj(â-39, ‚-38)
parataxis(unit-17, â-39)
dobj(â-39, $-40)
num($-40, cents-41)
nn(Ë-44, Ã-42)
nn(Ë-44, ‚-43)
poss(cents-47, Ë-44)
amod(cents-47, SIÃƒÂ-46)
dobj(â-39, cents-47)
dep($-40, cents-47)
nn(‚-49, Ã-48)
dep(cents-47, ‚-49)
root(ROOT-0, â-50)
dobj(â-50, $-51)
num($-51, cents-52)
nn(‡-55, Ã-53)
nn(‡-55, ‚-54)
nsubj(â-50, ‡-55)
dep(‡-55, RBR-57)

The Kelvin - LBR - symbol : K - RBR - is a unit increment of temperature and is one of the seven SI base units .

det(Kelvin-2, The-1)
nsubj(increment-15, Kelvin-2)
nn(RBR-10, LBR-4)
dep(RBR-10, symbol-6)
dep(symbol-6, K-8)
dep(Kelvin-2, RBR-10)
cop(increment-15, is-12)
det(increment-15, a-13)
nn(increment-15, unit-14)
root(ROOT-0, increment-15)
prep_of(increment-15, temperature-17)
cop(one-20, is-19)
conj_and(increment-15, one-20)
det(units-26, the-22)
num(units-26, seven-23)
nn(units-26, SI-24)
nn(units-26, base-25)
prep_of(one-20, units-26)

Knitting is a method by which thread or yarn may be turned into cloth .

nsubj(method-4, Knitting-1)
cop(method-4, is-2)
det(method-4, a-3)
root(ROOT-0, method-4)
agent(turned-12, method-4)
nsubjpass(turned-12, thread-7)
conj_or(thread-7, yarn-9)
nsubjpass(turned-12, yarn-9)
aux(turned-12, may-10)
auxpass(turned-12, be-11)
rcmod(method-4, turned-12)
prep_into(turned-12, cloth-14)

The name KDE was intended as a word play on the existing Common Desktop Environment , available for Unix systems .

det(KDE-3, The-1)
nn(KDE-3, name-2)
nsubjpass(intended-5, KDE-3)
auxpass(intended-5, was-4)
root(ROOT-0, intended-5)
det(play-9, a-7)
nn(play-9, word-8)
prep_as(intended-5, play-9)
det(Environment-15, the-11)
amod(Environment-15, existing-12)
nn(Environment-15, Common-13)
nn(Environment-15, Desktop-14)
prep_on(intended-5, Environment-15)
acomp(intended-5, available-17)
nn(systems-20, Unix-19)
prep_for(available-17, systems-20)

The Khazars were a semi-nomadic Turkic people who dominated the Pontic steppe and the North Caucasus from the 7th to the 10th century CE .

det(Khazars-2, The-1)
nsubj(people-7, Khazars-2)
cop(people-7, were-3)
det(people-7, a-4)
amod(people-7, semi-nomadic-5)
amod(people-7, Turkic-6)
root(ROOT-0, people-7)
nsubj(dominated-9, people-7)
rcmod(people-7, dominated-9)
det(steppe-12, the-10)
amod(steppe-12, Pontic-11)
dobj(dominated-9, steppe-12)
det(Caucasus-16, the-14)
nn(Caucasus-16, North-15)
dobj(dominated-9, Caucasus-16)
conj_and(steppe-12, Caucasus-16)
det(7th-19, the-18)
prep_from(dominated-9, 7th-19)
det(CE-24, the-21)
amod(CE-24, 10th-22)
nn(CE-24, century-23)
prep_to(dominated-9, CE-24)

The name Kiribati is the local pronunciation of `` Gilberts `` , derived from the main island chain , the Gilbert Islands .

advmod(pronunciation-7, The-1)
nn(Kiribati-3, name-2)
nsubj(pronunciation-7, Kiribati-3)
cop(pronunciation-7, is-4)
det(pronunciation-7, the-5)
amod(pronunciation-7, local-6)
dep(derived-13, pronunciation-7)
prep_of(pronunciation-7, Gilberts-10)
root(ROOT-0, derived-13)
det(chain-18, the-15)
amod(chain-18, main-16)
nn(chain-18, island-17)
prep_from(derived-13, chain-18)
det(Islands-22, the-20)
nn(Islands-22, Gilbert-21)
appos(chain-18, Islands-22)

The Kattegat - LBR - Danish - RBR - , or Kattegatt - LBR - Swedish - RBR - is a sea area bounded by Jutland - LBR - Denmark - RBR - , and Scania , Halland and BohuslÃƒâˆžÃ ‚ â ‚ ¬ n - LBR - Sweden - RBR - .

det(Kattegat-2, The-1)
nsubj(area-23, Kattegat-2)
dep(Kattegat-2, LBR-4)
dep(LBR-4, Danish-6)
dep(Danish-6, RBR-8)
nn(RBR-18, Kattegatt-12)
dep(RBR-18, LBR-14)
dep(LBR-14, Swedish-16)
dep(Kattegat-2, RBR-18)
conj_or(LBR-4, RBR-18)
cop(area-23, is-20)
det(area-23, a-21)
nn(area-23, sea-22)
root(ROOT-0, area-23)
partmod(area-23, bounded-24)
nn(Denmark-30, Jutland-26)
dep(Denmark-30, LBR-28)
agent(bounded-24, Denmark-30)
dep(Denmark-30, RBR-32)
nsubj(‚-41, Scania-36)
conj_and(Scania-36, Halland-38)
nsubj(‚-41, Halland-38)
conj_and(Scania-36, BohuslÃƒâˆžÃ-40)
nsubj(‚-41, BohuslÃƒâˆžÃ-40)
conj_and(area-23, ‚-41)
nn(n-45, â-42)
nn(n-45, ‚-43)
nn(n-45, ¬-44)
dobj(‚-41, n-45)
nn(RBR-51, LBR-47)
dep(RBR-51, Sweden-49)
dep(n-45, RBR-51)

There are many arts labeled !

expl(are-2, There-1)
root(ROOT-0, are-2)
amod(arts-4, many-3)
nsubj(are-2, arts-4)
partmod(arts-4, labeled-5)

Kickboxing including Japanese , American , Indian , Burmese kickboxing , as well as French savate .

root(ROOT-0, Kickboxing-1)
amod(kickboxing-10, Japanese-3)
amod(kickboxing-10, American-5)
amod(kickboxing-10, Indian-7)
amod(kickboxing-10, Burmese-9)
prep_including(Kickboxing-1, kickboxing-10)
amod(savate-16, French-15)
prep_including(Kickboxing-1, savate-16)
conj_and(kickboxing-10, savate-16)

The Kalevala is a book and epic poem which the Finn Elias LÃƒâˆžÃ ‚ Â ¶ nnrot compiled from Finnish and Karelian folklore in the 19th century .

det(Kalevala-2, The-1)
nsubj(poem-8, Kalevala-2)
cop(poem-8, is-3)
det(poem-8, a-4)
nn(poem-8, book-5)
conj_and(book-5, epic-7)
nn(poem-8, epic-7)
root(ROOT-0, poem-8)
dobj(compiled-18, poem-8)
rel(compiled-18, which-9)
det(nnrot-17, the-10)
nn(nnrot-17, Finn-11)
nn(nnrot-17, Elias-12)
nn(nnrot-17, LÃƒâˆžÃ-13)
nn(nnrot-17, ‚-14)
nn(nnrot-17, Â-15)
nn(nnrot-17, ¶-16)
nsubj(compiled-18, nnrot-17)
rcmod(poem-8, compiled-18)
amod(folklore-23, Finnish-20)
conj_and(Finnish-20, Karelian-22)
amod(folklore-23, Karelian-22)
prep_from(compiled-18, folklore-23)
det(century-27, the-25)
amod(century-27, 19th-26)
prep_in(compiled-18, century-27)

A Kenning - LBR - Old Norse kenning , Modern Icelandic pronunciation - RBR - is a circumlocution used instead of an ordinary noun in Old Norse and later Icelandic poetry .

det(Kenning-2, A-1)
nsubj(circumlocution-18, Kenning-2)
nn(RBR-14, LBR-4)
nn(kenning-8, Old-6)
nn(kenning-8, Norse-7)
dep(RBR-14, kenning-8)
nn(pronunciation-12, Modern-10)
nn(pronunciation-12, Icelandic-11)
appos(kenning-8, pronunciation-12)
dep(Kenning-2, RBR-14)
cop(circumlocution-18, is-16)
det(circumlocution-18, a-17)
root(ROOT-0, circumlocution-18)
partmod(circumlocution-18, used-19)
det(noun-24, an-22)
amod(noun-24, ordinary-23)
prep_instead_of(used-19, noun-24)
nn(Norse-27, Old-26)
prep_in(noun-24, Norse-27)
advmod(poetry-31, later-29)
amod(poetry-31, Icelandic-30)
prep_in(noun-24, poetry-31)
conj_and(Norse-27, poetry-31)

A Kilobyte - LBR - derived from the SI prefix kilo - , meaning 1,000 - RBR - is a unit of information or computer storage equal to either 1,024 bytes - LBR - 2 -LRB- sup -RRB- 10 -LRB- \/ sup -RRB- - RBR - or 1,000 bytes - LBR - 10 -LRB- sup -RRB- 3 -LRB- \/ sup -RRB- - RBR - , depending on context .

det(Kilobyte-2, A-1)
nsubj(unit-21, Kilobyte-2)
dep(Kilobyte-2, LBR-4)
dep(Kilobyte-2, derived-6)
det(kilo-11, the-8)
nn(kilo-11, SI-9)
nn(kilo-11, prefix-10)
prep_from(derived-6, kilo-11)
partmod(Kilobyte-2, meaning-14)
dobj(meaning-14, 1,000-15)
dep(Kilobyte-2, RBR-17)
cop(unit-21, is-19)
det(unit-21, a-20)
root(ROOT-0, unit-21)
nn(storage-26, information-23)
conj_or(information-23, computer-25)
nn(storage-26, computer-25)
prep_of(unit-21, storage-26)
amod(storage-26, equal-27)
det(bytes-31, either-29)
num(bytes-31, 1,024-30)
prep_to(equal-27, bytes-31)
dep(storage-26, LBR-33)
num(sup-37, 2-35)
dep(LBR-33, sup-37)
dep(sup-37, 10-39)
amod(sup-42, \/-41)
appos(10-39, sup-42)
dep(storage-26, RBR-45)
dep(bytes-49, or-47)
num(bytes-49, 1,000-48)
dep(RBR-45, bytes-49)
dep(RBR-45, LBR-51)
num(sup-55, 10-53)
dep(storage-26, sup-55)
dep(sup-55, 3-57)
amod(sup-60, \/-59)
appos(storage-26, sup-60)
dep(storage-26, RBR-63)
prepc_depending_on(unit-21, on-67)
pobj(unit-21, context-68)

Kraftwerk , released in 1970 , and Kraftwerk 2 , released in 1972 , were mostly exploratory jam music , played on a variety of traditional instruments including guitar , bass , drums , electric organ , flute and violin .

nsubj(music-19, Kraftwerk-1)
partmod(Kraftwerk-1, released-3)
prep_in(released-3, 1970-5)
prep_in(released-3, Kraftwerk-8)
conj_and(1970-5, Kraftwerk-8)
num(Kraftwerk-8, 2-9)
partmod(1970-5, released-11)
prep_in(released-11, 1972-13)
cop(music-19, were-15)
advmod(music-19, mostly-16)
amod(music-19, exploratory-17)
nn(music-19, jam-18)
root(ROOT-0, music-19)
partmod(music-19, played-21)
det(variety-24, a-23)
prep_on(played-21, variety-24)
amod(instruments-27, traditional-26)
prep_of(variety-24, instruments-27)
prep_including(instruments-27, guitar-29)
prep_including(instruments-27, bass-31)
conj_and(guitar-29, bass-31)
prep_including(instruments-27, drums-33)
conj_and(guitar-29, drums-33)
amod(organ-36, electric-35)
prep_including(instruments-27, organ-36)
conj_and(guitar-29, organ-36)
prep_including(instruments-27, flute-38)
conj_and(guitar-29, flute-38)
prep_including(instruments-27, violin-40)
conj_and(guitar-29, violin-40)

Ketene also refers to ethenone , the specific compound of this class in which both Rs are hydrogen .

nsubj(refers-3, Ketene-1)
advmod(refers-3, also-2)
root(ROOT-0, refers-3)
prep_to(refers-3, ethenone-5)
det(compound-9, the-7)
amod(compound-9, specific-8)
appos(ethenone-5, compound-9)
det(class-12, this-11)
prep_of(compound-9, class-12)
rel(hydrogen-18, which-14)
det(Rs-16, both-15)
nsubj(hydrogen-18, Rs-16)
cop(hydrogen-18, are-17)
rcmod(class-12, hydrogen-18)

A Kistvaen is a stone coffin , usually pre-Christian , derived from the Celtic cist - LBR - chest - RBR - and maen - LBR - stone - RBR - .

det(Kistvaen-2, A-1)
nsubj(coffin-6, Kistvaen-2)
cop(coffin-6, is-3)
det(coffin-6, a-4)
nn(coffin-6, stone-5)
root(ROOT-0, coffin-6)
advmod(pre-Christian-9, usually-8)
amod(coffin-6, pre-Christian-9)
partmod(coffin-6, derived-11)
det(cist-15, the-13)
amod(cist-15, Celtic-14)
prep_from(derived-11, cist-15)
prep_from(derived-11, LBR-17)
conj_and(cist-15, LBR-17)
prep_from(derived-11, chest-19)
conj_and(cist-15, chest-19)
prep_from(derived-11, RBR-21)
conj_and(cist-15, RBR-21)
amod(stone-28, maen-24)
dep(stone-28, LBR-26)
prep_from(derived-11, stone-28)
conj_and(cist-15, stone-28)
dep(stone-28, RBR-30)

In Polish , KrakÃƒâˆžÃ ‚ â $ œw is an archaic possessive form of Krak and essentially means `` Krak 's - LBR - town - RBR - `` .

prep_in(â-6, Polish-2)
nn(‚-5, KrakÃƒâˆžÃ-4)
nsubj(â-6, ‚-5)
root(ROOT-0, â-6)
dobj(â-6, $-7)
num($-7, œw-8)
cop(form-13, is-9)
det(form-13, an-10)
amod(form-13, archaic-11)
nn(form-13, possessive-12)
rcmod($-7, form-13)
prep_of(form-13, Krak-15)
rcmod($-7, essentially-17)
advmod(form-13, essentially-17)
conj_and(form-13, essentially-17)
rcmod($-7, means-18)
conj_and(form-13, means-18)
nsubj('s-21, Krak-20)
ccomp(means-18, 's-21)
nsubj(RBR-27, LBR-23)
dep(LBR-23, town-25)
parataxis('s-21, RBR-27)

The Kora is a 21-string harp-lute used extensively by peoples in West Africa .

det(Kora-2, The-1)
nsubj(harp-lute-6, Kora-2)
cop(harp-lute-6, is-3)
det(harp-lute-6, a-4)
amod(harp-lute-6, 21-string-5)
root(ROOT-0, harp-lute-6)
partmod(harp-lute-6, used-7)
advmod(used-7, extensively-8)
agent(used-7, peoples-10)
nn(Africa-13, West-12)
prep_in(peoples-10, Africa-13)

In martial arts , combat sports or violence , a Kick is a strike using the foot , leg , or knee - LBR - also known as a knee strike - RBR - .

amod(arts-3, martial-2)
prep_in(strike-14, arts-3)
nn(sports-6, combat-5)
conj_or(arts-3, sports-6)
prep_in(strike-14, sports-6)
conj_or(arts-3, violence-8)
prep_in(strike-14, violence-8)
det(Kick-11, a-10)
nsubj(strike-14, Kick-11)
cop(strike-14, is-12)
det(strike-14, a-13)
root(ROOT-0, strike-14)
partmod(strike-14, using-15)
det(foot-17, the-16)
dobj(using-15, foot-17)
dobj(using-15, leg-19)
conj_or(foot-17, leg-19)
dobj(using-15, knee-22)
conj_or(foot-17, knee-22)
dep(foot-17, LBR-24)
advmod(known-27, also-26)
partmod(foot-17, known-27)
det(strike-31, a-29)
nn(strike-31, knee-30)
prep_as(known-27, strike-31)
dep(strike-31, RBR-33)

The word Katakana means `` fragmentary kana `` , as the katakana scripts are derived from components of more complex kanji .

det(Katakana-3, The-1)
nn(Katakana-3, word-2)
nsubj(means-4, Katakana-3)
root(ROOT-0, means-4)
amod(kana-7, fragmentary-6)
dobj(means-4, kana-7)
advmod(derived-15, as-10)
det(katakana-12, the-11)
pobj(as-10, katakana-12)
nsubjpass(derived-15, scripts-13)
auxpass(derived-15, are-14)
rcmod(kana-7, derived-15)
prep_from(derived-15, components-17)
advmod(complex-20, more-19)
amod(kanji-21, complex-20)
prep_of(components-17, kanji-21)

The KitÃƒâˆžÃ ‚ Â ¡ b-i-Aqdas is a central book of the BahÃƒâˆžÃ ‚ Â ¡ ' ÃƒâˆžÃ ‚ â $ `` Faith written by BahÃƒâˆžÃ ‚ Â ¡ ` u 'll ÃƒâˆžÃ ‚ Â ¡ h , the founder of the religion .

det(Â-4, The-1)
nn(Â-4, KitÃƒâˆžÃ-2)
nn(Â-4, ‚-3)
nsubj(ÃƒâˆžÃ-33, Â-4)
punct(book-10, ¡-5)
nsubj(book-10, b-i-Aqdas-6)
cop(book-10, is-7)
det(book-10, a-8)
amod(book-10, central-9)
parataxis(ÃƒâˆžÃ-33, book-10)
det(Faith-23, the-12)
amod(Faith-23, BahÃƒâˆžÃ-13)
punct(Faith-23, ‚-14)
nn(Faith-23, Â-15)
punct(Faith-23, ¡-16)
nn(Faith-23, ÃƒâˆžÃ-18)
nn(Faith-23, ‚-19)
nn(Faith-23, â-20)
nn(Faith-23, $-21)
prep_of(book-10, Faith-23)
partmod(book-10, written-24)
nn(Â-28, BahÃƒâˆžÃ-26)
nn(Â-28, ‚-27)
agent(written-24, Â-28)
punct(book-10, ¡-29)
nsubj(ÃƒâˆžÃ-33, u-31)
aux(ÃƒâˆžÃ-33, 'll-32)
root(ROOT-0, ÃƒâˆžÃ-33)
punct(h-37, ‚-34)
nn(h-37, Â-35)
punct(h-37, ¡-36)
dobj(ÃƒâˆžÃ-33, h-37)
det(founder-40, the-39)
appos(h-37, founder-40)
det(religion-43, the-42)
prep_of(founder-40, religion-43)

A KÃƒâˆ ` Ã ‚ Å ¸ an - LBR - ÃƒÂ ¥ Ã ‚ âˆ ` Ã ‚ Â ¬ ÃƒÅ `` Ã ‚ Â ¡ Ã ‚ âˆš ; Japanese : kÃƒâˆ ` Ã ‚ Å ¸ an , Chinese : gÃƒâˆ ` Ã ‚ Å ¸ ng-ÃƒâˆžÃ ‚ & nbsp ; n , Korean : gong ` an , Vietnamese : cÃƒâˆžÃ ‚ Â ´ ng ÃƒâˆžÃ ‚ Â ¡ n - RBR - is a story , dialogue , question , or statement in the history and lore of ChÃƒâˆžÃ ‚ Â ¡ n - LBR - Zen - RBR - Buddhism , generally containing aspects that are inaccessible to rational understanding , yet may be accessible to intuition .

det(¸-7, A-1)
amod(¸-7, KÃƒâˆ-2)
nn(¸-7, Ã-4)
nn(¸-7, ‚-5)
nn(¸-7, Å-6)
nsubj(accessible-121, ¸-7)
det(âˆ-16, an-8)
dep(âˆ-16, LBR-10)
nn(âˆ-16, ÃƒÂ-12)
nn(âˆ-16, ¥-13)
nn(âˆ-16, Ã-14)
nn(âˆ-16, ‚-15)
nsubj(story-80, âˆ-16)
nn(âˆš-30, Ã-18)
nn(âˆš-30, ‚-19)
nn(âˆš-30, Â-20)
nn(âˆš-30, ¬-21)
nn(âˆš-30, ÃƒÅ-22)
nn(âˆš-30, Ã-24)
nn(âˆš-30, ‚-25)
nn(âˆš-30, Â-26)
nn(âˆš-30, ¡-27)
nn(âˆš-30, Ã-28)
nn(âˆš-30, ‚-29)
dep(âˆ-16, âˆš-30)
dep(âˆš-30, Japanese-32)
nn(¸-39, kÃƒâˆ-34)
nn(¸-39, Ã-36)
nn(¸-39, ‚-37)
nn(¸-39, Å-38)
dep(âˆš-30, ¸-39)
punct(¸-39, an-40)
appos(¸-39, Chinese-42)
nn(‚-51, gÃƒâˆ-44)
nn(‚-51, Ã-46)
nn(‚-51, ‚-47)
nn(‚-51, Å-48)
nn(‚-51, ¸-49)
nn(‚-51, ng-ÃƒâˆžÃ-50)
dep(âˆš-30, ‚-51)
dep(âˆš-30, nbsp-53)
conj_and(‚-51, nbsp-53)
dep(âˆš-30, n-55)
appos(n-55, Korean-57)
dep(âˆš-30, gong-59)
dep(gong-59, an-61)
appos(an-61, Vietnamese-63)
nn(ng-69, cÃƒâˆžÃ-65)
nn(ng-69, ‚-66)
nn(ng-69, Â-67)
nn(ng-69, ´-68)
dep(âˆš-30, ng-69)
nn(n-74, ÃƒâˆžÃ-70)
nn(n-74, ‚-71)
nn(n-74, Â-72)
nn(n-74, ¡-73)
dep(ng-69, n-74)
dep(âˆ-16, RBR-76)
cop(story-80, is-78)
det(story-80, a-79)
rcmod(¸-7, story-80)
rcmod(¸-7, dialogue-82)
conj_or(story-80, dialogue-82)
rcmod(¸-7, question-84)
conj_or(story-80, question-84)
rcmod(¸-7, statement-87)
conj_or(story-80, statement-87)
det(history-90, the-89)
prep_in(story-80, history-90)
prep_in(story-80, lore-92)
conj_and(history-90, lore-92)
nn(n-98, ChÃƒâˆžÃ-94)
nn(n-98, ‚-95)
nn(n-98, Â-96)
nn(n-98, ¡-97)
prep_of(lore-92, n-98)
prep_in(story-80, LBR-100)
conj_and(history-90, LBR-100)
prep_in(story-80, Zen-102)
conj_and(history-90, Zen-102)
prep_in(story-80, RBR-104)
conj_and(history-90, RBR-104)
prep_in(story-80, Buddhism-106)
conj_and(history-90, Buddhism-106)
advmod(containing-109, generally-108)
partmod(story-80, containing-109)
xcomp(story-80, containing-109)
dobj(containing-109, aspects-110)
nsubj(inaccessible-113, aspects-110)
cop(inaccessible-113, are-112)
rcmod(aspects-110, inaccessible-113)
amod(understanding-116, rational-115)
prep_to(inaccessible-113, understanding-116)
advmod(inaccessible-113, yet-118)
aux(accessible-121, may-119)
cop(accessible-121, be-120)
root(ROOT-0, accessible-121)
prep_to(accessible-121, intuition-123)

Kazaa is a peer-to-peer file sharing application using the FastTrack protocol and is owned by Sharman Networks .

nsubj(application-7, Kazaa-1)
nsubjpass(owned-14, Kazaa-1)
cop(application-7, is-2)
det(application-7, a-3)
amod(application-7, peer-to-peer-4)
nn(application-7, file-5)
nn(application-7, sharing-6)
root(ROOT-0, application-7)
partmod(application-7, using-8)
det(protocol-11, the-9)
nn(protocol-11, FastTrack-10)
dobj(using-8, protocol-11)
auxpass(owned-14, is-13)
conj_and(application-7, owned-14)
nn(Networks-17, Sharman-16)
agent(owned-14, Networks-17)

The KA-BAR is a 12-inch fighting and utility Bowie knife first used by the United States Marine Corps in World War II .

det(KA-BAR-2, The-1)
nsubj(fighting-6, KA-BAR-2)
cop(fighting-6, is-3)
det(fighting-6, a-4)
amod(fighting-6, 12-inch-5)
root(ROOT-0, fighting-6)
nn(knife-10, utility-8)
nn(knife-10, Bowie-9)
conj_and(fighting-6, knife-10)
advmod(used-12, first-11)
partmod(fighting-6, used-12)
det(Corps-18, the-14)
nn(Corps-18, United-15)
nn(Corps-18, States-16)
nn(Corps-18, Marine-17)
agent(used-12, Corps-18)
nn(II-22, World-20)
nn(II-22, War-21)
prep_in(used-12, II-22)

Kapok - LBR - Ceiba pentandra - RBR - is a tropical tree of the order Malvales and the family Malvaceae - LBR - previously separated in the family Bombacaceae - RBR - , native to Mexico , Central America and the Caribbean , northern South America , and - LBR - as the variety C. pentandra var .

nn(RBR-8, Kapok-1)
dep(RBR-8, LBR-3)
nn(pentandra-6, Ceiba-5)
dep(LBR-3, pentandra-6)
root(ROOT-0, RBR-8)
dep(RBR-8, is-10)
det(tree-13, a-11)
amod(tree-13, tropical-12)
nsubj(is-10, tree-13)
det(Malvales-17, the-15)
nn(Malvales-17, order-16)
prep_of(tree-13, Malvales-17)
det(Malvaceae-21, the-19)
nn(Malvaceae-21, family-20)
prep_of(tree-13, Malvaceae-21)
conj_and(Malvales-17, Malvaceae-21)
nn(RBR-32, LBR-23)
advmod(separated-26, previously-25)
dep(RBR-32, separated-26)
det(Bombacaceae-30, the-28)
nn(Bombacaceae-30, family-29)
prep_in(separated-26, Bombacaceae-30)
dep(Malvales-17, RBR-32)
partmod(tree-13, native-35)
partmod(tree-13, native-35')
conj_and(native-35, native-35')
prep_to(native-35, Mexico-37)
nn(America-40, Central-39)
prep_to(native-35, America-40)
conj_and(Mexico-37, America-40)
det(America-47, the-42)
amod(America-47, Caribbean-43)
amod(America-47, northern-45)
nn(America-47, South-46)
prep_to(native-35, America-47)
conj_and(Mexico-37, America-47)
dep(native-35, LBR-51)
det(var-58, the-54)
nn(var-58, variety-55)
nn(var-58, C.-56)
nn(var-58, pentandra-57)
prep_as(native-35', var-58)

guineensis - RBR - to tropical west Africa .

root(ROOT-0, guineensis-1)
dep(Africa-8, RBR-3)
dep(RBR-3, to-5)
amod(west-7, tropical-6)
pobj(to-5, west-7)
dep(guineensis-1, Africa-8)

The KAB-500KR is an electro-optical TV-guided fire and forget bomb developed by the Soviet Air Force in the 1980s .

det(KAB-500KR-2, The-1)
nsubj(fire-7, KAB-500KR-2)
cop(fire-7, is-3)
det(fire-7, an-4)
amod(fire-7, electro-optical-5)
amod(fire-7, TV-guided-6)
root(ROOT-0, fire-7)
nn(bomb-10, forget-9)
conj_and(fire-7, bomb-10)
partmod(fire-7, developed-11)
det(Force-16, the-13)
nn(Force-16, Soviet-14)
nn(Force-16, Air-15)
agent(developed-11, Force-16)
det(1980s-19, the-18)
prep_in(Force-16, 1980s-19)

The KAB-500L is a laser-guided bomb developed by the Soviet Air Force .

det(KAB-500L-2, The-1)
nsubj(bomb-6, KAB-500L-2)
cop(bomb-6, is-3)
det(bomb-6, a-4)
amod(bomb-6, laser-guided-5)
root(ROOT-0, bomb-6)
partmod(bomb-6, developed-7)
det(Force-12, the-9)
nn(Force-12, Soviet-10)
nn(Force-12, Air-11)
agent(developed-7, Force-12)

A Katharometer is a thermal conductivity device for determining one gas in a binary or pseudo-binary mixture .

det(Katharometer-2, A-1)
nsubj(device-7, Katharometer-2)
cop(device-7, is-3)
det(device-7, a-4)
amod(device-7, thermal-5)
nn(device-7, conductivity-6)
root(ROOT-0, device-7)
prepc_for(device-7, determining-9)
num(gas-11, one-10)
dobj(determining-9, gas-11)
det(mixture-17, a-13)
amod(mixture-17, binary-14)
conj_or(binary-14, pseudo-binary-16)
amod(mixture-17, pseudo-binary-16)
prep_in(gas-11, mixture-17)

A Knot is a method for fastening or securing linear material such as rope by tying or interweaving .

det(Knot-2, A-1)
nsubj(method-5, Knot-2)
cop(method-5, is-3)
det(method-5, a-4)
root(ROOT-0, method-5)
prepc_for(method-5, fastening-7)
prepc_for(method-5, securing-9)
conj_or(fastening-7, securing-9)
amod(material-11, linear-10)
dobj(securing-9, material-11)
prep_such_as(material-11, rope-14)
prepc_by(securing-9, tying-16)
prepc_by(securing-9, interweaving-18)
conj_or(tying-16, interweaving-18)

The Orca or Killer Whale - LBR - Orcinus orca - RBR - , less commonly , Blackfish or Seawolf , is the largest species of the oceanic dolphin family .

det(Whale-5, The-1)
nn(Whale-5, Orca-2)
conj_or(Orca-2, Killer-4)
nn(Whale-5, Killer-4)
root(ROOT-0, Whale-5)
dep(Whale-5, LBR-7)
nn(orca-10, Orcinus-9)
nsubj(species-25, orca-10)
dep(orca-10, RBR-12)
prep(orca-10, less-15)
dep(less-15, commonly-16)
dep(less-15, Blackfish-18)
conj_or(commonly-16, Blackfish-18)
dep(less-15, Seawolf-20)
conj_or(commonly-16, Seawolf-20)
cop(species-25, is-22)
det(species-25, the-23)
amod(species-25, largest-24)
dep(Whale-5, species-25)
det(family-30, the-27)
amod(family-30, oceanic-28)
nn(family-30, dolphin-29)
prep_of(species-25, family-30)

Khadamat-e Etela'at - e Dawlati ÃƒË˜Ã ‚ Â ® ÃƒË˜Ã ‚ Â ¯ ÃƒË ™ Ã ‚ âˆ ` ÃƒË˜Ã ‚ Â § ÃƒË˜Ã ‚ Âª ÃƒË˜Ã ‚ Â § ÃƒË˜Ã ‚ Â · ÃƒË ™ Ã ‚ â ‰ ¥ ÃƒË˜Ã ‚ Â § ÃƒË˜Ã ‚ â $ ™ ÃƒË˜Ã ‚ Â § ÃƒË˜Ã ‚ Âª ÃƒË˜Ã ‚ Â ¯ ÃƒË ™ Ã ‚ âˆšÃƒË ™ Ã ‚ â ‰ ¥ ÃƒË˜Ã ‚ ÂªÃƒË Ã ‚ â $ ˜ ' - LBR - English : `` State Information Agency `` - RBR - , almost always known by its acronym KHAD - LBR - or KhAD - RBR - , was the Democratic Republic of Afghanistan 's secret police .

amod(Etela'at-2, Khadamat-e-1)
root(ROOT-0, Etela'at-2)
dep(âˆ-18, e-4)
nn(âˆ-18, Dawlati-5)
nn(âˆ-18, ÃƒË˜Ã-6)
nn(âˆ-18, ‚-7)
nn(âˆ-18, Â-8)
nn(âˆ-18, ®-9)
nn(âˆ-18, ÃƒË˜Ã-10)
nn(âˆ-18, ‚-11)
nn(âˆ-18, Â-12)
nn(âˆ-18, ¯-13)
nn(âˆ-18, ÃƒË-14)
nn(âˆ-18, ™-15)
nn(âˆ-18, Ã-16)
nn(âˆ-18, ‚-17)
dep(Republic-115, âˆ-18)
dep(‚-47, ÃƒË˜Ã-20)
nn(‚-47, ‚-21)
nn(‚-47, Â-22)
nn(‚-47, §-23)
nn(‚-47, ÃƒË˜Ã-24)
nn(‚-47, ‚-25)
nn(‚-47, Âª-26)
nn(‚-47, ÃƒË˜Ã-27)
nn(‚-47, ‚-28)
nn(‚-47, Â-29)
nn(‚-47, §-30)
nn(‚-47, ÃƒË˜Ã-31)
nn(‚-47, ‚-32)
nn(‚-47, Â-33)
nn(‚-47, ·-34)
nn(‚-47, ÃƒË-35)
nn(‚-47, ™-36)
nn(‚-47, Ã-37)
nn(‚-47, ‚-38)
nn(‚-47, â-39)
nn(‚-47, ‰-40)
nn(‚-47, ¥-41)
nn(‚-47, ÃƒË˜Ã-42)
nn(‚-47, ‚-43)
nn(‚-47, Â-44)
nn(‚-47, §-45)
nn(‚-47, ÃƒË˜Ã-46)
dep(â-48, ‚-47)
dep(English-85, â-48)
num(â-78, $-49)
number($-49, ™-50)
number($-49, ÃƒË˜Ã-51)
nn(â-78, ‚-52)
nn(â-78, Â-53)
nn(â-78, §-54)
nn(â-78, ÃƒË˜Ã-55)
nn(â-78, ‚-56)
nn(â-78, Âª-57)
nn(â-78, ÃƒË˜Ã-58)
nn(â-78, ‚-59)
nn(â-78, Â-60)
nn(â-78, ¯-61)
nn(â-78, ÃƒË-62)
nn(â-78, ™-63)
nn(â-78, Ã-64)
nn(â-78, ‚-65)
nn(â-78, âˆšÃƒË-66)
nn(â-78, ™-67)
nn(â-78, Ã-68)
nn(â-78, ‚-69)
nn(â-78, â-70)
nn(â-78, ‰-71)
nn(â-78, ¥-72)
nn(â-78, ÃƒË˜Ã-73)
nn(â-78, ‚-74)
nn(â-78, ÂªÃƒË-75)
nn(â-78, Ã-76)
nn(â-78, ‚-77)
dobj(â-48, â-78)
amod(â-78, $-79)
dep($-79, ˜-80)
nn(English-85, LBR-83)
nsubj(Republic-115, English-85)
nn(RBR-93, State-88)
nn(RBR-93, Information-89)
nn(RBR-93, Agency-90)
dep(English-85, RBR-93)
advmod(always-97, almost-96)
advmod(known-98, always-97)
partmod(English-85, known-98)
poss(acronym-101, its-100)
agent(known-98, acronym-101)
dep(acronym-101, KHAD-102)
nn(RBR-109, LBR-104)
dep(KhAD-107, or-106)
dep(RBR-109, KhAD-107)
dep(acronym-101, RBR-109)
cop(Republic-115, was-112)
det(Republic-115, the-113)
amod(Republic-115, Democratic-114)
dep(Etela'at-2, Republic-115)
poss(police-120, Afghanistan-117)
amod(police-120, secret-119)
prep_of(Republic-115, police-120)

A Kantele - LBR - Ãƒâ $ '' Ã ‚ âˆškÃƒâ ‰ ˆÃ ‚ Å ’n tele in Finnish - RBR - or ` kannel ' - LBR - -LRB- Ãƒâ $ '' Ã ‚ âˆškÃƒâ ‰ ˆÃ ‚ Å ’n Ãƒâ $ '' Ã ‚ âˆ † el -RRB- in Estonian - RBR - , is a traditional plucked string instrument of the zither family .

det(Kantele-2, A-1)
nsubj(instrument-62, Kantele-2)
dep(Kantele-2, LBR-4)
nn($-7, Ãƒâ-6)
dep(Kantele-2, $-7)
dep(Kantele-2, Ã-9)
punct(âˆškÃƒâ-11, ‚-10)
dep(Ã-9, âˆškÃƒâ-11)
punct(âˆškÃƒâ-11, ‰-12)
punct(âˆškÃƒâ-11, ˆÃ-13)
dep(tele-17, ‚-14)
poss(tele-17, Å-15)
dep(el-49, tele-17)
amod(âˆ-47, Finnish-19)
dep(Finnish-19, RBR-21)
conj_or(Finnish-19, kannel-25)
amod(âˆ-47, kannel-25)
nn(âˆ-47, LBR-28)
nn($-32, Ãƒâ-31)
dep(âˆ-47, $-32)
nn(Ã-45, Ã-34)
punct(Ã-45, ‚-35)
nn(Ã-45, âˆškÃƒâ-36)
punct(Ã-45, ‰-37)
nn(Ã-45, ˆÃ-38)
punct(Ã-45, ‚-39)
nn(Ã-45, Å-40)
nn(Ã-45, ’n-41)
nn(Ã-45, Ãƒâ-42)
nn(Ã-45, $-43)
dep($-32, Ã-45)
punct($-32, ‚-46)
prep_in(tele-17, âˆ-47)
punct(el-49, †-48)
dep(âˆškÃƒâ-11, el-49)
prep_in(Ã-9, Estonian-52)
dep(Estonian-52, RBR-54)
cop(instrument-62, is-57)
det(instrument-62, a-58)
amod(instrument-62, traditional-59)
amod(instrument-62, plucked-60)
nn(instrument-62, string-61)
root(ROOT-0, instrument-62)
det(family-66, the-64)
nn(family-66, zither-65)
prep_of(instrument-62, family-66)

A Kaleidoscope is a tube of mirrors containing loose colored beads , pebbles or other small colored objects .

det(Kaleidoscope-2, A-1)
nsubj(tube-5, Kaleidoscope-2)
cop(tube-5, is-3)
det(tube-5, a-4)
root(ROOT-0, tube-5)
prep_of(tube-5, mirrors-7)
partmod(mirrors-7, containing-8)
amod(beads-11, loose-9)
amod(beads-11, colored-10)
dobj(containing-8, beads-11)
prep_of(tube-5, pebbles-13)
conj_or(mirrors-7, pebbles-13)
amod(objects-18, other-15)
amod(objects-18, small-16)
amod(objects-18, colored-17)
prep_of(tube-5, objects-18)
conj_or(mirrors-7, objects-18)

The abbreviation KB or kb can refer to : Kilobit - LBR - kb - RBR - , a unit of information used , for example , to quantify computer memory or storage capacity .

det(abbreviation-2, The-1)
dobj(refer-7, abbreviation-2)
nsubj(used-23, abbreviation-2)
xsubj(quantify-29, abbreviation-2)
nsubj(refer-7, KB-3)
conj_or(KB-3, kb-5)
nsubj(refer-7, kb-5)
aux(refer-7, can-6)
rcmod(abbreviation-2, refer-7)
prep_to(refer-7, Kilobit-10)
dep(Kilobit-10, LBR-12)
dep(LBR-12, kb-14)
dep(kb-14, RBR-16)
det(unit-20, a-19)
appos(Kilobit-10, unit-20)
prep_of(unit-20, information-22)
root(ROOT-0, used-23)
prep_for(used-23, example-26)
aux(quantify-29, to-28)
xcomp(used-23, quantify-29)
nn(memory-31, computer-30)
dobj(quantify-29, memory-31)
nn(capacity-34, storage-33)
dobj(quantify-29, capacity-34)
conj_or(memory-31, capacity-34)

In Japanese Shinto , Kotoamatsukami - LBR - ÃƒÂ ¥ Ã ‚ âˆšÃ ‚ Â ¥ ÃƒÂ ¥ Ã ‚ â ‚ ¬ Ã ‚ Â © ÃƒÂ § Ã ‚ Â ¥ Ã ‚ Ä ± , literally means `` distinguishing heavenly kami `` - RBR - is the collective name for the first powers which came into existence at the time of the creation of the universe .

amod(Shinto-3, Japanese-2)
prep_in(means-40, Shinto-3)
nsubj(means-40, Kotoamatsukami-5)
poss(±-37, LBR-7)
nn(±-37, ÃƒÂ-9)
nn(±-37, ¥-10)
nn(±-37, Ã-11)
nn(±-37, ‚-12)
nn(±-37, âˆšÃ-13)
nn(±-37, ‚-14)
nn(±-37, Â-15)
nn(±-37, ¥-16)
nn(±-37, ÃƒÂ-17)
nn(±-37, ¥-18)
nn(±-37, Ã-19)
nn(±-37, ‚-20)
nn(±-37, â-21)
nn(±-37, ‚-22)
nn(±-37, ¬-23)
nn(±-37, Ã-24)
nn(±-37, ‚-25)
nn(±-37, Â-26)
nn(±-37, ©-27)
nn(±-37, ÃƒÂ-28)
nn(±-37, §-29)
nn(±-37, Ã-30)
nn(±-37, ‚-31)
nn(±-37, Â-32)
nn(±-37, ¥-33)
nn(±-37, Ã-34)
nn(±-37, ‚-35)
nn(±-37, Ä-36)
dep(Kotoamatsukami-5, ±-37)
advmod(means-40, literally-39)
root(ROOT-0, means-40)
amod(kami-44, distinguishing-42)
nn(kami-44, heavenly-43)
dobj(means-40, kami-44)
nsubj(came-58, kami-44)
dep(kami-44, RBR-47)
dep(kami-44, is-49)
det(name-52, the-50)
amod(name-52, collective-51)
nsubj(is-49, name-52)
det(powers-56, the-54)
amod(powers-56, first-55)
prep_for(name-52, powers-56)
rcmod(kami-44, came-58)
prep_into(came-58, existence-60)
det(time-63, the-62)
prep_at(came-58, time-63)
det(creation-66, the-65)
prep_of(time-63, creation-66)
det(universe-69, the-68)
prep_of(creation-66, universe-69)

A Kangaroo is a marsupial from the family Macropodidae - LBR - macropods , meaning large foot - RBR - .

det(Kangaroo-2, A-1)
nsubj(Macropodidae-9, Kangaroo-2)
cop(Macropodidae-9, is-3)
det(Macropodidae-9, a-4)
amod(Macropodidae-9, marsupial-5)
det(family-8, the-7)
prep_from(marsupial-5, family-8)
root(ROOT-0, Macropodidae-9)
nn(RBR-19, LBR-11)
dep(RBR-19, macropods-13)
nn(foot-17, meaning-15)
amod(foot-17, large-16)
appos(macropods-13, foot-17)
dep(Macropodidae-9, RBR-19)

Introduced in 1990 , Keykode is an Eastman Kodak Company advancement on edge numbers , which are letters , numbers and symbols placed at regular intervals along the edge of 35 mm and 16 mm film to allow for frame-by-frame specific identification .

partmod(advancement-11, Introduced-1)
prep_in(Introduced-1, 1990-3)
nsubj(advancement-11, Keykode-5)
cop(advancement-11, is-6)
det(advancement-11, an-7)
nn(advancement-11, Eastman-8)
nn(advancement-11, Kodak-9)
nn(advancement-11, Company-10)
root(ROOT-0, advancement-11)
nn(numbers-14, edge-13)
prep_on(advancement-11, numbers-14)
nsubj(letters-18, numbers-14)
cop(letters-18, are-17)
rcmod(numbers-14, letters-18)
xsubj(allow-38, letters-18)
rcmod(numbers-14, numbers-20)
conj_and(letters-18, numbers-20)
xsubj(allow-38, numbers-20)
rcmod(numbers-14, symbols-22)
conj_and(letters-18, symbols-22)
xsubj(allow-38, symbols-22)
partmod(letters-18, placed-23)
amod(intervals-26, regular-25)
prep_at(placed-23, intervals-26)
det(edge-29, the-28)
prep_along(intervals-26, edge-29)
num(mm-32, 35-31)
prep_of(edge-29, mm-32)
num(film-36, 16-34)
nn(film-36, mm-35)
prep_of(edge-29, film-36)
conj_and(mm-32, film-36)
aux(allow-38, to-37)
xcomp(placed-23, allow-38)
amod(identification-42, frame-by-frame-40)
amod(identification-42, specific-41)
prep_for(allow-38, identification-42)

A Knout - LBR - Ãƒâ $ '' Ã ‚ âˆšnaÃƒâ $ ¦ Ã ‚ â $ ¦ t - RBR - is a heavy scourge-like multiple whip , usually made of a bunch of rawhide thongs attached to a long handle , sometimes with metal wire or hooks incorporated .

det(Knout-2, A-1)
nsubj(whip-28, Knout-2)
dep(Knout-2, LBR-4)
nn(Ã-9, Ãƒâ-6)
nn(Ã-9, $-7)
dep(LBR-4, Ã-9)
punct(LBR-4, ‚-10)
amod(RBR-21, $-12)
number($-12, ¦-13)
nn(RBR-21, Ã-14)
punct($-17, ‚-15)
dep($-17, â-16)
dep(RBR-21, $-17)
number($-17, ¦-18)
number($-17, t-19)
prep_âˆšnaãƒâ(Knout-2, RBR-21)
cop(whip-28, is-23)
det(whip-28, a-24)
amod(whip-28, heavy-25)
amod(whip-28, scourge-like-26)
amod(whip-28, multiple-27)
root(ROOT-0, whip-28)
advmod(made-31, usually-30)
partmod(whip-28, made-31)
det(bunch-34, a-33)
prep_of(made-31, bunch-34)
amod(thongs-37, rawhide-36)
prep_of(bunch-34, thongs-37)
partmod(thongs-37, attached-38)
det(handle-42, a-40)
amod(handle-42, long-41)
prep_to(attached-38, handle-42)
advmod(attached-38, sometimes-44)
nn(wire-47, metal-46)
prep_with(attached-38, wire-47)
prep_with(attached-38, hooks-49)
conj_or(wire-47, hooks-49)
partmod(wire-47, incorporated-50)

In computer performance testing , Khornerstone is a multipurpose benchmark from Workstation Labs used in various periodicals .

nn(testing-4, computer-2)
nn(testing-4, performance-3)
prep_in(benchmark-10, testing-4)
nsubj(benchmark-10, Khornerstone-6)
cop(benchmark-10, is-7)
det(benchmark-10, a-8)
amod(benchmark-10, multipurpose-9)
root(ROOT-0, benchmark-10)
nn(Labs-13, Workstation-12)
prep_from(benchmark-10, Labs-13)
partmod(Labs-13, used-14)
amod(periodicals-17, various-16)
prep_in(used-14, periodicals-17)

Ket refers to the Ket people , a people of Siberia .

nsubj(refers-2, Ket-1)
root(ROOT-0, refers-2)
det(people-6, the-4)
nn(people-6, Ket-5)
prep_to(refers-2, people-6)
det(people-9, a-8)
appos(people-6, people-9)
prep_of(people-9, Siberia-11)

KA9Q is also a name for the IP-over-IP Tunneling protocol .

nsubj(name-5, KA9Q-1)
cop(name-5, is-2)
advmod(name-5, also-3)
det(name-5, a-4)
root(ROOT-0, name-5)
det(protocol-10, the-7)
nn(protocol-10, IP-over-IP-8)
nn(protocol-10, Tunneling-9)
prep_for(name-5, protocol-10)

In cryptography , a keyed-Hash Message Authentication Code - LBR - HMAC or KHMAC - RBR - , is a type of message authentication code - LBR - MAC - RBR - calculated using a specific algorithm involving a cryptographic hash function in combination with a secret key .

prep_in(type-21, cryptography-2)
det(HMAC-12, a-4)
amod(HMAC-12, keyed-Hash-5)
nn(HMAC-12, Message-6)
nn(HMAC-12, Authentication-7)
nn(HMAC-12, Code-8)
dep(HMAC-12, LBR-10)
nsubj(type-21, HMAC-12)
conj_or(HMAC-12, KHMAC-14)
nsubj(type-21, KHMAC-14)
dep(KHMAC-14, RBR-16)
cop(type-21, is-19)
det(type-21, a-20)
dep(LBR-27, type-21)
nn(code-25, message-23)
nn(code-25, authentication-24)
prep_of(type-21, code-25)
root(ROOT-0, LBR-27)
dep(LBR-27, MAC-29)
dep(MAC-29, RBR-31)
dep(LBR-27, calculated-33)
xcomp(calculated-33, using-34)
det(algorithm-37, a-35)
amod(algorithm-37, specific-36)
dobj(using-34, algorithm-37)
det(function-42, a-39)
amod(function-42, cryptographic-40)
nn(function-42, hash-41)
prep_involving(algorithm-37, function-42)
prep_in(function-42, combination-44)
det(key-48, a-46)
amod(key-48, secret-47)
prep_with(combination-44, key-48)

The KurfÃƒâˆžÃ ‚ Ï $ rstendamm , known locally as the Ku ` damm , is one of the most famous avenues in Berlin , Germany .

det(Ï-4, The-1)
nn(Ï-4, KurfÃƒâˆžÃ-2)
nn(Ï-4, ‚-3)
nsubj(one-17, Ï-4)
dep(Ï-4, $-5)
num($-5, rstendamm-6)
partmod(Ï-4, known-8)
advmod(known-8, locally-9)
det(damm-14, the-11)
amod(damm-14, Ku-12)
prep_as(known-8, damm-14)
cop(one-17, is-16)
root(ROOT-0, one-17)
det(avenues-22, the-19)
advmod(famous-21, most-20)
amod(avenues-22, famous-21)
prep_of(one-17, avenues-22)
nn(Germany-26, Berlin-24)
prep_in(avenues-22, Germany-26)

KahlÃƒâˆžÃ ‚ Âºa is a well-known Mexican coffee-flavored liqueur .

nn(Âºa-3, KahlÃƒâˆžÃ-1)
nn(Âºa-3, ‚-2)
nsubj(liqueur-9, Âºa-3)
cop(liqueur-9, is-4)
det(liqueur-9, a-5)
amod(liqueur-9, well-known-6)
amod(liqueur-9, Mexican-7)
amod(liqueur-9, coffee-flavored-8)
root(ROOT-0, liqueur-9)

A Keyword is a word or concept with special significance , in particular any word used as the key to a code or used in a reference work to link to other words or other information .

det(Keyword-2, A-1)
nsubj(word-5, Keyword-2)
cop(word-5, is-3)
det(word-5, a-4)
root(ROOT-0, word-5)
conj_or(word-5, concept-7)
amod(significance-10, special-9)
prep_with(word-5, significance-10)
amod(word-15, particular-13)
det(word-15, any-14)
prep_in(word-5, word-15)
xsubj(link-30, word-15)
dep(word-15, used-16)
det(key-19, the-18)
prep_as(used-16, key-19)
det(code-22, a-21)
prep_to(used-16, code-22)
dep(word-15, used-24)
conj_or(used-16, used-24)
det(work-28, a-26)
nn(work-28, reference-27)
prep_in(used-24, work-28)
aux(link-30, to-29)
xcomp(used-24, link-30)
amod(words-33, other-32)
prep_to(link-30, words-33)
amod(information-36, other-35)
prep_to(link-30, information-36)
conj_or(words-33, information-36)

The Katal - LBR - symbol : kat - RBR - is the SI unit of catalytic activity .

det(Katal-2, The-1)
nsubj(unit-15, Katal-2)
nn(RBR-10, LBR-4)
dep(RBR-10, symbol-6)
dep(symbol-6, kat-8)
dep(Katal-2, RBR-10)
cop(unit-15, is-12)
det(unit-15, the-13)
nn(unit-15, SI-14)
root(ROOT-0, unit-15)
amod(activity-18, catalytic-17)
prep_of(unit-15, activity-18)

The Koala - LBR - Phascolarctos cinereus - RBR - is a thickset arboreal marsupial herbivore native to Australia , and the only extant representative of the family Phascolarctidae .

det(cinereus-7, The-1)
nn(cinereus-7, Koala-2)
dep(cinereus-7, LBR-4)
nn(cinereus-7, Phascolarctos-6)
nsubj(native-17, cinereus-7)
dep(cinereus-7, RBR-9)
cop(native-17, is-11)
det(native-17, a-12)
amod(native-17, thickset-13)
amod(native-17, arboreal-14)
amod(native-17, marsupial-15)
nn(native-17, herbivore-16)
root(ROOT-0, native-17)
prep_to(native-17, Australia-19)
det(representative-25, the-22)
advmod(representative-25, only-23)
amod(representative-25, extant-24)
conj_and(native-17, representative-25)
det(Phascolarctidae-29, the-27)
nn(Phascolarctidae-29, family-28)
prep_of(representative-25, Phascolarctidae-29)

KIBO is an acronym for Knowledge In , Bullshit Out .

nsubj(acronym-4, KIBO-1)
cop(acronym-4, is-2)
det(acronym-4, an-3)
root(ROOT-0, acronym-4)
nn(In-7, Knowledge-6)
prep_for(acronym-4, In-7)
nn(Out-10, Bullshit-9)
appos(In-7, Out-10)

A Kilobit is a unit of information , abbreviated kbit - LBR - or kb - RBR - .

det(Kilobit-2, A-1)
nsubj(unit-5, Kilobit-2)
cop(unit-5, is-3)
det(unit-5, a-4)
root(ROOT-0, unit-5)
prep_of(unit-5, information-7)
amod(kbit-10, abbreviated-9)
appos(information-7, kbit-10)
nn(RBR-17, LBR-12)
dep(kb-15, or-14)
dep(RBR-17, kb-15)
dep(information-7, RBR-17)

A Kipper is a whole herring that has been split from tail to head , gutted , salted , and cold smoked .

det(Kipper-2, A-1)
nsubj(herring-6, Kipper-2)
cop(herring-6, is-3)
det(herring-6, a-4)
amod(herring-6, whole-5)
root(ROOT-0, herring-6)
nsubjpass(split-10, herring-6)
aux(split-10, has-8)
auxpass(split-10, been-9)
rcmod(herring-6, split-10)
prep_from(split-10, tail-12)
aux(head-14, to-13)
xcomp(split-10, head-14)
dep(smoked-22, gutted-16)
amod(herring-6, salted-18)
conj_and(smoked-22, salted-18)
amod(herring-6, cold-21)
conj_and(smoked-22, cold-21)
amod(herring-6, smoked-22)

The Kipsigis was a pastoralist ethnic group in Kenya , speaking the Kipsigis language .

det(Kipsigis-2, The-1)
nsubj(group-7, Kipsigis-2)
cop(group-7, was-3)
det(group-7, a-4)
amod(group-7, pastoralist-5)
amod(group-7, ethnic-6)
root(ROOT-0, group-7)
prep_in(group-7, Kenya-9)
partmod(group-7, speaking-11)
det(language-14, the-12)
nn(language-14, Kipsigis-13)
dobj(speaking-11, language-14)

Currently the community practises farming and they are famously known for growing Kenyan `` green gold `` - tea .

advmod(practises-4, Currently-1)
det(community-3, the-2)
nsubj(practises-4, community-3)
root(ROOT-0, practises-4)
dobj(practises-4, farming-5)
nsubjpass(known-10, they-7)
auxpass(known-10, are-8)
advmod(known-10, famously-9)
conj_and(practises-4, known-10)
prepc_for(known-10, growing-12)
advmod(tea-19, Kenyan-13)
amod(tea-19, green-15)
nn(tea-19, gold-16)
dobj(growing-12, tea-19)

A Knife is a handheld sharp-edged instrument consisting of handle attached to a blade used for cutting .

det(Knife-2, A-1)
nsubj(instrument-7, Knife-2)
cop(instrument-7, is-3)
det(instrument-7, a-4)
amod(instrument-7, handheld-5)
amod(instrument-7, sharp-edged-6)
root(ROOT-0, instrument-7)
partmod(instrument-7, consisting-8)
prepc_of(consisting-8, handle-10)
dep(handle-10, attached-11)
det(blade-14, a-13)
prep_to(attached-11, blade-14)
partmod(blade-14, used-15)
prepc_for(used-15, cutting-17)

A Knockout - LBR - also referred to as a K. O. - RBR - is a winning criterion in several full-contact combat sports , such as boxing , kickboxing , Muay Thai , mixed martial arts and others sports involving striking .

det(Knockout-2, A-1)
nsubj(referred-7, Knockout-2)
dep(Knockout-2, LBR-4)
advmod(referred-7, also-6)
root(ROOT-0, referred-7)
prep(referred-7, to-8)
mark(criterion-19, as-9)
det(O.-12, a-10)
nn(O.-12, K.-11)
nsubj(criterion-19, O.-12)
dep(O.-12, RBR-14)
cop(criterion-19, is-16)
det(criterion-19, a-17)
amod(criterion-19, winning-18)
advcl(referred-7, criterion-19)
amod(sports-24, several-21)
amod(sports-24, full-contact-22)
nn(sports-24, combat-23)
prep_in(criterion-19, sports-24)
prep_in(criterion-19, as-27)
conj_and(sports-24, as-27)
prep_such_as(sports-24, boxing-28)
prep_in(criterion-19, kickboxing-30)
conj_and(sports-24, kickboxing-30)
partmod(sports-24, kickboxing-30)
nn(Thai-33, Muay-32)
prep_in(criterion-19, Thai-33)
conj_and(sports-24, Thai-33)
amod(arts-37, mixed-35)
amod(arts-37, martial-36)
prep_in(criterion-19, arts-37)
conj_and(sports-24, arts-37)
nn(sports-40, others-39)
prep_in(criterion-19, sports-40)
conj_and(sports-24, sports-40)
partmod(sports-40, involving-41)
acomp(involving-41, striking-42)

In the Mediterranean Basin and the Near East , a Kiosk - LBR - Persian ÃƒËšÃ ‚ Â © ÃƒË ™ Ã ‚ âˆšÃƒË˜Ã ‚ Â ´ ÃƒËšÃ ‚ Â © Kushk ; Arabic ÃƒË ™ Ã ‚ âˆžÃƒË˜Ã ‚ Â ´ ÃƒË ™ Ã ‚ âˆž Koshk ; Turkish KÃƒâˆžÃ ‚ Â ¶ Ãƒâˆ ` Ã ‚ Æ ' k ; French Kiosque ; German Kiosk ; Polish Kiosk ; Portuguese Quiosque ; Romanian ChioÃƒâˆ ` Ã ‚ Æ ' c ; and Spanish Quiosco or kiosco - RBR - is a small , separated garden pavilion open on some or all sides .

det(Basin-4, the-2)
nn(Basin-4, Mediterranean-3)
prep_in(pavilion-98, Basin-4)
det(East-8, the-6)
nn(East-8, Near-7)
conj_and(Basin-4, East-8)
prep_in(pavilion-98, East-8)
det(Kiosk-11, a-10)
nsubj(pavilion-98, Kiosk-11)
dep(Kiosk-11, LBR-13)
nn(ÃƒËšÃ-16, Persian-15)
conj_and(Kiosk-11, ÃƒËšÃ-16)
nsubj(pavilion-98, ÃƒËšÃ-16)
advmod(Kushk-32, ‚-17)
nn(Kushk-32, Â-18)
nn(Kushk-32, ©-19)
nn(Kushk-32, ÃƒË-20)
nn(Kushk-32, ™-21)
nn(Kushk-32, Ã-22)
nn(Kushk-32, ‚-23)
nn(Kushk-32, âˆšÃƒË˜Ã-24)
nn(Kushk-32, ‚-25)
nn(Kushk-32, Â-26)
nn(Kushk-32, ´-27)
nn(Kushk-32, ÃƒËšÃ-28)
nn(Kushk-32, ‚-29)
nn(Kushk-32, Â-30)
nn(Kushk-32, ©-31)
rcmod(ÃƒËšÃ-16, Kushk-32)
nn(ÃƒË-35, Arabic-34)
conj_and(Kiosk-11, ÃƒË-35)
nsubj(pavilion-98, ÃƒË-35)
advmod(Koshk-48, ™-36)
nn(Koshk-48, Ã-37)
nn(Koshk-48, ‚-38)
nn(Koshk-48, âˆžÃƒË˜Ã-39)
nn(Koshk-48, ‚-40)
nn(Koshk-48, Â-41)
nn(Koshk-48, ´-42)
nn(Koshk-48, ÃƒË-43)
nn(Koshk-48, ™-44)
nn(Koshk-48, Ã-45)
nn(Koshk-48, ‚-46)
nn(Koshk-48, âˆž-47)
rcmod(ÃƒË-35, Koshk-48)
amod(¶-54, Turkish-50)
nn(¶-54, KÃƒâˆžÃ-51)
nn(¶-54, ‚-52)
nn(¶-54, Â-53)
conj_and(Kiosk-11, ¶-54)
nsubj(pavilion-98, ¶-54)
amod(Æ-59, Ãƒâˆ-55)
nn(Æ-59, Ã-57)
nn(Æ-59, ‚-58)
poss(k-61, Æ-59)
dep(¶-54, k-61)
nn(Kiosque-64, French-63)
conj_and(Kiosk-11, Kiosque-64)
nsubj(pavilion-98, Kiosque-64)
nn(Kiosk-67, German-66)
dep(Kiosque-64, Kiosk-67)
nn(Kiosk-70, Polish-69)
conj_and(Kiosk-11, Kiosk-70)
nsubj(pavilion-98, Kiosk-70)
nn(Quiosque-73, Portuguese-72)
dep(Kiosk-70, Quiosque-73)
nn(‚-79, Romanian-75)
nn(‚-79, ChioÃƒâˆ-76)
nn(‚-79, Ã-78)
conj_and(Kiosk-11, ‚-79)
nsubj(pavilion-98, ‚-79)
poss(c-82, Æ-80)
dep(‚-79, c-82)
nn(Quiosco-86, Spanish-85)
conj_and(Kiosk-11, Quiosco-86)
nsubj(pavilion-98, Quiosco-86)
conj_and(Kiosk-11, kiosco-88)
conj_or(Quiosco-86, kiosco-88)
dep(Kiosk-11, RBR-90)
cop(pavilion-98, is-92)
det(pavilion-98, a-93)
amod(separated-96, small-94)
amod(pavilion-98, separated-96)
nn(pavilion-98, garden-97)
root(ROOT-0, pavilion-98)
amod(pavilion-98, open-99)
prep_on(open-99, some-101)
det(sides-104, all-103)
prep_on(open-99, sides-104)
conj_or(some-101, sides-104)

Kernel Language 0 - LBR - KL0 - RBR - is a sequential logic programming language based on Prolog , used in the ICOT Fifth generation computer project .

nn(0-3, Kernel-1)
nn(0-3, Language-2)
nsubj(language-16, 0-3)
nn(RBR-9, LBR-5)
dep(RBR-9, KL0-7)
dep(0-3, RBR-9)
cop(language-16, is-11)
det(language-16, a-12)
amod(language-16, sequential-13)
nn(language-16, logic-14)
nn(language-16, programming-15)
root(ROOT-0, language-16)
prepc_based_on(language-16, on-18)
pobj(language-16, Prolog-19)
partmod(Prolog-19, used-21)
det(project-28, the-23)
nn(project-28, ICOT-24)
nn(project-28, Fifth-25)
nn(project-28, generation-26)
nn(project-28, computer-27)
prep_in(used-21, project-28)

The Klamath are a Native American tribe of the Plateau culture area in Southern Oregon .

det(Klamath-2, The-1)
nsubj(tribe-7, Klamath-2)
cop(tribe-7, are-3)
det(tribe-7, a-4)
amod(tribe-7, Native-5)
amod(tribe-7, American-6)
root(ROOT-0, tribe-7)
det(area-12, the-9)
nn(area-12, Plateau-10)
nn(area-12, culture-11)
prep_of(tribe-7, area-12)
nn(Oregon-15, Southern-14)
prep_in(area-12, Oregon-15)

KMS refers to a Knowledge Management Solution .

nsubj(refers-2, KMS-1)
root(ROOT-0, refers-2)
det(Solution-7, a-4)
nn(Solution-7, Knowledge-5)
nn(Solution-7, Management-6)
prep_to(refers-2, Solution-7)

A Knowbot is a kind of bot that collects information by automatically gathering certain specified information from web sites .

det(Knowbot-2, A-1)
nsubj(kind-5, Knowbot-2)
cop(kind-5, is-3)
det(kind-5, a-4)
root(ROOT-0, kind-5)
nsubj(collects-9, kind-5)
prep_of(kind-5, bot-7)
rcmod(kind-5, collects-9)
dobj(collects-9, information-10)
advmod(gathering-13, automatically-12)
prepc_by(collects-9, gathering-13)
amod(information-16, certain-14)
amod(information-16, specified-15)
dobj(gathering-13, information-16)
nn(sites-19, web-18)
prep_from(gathering-13, sites-19)

In computing , the KOMPILER was one of the first language compilation and runtime systems for International Business Machines ' IBM 701 , the fastest commercial U. S. computer available in 1955 .

prep_in(one-7, computing-2)
det(KOMPILER-5, the-4)
nsubj(one-7, KOMPILER-5)
cop(one-7, was-6)
root(ROOT-0, one-7)
det(compilation-12, the-9)
amod(compilation-12, first-10)
nn(compilation-12, language-11)
prep_of(one-7, compilation-12)
amod(systems-15, runtime-14)
conj_and(one-7, systems-15)
nn(Machines-19, International-17)
nn(Machines-19, Business-18)
poss(IBM-21, Machines-19)
prep_for(systems-15, IBM-21)
num(IBM-21, 701-22)
det(computer-29, the-24)
dep(commercial-26, fastest-25)
amod(computer-29, commercial-26)
nn(computer-29, U.-27)
nn(computer-29, S.-28)
appos(IBM-21, computer-29)
amod(computer-29, available-30)
prep_in(available-30, 1955-32)

The Kilt is a traditional garment of Scotland and , more recently , Celtic - LBR - more specifically Gaelic - RBR - culture typically worn by men .

det(Kilt-2, The-1)
nsubj(garment-6, Kilt-2)
cop(garment-6, is-3)
det(garment-6, a-4)
amod(garment-6, traditional-5)
root(ROOT-0, garment-6)
prep_of(garment-6, Scotland-8)
advmod(recently-12, more-11)
dep(Celtic-14, recently-12)
dep(garment-6, Celtic-14)
nn(RBR-22, LBR-16)
advmod(specifically-19, more-18)
dep(Gaelic-20, specifically-19)
dep(RBR-22, Gaelic-20)
conj_and(garment-6, RBR-22)
dep(garment-6, culture-24)
advmod(worn-26, typically-25)
partmod(culture-24, worn-26)
agent(worn-26, men-28)

The Komondor - LBR - lat .

det(Komondor-2, The-1)
nsubj(lat-6, Komondor-2)
dep(Komondor-2, LBR-4)
root(ROOT-0, lat-6)

Canis familiaris pastorialis villosus hungaricus - RBR - is a livestock guardian dog breed originally from Hungary .

amod(familiaris-2, Canis-1)
nsubj(pastorialis-3, familiaris-2)
root(ROOT-0, pastorialis-3)
amod(hungaricus-5, villosus-4)
nsubj(dog-13, hungaricus-5)
dep(hungaricus-5, RBR-7)
cop(dog-13, is-9)
det(dog-13, a-10)
nn(dog-13, livestock-11)
nn(dog-13, guardian-12)
ccomp(pastorialis-3, dog-13)
rcmod(dog-13, breed-14)
advmod(breed-14, originally-15)
prep_from(breed-14, Hungary-17)

The Keeshond - LBR - Ãƒâ $ '' Ã ‚ âˆškeÃƒâ ‰ ˆÃ ‚ ÂªzhÃƒâ ‰ ˆÃ ‚ â $ šnd or KAYZ-hond ; plural : Keeshonden - RBR - is a medium-sized dog with a plush two-layer coat of silver and black fur with a ruff and a curled tail , originating in Germany .

det(Keeshond-2, The-1)
nsubj(dog-34, Keeshond-2)
dep(Keeshond-2, LBR-4)
nn(Ã-9, Ãƒâ-6)
nn(Ã-9, $-7)
dep(Keeshond-2, Ã-9)
punct(âˆškeÃƒâ-11, ‚-10)
dep(Ã-9, âˆškeÃƒâ-11)
punct(âˆškeÃƒâ-11, ‰-12)
dep(ÂªzhÃƒâ-15, ˆÃ-13)
punct(ÂªzhÃƒâ-15, ‚-14)
dep(âˆškeÃƒâ-11, ÂªzhÃƒâ-15)
punct(ÂªzhÃƒâ-15, ‰-16)
dep(â-19, ˆÃ-17)
punct(â-19, ‚-18)
dep(ÂªzhÃƒâ-15, â-19)
amod(Ã-9, $-20)
dep($-20, šnd-21)
amod(Ã-9, KAYZ-hond-23)
conj_or($-20, KAYZ-hond-23)
dep(Keeshond-2, plural-25)
dep(plural-25, Keeshonden-27)
dep(Keeshond-2, RBR-29)
cop(dog-34, is-31)
det(dog-34, a-32)
amod(dog-34, medium-sized-33)
root(ROOT-0, dog-34)
det(coat-39, a-36)
amod(coat-39, plush-37)
amod(coat-39, two-layer-38)
prep_with(dog-34, coat-39)
prep_of(coat-39, silver-41)
amod(fur-44, black-43)
prep_with(dog-34, fur-44)
conj_and(coat-39, fur-44)
det(ruff-47, a-46)
prep_with(fur-44, ruff-47)
det(tail-51, a-49)
amod(tail-51, curled-50)
prep_with(fur-44, tail-51)
conj_and(ruff-47, tail-51)
partmod(dog-34, originating-53)
prep_in(originating-53, Germany-55)

The Krag-JÃƒâˆžÃ ‚ Â ¸ rgensen is a repeating bolt action rifle designed by the Norwegians Ole Herman Johannes Krag and Erik JÃƒâˆžÃ ‚ Â ¸ rgensen in the late 19th century .

det(rgensen-6, The-1)
nn(rgensen-6, Krag-JÃƒâˆžÃ-2)
nn(rgensen-6, ‚-3)
nn(rgensen-6, Â-4)
nn(rgensen-6, ¸-5)
nsubj(rifle-12, rgensen-6)
cop(rifle-12, is-7)
det(rifle-12, a-8)
amod(rifle-12, repeating-9)
nn(rifle-12, bolt-10)
nn(rifle-12, action-11)
root(ROOT-0, rifle-12)
partmod(rifle-12, designed-13)
det(Krag-20, the-15)
nn(Krag-20, Norwegians-16)
nn(Krag-20, Ole-17)
nn(Krag-20, Herman-18)
nn(Krag-20, Johannes-19)
agent(designed-13, Krag-20)
nn(rgensen-27, Erik-22)
nn(rgensen-27, JÃƒâˆžÃ-23)
nn(rgensen-27, ‚-24)
nn(rgensen-27, Â-25)
nn(rgensen-27, ¸-26)
agent(designed-13, rgensen-27)
conj_and(Krag-20, rgensen-27)
det(century-32, the-29)
amod(century-32, late-30)
amod(century-32, 19th-31)
prep_in(designed-13, century-32)

A Krugerrand is a South African gold coin , first minted in 1967 in order to help market South African gold .

det(Krugerrand-2, A-1)
nsubj(coin-8, Krugerrand-2)
cop(coin-8, is-3)
det(coin-8, a-4)
amod(African-6, South-5)
amod(coin-8, African-6)
nn(coin-8, gold-7)
root(ROOT-0, coin-8)
xsubj(help-17, coin-8)
advmod(minted-11, first-10)
partmod(coin-8, minted-11)
prep_in(minted-11, 1967-13)
prep_in(minted-11, order-15)
aux(help-17, to-16)
xcomp(minted-11, help-17)
xcomp(help-17, market-18)
amod(African-20, South-19)
amod(gold-21, African-20)
dobj(market-18, gold-21)

Kashmir - LBR - Dogri : Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ ï # ¿ Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Â ¶ Ãƒ & nbsp ; Ã ‚ Â ¥ Ã ‚ Å ¸ Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Â ® Ãƒ & nbsp ; Ã ‚ Â ¥ Ã ‚ â $ cents Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Â ° ; Balti : ÃƒËšÃ ‚ Â © ÃƒË˜Ã ‚ Â ´ ÃƒË ™ Ã ‚ âˆ ` ÃƒË Ã ‚ â $ ˜ÃƒË˜Ã ‚ Â ± Poonchi \/ Chibhali : ÃƒËšÃ ‚ Â © ÃƒË˜Ã ‚ Â ´ ÃƒË ™ Ã ‚ âˆ ` ÃƒË Ã ‚ â $ ˜ÃƒË˜Ã ‚ Â ± ; Kashmiri : Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ ï # ¿ Ãƒ & nbsp ; Ã ‚ Â ¥ Ã ‚ âˆ ` Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Â ¶ Ãƒ & nbsp ; Ã ‚ Â ¥ Ã ‚ â $ cents Ãƒ & nbsp ; Ã ‚ â ‚ ¬ Ã ‚ Â ° , ÃƒËšÃ ‚ Â © ÃƒË ™ Ã ‚ â $ ° ÃƒË˜Ã ‚ Â ´ ÃƒË ™ Ã ‚ âˆ † ÃƒË Ã ‚ â $ ˜ÃƒË˜Ã ‚ Â ± ; Shina : ÃƒËšÃ ‚ Â © ÃƒË˜Ã ‚ Â ´ ÃƒË ™ Ã ‚ âˆ ` ÃƒË Ã ‚ â $ ˜ÃƒË˜Ã ‚ Â ± ; Uyghur : ÃƒË ™ Ã ‚ âˆžÃƒËšÃ ‚ â ‰ $ ÃƒË˜Ã ‚ â $ œÃƒË ™ Ã ‚ â ‰ ˆÃƒË ™ Ã ‚ âˆ ` ÃƒËšÃ ‚ â $ `` ÃƒË˜Ã ‚ Â ± - RBR - is the northwestern region of the Indian subcontinent .

nsubj(region-306, Kashmir-1)
dep(Kashmir-1, LBR-3)
dep(LBR-3, Dogri-5)
dep(LBR-3, Ãƒ-7)
dep(LBR-3, nbsp-9)
conj_and(Ãƒ-7, nbsp-9)
nn(ï-18, Ã-11)
nn(ï-18, ‚-12)
nn(ï-18, â-13)
nn(ï-18, ‚-14)
nn(ï-18, ¬-15)
nn(ï-18, Ã-16)
num(ï-18, ‚-17)
dep(LBR-3, ï-18)
number(Ãƒ-21, #-19)
number(Ãƒ-21, ¿-20)
num(ï-18, Ãƒ-21)
dep(LBR-3, nbsp-23)
conj_and(ï-18, nbsp-23)
nn(Ãƒ-34, Ã-25)
nn(Ãƒ-34, ‚-26)
nn(Ãƒ-34, â-27)
nn(Ãƒ-34, ‚-28)
nn(Ãƒ-34, ¬-29)
nn(Ãƒ-34, Ã-30)
nn(Ãƒ-34, ‚-31)
nn(Ãƒ-34, Â-32)
nn(Ãƒ-34, ¶-33)
dep(LBR-3, Ãƒ-34)
dep(LBR-3, nbsp-36)
conj_and(Ãƒ-34, nbsp-36)
nn(Ãƒ-46, Ã-38)
nn(Ãƒ-46, ‚-39)
nn(Ãƒ-46, Â-40)
nn(Ãƒ-46, ¥-41)
nn(Ãƒ-46, Ã-42)
nn(Ãƒ-46, ‚-43)
nn(Ãƒ-46, Å-44)
nn(Ãƒ-46, ¸-45)
dep(LBR-3, Ãƒ-46)
dep(LBR-3, nbsp-48)
conj_and(Ãƒ-46, nbsp-48)
nn(Ãƒ-59, Ã-50)
nn(Ãƒ-59, ‚-51)
nn(Ãƒ-59, â-52)
nn(Ãƒ-59, ‚-53)
nn(Ãƒ-59, ¬-54)
nn(Ãƒ-59, Ã-55)
nn(Ãƒ-59, ‚-56)
nn(Ãƒ-59, Â-57)
nn(Ãƒ-59, ®-58)
dep(LBR-3, Ãƒ-59)
dep(LBR-3, nbsp-61)
conj_and(Ãƒ-59, nbsp-61)
nn(‚-68, Ã-63)
nn(‚-68, ‚-64)
nn(‚-68, Â-65)
nn(‚-68, ¥-66)
nn(‚-68, Ã-67)
dep(LBR-3, ‚-68)
dep($-70, â-69)
dep(‚-68, $-70)
num($-70, cents-71)
dep(‚-68, Ãƒ-72)
dep(‚-68, nbsp-74)
conj_and(Ãƒ-72, nbsp-74)
nn(°-84, Ã-76)
nn(°-84, ‚-77)
nn(°-84, â-78)
nn(°-84, ‚-79)
nn(°-84, ¬-80)
nn(°-84, Ã-81)
nn(°-84, ‚-82)
nn(°-84, Â-83)
dep(LBR-3, °-84)
dep(°-84, Balti-86)
number(‚-89, ÃƒËšÃ-88)
num(âˆ-100, ‚-89)
nn(âˆ-100, Â-90)
nn(âˆ-100, ©-91)
nn(âˆ-100, ÃƒË˜Ã-92)
nn(âˆ-100, ‚-93)
nn(âˆ-100, Â-94)
nn(âˆ-100, ´-95)
nn(âˆ-100, ÃƒË-96)
nn(âˆ-100, ™-97)
nn(âˆ-100, Ã-98)
nn(âˆ-100, ‚-99)
dep(LBR-3, âˆ-100)
nn(â-105, ÃƒË-102)
nn(â-105, Ã-103)
nn(â-105, ‚-104)
dep(âˆ-100, â-105)
dep(â-105, $-106)
number($-106, ˜ÃƒË˜Ã-107)
number($-106, ‚-108)
nn(Chibhali-113, Â-109)
nn(Chibhali-113, ±-110)
nn(Chibhali-113, Poonchi-111)
nn(Chibhali-113, \/-112)
dep($-106, Chibhali-113)
number(‚-116, ÃƒËšÃ-115)
num(âˆ-127, ‚-116)
nn(âˆ-127, Â-117)
nn(âˆ-127, ©-118)
nn(âˆ-127, ÃƒË˜Ã-119)
nn(âˆ-127, ‚-120)
nn(âˆ-127, Â-121)
nn(âˆ-127, ´-122)
nn(âˆ-127, ÃƒË-123)
nn(âˆ-127, ™-124)
nn(âˆ-127, Ã-125)
nn(âˆ-127, ‚-126)
dep(LBR-3, âˆ-127)
nn(â-132, ÃƒË-129)
nn(â-132, Ã-130)
nn(â-132, ‚-131)
dep(âˆ-127, â-132)
num(±-137, $-133)
number($-133, ˜ÃƒË˜Ã-134)
number($-133, ‚-135)
nn(±-137, Â-136)
dep(â-132, ±-137)
dep(LBR-3, Kashmiri-139)
dep(Kashmiri-139, Ãƒ-141)
dep(Kashmiri-139, nbsp-143)
conj_and(Ãƒ-141, nbsp-143)
nn(ï-152, Ã-145)
nn(ï-152, ‚-146)
nn(ï-152, â-147)
nn(ï-152, ‚-148)
nn(ï-152, ¬-149)
nn(ï-152, Ã-150)
num(ï-152, ‚-151)
dep(LBR-3, ï-152)
number(Ãƒ-155, #-153)
number(Ãƒ-155, ¿-154)
num(ï-152, Ãƒ-155)
dep(LBR-3, nbsp-157)
conj_and(ï-152, nbsp-157)
nn(âˆ-165, Ã-159)
nn(âˆ-165, ‚-160)
nn(âˆ-165, Â-161)
nn(âˆ-165, ¥-162)
nn(âˆ-165, Ã-163)
nn(âˆ-165, ‚-164)
dep(LBR-3, âˆ-165)
dep(âˆ-165, Ãƒ-167)
dep(âˆ-165, nbsp-169)
conj_and(Ãƒ-167, nbsp-169)
nn(Ãƒ-180, Ã-171)
nn(Ãƒ-180, ‚-172)
nn(Ãƒ-180, â-173)
nn(Ãƒ-180, ‚-174)
nn(Ãƒ-180, ¬-175)
nn(Ãƒ-180, Ã-176)
nn(Ãƒ-180, ‚-177)
nn(Ãƒ-180, Â-178)
nn(Ãƒ-180, ¶-179)
dep(LBR-3, Ãƒ-180)
dep(LBR-3, nbsp-182)
conj_and(Ãƒ-180, nbsp-182)
nn(‚-189, Ã-184)
nn(‚-189, ‚-185)
nn(‚-189, Â-186)
nn(‚-189, ¥-187)
nn(‚-189, Ã-188)
dep(LBR-3, ‚-189)
dep($-191, â-190)
dep(‚-189, $-191)
num($-191, cents-192)
dep(‚-189, Ãƒ-193)
dep(‚-189, nbsp-195)
conj_and(Ãƒ-193, nbsp-195)
nn(°-205, Ã-197)
nn(°-205, ‚-198)
nn(°-205, â-199)
nn(°-205, ‚-200)
nn(°-205, ¬-201)
nn(°-205, Ã-202)
nn(°-205, ‚-203)
nn(°-205, Â-204)
dep(LBR-3, °-205)
nn(â-215, ÃƒËšÃ-207)
nn(â-215, ‚-208)
nn(â-215, Â-209)
nn(â-215, ©-210)
nn(â-215, ÃƒË-211)
nn(â-215, ™-212)
nn(â-215, Ã-213)
nn(â-215, ‚-214)
appos(°-205, â-215)
num(â-231, $-216)
number($-216, °-217)
number($-216, ÃƒË˜Ã-218)
nn(â-231, ‚-219)
nn(â-231, Â-220)
nn(â-231, ´-221)
nn(â-231, ÃƒË-222)
nn(â-231, ™-223)
nn(â-231, Ã-224)
nn(â-231, ‚-225)
nn(â-231, âˆ-226)
nn(â-231, †-227)
nn(â-231, ÃƒË-228)
nn(â-231, Ã-229)
nn(â-231, ‚-230)
dep(â-215, â-231)
dep(â-215, $-232)
number($-232, ˜ÃƒË˜Ã-233)
number($-232, ‚-234)
nn(±-236, Â-235)
dep($-232, ±-236)
dep(LBR-3, Shina-238)
number(‚-241, ÃƒËšÃ-240)
num(âˆ-252, ‚-241)
nn(âˆ-252, Â-242)
nn(âˆ-252, ©-243)
nn(âˆ-252, ÃƒË˜Ã-244)
nn(âˆ-252, ‚-245)
nn(âˆ-252, Â-246)
nn(âˆ-252, ´-247)
nn(âˆ-252, ÃƒË-248)
nn(âˆ-252, ™-249)
nn(âˆ-252, Ã-250)
nn(âˆ-252, ‚-251)
dep(Shina-238, âˆ-252)
nn(â-257, ÃƒË-254)
nn(â-257, Ã-255)
nn(â-257, ‚-256)
dep(âˆ-252, â-257)
num(±-262, $-258)
number($-258, ˜ÃƒË˜Ã-259)
number($-258, ‚-260)
nn(±-262, Â-261)
dep(â-257, ±-262)
dep(LBR-3, Uyghur-264)
nn(‰-273, ÃƒË-266)
nn(‰-273, ™-267)
nn(‰-273, Ã-268)
nn(‰-273, ‚-269)
nn(‰-273, âˆžÃƒËšÃ-270)
nn(‰-273, ‚-271)
nn(‰-273, â-272)
dep(Uyghur-264, ‰-273)
num(â-277, $-274)
number($-274, ÃƒË˜Ã-275)
number($-274, ‚-276)
dep(‰-273, â-277)
num(âˆ-289, $-278)
number($-278, œÃƒË-279)
number($-278, ™-280)
nn(âˆ-289, Ã-281)
nn(âˆ-289, ‚-282)
nn(âˆ-289, â-283)
nn(âˆ-289, ‰-284)
nn(âˆ-289, ˆÃƒË-285)
nn(âˆ-289, ™-286)
nn(âˆ-289, Ã-287)
nn(âˆ-289, ‚-288)
dep(‰-273, âˆ-289)
nn(â-293, ÃƒËšÃ-291)
nn(â-293, ‚-292)
dep(âˆ-289, â-293)
dep(â-293, $-294)
nn(Â-298, ÃƒË˜Ã-296)
num(Â-298, ‚-297)
dep(RBR-301, Â-298)
advmod(Â-298, ±-299)
num($-294, RBR-301)
cop(region-306, is-303)
det(region-306, the-304)
nn(region-306, northwestern-305)
root(ROOT-0, region-306)
det(subcontinent-310, the-308)
amod(subcontinent-310, Indian-309)
prep_of(region-306, subcontinent-310)

A Kiwi is any of the species of flightless birds endemic to New Zealand of the genus Apteryx - LBR - the only genus in family Apterygidae - RBR - .

det(Kiwi-2, A-1)
nsubj(any-4, Kiwi-2)
cop(any-4, is-3)
root(ROOT-0, any-4)
det(species-7, the-6)
prep_of(any-4, species-7)
amod(birds-10, flightless-9)
prep_of(species-7, birds-10)
amod(birds-10, endemic-11)
nn(Zealand-14, New-13)
prep_to(endemic-11, Zealand-14)
det(Apteryx-18, the-16)
amod(Apteryx-18, genus-17)
prep_of(Zealand-14, Apteryx-18)
nn(RBR-29, LBR-20)
det(genus-24, the-22)
amod(genus-24, only-23)
dep(RBR-29, genus-24)
nn(Apterygidae-27, family-26)
prep_in(genus-24, Apterygidae-27)
dep(species-7, RBR-29)

The Kiwifruit - LBR - or kiwi - RBR - is the edible berry of a cultivar group of the woody vine Actinidia deliciosa and hybrids between this and other species in the genus Actinidia .

det(Kiwifruit-2, The-1)
nsubj(berry-14, Kiwifruit-2)
nn(RBR-9, LBR-4)
dep(kiwi-7, or-6)
dep(RBR-9, kiwi-7)
dep(Kiwifruit-2, RBR-9)
cop(berry-14, is-11)
det(berry-14, the-12)
amod(berry-14, edible-13)
root(ROOT-0, berry-14)
det(group-18, a-16)
nn(group-18, cultivar-17)
prep_of(berry-14, group-18)
det(deliciosa-24, the-20)
amod(deliciosa-24, woody-21)
nn(deliciosa-24, vine-22)
nn(deliciosa-24, Actinidia-23)
prep_of(group-18, deliciosa-24)
prep_of(berry-14, hybrids-26)
conj_and(group-18, hybrids-26)
prep_between(hybrids-26, this-28)
amod(species-31, other-30)
conj_and(berry-14, species-31)
det(Actinidia-35, the-33)
amod(Actinidia-35, genus-34)
prep_in(species-31, Actinidia-35)

A Kayak is a small human-powered boat .

det(Kayak-2, A-1)
nsubj(boat-7, Kayak-2)
cop(boat-7, is-3)
det(boat-7, a-4)
amod(boat-7, small-5)
amod(boat-7, human-powered-6)
root(ROOT-0, boat-7)

The Kriegsmarine - LBR - English : `` War navy `` - RBR - was the name of the German Navy between 1935 and 1945 , during the Nazi regime , superseding the Reichsmarine , and the Kaiserliche Marine of World War I. The word Kryptonite is also used in speech as a synonym for Achilles ' heel , the one weakness of an otherwise invulnerable hero .

nn(English-6, The-1)
nn(English-6, Kriegsmarine-2)
dep(English-6, LBR-4)
root(ROOT-0, English-6)
nsubj(navy-10, War-9)
dep(English-6, navy-10)
nsubj(superseding-32, RBR-13)
cop(superseding-32, was-15)
det(name-17, the-16)
attr(superseding-32, name-17)
det(Navy-21, the-19)
nn(Navy-21, German-20)
prep_of(name-17, Navy-21)
prep_between(Navy-21, 1935-23)
prep_between(Navy-21, 1945-25)
conj_and(1935-23, 1945-25)
det(regime-30, the-28)
amod(regime-30, Nazi-29)
prep_during(superseding-32, regime-30)
ccomp(navy-10, superseding-32)
det(Reichsmarine-34, the-33)
dobj(superseding-32, Reichsmarine-34)
det(Marine-39, the-37)
nn(Marine-39, Kaiserliche-38)
nsubjpass(used-49, Marine-39)
nn(I.-43, World-41)
nn(I.-43, War-42)
prep_of(Marine-39, I.-43)
det(Kryptonite-46, The-44)
nn(Kryptonite-46, word-45)
dep(I.-43, Kryptonite-46)
auxpass(used-49, is-47)
advmod(used-49, also-48)
dep(English-6, used-49)
conj_and(navy-10, used-49)
prep_in(used-49, speech-51)
det(synonym-54, a-53)
prep_as(used-49, synonym-54)
poss(heel-58, Achilles-56)
prep_for(synonym-54, heel-58)
det(weakness-62, the-60)
num(weakness-62, one-61)
appos(heel-58, weakness-62)
det(hero-67, an-64)
advmod(invulnerable-66, otherwise-65)
amod(hero-67, invulnerable-66)
prep_of(weakness-62, hero-67)

Kutia is often the first dish in the traditional twelve-dish Christmas Eve supper - LBR - also known as Svyateh Vetchnyat - RBR - .

nsubj(dish-6, Kutia-1)
cop(dish-6, is-2)
advmod(dish-6, often-3)
det(dish-6, the-4)
amod(dish-6, first-5)
root(ROOT-0, dish-6)
det(supper-13, the-8)
amod(supper-13, traditional-9)
amod(supper-13, twelve-dish-10)
nn(supper-13, Christmas-11)
nn(supper-13, Eve-12)
prep_in(dish-6, supper-13)
dep(supper-13, LBR-15)
advmod(known-18, also-17)
partmod(supper-13, known-18)
nn(Vetchnyat-21, Svyateh-20)
prep_as(known-18, Vetchnyat-21)
dep(Vetchnyat-21, RBR-23)

A KÃƒâˆžÃ ‚ Ï $ nstlerroman - LBR - \/ Ãƒâ $ '' Ã ‚ âˆškÃƒâ $ ¦ Ã ‚ âˆ ‚ nstlÃƒâ ‰ ˆÃ ‚ âˆ † .

nn(LBR-8, A-1)
nn(LBR-8, KÃƒâˆžÃ-2)
punct($-5, ‚-3)
dep($-5, Ï-4)
dep(LBR-8, $-5)
num($-5, nstlerroman-6)
root(ROOT-0, LBR-8)
punct(LBR-8, \/-10)
nn(Ã-14, Ãƒâ-11)
nn(Ã-14, $-12)
nsubj(‚-15, Ã-14)
dep(LBR-8, ‚-15)
dep(‚-15, âˆškÃƒâ-16)
dep(Ã-19, $-17)
num(Ã-19, ¦-18)
dobj(âˆškÃƒâ-16, Ã-19)
punct(Ã-19, ‚-20)
nn(Ã-19, âˆ-21)
nn(Ã-19, ‚-22)
nn(Ã-19, nstlÃƒâ-23)
nn(Ã-19, ‰-24)
nn(Ã-19, ˆÃ-25)
nn(Ã-19, ‚-26)
dep(Ã-19, âˆ-27)
punct(Ã-19, †-28)

roÃƒâ $ '' Ã ‚ â $ ˜maÃƒâ $ '' Ã ‚ âˆ † n \/ , German : `` artist 's novel `` - RBR - is a specific sub-genre of Bildungsroman ; it is a novel about an artist 's growth to maturity .

nn(Ã-4, roÃƒâ-1)
nn(Ã-4, $-2)
nsubj(‚-5, Ã-4)
root(ROOT-0, ‚-5)
advmod(‚-5, â-6)
pobj(â-6, $-7)
num($-7, ˜maÃƒâ-8)
dep(Ã-11, $-9)
dobj(‚-5, Ã-11)
punct(Ã-11, ‚-12)
nn(Ã-11, âˆ-13)
nn(Ã-11, †-14)
dep(Ã-11, n-15)
punct(Ã-11, \/-16)
dep(‚-5, German-18)
nsubj(novel-23, artist-21)
aux(novel-23, 's-22)
dep(‚-5, novel-23)
nsubj(sub-genre-31, RBR-26)
cop(sub-genre-31, is-28)
det(sub-genre-31, a-29)
amod(sub-genre-31, specific-30)
ccomp(novel-23, sub-genre-31)
prep_of(sub-genre-31, Bildungsroman-33)
nsubj(novel-38, it-35)
cop(novel-38, is-36)
det(novel-38, a-37)
parataxis(‚-5, novel-38)
det(artist-41, an-40)
poss(growth-43, artist-41)
prep_about(novel-38, growth-43)
prep_to(growth-43, maturity-45)

A Lynx is any of four medium-sized wild cats .

det(Lynx-2, A-1)
nsubj(any-4, Lynx-2)
cop(any-4, is-3)
root(ROOT-0, any-4)
num(cats-9, four-6)
amod(cats-9, medium-sized-7)
amod(cats-9, wild-8)
prep_of(any-4, cats-9)

A Language is a dynamic set of visual , auditory , or tactile symbols of communication and the elements used to manipulate them .

det(Language-2, A-1)
nsubj(set-6, Language-2)
cop(set-6, is-3)
det(set-6, a-4)
amod(set-6, dynamic-5)
root(ROOT-0, set-6)
amod(symbols-14, visual-8)
amod(symbols-14, auditory-10)
conj_or(auditory-10, tactile-13)
amod(symbols-14, tactile-13)
prep_of(set-6, symbols-14)
prep_of(symbols-14, communication-16)
det(elements-19, the-18)
prep_of(set-6, elements-19)
conj_and(symbols-14, elements-19)
xsubj(manipulate-22, elements-19)
partmod(elements-19, used-20)
aux(manipulate-22, to-21)
xcomp(used-20, manipulate-22)
dobj(manipulate-22, them-23)

A Lawyer , according to Black 's Law Dictionary , is `` a person learned in the law ; as an attorney , counsel or solicitor ; a person licensed to practice law .

det(Lawyer-2, A-1)
nsubj(person-14, Lawyer-2)
prepc_according_to(person-14, to-5)
poss(Dictionary-9, Black-6)
nn(Dictionary-9, Law-8)
pobj(person-14, Dictionary-9)
cop(person-14, is-11)
det(person-14, a-13)
root(ROOT-0, person-14)
partmod(person-14, learned-15)
det(law-18, the-17)
prep_in(learned-15, law-18)
det(attorney-22, an-21)
prep_as(person-14, attorney-22)
prep_as(person-14, counsel-24)
conj_or(attorney-22, counsel-24)
prep_as(person-14, solicitor-26)
conj_or(attorney-22, solicitor-26)
det(person-29, a-28)
nsubj(licensed-30, person-29)
xsubj(practice-32, person-29)
parataxis(person-14, licensed-30)
aux(practice-32, to-31)
xcomp(licensed-30, practice-32)
dobj(practice-32, law-33)

`` Law is the system of rules of conduct established by the sovereign government of a society to correct wrongs , maintain stability , and deliver justice .

nsubj(system-5, Law-2)
cop(system-5, is-3)
det(system-5, the-4)
root(ROOT-0, system-5)
prep_of(system-5, rules-7)
prep_of(rules-7, conduct-9)
xsubj(correct-19, conduct-9)
partmod(conduct-9, established-10)
det(government-14, the-12)
amod(government-14, sovereign-13)
agent(established-10, government-14)
det(society-17, a-16)
prep_of(government-14, society-17)
aux(correct-19, to-18)
xcomp(established-10, correct-19)
dobj(correct-19, wrongs-20)
xcomp(established-10, maintain-22)
conj_and(correct-19, maintain-22)
dobj(maintain-22, stability-23)
xcomp(established-10, deliver-26)
conj_and(correct-19, deliver-26)
dobj(deliver-26, justice-27)

As an abstract concept Love usually refers to a strong , ineffable feeling towards another person .

det(concept-4, an-2)
amod(concept-4, abstract-3)
prep_as(refers-7, concept-4)
nsubj(refers-7, Love-5)
advmod(refers-7, usually-6)
root(ROOT-0, refers-7)
det(feeling-13, a-9)
amod(feeling-13, strong-10)
amod(feeling-13, ineffable-12)
prep_to(refers-7, feeling-13)
det(person-16, another-15)
prep_towards(feeling-13, person-16)

A Laser is an electronic-optical device that emits coherent light radiation .

det(Laser-2, A-1)
nsubj(device-6, Laser-2)
cop(device-6, is-3)
det(device-6, an-4)
amod(device-6, electronic-optical-5)
root(ROOT-0, device-6)
nsubj(emits-8, device-6)
rcmod(device-6, emits-8)
amod(radiation-11, coherent-9)
amod(radiation-11, light-10)
dobj(emits-8, radiation-11)

The word Lowball refers to a poker variant in which traditional hand values are reversed so that the lowest-valued hand wins .

det(Lowball-3, The-1)
nn(Lowball-3, word-2)
nsubj(refers-4, Lowball-3)
root(ROOT-0, refers-4)
det(variant-8, a-6)
nn(variant-8, poker-7)
prep_to(refers-4, variant-8)
rel(reversed-15, which-10)
amod(values-13, traditional-11)
nn(values-13, hand-12)
nsubjpass(reversed-15, values-13)
auxpass(reversed-15, are-14)
rcmod(variant-8, reversed-15)
advmod(wins-21, so-16)
dep(wins-21, that-17)
det(hand-20, the-18)
amod(hand-20, lowest-valued-19)
nsubj(wins-21, hand-20)
advcl(reversed-15, wins-21)
ccomp(reversed-15, wins-21)

The Laurales are an order of flowering plants .

det(Laurales-2, The-1)
nsubj(order-5, Laurales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(plants-8, flowering-7)
prep_of(order-5, plants-8)

The order Lamiales is a taxon in the asterid group of dicotyledonous flowering plants .

det(Lamiales-3, The-1)
nn(Lamiales-3, order-2)
nsubj(taxon-6, Lamiales-3)
cop(taxon-6, is-4)
det(taxon-6, a-5)
root(ROOT-0, taxon-6)
det(group-10, the-8)
amod(group-10, asterid-9)
prep_in(taxon-6, group-10)
amod(plants-14, dicotyledonous-12)
amod(plants-14, flowering-13)
prep_of(group-10, plants-14)

Both !

root(ROOT-0, Both-1)

Equivocation and amphiboly are fallacies arising from ambiguity .

nsubj(arising-6, Equivocation-1)
conj_and(Equivocation-1, amphiboly-3)
nsubj(arising-6, amphiboly-3)
aux(arising-6, are-4)
advmod(arising-6, fallacies-5)
root(ROOT-0, arising-6)
prep_from(arising-6, ambiguity-8)

A Lake - LBR - from Latin lacus - RBR - is a terrain feature - LBR - or physical feature - RBR - that is an considerable inland body of water , not part of the ocean , that is larger and deeper than a pond , and may or may not be moving slowly , and is localized to the bottom of basin - LBR - another type of landform or terrain feature-RBR-an is fed by a river .

det(Lake-2, A-1)
nsubj(feature-15, Lake-2)
nn(RBR-10, LBR-4)
dep(RBR-10, from-6)
amod(lacus-8, Latin-7)
pobj(from-6, lacus-8)
dep(Lake-2, RBR-10)
cop(feature-15, is-12)
det(feature-15, a-13)
nn(feature-15, terrain-14)
dep(LBR-67, feature-15)
dep(feature-15, LBR-17)
amod(feature-21, physical-20)
conj_or(feature-15, feature-21)
dep(LBR-67, feature-21)
dep(feature-21, RBR-23)
complm(body-30, that-25)
cop(body-30, is-26)
det(body-30, an-27)
amod(body-30, considerable-28)
amod(body-30, inland-29)
ccomp(feature-15, body-30)
prep_of(body-30, water-32)
neg(feature-15, not-34)
attr(feature-15, part-35)
det(ocean-38, the-37)
prep_of(part-35, ocean-38)
nsubj(larger-42, ocean-38)
nsubj(deeper-44, ocean-38)
cop(larger-42, is-41)
rcmod(ocean-38, larger-42)
rcmod(ocean-38, deeper-44)
conj_and(larger-42, deeper-44)
det(pond-47, a-46)
prep_than(larger-42, pond-47)
rcmod(ocean-38, may-50)
conj_and(larger-42, may-50)
aux(moving-55, may-52)
neg(moving-55, not-53)
aux(moving-55, be-54)
conj_and(larger-42, moving-55)
conj_or(may-50, moving-55)
advmod(moving-55, slowly-56)
cop(localized-60, is-59)
conj_and(larger-42, localized-60)
conj_and(may-50, localized-60)
det(bottom-63, the-62)
prep_to(localized-60, bottom-63)
prep_of(bottom-63, basin-65)
root(ROOT-0, LBR-67)
det(type-70, another-69)
nsubjpass(fed-77, type-70)
nn(feature-RBR-an-75, landform-72)
conj_or(landform-72, terrain-74)
nn(feature-RBR-an-75, terrain-74)
prep_of(type-70, feature-RBR-an-75)
auxpass(fed-77, is-76)
dep(LBR-67, fed-77)
det(river-80, a-79)
agent(fed-77, river-80)

A Locomotive is a railway vehicle that provides the motive power for a train .

det(Locomotive-2, A-1)
nsubj(vehicle-6, Locomotive-2)
cop(vehicle-6, is-3)
det(vehicle-6, a-4)
nn(vehicle-6, railway-5)
root(ROOT-0, vehicle-6)
nsubj(provides-8, vehicle-6)
rcmod(vehicle-6, provides-8)
det(power-11, the-9)
nn(power-11, motive-10)
dobj(provides-8, power-11)
det(train-14, a-13)
prep_for(power-11, train-14)

A Lighthouse is a tower , building , or framework designed to emit light from a system of lamps and lenses or , in older times , from a fire and used as an aid to navigation and to pilots at sea .

det(Lighthouse-2, A-1)
nsubj(tower-5, Lighthouse-2)
cop(tower-5, is-3)
det(tower-5, a-4)
root(ROOT-0, tower-5)
xsubj(emit-13, tower-5)
conj_or(tower-5, building-7)
xsubj(emit-13, building-7)
conj_or(tower-5, framework-10)
xsubj(emit-13, framework-10)
dep(tower-5, designed-11)
aux(emit-13, to-12)
xcomp(designed-11, emit-13)
dobj(emit-13, light-14)
det(system-17, a-16)
prep_from(emit-13, system-17)
prep_of(system-17, lamps-19)
prep_of(system-17, lenses-21)
conj_and(lamps-19, lenses-21)
dep(emit-13, in-24)
amod(times-26, older-25)
pobj(in-24, times-26)
det(fire-30, a-29)
prep_from(emit-13, fire-30)
conj_or(system-17, fire-30)
dep(tower-5, used-32)
conj_and(designed-11, used-32)
det(aid-35, an-34)
prep_as(used-32, aid-35)
prep_to(aid-35, navigation-37)
prep_to(aid-35, pilots-40)
conj_and(navigation-37, pilots-40)
prep_at(pilots-40, sea-42)

A Library is a collection of information , sources , resources , and services : it is organized for use and maintained by a public body , an institution , or a private individual .

det(Library-2, A-1)
nsubj(collection-5, Library-2)
cop(collection-5, is-3)
det(collection-5, a-4)
root(ROOT-0, collection-5)
prep_of(collection-5, information-7)
prep_of(collection-5, sources-9)
conj_and(information-7, sources-9)
prep_of(collection-5, resources-11)
conj_and(information-7, resources-11)
prep_of(collection-5, services-14)
conj_and(information-7, services-14)
nsubjpass(organized-18, it-16)
nsubjpass(maintained-22, it-16)
auxpass(organized-18, is-17)
parataxis(collection-5, organized-18)
prep_for(organized-18, use-20)
parataxis(collection-5, maintained-22)
conj_and(organized-18, maintained-22)
det(body-26, a-24)
amod(body-26, public-25)
prep_by(maintained-22, body-26)
det(institution-29, an-28)
prep_by(maintained-22, institution-29)
conj_or(body-26, institution-29)
det(individual-34, a-32)
amod(individual-34, private-33)
prep_by(maintained-22, individual-34)
conj_or(body-26, individual-34)

A Letter is a written message from one person to another .

det(Letter-2, A-1)
nsubj(message-6, Letter-2)
cop(message-6, is-3)
det(message-6, a-4)
amod(message-6, written-5)
root(ROOT-0, message-6)
num(person-9, one-8)
prep_from(message-6, person-9)
prep_to(person-9, another-11)

A Lesbian is a woman who is romantically and sexually attracted only to other women .

det(Lesbian-2, A-1)
nsubj(woman-5, Lesbian-2)
cop(woman-5, is-3)
det(woman-5, a-4)
root(ROOT-0, woman-5)
nsubj(romantically-8, woman-5)
nsubj(attracted-11, woman-5)
cop(romantically-8, is-7)
rcmod(woman-5, romantically-8)
rcmod(woman-5, sexually-10)
advmod(romantically-8, sexually-10)
conj_and(romantically-8, sexually-10)
rcmod(woman-5, attracted-11)
conj_and(romantically-8, attracted-11)
advmod(attracted-11, only-12)
amod(women-15, other-14)
prep_to(attracted-11, women-15)

In mathematics , the Logarithm of a number to a given base is the power or exponent to which the base must be raised in order to produce the number .

prep_in(power-15, mathematics-2)
det(Logarithm-5, the-4)
nsubj(power-15, Logarithm-5)
det(number-8, a-7)
prep_of(Logarithm-5, number-8)
det(base-12, a-10)
amod(base-12, given-11)
prep_to(number-8, base-12)
cop(power-15, is-13)
det(power-15, the-14)
root(ROOT-0, power-15)
conj_or(power-15, exponent-17)
rel(raised-24, which-19)
det(base-21, the-20)
nsubjpass(raised-24, base-21)
aux(raised-24, must-22)
auxpass(raised-24, be-23)
rcmod(power-15, raised-24)
prep_in(raised-24, order-26)
aux(produce-28, to-27)
xcomp(raised-24, produce-28)
det(number-30, the-29)
dobj(produce-28, number-30)

In anatomy , the term Ligament is used to denote three different types of structures : Fibrous tissue that connects bones to other bones .

prep_in(used-8, anatomy-2)
det(Ligament-6, the-4)
nn(Ligament-6, term-5)
nsubjpass(used-8, Ligament-6)
xsubj(denote-10, Ligament-6)
auxpass(used-8, is-7)
root(ROOT-0, used-8)
aux(denote-10, to-9)
xcomp(used-8, denote-10)
num(types-13, three-11)
amod(types-13, different-12)
dobj(denote-10, types-13)
prep_of(types-13, structures-15)
nn(tissue-18, Fibrous-17)
dep(types-13, tissue-18)
nsubj(connects-20, tissue-18)
rcmod(tissue-18, connects-20)
dobj(connects-20, bones-21)
amod(bones-24, other-23)
prep_to(connects-20, bones-24)

Additionally , Luftwaffe is also the name of the Swiss Air Force in German - LBR - Forces aÃƒâˆžÃ ‚ Â © riennes suisses in French and Forze Aeree Svizzere in Italian - RBR - .

advmod(name-7, Additionally-1)
nsubj(name-7, Luftwaffe-3)
cop(name-7, is-4)
advmod(name-7, also-5)
det(name-7, the-6)
root(ROOT-0, name-7)
det(Force-12, the-9)
nn(Force-12, Swiss-10)
nn(Force-12, Air-11)
prep_of(name-7, Force-12)
prep_in(Force-12, German-14)
nn(RBR-34, LBR-16)
nn(suisses-24, Forces-18)
nn(suisses-24, aÃƒâˆžÃ-19)
nn(suisses-24, ‚-20)
nn(suisses-24, Â-21)
nn(suisses-24, ©-22)
nn(suisses-24, riennes-23)
dep(RBR-34, suisses-24)
prep_in(suisses-24, French-26)
nn(Svizzere-30, Forze-28)
nn(Svizzere-30, Aeree-29)
conj_and(suisses-24, Svizzere-30)
dep(RBR-34, Svizzere-30)
prep_in(Svizzere-30, Italian-32)
dep(Force-12, RBR-34)

Loglan is a constructed language originally designed for linguistic research , particularly for investigating the Sapir-Whorf Hypothesis .

nsubj(language-5, Loglan-1)
cop(language-5, is-2)
det(language-5, a-3)
amod(language-5, constructed-4)
root(ROOT-0, language-5)
advmod(designed-7, originally-6)
partmod(language-5, designed-7)
amod(research-10, linguistic-9)
prep_for(designed-7, research-10)
advmod(designed-7, particularly-12)
prepc_for(designed-7, investigating-14)
det(Hypothesis-17, the-15)
nn(Hypothesis-17, Sapir-Whorf-16)
dobj(investigating-14, Hypothesis-17)

In a scientific context , the word Light is sometimes used to refer to the entire electromagnetic spectrum .

det(context-4, a-2)
amod(context-4, scientific-3)
prep_in(used-11, context-4)
det(Light-8, the-6)
nn(Light-8, word-7)
nsubjpass(used-11, Light-8)
xsubj(refer-13, Light-8)
auxpass(used-11, is-9)
advmod(used-11, sometimes-10)
root(ROOT-0, used-11)
aux(refer-13, to-12)
xcomp(used-11, refer-13)
det(spectrum-18, the-15)
amod(spectrum-18, entire-16)
amod(spectrum-18, electromagnetic-17)
prep_to(refer-13, spectrum-18)

Leonardo of Pisa - LBR - c. 1170 ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ž c. 1250 - RBR - , also known as Leonardo Pisano , Leonardo Bonacci , Leonardo Fibonacci , or , most commonly , simply Fibonacci , was an Italian mathematician , considered by some `` the most talented mathematician of the Middle Ages `` .

root(ROOT-0, Leonardo-1)
prep_of(Leonardo-1, Pisa-3)
dep(Leonardo-1, LBR-5)
number(1170-8, c.-7)
num(cents-10, 1170-8)
nn(cents-10, ÃƒÂ-9)
dep(LBR-5, cents-10)
nn(‚-12, Ã-11)
nsubj(â-13, ‚-12)
rcmod(cents-10, â-13)
dobj(â-13, $-14)
num($-14, cents-15)
nn(‚-17, Ã-16)
nsubj(â-18, ‚-17)
rcmod($-14, â-18)
num(1250-22, $-19)
number($-19, ž-20)
number($-19, c.-21)
dobj(â-18, 1250-22)
dep(Leonardo-1, RBR-24)
advmod(known-28, also-27)
partmod(RBR-24, known-28)
nn(Pisano-31, Leonardo-30)
prep_as(known-28, Pisano-31)
nn(Bonacci-34, Leonardo-33)
appos(Pisano-31, Bonacci-34)
nn(Fibonacci-37, Leonardo-36)
appos(Pisano-31, Fibonacci-37)
dep(Fibonacci-45, or-39)
advmod(commonly-42, most-41)
dep(Fibonacci-45, commonly-42)
dep(Fibonacci-45, simply-44)
dep(Fibonacci-37, Fibonacci-45)
cop(mathematician-50, was-47)
det(mathematician-50, an-48)
amod(mathematician-50, Italian-49)
rcmod(Fibonacci-37, mathematician-50)
partmod(Pisano-31, considered-52)
agent(considered-52, some-54)
det(mathematician-59, the-56)
advmod(talented-58, most-57)
amod(mathematician-59, talented-58)
dep(some-54, mathematician-59)
det(Ages-63, the-61)
nn(Ages-63, Middle-62)
prep_of(mathematician-59, Ages-63)

In Roman Catholic theology , Limbo - LBR - Latin limbus , edge or boundary , referring to the `` edge `` of Hell - RBR - is a hypothetical afterlife condition of those who die in original sin without being assigned to the Hell of the damned - LBR - gehenna - RBR - .

nn(theology-4, Roman-2)
nn(theology-4, Catholic-3)
prep_in(condition-32, theology-4)
nsubj(condition-32, Limbo-6)
nn(RBR-26, LBR-8)
amod(limbus-11, Latin-10)
dep(RBR-26, limbus-11)
appos(limbus-11, edge-13)
appos(limbus-11, boundary-15)
conj_or(edge-13, boundary-15)
dep(limbus-11, referring-17)
det(edge-21, the-19)
prep_to(referring-17, edge-21)
prep_of(edge-21, Hell-24)
dep(Limbo-6, RBR-26)
cop(condition-32, is-28)
det(condition-32, a-29)
amod(condition-32, hypothetical-30)
nn(condition-32, afterlife-31)
root(ROOT-0, condition-32)
prep_of(condition-32, those-34)
nsubj(die-36, those-34)
rcmod(those-34, die-36)
amod(sin-39, original-38)
prep_in(die-36, sin-39)
auxpass(assigned-42, being-41)
prepc_without(die-36, assigned-42)
det(Hell-45, the-44)
prep_to(assigned-42, Hell-45)
det(gehenna-52, the-47)
nn(gehenna-52, damned-48)
dep(gehenna-52, LBR-50)
prep_of(Hell-45, gehenna-52)
dep(gehenna-52, RBR-54)

In Classical Greek , Lethe - LBR - Ãƒâﾁ „ Ã ‚ Â '' Ãƒâﾁ „ Ã ‚ Â ® Ãƒâﾁ „ Ã ‚ Â ¸ Ãƒâﾁ „ Ã ‚ Â · ; lÃƒâˆžÃ ‚ Â ¨ thÃƒâˆžÃ ‚ Â ¨ - RBR - literally means forgetfulness `` or `` concealment `` .

nn(Greek-3, Classical-2)
prep_in(Ãƒâﾁ-9, Greek-3)
nsubj(Ãƒâﾁ-9, Lethe-5)
dep(Lethe-5, LBR-7)
root(ROOT-0, Ãƒâﾁ-9)
nn(Ã-11, „-10)
dobj(Ãƒâﾁ-9, Ã-11)
iobj(Ãƒâﾁ-9, Ã-11)
nn(Â-13, ‚-12)
dobj(Ãƒâﾁ-9, Â-13)
dep(Ã-11, Â-13)
partmod(Â-13, Ãƒâﾁ-15)
nn(·-32, „-16)
nn(·-32, Ã-17)
nn(·-32, ‚-18)
nn(·-32, Â-19)
nn(·-32, ®-20)
nn(·-32, Ãƒâﾁ-21)
nn(·-32, „-22)
nn(·-32, Ã-23)
nn(·-32, ‚-24)
nn(·-32, Â-25)
nn(·-32, ¸-26)
nn(·-32, Ãƒâﾁ-27)
nn(·-32, „-28)
nn(·-32, Ã-29)
nn(·-32, ‚-30)
nn(·-32, Â-31)
dobj(Ãƒâﾁ-15, ·-32)
nn(¨-41, lÃƒâˆžÃ-34)
nn(¨-41, ‚-35)
nn(¨-41, Â-36)
nn(¨-41, ¨-37)
nn(¨-41, thÃƒâˆžÃ-38)
nn(¨-41, ‚-39)
nn(¨-41, Â-40)
dep(·-32, ¨-41)
dep(¨-41, RBR-43)
nn(forgetfulness-47, means-46)
prep_literally(¨-41, forgetfulness-47)
prep_literally(¨-41, concealment-51)
conj_or(forgetfulness-47, concealment-51)

In the context of a fluid flow relative to a body , the Lift force is the vector components of the aerodynamic force that is perpendicular to the flow direction .

det(context-3, the-2)
prep_in(components-19, context-3)
det(flow-7, a-5)
amod(flow-7, fluid-6)
prep_of(context-3, flow-7)
advmod(flow-7, relative-8)
det(body-11, a-10)
prep_to(relative-8, body-11)
det(force-15, the-13)
nn(force-15, Lift-14)
nsubj(components-19, force-15)
cop(components-19, is-16)
det(components-19, the-17)
nn(components-19, vector-18)
root(ROOT-0, components-19)
det(force-23, the-21)
amod(force-23, aerodynamic-22)
prep_of(components-19, force-23)
nsubj(perpendicular-26, force-23)
cop(perpendicular-26, is-25)
rcmod(force-23, perpendicular-26)
det(direction-30, the-28)
nn(direction-30, flow-29)
prep_to(perpendicular-26, direction-30)

The Lombards - LBR - Latin Langobardi , whence the alternative names Langobards and Longobards - RBR - were a Germanic people originally from Northern Europe who settled in the valley of the Danube and from there invaded Byzantine Italy in 568 under the leadership of Alboin .

det(Lombards-2, The-1)
root(ROOT-0, Lombards-2)
dep(Lombards-2, LBR-4)
nn(Langobardi-7, Latin-6)
dep(LBR-4, Langobardi-7)
appos(LBR-4, whence-9)
det(names-12, the-10)
amod(names-12, alternative-11)
nsubj(people-22, names-12)
dep(names-12, Langobards-13)
dep(names-12, Longobards-15)
conj_and(Langobards-13, Longobards-15)
dep(names-12, RBR-17)
cop(people-22, were-19)
det(people-22, a-20)
amod(people-22, Germanic-21)
rcmod(whence-9, people-22)
advmod(people-22, originally-23)
nn(Europe-26, Northern-25)
prep_from(people-22, Europe-26)
nsubj(settled-28, Europe-26)
nsubj(invaded-38, Europe-26)
rcmod(Europe-26, settled-28)
det(valley-31, the-30)
prep_in(settled-28, valley-31)
det(Danube-34, the-33)
prep_of(valley-31, Danube-34)
prep(invaded-38, from-36)
pobj(from-36, there-37)
rcmod(Europe-26, invaded-38)
conj_and(settled-28, invaded-38)
nn(Italy-40, Byzantine-39)
dobj(invaded-38, Italy-40)
prep_in(Italy-40, 568-42)
det(leadership-45, the-44)
prep_under(invaded-38, leadership-45)
prep_of(leadership-45, Alboin-47)

Lisp is a family of computer programming languages with a long history and a distinctive , fully parenthesized syntax .

nsubj(family-4, Lisp-1)
cop(family-4, is-2)
det(family-4, a-3)
root(ROOT-0, family-4)
nn(languages-8, computer-6)
nn(languages-8, programming-7)
prep_of(family-4, languages-8)
det(history-12, a-10)
amod(history-12, long-11)
prep_with(languages-8, history-12)
det(syntax-19, a-14)
amod(parenthesized-18, distinctive-15)
advmod(parenthesized-18, fully-17)
amod(syntax-19, parenthesized-18)
prep_of(family-4, syntax-19)
conj_and(languages-8, syntax-19)

Luna is the Latin name of the Earth 's Moon as well as the Roman moon goddess -LRB- \/ HYPER -RRB- .

nsubj(name-5, Luna-1)
cop(name-5, is-2)
det(name-5, the-3)
amod(name-5, Latin-4)
root(ROOT-0, name-5)
det(Earth-8, the-7)
poss(Moon-10, Earth-8)
prep_of(name-5, Moon-10)
det(goddess-17, the-14)
nn(goddess-17, Roman-15)
nn(goddess-17, moon-16)
conj_and(name-5, goddess-17)
nn(HYPER-20, \/-19)
abbrev(goddess-17, HYPER-20)

Titus Livius - LBR - traditionally 59 BC & amp ; ndash ; AD 17 - RBR - , known as Livy in English , was a Roman historian who wrote a monumental history of Rome , Ab Urbe Condita , from its founding - LBR - traditionally dated to 753 BC - RBR - through the reign of Augustus in Livy 's own time .

nn(Livius-2, Titus-1)
nsubj(ndash-12, Livius-2)
dep(Livius-2, LBR-4)
advmod(59-7, traditionally-6)
dep(LBR-4, 59-7)
dep(59-7, BC-8)
dep(59-7, amp-10)
conj_and(BC-8, amp-10)
root(ROOT-0, ndash-12)
nsubj(historian-29, AD-14)
num(AD-14, 17-15)
dep(AD-14, RBR-17)
partmod(AD-14, known-20)
prep_as(known-20, Livy-22)
prep_in(known-20, English-24)
cop(historian-29, was-26)
det(historian-29, a-27)
amod(historian-29, Roman-28)
parataxis(ndash-12, historian-29)
nsubj(wrote-31, historian-29)
rcmod(historian-29, wrote-31)
det(history-34, a-32)
amod(history-34, monumental-33)
dobj(wrote-31, history-34)
prep_of(history-34, Rome-36)
nn(Condita-40, Ab-38)
nn(Condita-40, Urbe-39)
appos(Rome-36, Condita-40)
poss(founding-44, its-43)
prep_from(Rome-36, founding-44)
nn(RBR-54, LBR-46)
advmod(dated-49, traditionally-48)
dep(RBR-54, dated-49)
nn(BC-52, 753-51)
prep_to(dated-49, BC-52)
dep(Rome-36, RBR-54)
det(reign-58, the-57)
prep_through(wrote-31, reign-58)
prep_of(reign-58, Augustus-60)
poss(time-65, Livy-62)
amod(time-65, own-64)
prep_in(wrote-31, time-65)

Bodyline , also known as fast leg theory , was a cricketing tactic devised by the English cricket team for their 1932ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ž33 Ashes tour of Australia , specifically to combat the extraordinary batting skill of Australia 's Don Bradman .

nsubj(tactic-13, Bodyline-1)
advmod(known-4, also-3)
partmod(Bodyline-1, known-4)
amod(theory-8, fast-6)
nn(theory-8, leg-7)
prep_as(known-4, theory-8)
cop(tactic-13, was-10)
det(tactic-13, a-11)
amod(tactic-13, cricketing-12)
root(ROOT-0, tactic-13)
xsubj(combat-41, tactic-13)
partmod(tactic-13, devised-14)
det(team-19, the-16)
amod(team-19, English-17)
nn(team-19, cricket-18)
agent(devised-14, team-19)
poss(cents-23, their-21)
amod(cents-23, 1932ÃƒÂ-22)
prep_for(devised-14, cents-23)
nn(Ã-29, Ã-24)
nn(Ã-29, ‚-25)
dep($-27, â-26)
dep(Ã-29, $-27)
num($-27, cents-28)
dep(devised-14, Ã-29)
partmod(Ã-29, ‚-30)
nn(tour-35, â-31)
amod(tour-35, $-32)
dep($-32, ž33-33)
nn(tour-35, Ashes-34)
dobj(‚-30, tour-35)
prep_of(tour-35, Australia-37)
advmod(combat-41, specifically-39)
aux(combat-41, to-40)
xcomp(devised-14, combat-41)
det(skill-45, the-42)
dep(batting-44, extraordinary-43)
amod(skill-45, batting-44)
dobj(combat-41, skill-45)
poss(Bradman-50, Australia-47)
nn(Bradman-50, Don-49)
prep_of(skill-45, Bradman-50)

A Lubricant - LBR - sometimes referred to `` Lube `` - RBR - is a substance - LBR - often a liquid - RBR - introduced between two moving surfaces to reduce the friction and wear between them .

det(Lubricant-2, A-1)
nsubj(referred-7, Lubricant-2)
xsubj(Lube-10, Lubricant-2)
dep(Lubricant-2, LBR-4)
advmod(referred-7, sometimes-6)
dep(LBR-19, referred-7)
aux(Lube-10, to-8)
xcomp(referred-7, Lube-10)
nsubj(substance-17, RBR-13)
cop(substance-17, is-15)
det(substance-17, a-16)
ccomp(Lube-10, substance-17)
root(ROOT-0, LBR-19)
advmod(liquid-23, often-21)
det(liquid-23, a-22)
dep(LBR-19, liquid-23)
dep(liquid-23, RBR-25)
dep(LBR-19, introduced-27)
prep_between(introduced-27, two-29)
xcomp(introduced-27, moving-30)
dobj(moving-30, surfaces-31)
aux(reduce-33, to-32)
xcomp(moving-30, reduce-33)
det(friction-35, the-34)
dobj(reduce-33, friction-35)
xcomp(moving-30, wear-37)
conj_and(reduce-33, wear-37)
prep_between(wear-37, them-39)

The Llama - LBR - Lama glama - RBR - is a South American camelid , widely used as a pack animal by the Incas and other natives of the Andes mountains .

det(glama-7, The-1)
nn(glama-7, Llama-2)
dep(glama-7, LBR-4)
nn(glama-7, Lama-6)
nsubj(camelid-15, glama-7)
dep(glama-7, RBR-9)
cop(camelid-15, is-11)
det(camelid-15, a-12)
nn(camelid-15, South-13)
nn(camelid-15, American-14)
root(ROOT-0, camelid-15)
advmod(used-18, widely-17)
partmod(camelid-15, used-18)
det(animal-22, a-20)
nn(animal-22, pack-21)
prep_as(used-18, animal-22)
det(Incas-25, the-24)
prep_by(animal-22, Incas-25)
amod(natives-28, other-27)
prep_as(used-18, natives-28)
conj_and(animal-22, natives-28)
det(mountains-32, the-30)
nn(mountains-32, Andes-31)
prep_of(natives-28, mountains-32)

The Litre or liter - LBR - see spelling differences - RBR - is a unit of volume .

det(Litre-2, The-1)
nsubj(see-8, Litre-2)
conj_or(Litre-2, liter-4)
nsubj(see-8, liter-4)
dep(Litre-2, LBR-6)
root(ROOT-0, see-8)
nn(differences-10, spelling-9)
nsubj(unit-16, differences-10)
dep(differences-10, RBR-12)
cop(unit-16, is-14)
det(unit-16, a-15)
ccomp(see-8, unit-16)
prep_of(unit-16, volume-18)

The word Locus - LBR - plural loci - RBR - is Latin for `` place `` .

det(word-2, The-1)
nsubj(Locus-3, word-2)
root(ROOT-0, Locus-3)
parataxis(Locus-3, LBR-5)
nn(loci-8, plural-7)
nsubj(Latin-13, loci-8)
dep(loci-8, RBR-10)
cop(Latin-13, is-12)
dep(LBR-5, Latin-13)
prep_for(Latin-13, place-16)

The Levant - LBR - lÃƒâ ‰ ˆÃ ‚ Ë ™ ` vÃƒâˆžÃ ‚ Å `` nt - RBR - is a geographical term that denotes a large area in Western Asia , roughly bounded on the north by the Taurus Mountains , on the south by the Arabian Desert , and on the west by the Mediterranean Sea , while on the east it extends into Upper Mesopotamia ; however , some definitions include nearly all of Mesopotamia .

det(™-11, The-1)
nn(™-11, Levant-2)
dep(™-11, LBR-4)
nn(™-11, lÃƒâ-6)
nn(™-11, ‰-7)
nn(™-11, ˆÃ-8)
nn(™-11, ‚-9)
nn(™-11, Ë-10)
nsubj(bounded-35, ™-11)
nn(nt-17, vÃƒâˆžÃ-13)
nn(nt-17, ‚-14)
nn(nt-17, Å-15)
dep(™-11, nt-17)
dep(nt-17, RBR-19)
dep(nt-17, is-21)
det(term-24, a-22)
amod(term-24, geographical-23)
nsubj(is-21, term-24)
nsubj(denotes-26, term-24)
rcmod(term-24, denotes-26)
det(area-29, a-27)
amod(area-29, large-28)
dobj(denotes-26, area-29)
nn(Asia-32, Western-31)
prep_in(area-29, Asia-32)
advmod(bounded-35, roughly-34)
root(ROOT-0, bounded-35)
det(north-38, the-37)
prep_on(bounded-35, north-38)
det(Mountains-42, the-40)
nn(Mountains-42, Taurus-41)
prep_by(bounded-35, Mountains-42)
det(south-46, the-45)
prep_on(bounded-35, south-46)
det(Desert-50, the-48)
nn(Desert-50, Arabian-49)
prep_by(south-46, Desert-50)
det(west-55, the-54)
prep_on(bounded-35, west-55)
conj_and(south-46, west-55)
det(Sea-59, the-57)
nn(Sea-59, Mediterranean-58)
prep_by(west-55, Sea-59)
mark(extends-66, while-61)
det(east-64, the-63)
prep_on(extends-66, east-64)
nsubj(extends-66, it-65)
pcomp(bounded-35, extends-66)
nn(Mesopotamia-69, Upper-68)
prep_into(extends-66, Mesopotamia-69)
advmod(include-75, however-71)
det(definitions-74, some-73)
nsubj(include-75, definitions-74)
parataxis(bounded-35, include-75)
quantmod(all-77, nearly-76)
dobj(include-75, all-77)
prep_of(all-77, Mesopotamia-79)

The Lupercalia was a very ancient , possibly pre-Roman pastoral festival , observed on February 13 through February 15 to avert evil spirits and purify the city , releasing health and fertility .

det(Lupercalia-2, The-1)
nsubj(festival-11, Lupercalia-2)
cop(festival-11, was-3)
det(festival-11, a-4)
advmod(ancient-6, very-5)
amod(festival-11, ancient-6)
advmod(pre-Roman-9, possibly-8)
amod(festival-11, pre-Roman-9)
amod(festival-11, pastoral-10)
ccomp(observed-13, festival-11)
root(ROOT-0, observed-13)
prep_on(observed-13, February-15)
num(February-15, 13-16)
prep_through(observed-13, February-18)
num(February-18, 15-19)
aux(avert-21, to-20)
xcomp(observed-13, avert-21)
amod(spirits-23, evil-22)
dobj(avert-21, spirits-23)
dobj(avert-21, purify-25)
conj_and(spirits-23, purify-25)
det(city-27, the-26)
nsubj(observed-13, city-27)
partmod(observed-13, releasing-29)
dobj(releasing-29, health-30)
dobj(releasing-29, fertility-32)
conj_and(health-30, fertility-32)

The Loa - LBR - also Lwa or L'wha - RBR - are the spirits of the Vodou religion practiced in Haiti , and other parts of the world .

det(Loa-2, The-1)
nsubj(spirits-15, Loa-2)
nn(RBR-11, LBR-4)
dep(Lwa-7, also-6)
dep(RBR-11, Lwa-7)
conj_or(Lwa-7, L'wha-9)
dep(RBR-11, L'wha-9)
dep(Loa-2, RBR-11)
cop(spirits-15, are-13)
det(spirits-15, the-14)
root(ROOT-0, spirits-15)
det(religion-19, the-17)
nn(religion-19, Vodou-18)
prep_of(spirits-15, religion-19)
partmod(religion-19, practiced-20)
prep_in(practiced-20, Haiti-22)
amod(parts-26, other-25)
conj_and(spirits-15, parts-26)
det(world-29, the-28)
prep_of(parts-26, world-29)

LambdaMOO is an online community of the variety called a MOO .

nsubj(community-5, LambdaMOO-1)
cop(community-5, is-2)
det(community-5, an-3)
amod(community-5, online-4)
root(ROOT-0, community-5)
det(variety-8, the-7)
prep_of(community-5, variety-8)
partmod(variety-8, called-9)
det(MOO-11, a-10)
dobj(called-9, MOO-11)

In Greek mythology , the Labyrinth - LBR - Greek Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ± Ãƒâ „ Ã ‚ â $ Ãƒâˆ ‚ Ã ‚ Å ¸ Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ âˆ Ãƒâ „ Ã ‚ Â ¸ Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; labyrinthos - RBR - was an elaborate structure designed and built by the legendary artificer Daedalus for King Minos of Crete at Knossos .

dep(LBR-8, In-1)
amod(mythology-3, Greek-2)
pobj(In-1, mythology-3)
det(Labyrinth-6, the-5)
appos(mythology-3, Labyrinth-6)
dep(structure-82, LBR-8)
amod(Ãƒâ-11, Greek-10)
dep(â-39, Ãƒâ-11)
nn(Â-15, „-12)
nn(Â-15, Ã-13)
nn(Â-15, ‚-14)
dep(Ãƒâ-11, Â-15)
nn(â-27, Ãƒâ-17)
nn(â-27, „-18)
nn(â-27, Ã-19)
nn(â-27, ‚-20)
nn(â-27, Â-21)
nn(â-27, ±-22)
nn(â-27, Ãƒâ-23)
nn(â-27, „-24)
nn(â-27, Ã-25)
nn(â-27, ‚-26)
dep(â-39, â-27)
num(â-39, $-28)
number($-28, Ãƒâˆ-29)
number($-28, ‚-30)
nn(â-39, Ã-31)
nn(â-39, ‚-32)
nn(â-39, Å-33)
nn(â-39, ¸-34)
nn(â-39, Ãƒâˆ-35)
nn(â-39, ‚-36)
nn(â-39, Ã-37)
nn(â-39, ‚-38)
dep(â-46, â-39)
num(cents-41, „-40)
dep(â-39, cents-41)
nn(â-46, Ãƒâ-42)
nn(â-46, „-43)
nn(â-46, Ã-44)
nn(â-46, ‚-45)
dep($-47, â-46)
dep(â-70, $-47)
num($-47, ™-48)
nn(â-70, Ãƒâ-49)
nn(â-70, „-50)
nn(â-70, Ã-51)
nn(â-70, ‚-52)
nn(â-70, âˆ-53)
nn(â-70, Ãƒâ-54)
nn(â-70, „-55)
nn(â-70, Ã-56)
nn(â-70, ‚-57)
nn(â-70, Â-58)
nn(â-70, ¸-59)
nn(â-70, Ãƒâ-60)
nn(â-70, „-61)
nn(â-70, Ã-62)
nn(â-70, ‚-63)
nn(â-70, Â-64)
nn(â-70, ¿-65)
nn(â-70, Ãƒâˆ-66)
nn(â-70, ‚-67)
nn(â-70, Ã-68)
nn(â-70, ‚-69)
dep(‰-71, â-70)
dep(LBR-8, ‰-71)
dep(LBR-8, nbsp-73)
conj_and(‰-71, nbsp-73)
nsubj(structure-82, labyrinthos-75)
dep(labyrinthos-75, RBR-77)
cop(structure-82, was-79)
det(structure-82, an-80)
amod(structure-82, elaborate-81)
root(ROOT-0, structure-82)
partmod(structure-82, designed-83)
partmod(structure-82, built-85)
conj_and(designed-83, built-85)
det(Daedalus-90, the-87)
amod(Daedalus-90, legendary-88)
nn(Daedalus-90, artificer-89)
agent(designed-83, Daedalus-90)
nn(Minos-93, King-92)
prep_for(Daedalus-90, Minos-93)
prep_of(Minos-93, Crete-95)
prep_at(Crete-95, Knossos-97)

Lamborghini is an Italian manufacturer of sports cars , based in the small Italian village of Sant ` Agata Bolognese , near Bologna .

nsubj(manufacturer-5, Lamborghini-1)
cop(manufacturer-5, is-2)
det(manufacturer-5, an-3)
amod(manufacturer-5, Italian-4)
root(ROOT-0, manufacturer-5)
nn(cars-8, sports-7)
prep_of(manufacturer-5, cars-8)
prep(manufacturer-5, based-10)
pcomp(based-10, in-11)
det(village-15, the-12)
amod(village-15, small-13)
amod(village-15, Italian-14)
prep_in(based-10, village-15)
nn(Bolognese-20, Sant-17)
nn(Bolognese-20, Agata-19)
prep_of(village-15, Bolognese-20)
prep_near(Bolognese-20, Bologna-23)

A Lens is an optical device with perfect or approximate axial symmetry which transmits and refracts light , converging or diverging the beam .

det(Lens-2, A-1)
nsubj(device-6, Lens-2)
cop(device-6, is-3)
det(device-6, an-4)
amod(device-6, optical-5)
root(ROOT-0, device-6)
amod(symmetry-12, perfect-8)
conj_or(perfect-8, approximate-10)
amod(symmetry-12, approximate-10)
nn(symmetry-12, axial-11)
prep_with(device-6, symmetry-12)
nsubj(transmits-14, symmetry-12)
nsubj(refracts-16, symmetry-12)
rcmod(symmetry-12, transmits-14)
rcmod(symmetry-12, refracts-16)
conj_and(transmits-14, refracts-16)
amod(beam-23, light-17)
conj_or(light-17, converging-19)
amod(beam-23, converging-19)
conj_or(light-17, diverging-21)
amod(beam-23, diverging-21)
det(beam-23, the-22)
dobj(transmits-14, beam-23)

In biochemistry , a Ligase - LBR - from the Latin verb ligÃƒâ ‰ ¥ Ã ‚ â „ cents re - `` to bind `` or `` to glue together `` - RBR - is an enzyme that can catalyse the joining of the sugar phosphate backbones of Okazaki fragments of DNA .

prep_in(enzyme-38, biochemistry-2)
det(Ligase-5, a-4)
nsubj(enzyme-38, Ligase-5)
dep(„-19, LBR-7)
dep(LBR-7, from-9)
det(verb-12, the-10)
amod(verb-12, Latin-11)
pobj(from-9, verb-12)
nn(â-18, ligÃƒâ-13)
nn(â-18, ‰-14)
nn(â-18, ¥-15)
nn(â-18, Ã-16)
nn(â-18, ‚-17)
nsubj(„-19, â-18)
dep(Ligase-5, „-19)
dobj(„-19, cents-20)
dep(„-19, re-21)
prep_to(„-19, bind-25)
prep_to(„-19, to-29)
conj_or(bind-25, to-29)
pobj(to-29, glue-30)
advmod(RBR-34, together-31)
xcomp(„-19, RBR-34)
cop(enzyme-38, is-36)
det(enzyme-38, an-37)
root(ROOT-0, enzyme-38)
nsubj(catalyse-41, enzyme-38)
aux(catalyse-41, can-40)
rcmod(enzyme-38, catalyse-41)
det(joining-43, the-42)
dobj(catalyse-41, joining-43)
det(backbones-48, the-45)
nn(backbones-48, sugar-46)
nn(backbones-48, phosphate-47)
prep_of(joining-43, backbones-48)
nn(fragments-51, Okazaki-50)
prep_of(backbones-48, fragments-51)
prep_of(fragments-51, DNA-53)

Lego , officially trademarked Lego , is a line of construction toys manufactured by the Lego Group , a privately held company based in Denmark .

nsubj(line-9, Lego-1)
advmod(trademarked-4, officially-3)
partmod(Lego-1, trademarked-4)
dobj(trademarked-4, Lego-5)
cop(line-9, is-7)
det(line-9, a-8)
root(ROOT-0, line-9)
nn(toys-12, construction-11)
prep_of(line-9, toys-12)
partmod(toys-12, manufactured-13)
det(Group-17, the-15)
nn(Group-17, Lego-16)
agent(manufactured-13, Group-17)
det(company-22, a-19)
advmod(held-21, privately-20)
amod(company-22, held-21)
appos(Group-17, company-22)
partmod(company-22, based-23)
prep_in(based-23, Denmark-25)

A Lunatic - LBR - colloquially : `` looney `` or `` loon `` - RBR - is a commonly used term for a person who is mentally ill , dangerous , foolish or unpredictable : a condition once called lunacy .

det(colloquially-6, A-1)
nn(colloquially-6, Lunatic-2)
dep(colloquially-6, LBR-4)
root(ROOT-0, colloquially-6)
nsubj(loon-13, looney-9)
cc(loon-13, or-11)
dep(colloquially-6, loon-13)
nsubj(term-22, RBR-16)
cop(term-22, is-18)
det(term-22, a-19)
advmod(used-21, commonly-20)
amod(term-22, used-21)
ccomp(loon-13, term-22)
det(person-25, a-24)
prep_for(loon-13, person-25)
nsubj(ill-29, person-25)
nsubj(dangerous-31, person-25)
nsubj(foolish-33, person-25)
nsubj(unpredictable-35, person-25)
cop(ill-29, is-27)
advmod(ill-29, mentally-28)
rcmod(person-25, ill-29)
rcmod(person-25, dangerous-31)
conj_or(ill-29, dangerous-31)
rcmod(person-25, foolish-33)
conj_or(ill-29, foolish-33)
rcmod(person-25, unpredictable-35)
conj_or(ill-29, unpredictable-35)
det(condition-38, a-37)
nsubj(called-40, condition-38)
advmod(called-40, once-39)
parataxis(loon-13, called-40)
advmod(called-40, lunacy-41)

The Leonids are a prolific meteor shower associated with the comet Tempel-Tuttle .

det(Leonids-2, The-1)
nsubj(shower-7, Leonids-2)
cop(shower-7, are-3)
det(shower-7, a-4)
amod(shower-7, prolific-5)
nn(shower-7, meteor-6)
root(ROOT-0, shower-7)
partmod(shower-7, associated-8)
det(Tempel-Tuttle-12, the-10)
amod(Tempel-Tuttle-12, comet-11)
prep_with(associated-8, Tempel-Tuttle-12)

The Labarum - LBR - ÃƒÂ cents Ã ‚ Ë˜Ã ‚ Â § - RBR - was a military standard that displayed the first two Greek letters of the word `` Christ `` - LBR - Greek : Ãƒâ „ Ã ‚ Â § Ãƒâ „ Ã ‚ Â ¡ Ãƒâ „ Ã ‚ Ë ™ Ãƒâ „ Ã ‚ Â # Ãƒâ „ Ã ‚ â ‚ ¬ Ãƒâ „ Ã ‚ Æ ' Ãƒâ „ Ã ‚ Â # , or Ãƒâ „ Ã ‚ Â § Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ â $ ™ Ãƒâˆ ‚ Ã ‚ âˆžÃƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâˆ ‚ Ã ‚ â $ ˜Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; - RBR - ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ° Chi - LBR - Ãƒâˆ ‚ Ã ‚ Î © - RBR - and Rho - LBR - Ãƒâˆ ‚ Ã ‚ â „ cents - RBR - .

det(Labarum-2, The-1)
nsubj(standard-20, Labarum-2)
nn(RBR-15, LBR-4)
nn(cents-7, ÃƒÂ-6)
dep(RBR-15, cents-7)
nn(Â-12, Ã-8)
punct(Â-12, ‚-9)
nn(Â-12, Ë˜Ã-10)
punct(Â-12, ‚-11)
dep(cents-7, Â-12)
punct(Â-12, §-13)
dep(Labarum-2, RBR-15)
cop(standard-20, was-17)
det(standard-20, a-18)
amod(standard-20, military-19)
root(ROOT-0, standard-20)
nsubj(displayed-22, standard-20)
rcmod(standard-20, displayed-22)
det(letters-27, the-23)
amod(letters-27, first-24)
num(letters-27, two-25)
amod(letters-27, Greek-26)
dobj(displayed-22, letters-27)
prep(letters-27, of-28)
det(word-30, the-29)
dep(of-28, word-30)
nn(LBR-35, Christ-32)
dep(word-30, LBR-35)
dep(word-30, Greek-37)
nn(Ãƒâ-63, Ãƒâ-39)
punct(Ãƒâ-63, „-40)
nn(Ãƒâ-63, Ã-41)
punct(Ãƒâ-63, ‚-42)
nn(Ãƒâ-63, Â-43)
punct(Ãƒâ-63, §-44)
nn(Ãƒâ-63, Ãƒâ-45)
punct(Ãƒâ-63, „-46)
nn(Ãƒâ-63, Ã-47)
punct(Ãƒâ-63, ‚-48)
nn(Ãƒâ-63, Â-49)
punct(Ãƒâ-63, ¡-50)
nn(Ãƒâ-63, Ãƒâ-51)
punct(Ãƒâ-63, „-52)
nn(Ãƒâ-63, Ã-53)
punct(Ãƒâ-63, ‚-54)
nn(Ãƒâ-63, Ë-55)
punct(Ãƒâ-63, ™-56)
nn(Ãƒâ-63, Ãƒâ-57)
punct(Ãƒâ-63, „-58)
nn(Ãƒâ-63, Ã-59)
punct(Ãƒâ-63, ‚-60)
nn(Ãƒâ-63, Â-61)
num(Ãƒâ-63, #-62)
dep(Greek-37, Ãƒâ-63)
punct(word-30, „-64)
nn(â-67, Ã-65)
punct(â-67, ‚-66)
dep(word-30, â-67)
punct(â-67, ‚-68)
punct(Ãƒâ-76, ¬-69)
nn(Ãƒâ-76, Ãƒâ-70)
punct(Ãƒâ-76, „-71)
nn(Ãƒâ-76, Ã-72)
punct(Ãƒâ-76, ‚-73)
nn(Ãƒâ-76, Æ-74)
dep(â-67, Ãƒâ-76)
punct(â-67, „-77)
nn(#-81, Ã-78)
punct(#-81, ‚-79)
nn(#-81, Â-80)
dep(â-67, #-81)
dep(â-67, Ãƒâ-84)
conj_or(#-81, Ãƒâ-84)
punct(â-67, „-85)
dep(Ã-92, Ã-86)
dep(Ã-92, ‚-87)
dep(Ã-92, Â-88)
dep(Ã-92, §-89)
dep(Ã-92, Ãƒâˆ-90)
dep(Ã-92, ‚-91)
dep(â-94, Ã-92)
punct(â-94, ‚-93)
dep(â-67, â-94)
punct(â-94, „-95)
dep(â-94, cents-96)
nn(Ã-99, Ãƒâ-97)
nn(Ã-99, „-98)
dep(cents-96, Ã-99)
punct(cents-96, ‚-100)
dep(cents-96, â-101)
num(â-112, $-102)
number($-102, ™-103)
number($-102, Ãƒâˆ-104)
punct(Ã-106, ‚-105)
dep(â-112, Ã-106)
punct(Ã-106, ‚-107)
nn(â-112, âˆžÃƒâˆ-108)
punct(Ã-110, ‚-109)
dep(â-112, Ã-110)
punct(Ã-110, ‚-111)
dep(â-101, â-112)
punct(cents-96, ‰-113)
dep(Ãƒâˆ-115, ¥-114)
dep(Ã-117, Ãƒâˆ-115)
punct(Ã-117, ‚-116)
dep(cents-96, Ã-117)
punct(Ã-117, ‚-118)
dep(Ã-117, â-119)
dep(â-119, $-120)
num($-120, ˜Ãƒâˆ-121)
punct(â-119, ‚-122)
nn(â-125, Ã-123)
punct(â-125, ‚-124)
dep(â-119, â-125)
punct(â-125, ‰-126)
dep(â-119, nbsp-128)
conj_and(â-125, nbsp-128)
dep(â-125, RBR-131)
nn(cents-134, ÃƒÂ-133)
dep(RBR-131, cents-134)
nn(‚-136, Ã-135)
dep(cents-134, ‚-136)
dep(â-125, $-138)
conj_â(RBR-131, $-138)
num($-138, cents-139)
nn(LBR-147, Ã-140)
punct($-143, ‚-141)
dep($-143, â-142)
dep(LBR-147, $-143)
number($-143, °-144)
number($-143, Chi-145)
dep($-138, LBR-147)
nn(Î-153, Ãƒâˆ-149)
punct(Î-153, ‚-150)
nn(Î-153, Ã-151)
punct(Î-153, ‚-152)
dep($-138, Î-153)
punct(Î-153, ©-154)
nn(LBR-161, RBR-156)
dep(Rho-159, and-158)
dep(LBR-161, Rho-159)
dep(Î-153, LBR-161)
nn(Ã-165, Ãƒâˆ-163)
nn(Ã-165, ‚-164)
dep($-138, Ã-165)
punct(cents-169, ‚-166)
nn(cents-169, â-167)
punct(cents-169, „-168)
dep(Ã-165, cents-169)
dep(â-119, RBR-171)

Laconia - LBR - Ãƒâﾁ „ Ã ‚ ËﾝÃƒâﾁ „ Ã ‚ Â ± Ãƒâﾁ „ Ã ‚ ÂºÃƒâˆ ‚ Ã ‚ â ‰ ˆÃƒâﾁ „ Ã ‚ âˆﾏÃƒâﾁ „ Ã ‚ Â ¯ Ãƒâﾁ „ Ã ‚ Â ± - RBR - , also known as Lacedaemonia , is a prefecture in Greece .

nsubj(prefecture-52, Laconia-1)
nn(RBR-42, LBR-3)
advmod(±-40, Ãƒâﾁ-5)
nn(±-40, „-6)
nn(±-40, Ã-7)
nn(±-40, ‚-8)
nn(±-40, ËﾝÃƒâﾁ-9)
nn(±-40, „-10)
nn(±-40, Ã-11)
nn(±-40, ‚-12)
nn(±-40, Â-13)
nn(±-40, ±-14)
nn(±-40, Ãƒâﾁ-15)
nn(±-40, „-16)
nn(±-40, Ã-17)
nn(±-40, ‚-18)
nn(±-40, ÂºÃƒâˆ-19)
nn(±-40, ‚-20)
nn(±-40, Ã-21)
nn(±-40, ‚-22)
nn(±-40, â-23)
nn(±-40, ‰-24)
nn(±-40, ˆÃƒâﾁ-25)
nn(±-40, „-26)
nn(±-40, Ã-27)
nn(±-40, ‚-28)
nn(±-40, âˆﾏÃƒâﾁ-29)
nn(±-40, „-30)
nn(±-40, Ã-31)
nn(±-40, ‚-32)
nn(±-40, Â-33)
nn(±-40, ¯-34)
nn(±-40, Ãƒâﾁ-35)
nn(±-40, „-36)
nn(±-40, Ã-37)
nn(±-40, ‚-38)
nn(±-40, Â-39)
dep(RBR-42, ±-40)
dep(Laconia-1, RBR-42)
advmod(known-46, also-45)
dep(prefecture-52, known-46)
prep_as(known-46, Lacedaemonia-48)
cop(prefecture-52, is-50)
det(prefecture-52, a-51)
root(ROOT-0, prefecture-52)
prep_in(prefecture-52, Greece-54)

The name LAME is a recursive acronym for LAME Aint an MP3 Encoder , reflecting LAMEs early history when it was not actually an encoder , but merely a set of patches against the freely available ISO demonstration source code .

det(name-2, The-1)
nsubj(acronym-7, name-2)
advmod(acronym-7, LAME-3)
cop(acronym-7, is-4)
det(acronym-7, a-5)
amod(acronym-7, recursive-6)
root(ROOT-0, acronym-7)
nn(Aint-10, LAME-9)
prep_for(acronym-7, Aint-10)
det(Encoder-13, an-11)
nn(Encoder-13, MP3-12)
dep(Aint-10, Encoder-13)
partmod(Aint-10, reflecting-15)
nn(history-18, LAMEs-16)
amod(history-18, early-17)
dobj(reflecting-15, history-18)
advmod(encoder-25, when-19)
nsubj(encoder-25, it-20)
cop(encoder-25, was-21)
neg(encoder-25, not-22)
advmod(encoder-25, actually-23)
det(encoder-25, an-24)
advcl(reflecting-15, encoder-25)
advcl(reflecting-15, merely-28)
advmod(encoder-25, merely-28)
conj_but(encoder-25, merely-28)
det(code-40, a-29)
amod(code-40, set-30)
prep_of(set-30, patches-32)
det(source-39, the-34)
advmod(available-36, freely-35)
amod(source-39, available-36)
nn(source-39, ISO-37)
nn(source-39, demonstration-38)
prep_against(patches-32, source-39)
dep(encoder-25, code-40)

In linear algebra , a Basis is a set of vectors that , in a linear combination , can represent every vector in a given vector space , and such that no element of the set can be represented as a linear combination of the others .

amod(algebra-3, linear-2)
prep_in(set-9, algebra-3)
det(Basis-6, a-5)
nsubj(set-9, Basis-6)
cop(set-9, is-7)
det(set-9, a-8)
root(ROOT-0, set-9)
prep_of(set-9, vectors-11)
nsubj(represent-20, vectors-11)
det(combination-17, a-15)
amod(combination-17, linear-16)
prep_in(represent-20, combination-17)
aux(represent-20, can-19)
rcmod(vectors-11, represent-20)
det(vector-22, every-21)
dobj(represent-20, vector-22)
det(space-27, a-24)
amod(space-27, given-25)
nn(space-27, vector-26)
prep_in(vector-22, space-27)
prep_of(set-9, such-30)
conj_and(vectors-11, such-30)
nsubj(represent-20, such-30)
complm(represented-39, that-31)
det(element-33, no-32)
nsubjpass(represented-39, element-33)
det(set-36, the-35)
prep_of(element-33, set-36)
aux(represented-39, can-37)
auxpass(represented-39, be-38)
dep(such-30, represented-39)
det(combination-43, a-41)
amod(combination-43, linear-42)
prep_as(represented-39, combination-43)
det(others-46, the-45)
prep_of(combination-43, others-46)

A Loch - LBR - usually Lough as a name element outside Scotland - RBR - is a body of water which is either a lake or a sea inlet , which may be also a firth , fjord , estuary or bay .

det(Loch-2, A-1)
nsubj(Lough-7, Loch-2)
dep(Loch-2, LBR-4)
advmod(Lough-7, usually-6)
root(ROOT-0, Lough-7)
mark(body-19, as-8)
det(element-11, a-9)
nn(element-11, name-10)
nsubj(body-19, element-11)
prep_outside(element-11, Scotland-13)
dep(element-11, RBR-15)
cop(body-19, is-17)
det(body-19, a-18)
advcl(Lough-7, body-19)
nsubj(lake-26, body-19)
prep_of(body-19, water-21)
cop(lake-26, is-23)
advmod(lake-26, either-24)
det(lake-26, a-25)
rcmod(body-19, lake-26)
nsubj(firth-37, lake-26)
det(inlet-30, a-28)
nn(inlet-30, sea-29)
rcmod(body-19, inlet-30)
conj_or(lake-26, inlet-30)
nsubj(firth-37, inlet-30)
aux(firth-37, may-33)
aux(firth-37, be-34)
advmod(firth-37, also-35)
det(firth-37, a-36)
rcmod(lake-26, firth-37)
rcmod(lake-26, fjord-39)
conj_or(firth-37, fjord-39)
rcmod(lake-26, estuary-41)
conj_or(firth-37, estuary-41)
rcmod(lake-26, bay-43)
conj_or(firth-37, bay-43)

Livonia - LBR - LÃƒâ ‰ ¥ Ã ‚ Â `` vÃƒâˆžÃ ‚ ÂµmÃƒâˆ ` Ã ‚ Å ¸ , Latvian and Livonija ; Estonian : Liivimaa ; Finnish : Liivinmaa ; German and Swedish : Livland ; Polish : Inflanty , Liwlandia ; Ãƒâˆ † Ã ‚ Ë Ãƒâˆ † Ã ‚ Â ¸ ÃƒÅ ' Ã ‚ â ‰ ¥ Ãƒâˆ † Ã ‚ Â '' ÃƒÅ ' Ã ‚ âˆ ‚ Ãƒâˆ † Ã ‚ âˆ Ãƒâˆ † Ã ‚ Â ´ Ãƒâˆ † Ã ‚ Â ¸ ÃƒÅ ' Ã ‚ âˆ ‚ \/ Liflyandiya - RBR - was once the land of the Finnic Livonians inhabiting the principal ancient Livonian County Metsepole with its center at Turaida .

nsubj(inhabiting-111, Livonia-1)
dep(Livonia-1, LBR-3)
nn(‚-13, LÃƒâ-5)
nn(‚-13, ‰-6)
nn(‚-13, ¥-7)
nn(‚-13, Ã-8)
nn(‚-13, ‚-9)
nn(‚-13, Â-10)
nn(‚-13, vÃƒâˆžÃ-12)
dep(LBR-3, ‚-13)
partmod(‚-13, ÂµmÃƒâˆ-14)
nn(¸-19, Ã-16)
nn(¸-19, ‚-17)
nn(¸-19, Å-18)
dobj(ÂµmÃƒâˆ-14, ¸-19)
dobj(ÂµmÃƒâˆ-14, Latvian-21)
conj_and(¸-19, Latvian-21)
dobj(ÂµmÃƒâˆ-14, Livonija-23)
conj_and(¸-19, Livonija-23)
dobj(ÂµmÃƒâˆ-14, Estonian-25)
conj_and(¸-19, Estonian-25)
dobj(ÂµmÃƒâˆ-14, Liivimaa-27)
conj_and(¸-19, Liivimaa-27)
dobj(ÂµmÃƒâˆ-14, Finnish-29)
conj_and(¸-19, Finnish-29)
dobj(ÂµmÃƒâˆ-14, Liivinmaa-31)
conj_and(¸-19, Liivinmaa-31)
dobj(ÂµmÃƒâˆ-14, German-33)
conj_and(¸-19, German-33)
conj_and(¸-19, Swedish-35)
conj_and(German-33, Swedish-35)
dobj(ÂµmÃƒâˆ-14, Livland-37)
conj_and(¸-19, Livland-37)
dobj(ÂµmÃƒâˆ-14, Polish-39)
conj_and(¸-19, Polish-39)
nn(Liwlandia-43, Inflanty-41)
dobj(ÂµmÃƒâˆ-14, Liwlandia-43)
conj_and(¸-19, Liwlandia-43)
nn(Â-54, Ãƒâˆ-45)
nn(Â-54, †-46)
nn(Â-54, Ã-47)
nn(Â-54, ‚-48)
nn(Â-54, Ë-49)
nn(Â-54, Ãƒâˆ-50)
nn(Â-54, †-51)
nn(Â-54, Ã-52)
nn(Â-54, ‚-53)
dobj(ÂµmÃƒâˆ-14, Â-54)
conj_and(¸-19, Â-54)
nn(ÃƒÅ-56, ¸-55)
poss(Â-67, ÃƒÅ-56)
nn(Â-67, Ã-58)
nn(Â-67, ‚-59)
nn(Â-67, â-60)
nn(Â-67, ‰-61)
nn(Â-67, ¥-62)
nn(Â-67, Ãƒâˆ-63)
nn(Â-67, †-64)
nn(Â-67, Ã-65)
nn(Â-67, ‚-66)
dep(Â-54, Â-67)
poss(¸-91, ÃƒÅ-69)
nn(¸-91, Ã-71)
nn(¸-91, ‚-72)
nn(¸-91, âˆ-73)
nn(¸-91, ‚-74)
nn(¸-91, Ãƒâˆ-75)
nn(¸-91, †-76)
nn(¸-91, Ã-77)
nn(¸-91, ‚-78)
nn(¸-91, âˆ-79)
nn(¸-91, Ãƒâˆ-80)
nn(¸-91, †-81)
nn(¸-91, Ã-82)
nn(¸-91, ‚-83)
nn(¸-91, Â-84)
nn(¸-91, ´-85)
nn(¸-91, Ãƒâˆ-86)
nn(¸-91, †-87)
nn(¸-91, Ã-88)
nn(¸-91, ‚-89)
nn(¸-91, Â-90)
dobj(ÂµmÃƒâˆ-14, ¸-91)
conj_and(¸-19, ¸-91)
poss(Liflyandiya-99, ÃƒÅ-92)
nn(Liflyandiya-99, Ã-94)
nn(Liflyandiya-99, ‚-95)
nn(Liflyandiya-99, âˆ-96)
nn(Liflyandiya-99, ‚-97)
nn(Liflyandiya-99, \/-98)
dep(¸-91, Liflyandiya-99)
dobj(ÂµmÃƒâˆ-14, RBR-101)
conj_and(¸-19, RBR-101)
aux(inhabiting-111, was-103)
advmod(inhabiting-111, once-104)
det(land-106, the-105)
pobj(once-104, land-106)
det(Livonians-110, the-108)
nn(Livonians-110, Finnic-109)
prep_of(once-104, Livonians-110)
root(ROOT-0, inhabiting-111)
det(Metsepole-117, the-112)
amod(Metsepole-117, principal-113)
amod(Metsepole-117, ancient-114)
nn(Metsepole-117, Livonian-115)
nn(Metsepole-117, County-116)
dobj(inhabiting-111, Metsepole-117)
poss(center-120, its-119)
prep_with(inhabiting-111, center-120)
prep_at(center-120, Turaida-122)

Larissa - LBR - Greek : Ãƒâ „ Ã ‚ Ë Ãƒâ „ Ã ‚ Â ¬ Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ â $ ™ Ãƒâˆ ‚ Ã ‚ âˆžÃƒâ „ Ã ‚ Â ± , LÃƒâˆžÃ ‚ Â ¡ risa - RBR - is the capital city of the Thessaly periphery of Greece , and capital of the Larissa Prefecture .

nsubj(city-54, Larissa-1)
nn(RBR-49, LBR-3)
dep(RBR-49, Greek-5)
nn(â-22, Ãƒâ-7)
nn(â-22, „-8)
nn(â-22, Ã-9)
nn(â-22, ‚-10)
nn(â-22, Ë-11)
nn(â-22, Ãƒâ-12)
nn(â-22, „-13)
nn(â-22, Ã-14)
nn(â-22, ‚-15)
nn(â-22, Â-16)
nn(â-22, ¬-17)
nn(â-22, Ãƒâˆ-18)
nn(â-22, ‚-19)
nn(â-22, Ã-20)
nn(â-22, ‚-21)
dep(â-29, â-22)
num(cents-24, „-23)
dep(â-22, cents-24)
nn(â-29, Ãƒâ-25)
nn(â-29, „-26)
nn(â-29, Ã-27)
nn(â-29, ‚-28)
dep(Greek-5, â-29)
num(±-41, $-30)
number($-30, ™-31)
number($-30, Ãƒâˆ-32)
nn(±-41, ‚-33)
nn(±-41, Ã-34)
nn(±-41, ‚-35)
nn(±-41, âˆžÃƒâ-36)
nn(±-41, „-37)
nn(±-41, Ã-38)
nn(±-41, ‚-39)
nn(±-41, Â-40)
dep(â-29, ±-41)
nn(risa-47, LÃƒâˆžÃ-43)
nn(risa-47, ‚-44)
nn(risa-47, Â-45)
nn(risa-47, ¡-46)
appos(±-41, risa-47)
dep(Larissa-1, RBR-49)
cop(city-54, is-51)
det(city-54, the-52)
nn(city-54, capital-53)
root(ROOT-0, city-54)
det(periphery-58, the-56)
nn(periphery-58, Thessaly-57)
prep_of(city-54, periphery-58)
prep_of(periphery-58, Greece-60)
conj_and(city-54, capital-63)
det(Prefecture-67, the-65)
nn(Prefecture-67, Larissa-66)
prep_of(capital-63, Prefecture-67)

A Lexeme is an abstract unit of morphological analysis in linguistics , that roughly corresponds to a set of forms taken by a single word .

det(Lexeme-2, A-1)
nsubj(unit-6, Lexeme-2)
cop(unit-6, is-3)
det(unit-6, an-4)
amod(unit-6, abstract-5)
root(ROOT-0, unit-6)
amod(analysis-9, morphological-8)
prep_of(unit-6, analysis-9)
prep_in(analysis-9, linguistics-11)
nsubj(corresponds-15, linguistics-11)
advmod(corresponds-15, roughly-14)
rcmod(linguistics-11, corresponds-15)
det(set-18, a-17)
prep_to(corresponds-15, set-18)
prep_of(set-18, forms-20)
partmod(forms-20, taken-21)
det(word-25, a-23)
amod(word-25, single-24)
agent(taken-21, word-25)

The name Lud refers to a legendary British king and founder of London as accounted by Geoffrey of Monmouth , buried at Ludgate , originally the westernmost gate of the London Wall and today located on the approach of St Paul 's Cathedral .

det(Lud-3, The-1)
nn(Lud-3, name-2)
nsubj(refers-4, Lud-3)
root(ROOT-0, refers-4)
det(king-9, a-6)
amod(king-9, legendary-7)
amod(king-9, British-8)
prep_to(refers-4, king-9)
prep_to(refers-4, founder-11)
conj_and(king-9, founder-11)
prep_of(founder-11, London-13)
mark(accounted-15, as-14)
advcl(refers-4, accounted-15)
prep_by(accounted-15, Geoffrey-17)
prep_of(Geoffrey-17, Monmouth-19)
advcl(refers-4, buried-21)
conj_and(accounted-15, buried-21)
prep_at(buried-21, Ludgate-23)
advmod(Ludgate-23, originally-25)
det(gate-28, the-26)
amod(gate-28, westernmost-27)
dep(Ludgate-23, gate-28)
det(Wall-32, the-30)
nn(Wall-32, London-31)
prep_of(gate-28, Wall-32)
advmod(located-35, today-34)
advcl(refers-4, located-35)
conj_and(accounted-15, located-35)
det(approach-38, the-37)
prep_on(located-35, approach-38)
nn(Paul-41, St-40)
poss(Cathedral-43, Paul-41)
prep_of(approach-38, Cathedral-43)

In computer science , a Linker or link editor is a program that takes one or more objects generated by compilers and assembles them into a single executable program .

nn(science-3, computer-2)
prep_in(program-12, science-3)
det(editor-9, a-5)
nn(editor-9, Linker-6)
conj_or(Linker-6, link-8)
nn(editor-9, link-8)
nsubj(program-12, editor-9)
cop(program-12, is-10)
det(program-12, a-11)
root(ROOT-0, program-12)
nsubj(takes-14, program-12)
nsubj(assembles-23, program-12)
rcmod(program-12, takes-14)
num(objects-18, one-15)
conj_or(one-15, more-17)
quantmod(one-15, more-17)
num(objects-18, more-17)
dobj(takes-14, objects-18)
partmod(objects-18, generated-19)
agent(generated-19, compilers-21)
rcmod(program-12, assembles-23)
conj_and(takes-14, assembles-23)
dobj(assembles-23, them-24)
det(program-29, a-26)
amod(program-29, single-27)
nn(program-29, executable-28)
prep_into(assembles-23, program-29)

Lusitania was an ancient Roman province including approximately all of modern Portugal south of the Douro river , and part of modern Spain - LBR - the present autonomous community of Extremadura and a small part of the province of Salamanca - RBR - .

nsubj(province-6, Lusitania-1)
cop(province-6, was-2)
det(province-6, an-3)
amod(province-6, ancient-4)
nn(province-6, Roman-5)
root(ROOT-0, province-6)
quantmod(all-9, approximately-8)
prep_including(province-6, all-9)
amod(south-13, modern-11)
nn(south-13, Portugal-12)
prep_of(all-9, south-13)
det(river-17, the-15)
nn(river-17, Douro-16)
prep_of(south-13, river-17)
prep_of(all-9, part-20)
conj_and(south-13, part-20)
amod(RBR-43, modern-22)
nn(RBR-43, Spain-23)
dep(RBR-43, LBR-25)
det(community-30, the-27)
amod(autonomous-29, present-28)
amod(community-30, autonomous-29)
dep(LBR-25, community-30)
prep_of(community-30, Extremadura-32)
det(part-36, a-34)
amod(part-36, small-35)
dep(LBR-25, part-36)
conj_and(community-30, part-36)
det(province-39, the-38)
prep_of(part-36, province-39)
prep_of(province-39, Salamanca-41)
prep_of(part-20, RBR-43)

In chemistry , a Ligand is either an atom , ion , or molecule - LBR - see also : functional group - RBR - that bonds to a central metal , generally involving formal donation of one or more of its electrons .

prep_in(atom-9, chemistry-2)
det(Ligand-5, a-4)
nsubj(atom-9, Ligand-5)
cop(atom-9, is-6)
advmod(atom-9, either-7)
det(atom-9, an-8)
root(ROOT-0, atom-9)
conj_or(atom-9, ion-11)
conj_or(atom-9, molecule-14)
dep(atom-9, LBR-16)
dep(atom-9, see-18)
advmod(see-18, also-19)
amod(group-22, functional-21)
dep(atom-9, group-22)
dep(group-22, RBR-24)
det(bonds-27, that-26)
dep(atom-9, bonds-27)
det(metal-31, a-29)
amod(metal-31, central-30)
prep_to(atom-9, metal-31)
advmod(involving-34, generally-33)
partmod(atom-9, involving-34)
amod(donation-36, formal-35)
dobj(involving-34, donation-36)
prep_of(donation-36, one-38)
prep_of(donation-36, more-40)
conj_or(one-38, more-40)
quantmod(one-38, more-40)
poss(electrons-43, its-42)
prep_of(one-38, electrons-43)

A Liqueur is a sweet alcoholic beverage , often flavored with fruits , herbs , spices , flowers , seeds , roots , plants , barks , and sometimes cream .

det(Liqueur-2, A-1)
nsubj(cream-30, Liqueur-2)
cop(cream-30, is-3)
det(cream-30, a-4)
amod(cream-30, sweet-5)
amod(beverage-7, alcoholic-6)
dep(sweet-5, beverage-7)
advmod(flavored-10, often-9)
amod(beverage-7, flavored-10)
prep_with(flavored-10, fruits-12)
prep_with(flavored-10, herbs-14)
conj_and(fruits-12, herbs-14)
prep_with(flavored-10, spices-16)
conj_and(fruits-12, spices-16)
prep_with(flavored-10, flowers-18)
conj_and(fruits-12, flowers-18)
prep_with(flavored-10, seeds-20)
conj_and(fruits-12, seeds-20)
prep_with(flavored-10, roots-22)
conj_and(fruits-12, roots-22)
prep_with(flavored-10, plants-24)
conj_and(fruits-12, plants-24)
prep_with(flavored-10, barks-26)
conj_and(fruits-12, barks-26)
prep_with(flavored-10, sometimes-29)
conj_and(fruits-12, sometimes-29)
root(ROOT-0, cream-30)

In mathematics , a Lemma - LBR - plural lemmata or lemmas ; from the Greek Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ® Ãƒâ „ Ã ‚ Ï $ Ãƒâ „ Ã ‚ Ï $ Ãƒâ „ Ã ‚ Â ± , `` lemma `` meaning `` anything which is received , such as a gift , profit , or a bribe .

prep_in(±-46, mathematics-2)
det(Lemma-5, a-4)
appos(mathematics-2, Lemma-5)
dep(mathematics-2, LBR-7)
nn(lemmata-10, plural-9)
dep(mathematics-2, lemmata-10)
dep(mathematics-2, lemmas-12)
conj_or(lemmata-10, lemmas-12)
det(Ã-19, the-15)
amod(Ã-19, Greek-16)
nn(Ã-19, Ãƒâ-17)
nn(Ã-19, „-18)
prep_from(mathematics-2, Ã-19)
partmod(mathematics-2, ‚-20)
nn(Ï-33, Â-21)
nn(Ï-33, Ãƒâ-23)
nn(Ï-33, „-24)
nn(Ï-33, Ã-25)
nn(Ï-33, ‚-26)
nn(Ï-33, Â-27)
nn(Ï-33, ®-28)
nn(Ï-33, Ãƒâ-29)
nn(Ï-33, „-30)
nn(Ï-33, Ã-31)
nn(Ï-33, ‚-32)
nsubj(„-42, Ï-33)
num(„-42, $-34)
number($-34, Ãƒâ-35)
number($-34, „-36)
nn(„-42, Ã-37)
nn(„-42, ‚-38)
nn(„-42, Ï-39)
amod(„-42, $-40)
dep($-40, Ãƒâ-41)
xcomp(‚-20, „-42)
nn(Â-45, Ã-43)
nn(Â-45, ‚-44)
nsubj(±-46, Â-45)
root(ROOT-0, ±-46)
nsubj(meaning-51, lemma-49)
dep(±-46, meaning-51)
dobj(meaning-51, anything-53)
nsubjpass(received-56, anything-53)
auxpass(received-56, is-55)
rcmod(anything-53, received-56)
det(gift-61, a-60)
prep_such_as(anything-53, gift-61)
prep_such_as(anything-53, profit-63)
conj_or(gift-61, profit-63)
det(bribe-67, a-66)
prep_such_as(anything-53, bribe-67)
conj_or(gift-61, bribe-67)

`` - RBR - is a proven proposition which is used as a stepping stone to a larger result rather than as a statement in-and-of itself .

nsubj(proposition-8, RBR-3)
cop(proposition-8, is-5)
det(proposition-8, a-6)
amod(proposition-8, proven-7)
root(ROOT-0, proposition-8)
nsubjpass(used-11, proposition-8)
nsubjpass(used-11', proposition-8)
auxpass(used-11, is-10)
rcmod(proposition-8, used-11)
rcmod(proposition-8, used-11')
conj_negcc(used-11, used-11')
det(stone-15, a-13)
amod(stone-15, stepping-14)
prep_as(used-11, stone-15)
det(result-19, a-17)
amod(result-19, larger-18)
prep_to(used-11, result-19)
det(in-and-of-25, a-23)
nn(in-and-of-25, statement-24)
prep_as(used-11', in-and-of-25)
advmod(in-and-of-25, itself-26)

The Flipper is the name of a particular bowling delivery used in cricket , generally by a leg spin bowler .

det(Flipper-2, The-1)
nsubj(name-5, Flipper-2)
cop(name-5, is-3)
det(name-5, the-4)
root(ROOT-0, name-5)
det(delivery-10, a-7)
amod(delivery-10, particular-8)
nn(delivery-10, bowling-9)
prep_of(name-5, delivery-10)
partmod(delivery-10, used-11)
prep_in(used-11, cricket-13)
advmod(used-11, generally-15)
det(bowler-20, a-17)
nn(bowler-20, leg-18)
nn(bowler-20, spin-19)
agent(used-11, bowler-20)

A Lexicographer is a person devoted to the study of lexicography , especially an author of a dictionary .

det(Lexicographer-2, A-1)
nsubj(person-5, Lexicographer-2)
cop(person-5, is-3)
det(person-5, a-4)
root(ROOT-0, person-5)
partmod(person-5, devoted-6)
det(study-9, the-8)
prep_to(devoted-6, study-9)
prep_of(study-9, lexicography-11)
advmod(person-5, especially-13)
det(author-15, an-14)
dep(person-5, author-15)
det(dictionary-18, a-17)
prep_of(author-15, dictionary-18)

In computer programming , Lint was the name originally given to a particular program that flagged suspicious and non-portable constructs - LBR - likely to be bugs - RBR - in C language source code .

nn(programming-3, computer-2)
prep_in(name-8, programming-3)
nsubj(name-8, Lint-5)
cop(name-8, was-6)
det(name-8, the-7)
root(ROOT-0, name-8)
advmod(name-8, originally-9)
prep(name-8, given-10)
pcomp(given-10, to-11)
det(program-14, a-12)
amod(program-14, particular-13)
prep_to(given-10, program-14)
nsubj(flagged-16, program-14)
rcmod(program-14, flagged-16)
amod(constructs-20, suspicious-17)
conj_and(suspicious-17, non-portable-19)
amod(constructs-20, non-portable-19)
dobj(flagged-16, constructs-20)
dep(constructs-20, LBR-22)
amod(constructs-20, likely-24)
aux(bugs-27, to-25)
cop(bugs-27, be-26)
xcomp(likely-24, bugs-27)
dep(bugs-27, RBR-29)
amod(code-35, C-32)
nn(code-35, language-33)
nn(code-35, source-34)
prep_in(bugs-27, code-35)

The Lupercal - LBR - `` lupa `` , Latin for she-wolf - RBR - is a cave at the foot of the Palatine Hill in Rome , between the Temple of Apollo Palatinus and the Basilica of Santa Anastasia .

det(Lupercal-2, The-1)
root(ROOT-0, Lupercal-2)
dep(Lupercal-2, LBR-4)
dep(Lupercal-2, lupa-7)
dep(RBR-14, Latin-10)
dep(Latin-10, for-11)
pobj(for-11, she-wolf-12)
dobj(lupa-7, RBR-14)
cop(cave-18, is-16)
det(cave-18, a-17)
parataxis(lupa-7, cave-18)
det(foot-21, the-20)
prep_at(cave-18, foot-21)
det(Hill-25, the-23)
nn(Hill-25, Palatine-24)
prep_of(foot-21, Hill-25)
prep_in(Hill-25, Rome-27)
det(Temple-31, the-30)
prep_between(Lupercal-2, Temple-31)
nn(Palatinus-34, Apollo-33)
prep_of(Temple-31, Palatinus-34)
det(Basilica-37, the-36)
prep_between(Lupercal-2, Basilica-37)
conj_and(Temple-31, Basilica-37)
nn(Anastasia-40, Santa-39)
prep_of(Basilica-37, Anastasia-40)

Lleida - LBR - Standard Central Catalan Ãƒâ $ '' Ã ‚ âˆšÃƒâ $ ¦ Ã ‚ â „ ejÃƒâˆžÃ ‚ Â ° Ãƒâ ‰ ˆÃ ‚ Ë ™ or North-Western Catalan -LRB- Ãƒâ $ '' Ã ‚ âˆšÃƒâ $ ¦ Ã ‚ â „ ejÃƒâˆžÃ ‚ Â ° Ãƒâ ‰ ˆÃ ‚ Ë -RRB- ; Castillian LÃƒâˆžÃ ‚ Â © rida -LRB- Ãƒâ $ '' Ã ‚ âˆšleÃƒâ ‰ ˆÃ ‚ â ‰ $ iÃƒâˆžÃ ‚ Â ° a -RRB- , though officially referred as Lleida - RBR - is a city in the west of Catalonia , Spain .

root(ROOT-0, Lleida-1)
dep(Lleida-1, LBR-3)
nn(Ã-11, Standard-5)
nn(Ã-11, Central-6)
nn(Ã-11, Catalan-7)
nn(Ã-11, Ãƒâ-8)
nn(Ã-11, $-9)
dep(LBR-3, Ã-11)
punct(Lleida-1, ‚-12)
dep(Lleida-1, âˆšÃƒâ-13)
dobj(âˆšÃƒâ-13, $-14)
num($-14, ¦-15)
nn(Ë-28, Ã-16)
punct(Ë-28, ‚-17)
nn(Ë-28, â-18)
punct(Ë-28, „-19)
nn(Ë-28, ejÃƒâˆžÃ-20)
punct(Ë-28, ‚-21)
nn(Ë-28, Â-22)
punct(Ë-28, °-23)
nn(Ë-28, Ãƒâ-24)
punct(Ë-28, ‰-25)
nn(Ë-28, ˆÃ-26)
punct(Ë-28, ‚-27)
dobj(âˆšÃƒâ-13, Ë-28)
dep($-14, Ë-28)
punct(Ë-28, ™-29)
dep(Lleida-1, or-30)
nn($-35, North-Western-31)
nn($-35, Catalan-32)
nn($-35, Ãƒâ-34)
dep(Lleida-1, $-35)
nn(Â-78, Ã-37)
nn(Â-78, ‚-38)
punct($-40, âˆšÃƒâ-39)
dep(Â-78, $-40)
num($-40, ¦-41)
nn(Ãƒâ-50, Ã-42)
punct(Ãƒâ-50, ‚-43)
nn(Ãƒâ-50, â-44)
punct(Ãƒâ-50, „-45)
nn(Ãƒâ-50, ejÃƒâˆžÃ-46)
punct(Ãƒâ-50, ‚-47)
nn(Ãƒâ-50, Â-48)
punct(Ãƒâ-50, °-49)
dep($-40, Ãƒâ-50)
punct($-40, ‰-51)
punct(Ë-54, ˆÃ-52)
nn(Ë-54, ‚-53)
dep($-40, Ë-54)
nn(Ã-67, Castillian-57)
nn(Ã-67, LÃƒâˆžÃ-58)
punct(Ã-67, ‚-59)
nn(Ã-67, Â-60)
punct(Ã-67, ©-61)
nn(Ã-67, rida-62)
nn(Ã-67, Ãƒâ-64)
nn(Ã-67, $-65)
dep(Ë-54, Ã-67)
punct($-40, ‚-68)
dep($-40, âˆšleÃƒâ-69)
punct(âˆšleÃƒâ-69, ‰-70)
dep(â-73, ˆÃ-71)
punct(â-73, ‚-72)
dep(âˆšleÃƒâ-69, â-73)
punct(â-73, ‰-74)
dep(â-73, $-75)
dep($-75, iÃƒâˆžÃ-76)
punct($-75, ‚-77)
dep($-35, Â-78)
punct($-35, °-79)
dep(referred-85, a-80)
mark(referred-85, though-83)
advmod(referred-85, officially-84)
nsubj(city-93, referred-85)
prep_as(referred-85, Lleida-87)
dep(referred-85, RBR-89)
cop(city-93, is-91)
det(city-93, a-92)
dep($-35, city-93)
det(west-96, the-95)
prep_in(city-93, west-96)
nn(Spain-100, Catalonia-98)
prep_of(west-96, Spain-100)

A Mural is a painting on a wall , ceiling , or other large permanent surface .

det(Mural-2, A-1)
nsubj(painting-5, Mural-2)
cop(painting-5, is-3)
det(painting-5, a-4)
root(ROOT-0, painting-5)
det(wall-8, a-7)
prep_on(painting-5, wall-8)
prep_on(painting-5, ceiling-10)
conj_or(wall-8, ceiling-10)
amod(surface-16, other-13)
amod(surface-16, large-14)
amod(surface-16, permanent-15)
prep_on(painting-5, surface-16)
conj_or(wall-8, surface-16)

In cryptography , MD5 - LBR - Message-Digest algorithm 5 - RBR - is a widely used , partially insecure cryptographic hash function with a 128-bit hash value .

prep_in(function-23, cryptography-2)
nsubj(function-23, MD5-4)
nn(RBR-12, LBR-6)
dep(RBR-12, Message-Digest-8)
number(5-10, algorithm-9)
num(Message-Digest-8, 5-10)
dep(MD5-4, RBR-12)
cop(function-23, is-14)
det(function-23, a-15)
advmod(used-17, widely-16)
amod(function-23, used-17)
advmod(insecure-20, partially-19)
amod(function-23, insecure-20)
amod(function-23, cryptographic-21)
nn(function-23, hash-22)
root(ROOT-0, function-23)
det(value-28, a-25)
amod(value-28, 128-bit-26)
nn(value-28, hash-27)
prep_with(function-23, value-28)

In probability theory and statistics , a Median is described as the number separating the higher half of a sample , a population , or a probability distribution , from the lower half .

nn(theory-3, probability-2)
prep_in(described-10, theory-3)
conj_and(theory-3, statistics-5)
prep_in(described-10, statistics-5)
det(Median-8, a-7)
nsubjpass(described-10, Median-8)
auxpass(described-10, is-9)
root(ROOT-0, described-10)
det(number-13, the-12)
prep_as(described-10, number-13)
partmod(number-13, separating-14)
det(half-17, the-15)
amod(half-17, higher-16)
dobj(separating-14, half-17)
det(sample-20, a-19)
prep_of(half-17, sample-20)
det(population-23, a-22)
prep_of(half-17, population-23)
conj_or(sample-20, population-23)
det(distribution-28, a-26)
nn(distribution-28, probability-27)
prep_of(half-17, distribution-28)
conj_or(sample-20, distribution-28)
det(half-33, the-31)
amod(half-33, lower-32)
prep_from(separating-14, half-33)

In psychology , Memory is an organism 's ability to store , retain , and subsequently retrieve information .

prep_in(ability-9, psychology-2)
nsubj(ability-9, Memory-4)
cop(ability-9, is-5)
det(organism-7, an-6)
poss(ability-9, organism-7)
root(ROOT-0, ability-9)
aux(store-11, to-10)
infmod(ability-9, store-11)
infmod(ability-9, retain-13)
conj_and(store-11, retain-13)
advmod(retrieve-17, subsequently-16)
infmod(ability-9, retrieve-17)
conj_and(store-11, retrieve-17)
dobj(retrieve-17, information-18)

A Mouse - LBR - plural mice - RBR - is a small animal that belongs to one of numerous species of rodents .

nn(RBR-9, A-1)
nn(RBR-9, Mouse-2)
dep(RBR-9, LBR-4)
nn(mice-7, plural-6)
dep(LBR-4, mice-7)
root(ROOT-0, RBR-9)
dep(RBR-9, is-11)
det(animal-14, a-12)
amod(animal-14, small-13)
nsubj(is-11, animal-14)
nsubj(belongs-16, animal-14)
rcmod(animal-14, belongs-16)
prep_to(belongs-16, one-18)
amod(species-21, numerous-20)
prep_of(one-18, species-21)
prep_of(species-21, rodents-23)

In morpheme-based morphology , a Morpheme is the smallest linguistic unit that has semantic meaning .

amod(morphology-3, morpheme-based-2)
prep_in(unit-11, morphology-3)
det(Morpheme-6, a-5)
nsubj(unit-11, Morpheme-6)
cop(unit-11, is-7)
det(unit-11, the-8)
amod(unit-11, smallest-9)
amod(unit-11, linguistic-10)
root(ROOT-0, unit-11)
nsubj(has-13, unit-11)
rcmod(unit-11, has-13)
amod(meaning-15, semantic-14)
dobj(has-13, meaning-15)

A Model is a pattern , plan , representation - LBR - especially in miniature - RBR - , or description designed to show the main object or workings of an object , system , or concept .

det(Model-2, A-1)
nsubj(pattern-5, Model-2)
cop(pattern-5, is-3)
det(pattern-5, a-4)
root(ROOT-0, pattern-5)
conj_or(pattern-5, plan-7)
appos(plan-7, representation-9)
dep(plan-7, LBR-11)
advmod(plan-7, especially-13)
advmod(RBR-17, in-14)
amod(RBR-17, miniature-15)
dep(plan-7, RBR-17)
conj_or(pattern-5, description-21)
xsubj(show-24, description-21)
partmod(description-21, designed-22)
aux(show-24, to-23)
xcomp(designed-22, show-24)
det(object-27, the-25)
amod(object-27, main-26)
dobj(show-24, object-27)
dobj(show-24, workings-29)
conj_or(object-27, workings-29)
det(object-32, an-31)
prep_of(workings-29, object-32)
prep_of(workings-29, system-34)
conj_or(object-32, system-34)
prep_of(workings-29, concept-37)
conj_or(object-32, concept-37)

A Mandolin is a musical instrument in the lute family - LBR - plucked , or strummed - RBR - .

det(Mandolin-2, A-1)
nsubj(instrument-6, Mandolin-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, musical-5)
root(ROOT-0, instrument-6)
det(family-10, the-8)
amod(family-10, lute-9)
prep_in(instrument-6, family-10)
dep(family-10, LBR-12)
partmod(family-10, plucked-14)
partmod(family-10, strummed-17)
conj_or(plucked-14, strummed-17)
dep(instrument-6, RBR-19)

A Mathematician is a person whose primary area of study and research is the field of mathematics .

det(Mathematician-2, A-1)
nsubj(person-5, Mathematician-2)
cop(person-5, is-3)
det(person-5, a-4)
root(ROOT-0, person-5)
poss(area-8, person-5)
amod(area-8, primary-7)
nsubj(field-15, area-8)
prep_of(area-8, study-10)
prep_of(area-8, research-12)
conj_and(study-10, research-12)
cop(field-15, is-13)
det(field-15, the-14)
rcmod(person-5, field-15)
prep_of(field-15, mathematics-17)

In philosophy , Meta-ethics - LBR - sometimes called `` analytic ethics `` - RBR - is the branch of ethics that seeks to understand the nature of ethical properties , and ethical statements , attitudes , and judgments .

prep_in(called-9, philosophy-2)
nsubj(called-9, Meta-ethics-4)
dep(Meta-ethics-4, LBR-6)
advmod(called-9, sometimes-8)
root(ROOT-0, called-9)
amod(ethics-12, analytic-11)
dobj(called-9, ethics-12)
nsubj(seeks-23, ethics-12)
dep(ethics-12, RBR-15)
dep(ethics-12, is-17)
det(branch-19, the-18)
nsubj(is-17, branch-19)
prep_of(branch-19, ethics-21)
rcmod(ethics-12, seeks-23)
aux(understand-25, to-24)
xcomp(seeks-23, understand-25)
det(nature-27, the-26)
dobj(understand-25, nature-27)
amod(properties-30, ethical-29)
prep_of(nature-27, properties-30)
amod(statements-34, ethical-33)
dobj(understand-25, statements-34)
conj_and(nature-27, statements-34)
conj_and(nature-27, attitudes-36)
conj_and(statements-34, attitudes-36)
conj_and(nature-27, judgments-39)
conj_and(statements-34, judgments-39)

A Subject is an observer and an object is a thing observed .

det(Subject-2, A-1)
nsubj(observer-5, Subject-2)
cop(observer-5, is-3)
det(observer-5, an-4)
root(ROOT-0, observer-5)
det(object-8, an-7)
nsubj(thing-11, object-8)
cop(thing-11, is-9)
det(thing-11, a-10)
conj_and(observer-5, thing-11)
partmod(thing-11, observed-12)

The Myrtales are an order of flowering plants placed as a basal group within the rosid group of dicotyledons - LBR - not a member of eurosids I or eurosids II - RBR - .

det(Myrtales-2, The-1)
nsubj(order-5, Myrtales-2)
cop(order-5, are-3)
det(order-5, an-4)
root(ROOT-0, order-5)
amod(plants-8, flowering-7)
prep_of(order-5, plants-8)
partmod(plants-8, placed-9)
det(group-13, a-11)
amod(group-13, basal-12)
prep_as(placed-9, group-13)
det(group-17, the-15)
amod(group-17, rosid-16)
prep_within(group-13, group-17)
prep_of(group-17, dicotyledons-19)
nn(RBR-33, LBR-21)
advmod(II-31, not-23)
det(member-25, a-24)
pobj(not-23, member-25)
amod(I-28, eurosids-27)
prep_of(not-23, I-28)
prep_of(not-23, eurosids-30)
conj_or(I-28, eurosids-30)
dep(RBR-33, II-31)
dep(group-17, RBR-33)

The Malpighiales are a large order of flowering plants , included in the group named eurosids I in the recent APG classification .

det(Malpighiales-2, The-1)
nsubj(order-6, Malpighiales-2)
cop(order-6, are-3)
det(order-6, a-4)
amod(order-6, large-5)
ccomp(included-11, order-6)
amod(plants-9, flowering-8)
prep_of(order-6, plants-9)
root(ROOT-0, included-11)
det(group-14, the-13)
prep_in(included-11, group-14)
partmod(group-14, named-15)
dobj(named-15, eurosids-16)
nsubj(included-11, I-17)
det(classification-22, the-19)
amod(classification-22, recent-20)
nn(classification-22, APG-21)
prep_in(I-17, classification-22)

The Mississippian was a subperiod of the Carboniferous period lasting from roughly 359 to 318 Ma - LBR - million years ago - RBR - .

det(Mississippian-2, The-1)
nsubj(period-9, Mississippian-2)
cop(period-9, was-3)
det(period-9, a-4)
amod(period-9, subperiod-5)
det(Carboniferous-8, the-7)
prep_of(subperiod-5, Carboniferous-8)
root(ROOT-0, period-9)
partmod(period-9, lasting-10)
quantmod(318-15, roughly-12)
number(318-15, 359-13)
dep(318-15, to-14)
num(Ma-16, 318-15)
prep_from(lasting-10, Ma-16)
dep(Ma-16, LBR-18)
num(years-21, million-20)
npadvmod(ago-22, years-21)
advmod(lasting-10, ago-22)
dep(period-9, RBR-24)

In biology or life science , Meiosis - LBR - pronounced my-oh-sis - RBR - is a process of reduction division in which the number of chromosomes per cell is cut in half .

nn(science-5, biology-2)
conj_or(biology-2, life-4)
nn(science-5, life-4)
prep_in(process-18, science-5)
nsubj(process-18, Meiosis-7)
dep(Meiosis-7, LBR-9)
amod(my-oh-sis-12, pronounced-11)
dep(LBR-9, my-oh-sis-12)
dep(Meiosis-7, RBR-14)
cop(process-18, is-16)
det(process-18, a-17)
root(ROOT-0, process-18)
nn(division-21, reduction-20)
prep_of(process-18, division-21)
rel(cut-31, which-23)
det(number-25, the-24)
nsubjpass(cut-31, number-25)
prep_of(number-25, chromosomes-27)
prep_per(chromosomes-27, cell-29)
auxpass(cut-31, is-30)
rcmod(process-18, cut-31)
prep_in(cut-31, half-33)

The Miocene is a period of time that extends from about 23.03 to 5.33 million years before the present .

det(Miocene-2, The-1)
nsubj(period-5, Miocene-2)
cop(period-5, is-3)
det(period-5, a-4)
root(ROOT-0, period-5)
nsubj(extends-9, period-5)
prep_of(period-5, time-7)
rcmod(period-5, extends-9)
quantmod(23.03-12, about-11)
prep_from(extends-9, 23.03-12)
number(million-15, 5.33-14)
num(years-16, million-15)
prep_to(extends-9, years-16)
det(present-19, the-18)
prep_before(years-16, present-19)

A Monarchy is a form of government in which an individual rules as head of state , often for life or until abdication , and `` is wholly set apart from all other members of the state .

det(Monarchy-2, A-1)
nsubj(form-5, Monarchy-2)
cop(form-5, is-3)
det(form-5, a-4)
root(ROOT-0, form-5)
prep_of(form-5, government-7)
rel(rules-12, which-9)
det(individual-11, an-10)
nsubj(rules-12, individual-11)
nsubj(rules-12', individual-11)
nsubj(rules-12'', individual-11)
nsubjpass(set-29, individual-11)
rcmod(form-5, rules-12)
rcmod(form-5, rules-12')
rcmod(form-5, rules-12'')
conj_or(rules-12, rules-12')
conj_or(rules-12, rules-12'')
prep_as(rules-12, head-14)
prep_of(head-14, state-16)
advmod(rules-12, often-18)
prep_for(rules-12', life-20)
prep_until(rules-12'', abdication-23)
auxpass(set-29, is-27)
advmod(set-29, wholly-28)
rcmod(form-5, set-29)
conj_and(rules-12, set-29)
det(members-34, all-32)
amod(members-34, other-33)
prep_apart_from(set-29, members-34)
det(state-37, the-36)
prep_of(members-34, state-37)

`` The person who heads a monarchy is called a monarch .

det(person-3, The-2)
nsubj(heads-5, person-3)
nsubjpass(called-9, person-3)
rcmod(person-3, heads-5)
det(monarchy-7, a-6)
dobj(heads-5, monarchy-7)
auxpass(called-9, is-8)
root(ROOT-0, called-9)
det(monarch-11, a-10)
dobj(called-9, monarch-11)

A Municipality is an administrative entity composed of a clearly defined territory and its population and commonly denotes a city , town , or village , or a small grouping of them .

det(Municipality-2, A-1)
nsubj(entity-6, Municipality-2)
cop(entity-6, is-3)
det(entity-6, an-4)
amod(entity-6, administrative-5)
root(ROOT-0, entity-6)
dep(entity-6, composed-7)
det(territory-12, a-9)
advmod(defined-11, clearly-10)
amod(territory-12, defined-11)
prep_of(composed-7, territory-12)
poss(population-15, its-14)
prep_of(composed-7, population-15)
conj_and(territory-12, population-15)
advmod(denotes-18, commonly-17)
dep(entity-6, denotes-18)
conj_and(composed-7, denotes-18)
det(town-22, a-19)
nn(town-22, city-20)
dobj(denotes-18, town-22)
dobj(denotes-18, village-25)
conj_or(town-22, village-25)
det(grouping-30, a-28)
amod(grouping-30, small-29)
dobj(denotes-18, grouping-30)
conj_or(town-22, grouping-30)
prep_of(grouping-30, them-32)

In chemistry , a Metal - LBR - Greek : Metallon - RBR - is defined as an element that readily loses electrons to form positive ions - LBR - cations - RBR - and forms metallic bonds between other metal atoms - LBR - forming ionic bonds with non-metals - RBR - .

prep_in(defined-16, chemistry-2)
det(Metal-5, a-4)
nsubjpass(defined-16, Metal-5)
nn(RBR-13, LBR-7)
dep(RBR-13, Greek-9)
dep(Greek-9, Metallon-11)
dep(Metal-5, RBR-13)
auxpass(defined-16, is-15)
root(ROOT-0, defined-16)
det(element-19, an-18)
prep_as(defined-16, element-19)
nsubj(loses-22, element-19)
advmod(loses-22, readily-21)
rcmod(element-19, loses-22)
acomp(loses-22, electrons-23)
aux(form-25, to-24)
xcomp(electrons-23, form-25)
amod(ions-27, positive-26)
iobj(form-25, ions-27)
iobj(form-25, LBR-29)
conj_and(ions-27, LBR-29)
iobj(form-25, cations-31)
conj_and(ions-27, cations-31)
iobj(form-25, RBR-33)
conj_and(ions-27, RBR-33)
iobj(form-25, forms-36)
conj_and(ions-27, forms-36)
amod(bonds-38, metallic-37)
dobj(form-25, bonds-38)
amod(atoms-42, other-40)
nn(atoms-42, metal-41)
prep_between(bonds-38, atoms-42)
dep(bonds-38, LBR-44)
parataxis(loses-22, forming-46)
xcomp(loses-22, forming-46)
amod(bonds-48, ionic-47)
dobj(forming-46, bonds-48)
prep_with(forming-46, non-metals-50)
dep(non-metals-50, RBR-52)

Multipurpose Internet Mail Extensions - LBR - MIME - RBR - is an Internet standard that extends the format of e-mail to support text in character sets other than US-ASCII ; non-text attachments ; message bodies with multiple parts ; and header information in non-ASCII character sets .

nn(Extensions-4, Multipurpose-1)
nn(Extensions-4, Internet-2)
nn(Extensions-4, Mail-3)
nsubj(standard-15, Extensions-4)
nn(RBR-10, LBR-6)
dep(RBR-10, MIME-8)
dep(Extensions-4, RBR-10)
cop(standard-15, is-12)
det(standard-15, an-13)
nn(standard-15, Internet-14)
root(ROOT-0, standard-15)
nsubj(extends-17, standard-15)
rcmod(standard-15, extends-17)
det(format-19, the-18)
nsubj(support-23, format-19)
prep_of(format-19, e-mail-21)
aux(support-23, to-22)
xcomp(extends-17, support-23)
dobj(support-23, text-24)
nn(sets-27, character-26)
prep_in(support-23, sets-27)
dep(sets-27, other-28)
prep_than(sets-27, US-ASCII-30)
amod(attachments-33, non-text-32)
prep_in(support-23, attachments-33)
conj_and(sets-27, attachments-33)
nn(bodies-36, message-35)
prep_in(support-23, bodies-36)
conj_and(sets-27, bodies-36)
amod(parts-39, multiple-38)
prep_with(bodies-36, parts-39)
nn(information-43, header-42)
prep_in(support-23, information-43)
conj_and(sets-27, information-43)
amod(sets-47, non-ASCII-45)
nn(sets-47, character-46)
prep_in(information-43, sets-47)

A Mineral is a naturally occurring substance formed through geological processes that has a characteristic chemical composition , a highly ordered atomic structure and specific physical properties .

det(Mineral-2, A-1)
nsubj(substance-7, Mineral-2)
cop(substance-7, is-3)
det(substance-7, a-4)
advmod(occurring-6, naturally-5)
amod(substance-7, occurring-6)
root(ROOT-0, substance-7)
partmod(substance-7, formed-8)
amod(processes-11, geological-10)
prep_through(formed-8, processes-11)
nsubj(has-13, that-12)
rcmod(substance-7, has-13)
det(composition-17, a-14)
amod(composition-17, characteristic-15)
nn(composition-17, chemical-16)
dobj(has-13, composition-17)
det(structure-23, a-19)
advmod(ordered-21, highly-20)
amod(structure-23, ordered-21)
amod(structure-23, atomic-22)
dobj(has-13, structure-23)
conj_and(composition-17, structure-23)
amod(properties-27, specific-25)
amod(properties-27, physical-26)
dobj(has-13, properties-27)
conj_and(composition-17, properties-27)

The Macau Special Administrative Region , commonly known as Macau or Macao - LBR - mÃƒâˆžÃ ‚ Å `` kaÃƒâ $ ¦ Ã ‚ â $ ¦ , zh-tsp - RBR - , is one of the two special administrative regions of the People 's Republic of China , the other being Hong Kong .

det(Region-5, The-1)
nn(Region-5, Macau-2)
nn(Region-5, Special-3)
nn(Region-5, Administrative-4)
root(ROOT-0, Region-5)
advmod(known-8, commonly-7)
partmod(Region-5, known-8)
prep_as(known-8, Macau-10)
prep_as(known-8, Macao-12)
conj_or(Macau-10, Macao-12)
nn(Å-18, LBR-14)
nn(Å-18, mÃƒâˆžÃ-16)
nn(Å-18, ‚-17)
nsubj(kaÃƒâ-20, Å-18)
dep(Region-5, kaÃƒâ-20)
dobj(kaÃƒâ-20, $-21)
num($-21, ¦-22)
nn(‚-24, Ã-23)
nsubj(â-25, ‚-24)
rcmod($-21, â-25)
nsubj(one-35, $-26)
num($-26, ¦-27)
appos($-26, zh-tsp-29)
dep(zh-tsp-29, RBR-31)
cop(one-35, is-34)
ccomp(â-25, one-35)
det(regions-41, the-37)
num(regions-41, two-38)
amod(regions-41, special-39)
amod(regions-41, administrative-40)
prep_of(one-35, regions-41)
det(People-44, the-43)
poss(Republic-46, People-44)
prep_of(regions-41, Republic-46)
prep_of(Republic-46, China-48)
det(being-52, the-50)
amod(being-52, other-51)
appos(China-48, being-52)
nn(Kong-54, Hong-53)
dep(being-52, Kong-54)

The Maldives - LBR - or Maldive Islands - RBR - - LBR - Ãƒâ $ '' Ã ‚ âˆšmÃƒâ ‰ ˆÃ ‚ â $ šldaÃƒâ ‰ ˆÃ ‚ Âªvz or \/ Ãƒâ $ '' Ã ‚ âˆšmÃƒâ ‰ ˆÃ ‚ â $ šldiÃƒâ $ '' Ã ‚ âˆ † vz \/ - RBR - , officially the Republic of Maldives , is an island nation consisting of a group of atolls in the Indian Ocean .

det(Maldives-2, The-1)
nsubj(Ã-47, Maldives-2)
npadvmod(âˆšmÃƒâ-20, LBR-4)
dep(Islands-8, or-6)
nn(Islands-8, Maldive-7)
dep(LBR-4, Islands-8)
dep(Islands-8, RBR-10)
dep(LBR-4, LBR-13)
nn(Ã-18, Ãƒâ-15)
nn(Ã-18, $-16)
dep(LBR-13, Ã-18)
punct(LBR-13, ‚-19)
dep(Maldives-2, âˆšmÃƒâ-20)
punct(âˆšmÃƒâ-20, ‰-21)
punct(âˆšmÃƒâ-20, ˆÃ-22)
advmod(â-24, ‚-23)
dep(âˆšmÃƒâ-20, â-24)
dep(â-24, $-25)
num($-25, šldaÃƒâ-26)
punct(â-24, ‰-27)
punct(â-24, ˆÃ-28)
dep($-34, ‚-29)
nn($-34, Âªvz-30)
cc(Âªvz-30, or-31)
punct(Âªvz-30, \/-32)
nn($-34, Ãƒâ-33)
dep(âˆšmÃƒâ-38, $-34)
dep($-34, Ã-36)
punct(âˆšmÃƒâ-38, ‚-37)
dep(â-24, âˆšmÃƒâ-38)
punct(âˆšmÃƒâ-38, ‰-39)
dep(â-42, ˆÃ-40)
punct(â-42, ‚-41)
dep(âˆšmÃƒâ-38, â-42)
dep(Maldives-2, $-43)
num($-43, šldiÃƒâ-44)
num($-43, $-45)
root(ROOT-0, Ã-47)
punct(vz-51, ‚-48)
nn(vz-51, âˆ-49)
nn(vz-51, †-50)
nsubj(nation-66, vz-51)
punct(vz-51, \/-52)
dep(vz-51, RBR-54)
advmod(Republic-59, officially-57)
det(Republic-59, the-58)
rcmod(vz-51, Republic-59)
prep_of(Republic-59, Maldives-61)
cop(nation-66, is-63)
det(nation-66, an-64)
nn(nation-66, island-65)
ccomp(Ã-47, nation-66)
partmod(nation-66, consisting-67)
det(group-70, a-69)
prep_of(consisting-67, group-70)
prep_of(group-70, atolls-72)
det(Ocean-76, the-74)
nn(Ocean-76, Indian-75)
prep_in(atolls-72, Ocean-76)

A Mile is a unit of length , usually used to measure distance , in a number of different systems , including Imperial units , United States customary units and Norwegian \/ Swedish mil .

det(Mile-2, A-1)
nsubj(unit-5, Mile-2)
cop(unit-5, is-3)
det(unit-5, a-4)
root(ROOT-0, unit-5)
prep_of(unit-5, length-7)
advmod(used-10, usually-9)
partmod(length-7, used-10)
nn(distance-13, measure-12)
prep_to(used-10, distance-13)
det(number-17, a-16)
prep_in(length-7, number-17)
amod(systems-20, different-19)
prep_of(number-17, systems-20)
amod(units-24, Imperial-23)
prep_including(length-7, units-24)
nn(units-29, United-26)
nn(units-29, States-27)
amod(units-29, customary-28)
prep_including(length-7, units-29)
conj_and(units-24, units-29)
amod(mil-34, Norwegian-31)
amod(mil-34, \/-32)
amod(mil-34, Swedish-33)
prep_including(length-7, mil-34)
conj_and(units-24, mil-34)

A Manuscript is any document that is written by hand , as opposed to being printed or reproduced in some other way .

det(Manuscript-2, A-1)
nsubj(document-5, Manuscript-2)
cop(document-5, is-3)
det(document-5, any-4)
root(ROOT-0, document-5)
nsubjpass(written-8, document-5)
nsubjpass(reproduced-18, document-5)
auxpass(written-8, is-7)
rcmod(document-5, written-8)
agent(written-8, hand-10)
advmod(opposed-13, as-12)
amod(hand-10, opposed-13)
auxpass(printed-16, being-15)
prepc_to(written-8, printed-16)
rcmod(document-5, reproduced-18)
conj_or(written-8, reproduced-18)
det(way-22, some-20)
amod(way-22, other-21)
prep_in(reproduced-18, way-22)

The antonym of Misogyny is philogyny , love towards women .

det(antonym-2, The-1)
nsubj(is-5, antonym-2)
prep_of(antonym-2, Misogyny-4)
root(ROOT-0, is-5)
advmod(love-8, philogyny-6)
ccomp(is-5, love-8)
prep_towards(love-8, women-10)

Mauritius - LBR - pronounced : mÃƒâ ‰ ˆÃ ‚ Ë ™ Ãƒâ $ '' Ã ‚ âˆšrÃƒâ ‰ ˆÃ ‚ ÂªÃƒâ $ ¦ Ã ‚ âˆžÃƒâ ‰ ˆÃ ‚ Ë ™ s ; ÃƒâˆžÃ ‚ â „ le Maurice \/ il mÃƒâ ‰ ˆÃ ‚ â $ ° ' Ãƒâ $ ¦ Ã ‚ â „ cents is \/ ; Mauritian Creole : Maurice - RBR - , officially the Republic of Mauritius , RÃƒâˆžÃ ‚ Â © publique de Maurice , is an island nation off the coast of the African continent in the southwest Indian Ocean , about 900 kilometres - LBR - 560 mi - RBR - east of Madagascar .

nsubj(pronounced-5, Mauritius-1)
dep(Mauritius-1, LBR-3)
root(ROOT-0, pronounced-5)
nsubj(‰-8, mÃƒâ-7)
parataxis(pronounced-5, ‰-8)
punct(âˆšrÃƒâ-18, ˆÃ-9)
dep($-14, ‚-10)
nn($-14, Ë-11)
punct($-14, ™-12)
nn($-14, Ãƒâ-13)
dep(âˆšrÃƒâ-18, $-14)
dep($-14, Ã-16)
punct(âˆšrÃƒâ-18, ‚-17)
dep(‰-8, âˆšrÃƒâ-18)
punct(âˆšrÃƒâ-18, ‰-19)
dep(Ã-25, ˆÃ-20)
punct(Ã-25, ‚-21)
nn(Ã-25, ÂªÃƒâ-22)
nn(Ã-25, $-23)
nn(Ã-25, ¦-24)
dep(âˆšrÃƒâ-18, Ã-25)
punct(Ã-25, ‚-26)
dep(Ã-25, âˆžÃƒâ-27)
punct(âˆžÃƒâ-27, ‰-28)
dep(Ë-31, ˆÃ-29)
punct(Ë-31, ‚-30)
dep(âˆžÃƒâ-27, Ë-31)
punct(âˆšrÃƒâ-18, ™-32)
dep(‰-8, s-33)
poss(Ãƒâ-51, ÃƒâˆžÃ-35)
punct(ÃƒâˆžÃ-35, ‚-36)
nn(ÃƒâˆžÃ-35, â-37)
nn(ÃƒâˆžÃ-35, „-38)
nn(ÃƒâˆžÃ-35, le-39)
nn(ÃƒâˆžÃ-35, Maurice-40)
nn(ÃƒâˆžÃ-35, \/-41)
nn(ÃƒâˆžÃ-35, il-42)
nn(ÃƒâˆžÃ-35, mÃƒâ-43)
nn(ÃƒâˆžÃ-35, ‰-44)
nn(ÃƒâˆžÃ-35, ˆÃ-45)
nn(ÃƒâˆžÃ-35, ‚-46)
dep(ÃƒâˆžÃ-35, â-47)
amod(ÃƒâˆžÃ-35, $-48)
number($-48, °-49)
nsubj(Ã-54, Ãƒâ-51)
amod(Ãƒâ-51, $-52)
number($-52, ¦-53)
parataxis(pronounced-5, Ã-54)
punct(cents-58, ‚-55)
nn(cents-58, â-56)
punct(cents-58, „-57)
dobj(Ã-54, cents-58)
cop(\/-60, is-59)
rcmod(cents-58, \/-60)
nn(Creole-63, Mauritian-62)
nsubj(nation-87, Creole-63)
dep(Creole-63, Maurice-65)
dep(Maurice-65, RBR-67)
advmod(Republic-72, officially-70)
det(Republic-72, the-71)
appos(Creole-63, Republic-72)
prep_of(Republic-72, Mauritius-74)
nn(Maurice-82, RÃƒâˆžÃ-76)
punct(Maurice-82, ‚-77)
nn(Maurice-82, Â-78)
punct(Maurice-82, ©-79)
nn(Maurice-82, publique-80)
amod(Maurice-82, de-81)
appos(Creole-63, Maurice-82)
cop(nation-87, is-84)
det(nation-87, an-85)
nn(nation-87, island-86)
parataxis(pronounced-5, nation-87)
det(coast-90, the-89)
prep_off(nation-87, coast-90)
det(continent-94, the-92)
amod(continent-94, African-93)
prep_of(coast-90, continent-94)
det(Ocean-99, the-96)
amod(Ocean-99, southwest-97)
nn(Ocean-99, Indian-98)
prep_in(continent-94, Ocean-99)
quantmod(900-102, about-101)
num(kilometres-103, 900-102)
appos(Ocean-99, kilometres-103)
dep(Ocean-99, LBR-105)
num(mi-108, 560-107)
dep(Ocean-99, mi-108)
dep(Ocean-99, RBR-110)
advmod(Ocean-99, east-112)
prep_of(Ocean-99, Madagascar-114)

In mathematics , the concept of a `` Limit `` is used to describe the behavior of a function as its argument either `` gets close `` to some point , or as the argument becomes arbitrarily large .

prep_in(used-12, mathematics-2)
det(concept-5, the-4)
nsubjpass(used-12, concept-5)
xsubj(describe-14, concept-5)
det(Limit-9, a-7)
prep_of(concept-5, Limit-9)
auxpass(used-12, is-11)
root(ROOT-0, used-12)
aux(describe-14, to-13)
xcomp(used-12, describe-14)
det(behavior-16, the-15)
dobj(describe-14, behavior-16)
det(function-19, a-18)
prep_of(behavior-16, function-19)
mark(gets-25, as-20)
poss(argument-22, its-21)
nsubj(gets-25, argument-22)
advmod(gets-25, either-23)
dep(describe-14, gets-25)
dobj(gets-25, close-26)
det(point-30, some-29)
prep_to(gets-25, point-30)
mark(large-38, as-33)
det(argument-35, the-34)
nsubj(large-38, argument-35)
cop(large-38, becomes-36)
advmod(large-38, arbitrarily-37)
dep(describe-14, large-38)
conj_or(gets-25, large-38)

Richard Melville Hall , also known as Moby - LBR - born September 11 , 1965 in Harlem , New York - RBR - is an American DJ , songwriter , musician and singer .

nn(Hall-3, Richard-1)
nn(Hall-3, Melville-2)
root(ROOT-0, Hall-3)
advmod(known-6, also-5)
partmod(Hall-3, known-6)
prep_as(known-6, Moby-8)
nsubj(DJ-28, LBR-10)
partmod(LBR-10, born-12)
tmod(born-12, September-13)
num(September-13, 11-14)
num(September-13, 1965-16)
prep_in(born-12, Harlem-18)
nn(York-21, New-20)
appos(Harlem-18, York-21)
dep(York-21, RBR-23)
cop(DJ-28, is-25)
det(DJ-28, an-26)
amod(DJ-28, American-27)
dep(Hall-3, DJ-28)
dep(Hall-3, songwriter-30)
conj_and(DJ-28, songwriter-30)
dep(Hall-3, musician-32)
conj_and(DJ-28, musician-32)
dep(Hall-3, singer-34)
conj_and(DJ-28, singer-34)

The word Mazda means `` great wisdom `` in the Iranian Avestan language .

det(Mazda-3, The-1)
nn(Mazda-3, word-2)
nsubj(means-4, Mazda-3)
root(ROOT-0, means-4)
amod(wisdom-7, great-6)
dobj(means-4, wisdom-7)
det(language-13, the-10)
amod(language-13, Iranian-11)
nn(language-13, Avestan-12)
prep_in(wisdom-7, language-13)

A Minute is a unit of measurement of time or of angle .

det(Minute-2, A-1)
nsubj(unit-5, Minute-2)
cop(unit-5, is-3)
det(unit-5, a-4)
root(ROOT-0, unit-5)
prep_of(unit-5, measurement-7)
prep_of(measurement-7, time-9)
conj_or(unit-5, of-11)
prep_of(unit-5, angle-12)

Microelectronics is a term also used to describe the design and manufacture of hybrid microcircuits or hybrid integrated circuit .

nsubj(term-4, Microelectronics-1)
cop(term-4, is-2)
det(term-4, a-3)
root(ROOT-0, term-4)
xsubj(describe-8, term-4)
advmod(used-6, also-5)
partmod(term-4, used-6)
aux(describe-8, to-7)
xcomp(used-6, describe-8)
det(design-10, the-9)
dobj(describe-8, design-10)
dobj(describe-8, manufacture-12)
conj_and(design-10, manufacture-12)
amod(microcircuits-15, hybrid-14)
prep_of(design-10, microcircuits-15)
amod(circuit-19, hybrid-17)
amod(circuit-19, integrated-18)
prep_of(design-10, circuit-19)
conj_or(microcircuits-15, circuit-19)

In mathematics , a Group is a fundamental object of the field of abstract algebra .

prep_in(object-9, mathematics-2)
det(Group-5, a-4)
nsubj(object-9, Group-5)
cop(object-9, is-6)
det(object-9, a-7)
amod(object-9, fundamental-8)
root(ROOT-0, object-9)
det(field-12, the-11)
prep_of(object-9, field-12)
amod(algebra-15, abstract-14)
prep_of(field-12, algebra-15)

In mathematics , especially set theory , and logic , a Relation is a property that assigns truth values to combinations - LBR - k-tuples - RBR - of k individuals .

prep_in(property-15, mathematics-2)
advmod(theory-6, especially-4)
nn(theory-6, set-5)
conj_and(mathematics-2, theory-6)
prep_in(property-15, theory-6)
conj_and(mathematics-2, logic-9)
prep_in(property-15, logic-9)
det(Relation-12, a-11)
nsubj(property-15, Relation-12)
cop(property-15, is-13)
det(property-15, a-14)
root(ROOT-0, property-15)
nsubj(assigns-17, property-15)
rcmod(property-15, assigns-17)
nn(values-19, truth-18)
dobj(assigns-17, values-19)
prep_to(values-19, combinations-21)
dep(values-19, LBR-23)
dep(values-19, k-tuples-25)
dep(values-19, RBR-27)
nn(individuals-31, k-30)
prep_of(values-19, individuals-31)

In mathematics , a Morphism is an abstraction derived from structure-preserving mappings between two mathematical structures .

prep_in(abstraction-8, mathematics-2)
det(Morphism-5, a-4)
nsubj(abstraction-8, Morphism-5)
cop(abstraction-8, is-6)
det(abstraction-8, an-7)
root(ROOT-0, abstraction-8)
partmod(abstraction-8, derived-9)
amod(mappings-12, structure-preserving-11)
prep_from(derived-9, mappings-12)
num(structures-16, two-14)
amod(structures-16, mathematical-15)
prep_between(mappings-12, structures-16)

In theology , Monotheism - LBR - from Greek lang `` one `` and lang `` god `` - RBR - is the belief in the existence of one deity , or in the oneness of God .

prep_in(belief-24, theology-2)
nsubj(belief-24, Monotheism-4)
dep(Monotheism-4, LBR-6)
dep(LBR-6, from-8)
amod(one-12, Greek-9)
amod(one-12, lang-10)
pobj(from-8, one-12)
nn(RBR-20, lang-15)
nn(RBR-20, god-17)
pobj(from-8, RBR-20)
conj_and(one-12, RBR-20)
cop(belief-24, is-22)
det(belief-24, the-23)
root(ROOT-0, belief-24)
det(existence-27, the-26)
prep_in(belief-24, existence-27)
num(deity-30, one-29)
prep_of(existence-27, deity-30)
det(oneness-35, the-34)
prep_in(belief-24, oneness-35)
conj_or(existence-27, oneness-35)
prep_of(oneness-35, God-37)

In computer gaming , a MUD - LBR - Multi-User Dungeon , Domain or Dimension - RBR - is a multi-player computer game that combines elements of role-playing games , hack and slash style computer games and social chat rooms .

nn(gaming-3, computer-2)
prep_in(game-23, gaming-3)
det(MUD-6, a-5)
nsubj(game-23, MUD-6)
nn(RBR-17, LBR-8)
nn(Dungeon-11, Multi-User-10)
dep(RBR-17, Dungeon-11)
appos(Dungeon-11, Domain-13)
appos(Dungeon-11, Dimension-15)
conj_or(Domain-13, Dimension-15)
dep(MUD-6, RBR-17)
cop(game-23, is-19)
det(game-23, a-20)
amod(game-23, multi-player-21)
nn(game-23, computer-22)
root(ROOT-0, game-23)
nsubj(combines-25, game-23)
rcmod(game-23, combines-25)
dobj(combines-25, elements-26)
nn(games-29, role-playing-28)
prep_of(elements-26, games-29)
dep(combines-25, hack-31)
dep(combines-25, slash-33)
conj_and(hack-31, slash-33)
nn(games-36, style-34)
nn(games-36, computer-35)
dobj(hack-31, games-36)
amod(rooms-40, social-38)
nn(rooms-40, chat-39)
dobj(hack-31, rooms-40)
conj_and(games-36, rooms-40)

A Muslim - LBR - ÃƒË ™ Ã ‚ âˆ ` ÃƒË˜Ã ‚ â $ œÃƒË ™ Ã ‚ â ‰ ¥ ÃƒË ™ Ã ‚ â ` - RBR - is an adherent of the religion of Islam .

det(‚-26, A-1)
amod(‚-26, Muslim-2)
dep(Muslim-2, LBR-4)
nn(‚-26, ÃƒË-6)
nn(‚-26, ™-7)
nn(‚-26, Ã-8)
nn(‚-26, ‚-9)
nn(‚-26, âˆ-10)
amod(‚-26, ÃƒË˜Ã-12)
amod(‚-26, ‚-13)
amod(‚-26, â-14)
num(‚-26, $-15)
number($-15, œÃƒË-16)
number($-15, ™-17)
nn(‚-26, Ã-18)
nn(‚-26, ‚-19)
nn(‚-26, â-20)
nn(‚-26, ‰-21)
nn(‚-26, ¥-22)
nn(‚-26, ÃƒË-23)
nn(‚-26, ™-24)
nn(‚-26, Ã-25)
nsubj(â-27, ‚-26)
root(ROOT-0, â-27)
nsubj(adherent-34, RBR-30)
cop(adherent-34, is-32)
det(adherent-34, an-33)
ccomp(â-27, adherent-34)
det(religion-37, the-36)
prep_of(adherent-34, religion-37)
prep_of(religion-37, Islam-39)

A MUSH - LBR - sometimes said to be an abbreviation for Multi-User Shared Hack , Habitat , Holodeck , or Hallucination , though these are backronyms - RBR - is a text-based online social medium to which multiple users are connected at the same time .

det(MUSH-2, A-1)
nsubj(said-7, MUSH-2)
xsubj(abbreviation-11, MUSH-2)
dep(MUSH-2, LBR-4)
advmod(said-7, sometimes-6)
root(ROOT-0, said-7)
aux(abbreviation-11, to-8)
cop(abbreviation-11, be-9)
det(abbreviation-11, an-10)
xcomp(said-7, abbreviation-11)
nn(Hack-15, Multi-User-13)
nn(Hack-15, Shared-14)
prep_for(abbreviation-11, Hack-15)
prep_for(abbreviation-11, Habitat-17)
conj_or(Hack-15, Habitat-17)
prep_for(abbreviation-11, Holodeck-19)
conj_or(Hack-15, Holodeck-19)
prep_for(abbreviation-11, Hallucination-22)
conj_or(Hack-15, Hallucination-22)
mark(backronyms-27, though-24)
nsubj(backronyms-27, these-25)
cop(backronyms-27, are-26)
advcl(abbreviation-11, backronyms-27)
dep(backronyms-27, RBR-29)
cop(medium-36, is-31)
det(medium-36, a-32)
amod(medium-36, text-based-33)
amod(medium-36, online-34)
amod(medium-36, social-35)
rcmod(backronyms-27, medium-36)
rel(connected-42, which-38)
amod(users-40, multiple-39)
nsubjpass(connected-42, users-40)
auxpass(connected-42, are-41)
rcmod(medium-36, connected-42)
det(time-46, the-44)
amod(time-46, same-45)
prep_at(connected-42, time-46)

In chemistry , a Molecule is defined as a sufficiently stable electrically neutral group of at least two atoms in a definite arrangement held together by very strong chemical bonds .

prep_in(defined-7, chemistry-2)
det(Molecule-5, a-4)
nsubjpass(defined-7, Molecule-5)
auxpass(defined-7, is-6)
root(ROOT-0, defined-7)
det(group-14, a-9)
advmod(stable-11, sufficiently-10)
amod(group-14, stable-11)
advmod(neutral-13, electrically-12)
amod(group-14, neutral-13)
prep_as(defined-7, group-14)
quantmod(two-18, at-16)
mwe(at-16, least-17)
pobj(at-16, least-17)
num(atoms-19, two-18)
prep_of(group-14, atoms-19)
det(arrangement-23, a-21)
amod(arrangement-23, definite-22)
prep_in(defined-7, arrangement-23)
partmod(arrangement-23, held-24)
advmod(held-24, together-25)
advmod(strong-28, very-27)
amod(bonds-30, strong-28)
nn(bonds-30, chemical-29)
agent(held-24, bonds-30)

The term Midrash can also refer to a compilation of homiletic teachings - LBR - commentaries - RBR - on the Tanakh - LBR - Hebrew Bible - RBR - , in the form of legal and ritual - LBR - Halakha - RBR - and legendary , moralizing , folkloristic , and anecdotal - LBR - Aggadah - RBR - parts .

det(Midrash-3, The-1)
nn(Midrash-3, term-2)
nsubj(refer-6, Midrash-3)
aux(refer-6, can-4)
advmod(refer-6, also-5)
root(ROOT-0, refer-6)
det(compilation-9, a-8)
prep_to(refer-6, compilation-9)
amod(teachings-12, homiletic-11)
prep_of(compilation-9, teachings-12)
prep_of(compilation-9, LBR-14)
conj_and(teachings-12, LBR-14)
prep_of(compilation-9, commentaries-16)
conj_and(teachings-12, commentaries-16)
dep(commentaries-16, RBR-18)
det(Tanakh-22, the-21)
prep_on(commentaries-16, Tanakh-22)
prep_of(compilation-9, LBR-24)
conj_and(teachings-12, LBR-24)
nn(Bible-27, Hebrew-26)
prep_of(compilation-9, Bible-27)
conj_and(teachings-12, Bible-27)
dep(Bible-27, RBR-29)
det(form-34, the-33)
prep_in(Bible-27, form-34)
prep_of(form-34, legal-36)
prep_of(form-34, ritual-38)
conj_and(legal-36, ritual-38)
prep_of(compilation-9, LBR-40)
conj_and(teachings-12, LBR-40)
prep_of(compilation-9, Halakha-42)
conj_and(teachings-12, Halakha-42)
prep_of(compilation-9, RBR-44)
conj_and(teachings-12, RBR-44)
amod(parts-62, legendary-47)
amod(parts-62, moralizing-49)
conj_and(moralizing-49, folkloristic-51)
amod(parts-62, folkloristic-51)
conj_and(moralizing-49, anecdotal-54)
amod(parts-62, anecdotal-54)
nn(parts-62, LBR-56)
dep(parts-62, Aggadah-58)
dep(Aggadah-58, RBR-60)
prep_of(compilation-9, parts-62)
conj_and(teachings-12, parts-62)

A Monomer - LBR - from Greek mono `` one `` and meros `` part `` - RBR - is a small molecule that may become chemically bonded to other monomers to form a polymer .

det(Monomer-2, A-1)
nsubj(molecule-23, Monomer-2)
dep(Monomer-2, LBR-4)
dep(LBR-4, from-6)
amod(one-10, Greek-7)
amod(one-10, mono-8)
pobj(from-6, one-10)
nn(RBR-18, meros-13)
nn(RBR-18, part-15)
pobj(from-6, RBR-18)
conj_and(one-10, RBR-18)
cop(molecule-23, is-20)
det(molecule-23, a-21)
amod(molecule-23, small-22)
root(ROOT-0, molecule-23)
nsubj(bonded-28, molecule-23)
aux(bonded-28, may-25)
cop(bonded-28, become-26)
nn(bonded-28, chemically-27)
rcmod(molecule-23, bonded-28)
amod(monomers-31, other-30)
prep_to(bonded-28, monomers-31)
aux(form-33, to-32)
xcomp(bonded-28, form-33)
det(polymer-35, a-34)
dobj(form-33, polymer-35)

In science , Matter is commonly defined as the substance of which physical objects are composed , not counting the contribution of various energy or force-fields , which are not usually considered to be matter per se - LBR - though they may contribute to the mass of objects - RBR - .

prep_in(defined-7, science-2)
nsubjpass(defined-7, Matter-4)
auxpass(defined-7, is-5)
advmod(defined-7, commonly-6)
root(ROOT-0, defined-7)
dep(defined-7, as-8)
det(substance-10, the-9)
pobj(as-8, substance-10)
rel(composed-16, which-12)
amod(objects-14, physical-13)
nsubjpass(composed-16, objects-14)
auxpass(composed-16, are-15)
rcmod(substance-10, composed-16)
neg(counting-19, not-18)
dep(as-8, counting-19)
det(contribution-21, the-20)
dobj(counting-19, contribution-21)
amod(energy-24, various-23)
prep_of(contribution-21, energy-24)
nsubjpass(considered-32, energy-24)
prep_of(contribution-21, force-fields-26)
conj_or(energy-24, force-fields-26)
nsubjpass(considered-32, force-fields-26)
auxpass(considered-32, are-29)
neg(considered-32, not-30)
advmod(considered-32, usually-31)
rcmod(energy-24, considered-32)
aux(matter-35, to-33)
cop(matter-35, be-34)
xcomp(considered-32, matter-35)
nn(se-37, per-36)
advmod(matter-35, se-37)
dep(contribute-44, LBR-39)
dep(contribute-44, though-41)
nsubj(contribute-44, they-42)
aux(contribute-44, may-43)
dep(contribution-21, contribute-44)
det(mass-47, the-46)
prep_to(contribute-44, mass-47)
prep_of(mass-47, objects-49)
advmod(contribute-44, RBR-51)

In cell biology , a Mitochondrion - LBR - plural mitochondria - RBR - is a membrane-enclosed organelle found in most eukaryotic cells .

nn(biology-3, cell-2)
prep_in(organelle-18, biology-3)
det(mitochondria-11, a-5)
nn(mitochondria-11, Mitochondrion-6)
dep(mitochondria-11, LBR-8)
nn(mitochondria-11, plural-10)
nsubj(organelle-18, mitochondria-11)
dep(mitochondria-11, RBR-13)
cop(organelle-18, is-15)
det(organelle-18, a-16)
amod(organelle-18, membrane-enclosed-17)
root(ROOT-0, organelle-18)
partmod(organelle-18, found-19)
advmod(eukaryotic-22, most-21)
amod(cells-23, eukaryotic-22)
prep_in(found-19, cells-23)

A Missile - LBR - see also pronunciation differences - RBR - is a self-propelled , explosive projectile used as a weapon towards a target .

det(Missile-2, A-1)
nsubj(see-6, Missile-2)
dep(Missile-2, LBR-4)
root(ROOT-0, see-6)
advmod(projectile-18, also-7)
nn(differences-9, pronunciation-8)
nsubj(projectile-18, differences-9)
dep(differences-9, RBR-11)
cop(projectile-18, is-13)
det(projectile-18, a-14)
amod(projectile-18, self-propelled-15)
amod(projectile-18, explosive-17)
ccomp(see-6, projectile-18)
partmod(projectile-18, used-19)
det(weapon-22, a-21)
prep_as(used-19, weapon-22)
det(target-25, a-24)
prep_towards(weapon-22, target-25)

The MahÃƒâ ‰ ¥ Ã ‚ â „ cents bhÃƒâ ‰ ¥ Ã ‚ â „ cents rata - LBR - DevanÃƒâ ‰ ¥ Ã ‚ â „ cents garÃƒâ ‰ ¥ Ã ‚ : lang - RBR - is one of the two major Sanskrit mythological epics of ancient India , the other being the RÃƒâ ‰ ¥ Ã ‚ â „ cents mÃƒâ ‰ ¥ Ã ‚ â „ cents yaÃƒÂ ¡ Ã ‚ â $ ™ Ã ‚ Î © a .

det(‚-14, The-1)
nn(‚-14, MahÃƒâ-2)
nn(‚-14, ‰-3)
nn(‚-14, ¥-4)
nn(‚-14, Ã-5)
nn(‚-14, ‚-6)
nn(‚-14, â-7)
nn(‚-14, „-8)
nn(‚-14, cents-9)
nn(‚-14, bhÃƒâ-10)
nn(‚-14, ‰-11)
nn(‚-14, ¥-12)
nn(‚-14, Ã-13)
nsubj(â-15, ‚-14)
root(ROOT-0, â-15)
num(cents-17, „-16)
nsubj(one-41, cents-17)
amod(cents-17, rata-18)
nn(RBR-38, LBR-20)
nn(‚-34, DevanÃƒâ-22)
nn(‚-34, ‰-23)
nn(‚-34, ¥-24)
nn(‚-34, Ã-25)
nn(‚-34, ‚-26)
nn(‚-34, â-27)
nn(‚-34, „-28)
nn(‚-34, cents-29)
nn(‚-34, garÃƒâ-30)
nn(‚-34, ‰-31)
nn(‚-34, ¥-32)
nn(‚-34, Ã-33)
dep(RBR-38, ‚-34)
dep(‚-34, lang-36)
dep(cents-17, RBR-38)
cop(one-41, is-40)
ccomp(â-15, one-41)
det(epics-48, the-43)
num(epics-48, two-44)
amod(epics-48, major-45)
nn(epics-48, Sanskrit-46)
nn(epics-48, mythological-47)
prep_of(one-41, epics-48)
amod(India-51, ancient-50)
prep_of(one-41, India-51)
det(being-55, the-53)
amod(being-55, other-54)
appos(one-41, being-55)
det(‚-76, the-56)
nn(‚-76, RÃƒâ-57)
nn(‚-76, ‰-58)
nn(‚-76, ¥-59)
nn(‚-76, Ã-60)
nn(‚-76, ‚-61)
nn(‚-76, â-62)
nn(‚-76, „-63)
nn(‚-76, cents-64)
nn(‚-76, mÃƒâ-65)
nn(‚-76, ‰-66)
nn(‚-76, ¥-67)
nn(‚-76, Ã-68)
nn(‚-76, ‚-69)
nn(‚-76, â-70)
nn(‚-76, „-71)
nn(‚-76, cents-72)
nn(‚-76, yaÃƒÂ-73)
nn(‚-76, ¡-74)
nn(‚-76, Ã-75)
nsubj(â-77, ‚-76)
rcmod(being-55, â-77)
dobj(â-77, $-78)
num($-78, ™-79)
nn(©-83, Ã-80)
nn(©-83, ‚-81)
nn(©-83, Î-82)
dep($-78, ©-83)
dep($-78, a-84)

Multiple Virtual Storage , more commonly called MVS , was the most commonly used operating system on the System \/ 370 and System \/ 390 IBM mainframe computers .

nn(Storage-3, Multiple-1)
nn(Storage-3, Virtual-2)
nsubj(system-16, Storage-3)
advmod(commonly-6, more-5)
advmod(called-7, commonly-6)
partmod(Storage-3, called-7)
dobj(called-7, MVS-8)
cop(system-16, was-10)
det(system-16, the-11)
advmod(used-14, most-12)
advmod(used-14, commonly-13)
amod(system-16, used-14)
amod(system-16, operating-15)
root(ROOT-0, system-16)
det(370-21, the-18)
nn(370-21, System-19)
nn(370-21, \/-20)
prep_on(system-16, 370-21)
nn(computers-28, System-23)
nn(computers-28, \/-24)
num(computers-28, 390-25)
nn(computers-28, IBM-26)
nn(computers-28, mainframe-27)
prep_on(system-16, computers-28)
conj_and(370-21, computers-28)

In abstract algebra , a branch of mathematics , a Monoid is an algebraic structure with a single , associative binary operation and an identity element .

amod(algebra-3, abstract-2)
prep_in(structure-15, algebra-3)
det(branch-6, a-5)
appos(algebra-3, branch-6)
prep_of(branch-6, mathematics-8)
det(Monoid-11, a-10)
nsubj(structure-15, Monoid-11)
cop(structure-15, is-12)
det(structure-15, an-13)
amod(structure-15, algebraic-14)
root(ROOT-0, structure-15)
det(operation-22, a-17)
amod(operation-22, single-18)
amod(operation-22, associative-20)
amod(operation-22, binary-21)
prep_with(structure-15, operation-22)
det(element-26, an-24)
nn(element-26, identity-25)
prep_with(structure-15, element-26)
conj_and(operation-22, element-26)

Mallow may also refer to : marshmallow , a sweet originally made from the marsh mallow .

nsubj(refer-4, Mallow-1)
aux(refer-4, may-2)
advmod(refer-4, also-3)
root(ROOT-0, refer-4)
prep(refer-4, to-5)
dep(made-12, marshmallow-7)
det(sweet-10, a-9)
nsubj(made-12, sweet-10)
advmod(made-12, originally-11)
parataxis(refer-4, made-12)
det(mallow-16, the-14)
amod(mallow-16, marsh-15)
prep_from(made-12, mallow-16)

Mallow refers to the Malvi language of the Malwa region of India .

nsubj(refers-2, Mallow-1)
root(ROOT-0, refers-2)
det(language-6, the-4)
nn(language-6, Malvi-5)
prep_to(refers-2, language-6)
det(region-10, the-8)
nn(region-10, Malwa-9)
prep_of(language-6, region-10)
prep_of(region-10, India-12)

Audio Layer 3 , more commonly referred to as MP3 , is a digital audio encoding format using a form of lossy data compression .

nn(3-3, Audio-1)
nn(3-3, Layer-2)
nsubj(format-17, 3-3)
advmod(commonly-6, more-5)
advmod(referred-7, commonly-6)
partmod(3-3, referred-7)
quantmod(MP3-10, as-9)
prep_to(referred-7, MP3-10)
cop(format-17, is-12)
det(format-17, a-13)
amod(format-17, digital-14)
amod(format-17, audio-15)
nn(format-17, encoding-16)
root(ROOT-0, format-17)
partmod(format-17, using-18)
det(form-20, a-19)
dobj(using-18, form-20)
amod(compression-24, lossy-22)
nn(compression-24, data-23)
prep_of(form-20, compression-24)

A Module is a self-contained component of a system , which has a well-defined interface to the other components ; something is modular if it includes or uses modules which can be interchanged as units without disassembly of the module .

det(Module-2, A-1)
nsubj(component-6, Module-2)
cop(component-6, is-3)
det(component-6, a-4)
amod(component-6, self-contained-5)
root(ROOT-0, component-6)
det(system-9, a-8)
prep_of(component-6, system-9)
nsubj(has-12, system-9)
rcmod(system-9, has-12)
det(interface-15, a-13)
amod(interface-15, well-defined-14)
dobj(has-12, interface-15)
det(components-19, the-17)
amod(components-19, other-18)
prep_to(interface-15, components-19)
nsubj(modular-23, something-21)
cop(modular-23, is-22)
parataxis(component-6, modular-23)
mark(includes-26, if-24)
nsubj(includes-26, it-25)
nsubj(uses-28, it-25)
advcl(modular-23, includes-26)
advcl(modular-23, uses-28)
conj_or(includes-26, uses-28)
dobj(includes-26, modules-29)
nsubjpass(interchanged-33, modules-29)
aux(interchanged-33, can-31)
auxpass(interchanged-33, be-32)
rcmod(modules-29, interchanged-33)
prep_as(interchanged-33, units-35)
prep_without(interchanged-33, disassembly-37)
det(module-40, the-39)
prep_of(disassembly-37, module-40)

Mythology also refers to the branch of knowledge dealing with the collection , study and interpretation of myths , also known as mythography .

nsubj(refers-3, Mythology-1)
advmod(refers-3, also-2)
root(ROOT-0, refers-3)
det(branch-6, the-5)
prep_to(refers-3, branch-6)
prep_of(branch-6, knowledge-8)
partmod(knowledge-8, dealing-9)
det(collection-12, the-11)
prep_with(dealing-9, collection-12)
prep_with(dealing-9, study-14)
conj_and(collection-12, study-14)
prep_with(dealing-9, interpretation-16)
conj_and(collection-12, interpretation-16)
prep_of(collection-12, myths-18)
advmod(known-21, also-20)
partmod(myths-18, known-21)
prep_as(known-21, mythography-23)

A Microgyrus is an area of the cerebral cortex that includes only four cortical layers instead of six .

det(Microgyrus-2, A-1)
nsubj(area-5, Microgyrus-2)
cop(area-5, is-3)
det(area-5, an-4)
root(ROOT-0, area-5)
det(cortex-9, the-7)
amod(cortex-9, cerebral-8)
prep_of(area-5, cortex-9)
nsubj(includes-11, cortex-9)
rcmod(cortex-9, includes-11)
quantmod(four-13, only-12)
num(layers-15, four-13)
amod(layers-15, cortical-14)
dobj(includes-11, layers-15)
prep_instead_of(layers-15, six-18)

In physics , Magnetism is one of the phenomena by which materials exert attractive or repulsive forces on other materials .

prep_in(one-6, physics-2)
nsubj(one-6, Magnetism-4)
cop(one-6, is-5)
root(ROOT-0, one-6)
det(phenomena-9, the-8)
prep_of(one-6, phenomena-9)
rel(exert-13, which-11)
nsubj(exert-13, materials-12)
rcmod(phenomena-9, exert-13)
amod(forces-17, attractive-14)
conj_or(attractive-14, repulsive-16)
amod(forces-17, repulsive-16)
dobj(exert-13, forces-17)
amod(materials-20, other-19)
prep_on(forces-17, materials-20)

In mathematics , a Filter is a special subset of a partially ordered set .

prep_in(subset-9, mathematics-2)
det(Filter-5, a-4)
nsubj(subset-9, Filter-5)
cop(subset-9, is-6)
det(subset-9, a-7)
amod(subset-9, special-8)
root(ROOT-0, subset-9)
det(set-14, a-11)
advmod(ordered-13, partially-12)
amod(set-14, ordered-13)
prep_of(subset-9, set-14)

The Main - LBR - maÃƒâ ‰ ˆÃ ‚ Âªn - RBR - is a river in Germany , 524 & amp ; ; nbsp ; km - LBR - 329 miles - RBR - long - LBR - including White Main , 574 & amp ; ; nbsp ; km - LBR - 357 mi - RBR - - RBR - , and it is one of the more significant tributaries of the Rhine .

det(Main-2, The-1)
root(ROOT-0, Main-2)
nsubj(river-16, LBR-4)
nn(Âªn-10, maÃƒâ-6)
nn(Âªn-10, ‰-7)
nn(Âªn-10, ˆÃ-8)
nn(Âªn-10, ‚-9)
dep(LBR-4, Âªn-10)
dep(Âªn-10, RBR-12)
cop(river-16, is-14)
det(river-16, a-15)
dep(Main-2, river-16)
prep_in(river-16, Germany-18)
prep_in(river-16, 524-20)
conj_and(Germany-18, 524-20)
prep_in(river-16, amp-22)
conj_and(Germany-18, amp-22)
dep(river-16, nbsp-25)
dep(river-16, km-27)
dep(river-16, LBR-29)
num(miles-32, 329-31)
dep(river-16, miles-32)
dep(river-16, RBR-34)
advmod(river-16, long-36)
dep(river-16, LBR-38)
dep(river-16, including-40)
nn(Main-42, White-41)
pobj(including-40, Main-42)
appos(Main-42, 574-44)
appos(Main-42, amp-46)
conj_and(574-44, amp-46)
dep(Main-42, nbsp-49)
dep(Main-42, km-51)
dep(Main-42, LBR-53)
num(mi-56, 357-55)
dep(Main-42, mi-56)
dep(Main-42, RBR-58)
dep(river-16, RBR-61)
nsubj(one-67, it-65)
cop(one-67, is-66)
dep(Main-2, one-67)
conj_and(river-16, one-67)
det(tributaries-72, the-69)
advmod(significant-71, more-70)
amod(tributaries-72, significant-71)
prep_of(one-67, tributaries-72)
det(Rhine-75, the-74)
prep_of(tributaries-72, Rhine-75)

Memetics is a neo-Darwinian approach to evolutionary models of cultural information transfer based on the concept of the meme .

nsubj(approach-5, Memetics-1)
cop(approach-5, is-2)
det(approach-5, a-3)
amod(approach-5, neo-Darwinian-4)
root(ROOT-0, approach-5)
amod(models-8, evolutionary-7)
prep_to(approach-5, models-8)
amod(transfer-12, cultural-10)
nn(transfer-12, information-11)
prep_of(models-8, transfer-12)
partmod(transfer-12, based-13)
det(concept-16, the-15)
prep_on(based-13, concept-16)
det(meme-19, the-18)
prep_of(concept-16, meme-19)

The Morona is a tributary to the Amazon River , and flows parallel to the Pastaza and immediately to the west of it , and is the last stream of any importance on the northern side of the Amazon before reaching the Pongo de Manseriche .

det(Morona-2, The-1)
nsubj(tributary-5, Morona-2)
nsubj(flows-12, Morona-2)
cop(tributary-5, is-3)
det(tributary-5, a-4)
root(ROOT-0, tributary-5)
det(River-9, the-7)
nn(River-9, Amazon-8)
prep_to(tributary-5, River-9)
conj_and(tributary-5, flows-12)
dobj(flows-12, parallel-13)
det(Pastaza-16, the-15)
prep_to(flows-12, Pastaza-16)
advmod(flows-12, immediately-18)
conj(flows-12, immediately-18)
det(west-21, the-20)
prep_to(flows-12, west-21)
conj_and(Pastaza-16, west-21)
prep_of(west-21, it-23)
cop(stream-29, is-26)
det(stream-29, the-27)
amod(stream-29, last-28)
conj_and(tributary-5, stream-29)
det(importance-32, any-31)
prep_of(stream-29, importance-32)
det(side-36, the-34)
amod(side-36, northern-35)
prep_on(importance-32, side-36)
det(Amazon-39, the-38)
prep_of(side-36, Amazon-39)
prepc_before(tributary-5, reaching-41)
det(Manseriche-45, the-42)
nn(Manseriche-45, Pongo-43)
amod(Manseriche-45, de-44)
dobj(reaching-41, Manseriche-45)

In particle physics , a Meson is a strongly interacting boson - that is , a hadron with integer spin .

nn(physics-3, particle-2)
prep_in(boson-11, physics-3)
det(Meson-6, a-5)
nsubj(boson-11, Meson-6)
cop(boson-11, is-7)
det(boson-11, a-8)
advmod(interacting-10, strongly-9)
amod(boson-11, interacting-10)
root(ROOT-0, boson-11)
nsubj(hadron-17, that-13)
cop(hadron-17, is-14)
det(hadron-17, a-16)
rcmod(boson-11, hadron-17)
nn(spin-20, integer-19)
prep_with(hadron-17, spin-20)

A Motorcycle or motorbike is a single-track , two-wheeled motor vehicle powered by an engine .

det(Motorcycle-2, A-1)
nsubj(vehicle-11, Motorcycle-2)
conj_or(Motorcycle-2, motorbike-4)
nsubj(vehicle-11, motorbike-4)
cop(vehicle-11, is-5)
det(vehicle-11, a-6)
amod(vehicle-11, single-track-7)
amod(vehicle-11, two-wheeled-9)
nn(vehicle-11, motor-10)
root(ROOT-0, vehicle-11)
partmod(vehicle-11, powered-12)
det(engine-15, an-14)
agent(powered-12, engine-15)

A Map is a visual representation of an area .

det(Map-2, A-1)
nsubj(representation-6, Map-2)
cop(representation-6, is-3)
det(representation-6, a-4)
amod(representation-6, visual-5)
root(ROOT-0, representation-6)
det(area-9, an-8)
prep_of(representation-6, area-9)

A Macron , from Greek lang - LBR - makrÃƒâˆžÃ ‚ â $ œn - RBR - meaning `` long `` , is a diacritic Ãƒâ ‰ & nbsp ; Ã ‚ Â ¯ placed over or under a vowel which was originally used to mark a long - LBR - i. e. heavy - RBR - syllable in GrÃƒâˆžÃ ‚ Å `` co-Roman metrics , but has now been taken also to indicate that the vowel is long .

det(Macron-2, A-1)
dep(LBR-8, Macron-2)
dep(Macron-2, from-4)
amod(lang-6, Greek-5)
pobj(from-4, lang-6)
dep(â-12, LBR-8)
nn(‚-11, makrÃƒâˆžÃ-10)
nsubj(â-12, ‚-11)
nsubjpass(taken-71, ‚-11)
xsubj(indicate-74, ‚-11)
root(ROOT-0, â-12)
dobj(â-12, $-13)
num($-13, œn-14)
dep($-13, RBR-16)
xcomp(â-12, meaning-18)
dobj(meaning-18, long-20)
cop(‰-27, is-23)
det(‰-27, a-24)
amod(‰-27, diacritic-25)
nn(‰-27, Ãƒâ-26)
rcmod(long-20, ‰-27)
rcmod(long-20, nbsp-29)
conj_and(‰-27, nbsp-29)
nsubjpass(used-44, nbsp-29)
nn(¯-34, Ã-31)
nn(¯-34, ‚-32)
nn(¯-34, Â-33)
dep(nbsp-29, ¯-34)
partmod(¯-34, placed-35)
partmod(¯-34, placed-35')
conj_or(placed-35, placed-35')
det(vowel-40, a-39)
prep_over(placed-35, vowel-40)
prep_under(placed-35', vowel-40)
auxpass(used-44, was-42)
advmod(used-44, originally-43)
rcmod(‰-27, used-44)
rcmod(nbsp-29, used-44)
aux(mark-46, to-45)
xcomp(used-44, mark-46)
det(syllable-58, a-47)
amod(syllable-58, long-48)
dep(syllable-58, LBR-50)
nn(syllable-58, i.-52)
nn(syllable-58, e.-53)
nn(syllable-58, heavy-54)
dep(syllable-58, RBR-56)
dobj(mark-46, syllable-58)
nn(Å-62, GrÃƒâˆžÃ-60)
nn(Å-62, ‚-61)
prep_in(syllable-58, Å-62)
amod(metrics-65, co-Roman-64)
dep(Å-62, metrics-65)
aux(taken-71, has-68)
advmod(taken-71, now-69)
auxpass(taken-71, been-70)
conj_but(â-12, taken-71)
advmod(taken-71, also-72)
aux(indicate-74, to-73)
xcomp(taken-71, indicate-74)
complm(long-79, that-75)
det(vowel-77, the-76)
nsubj(long-79, vowel-77)
cop(long-79, is-78)
ccomp(indicate-74, long-79)

A Mosque is a place of worship for followers of Islam .

det(Mosque-2, A-1)
nsubj(place-5, Mosque-2)
cop(place-5, is-3)
det(place-5, a-4)
root(ROOT-0, place-5)
prep_of(place-5, worship-7)
prep_for(worship-7, followers-9)
prep_of(followers-9, Islam-11)

In astronomy , geology , and paleontology , Mya or `` m. y. a. `` is an abbreviation for `` million years ago `` .

root(ROOT-0, In-1)
pobj(In-1, astronomy-2)
pobj(In-1, geology-4)
conj_and(astronomy-2, geology-4)
pobj(In-1, paleontology-7)
conj_and(astronomy-2, paleontology-7)
dep(paleontology-7, Mya-9)
nn(a.-14, m.-12)
nn(a.-14, y.-13)
dep(paleontology-7, a.-14)
conj_or(Mya-9, a.-14)
cop(abbreviation-18, is-16)
det(abbreviation-18, an-17)
rcmod(a.-14, abbreviation-18)
prep(a.-14, for-19)
num(years-22, million-21)
npadvmod(ago-23, years-22)
dep(for-19, ago-23)

A Megabyte is a unit of information or computer storage equal to either 10 -LRB- ; 6 -LRB- ; - LBR - 1,000,000 - RBR - bytes or 2 -LRB- ; 20 -LRB- ; - LBR - 1,048,576 - RBR - bytes , depending on context .

det(Megabyte-2, A-1)
nsubj(unit-5, Megabyte-2)
cop(unit-5, is-3)
det(unit-5, a-4)
root(ROOT-0, unit-5)
nn(storage-10, information-7)
conj_or(information-7, computer-9)
nn(storage-10, computer-9)
prep_of(unit-5, storage-10)
amod(storage-10, equal-11)
prep(equal-11, to-12)
dep(unit-5, either-13)
conj(unit-5, 10-14)
dep(10-14, 6-17)
dep(1,000,000-23, LBR-21)
dep(6-17, 1,000,000-23)
dep(1,000,000-23, RBR-25)
dep(1,000,000-23, bytes-27)
dep(10-14, 2-29)
conj_or(6-17, 2-29)
dep(2-29, 20-32)
dep(RBR-40, LBR-36)
dep(LBR-36, 1,048,576-38)
dep(20-32, RBR-40)
dep(RBR-40, bytes-42)
appos(20-32, depending-44)
prep_on(depending-44, context-46)

In poetry , the Meter or metre is the basic rhythmic structure of a verse .

prep_in(structure-12, poetry-2)
det(Meter-5, the-4)
nsubj(structure-12, Meter-5)
conj_or(Meter-5, metre-7)
nsubj(structure-12, metre-7)
cop(structure-12, is-8)
det(structure-12, the-9)
amod(structure-12, basic-10)
amod(structure-12, rhythmic-11)
root(ROOT-0, structure-12)
det(verse-15, a-14)
prep_of(structure-12, verse-15)

A Meteorite is a natural object originating in outer space that survives an impact with the Earth 's surface .

det(Meteorite-2, A-1)
nsubj(object-6, Meteorite-2)
cop(object-6, is-3)
det(object-6, a-4)
amod(object-6, natural-5)
root(ROOT-0, object-6)
partmod(object-6, originating-7)
amod(space-10, outer-9)
prep_in(originating-7, space-10)
nsubj(survives-12, space-10)
rcmod(space-10, survives-12)
det(impact-14, an-13)
dobj(survives-12, impact-14)
det(Earth-17, the-16)
poss(surface-19, Earth-17)
prep_with(impact-14, surface-19)

A Motherboard is the central or primary printed circuit board - LBR - PCB - RBR - making -LRB- PRT -RRB- up -LRB- \/ PRT -RRB- a complex electronic system , such as a modern computer .

det(Motherboard-2, A-1)
nsubj(central-5, Motherboard-2)
cop(central-5, is-3)
det(central-5, the-4)
root(ROOT-0, central-5)
amod(board-10, primary-7)
amod(board-10, printed-8)
nn(board-10, circuit-9)
conj_or(central-5, board-10)
nn(RBR-16, LBR-12)
dep(RBR-16, PCB-14)
dep(central-5, RBR-16)
dep(central-5, making-18)
abbrev(making-18, PRT-20)
nn(PRT-25, \/-24)
dep(making-18, PRT-25)
det(system-30, a-27)
amod(system-30, complex-28)
amod(system-30, electronic-29)
prep_up(making-18, system-30)
det(computer-36, a-34)
amod(computer-36, modern-35)
prep_such_as(central-5, computer-36)

A Maser is a device that produces coherent electromagnetic waves through amplification due to stimulated emission .

det(Maser-2, A-1)
nsubj(device-5, Maser-2)
cop(device-5, is-3)
det(device-5, a-4)
root(ROOT-0, device-5)
nsubj(produces-7, device-5)
rcmod(device-5, produces-7)
amod(waves-10, coherent-8)
amod(waves-10, electromagnetic-9)
dobj(produces-7, waves-10)
prep_through(produces-7, amplification-12)
amod(emission-16, stimulated-15)
prep_due_to(amplification-12, emission-16)

The name Mesa was a pun , referring to its design intent to be a `` high-level `` programming language .

det(Mesa-3, The-1)
nn(Mesa-3, name-2)
nsubj(pun-6, Mesa-3)
cop(pun-6, was-4)
det(pun-6, a-5)
root(ROOT-0, pun-6)
partmod(pun-6, referring-8)
xcomp(pun-6, referring-8)
poss(intent-12, its-10)
nn(intent-12, design-11)
prep_to(referring-8, intent-12)
aux(language-20, to-13)
cop(language-20, be-14)
det(language-20, a-15)
amod(language-20, high-level-17)
nn(language-20, programming-19)
xcomp(referring-8, language-20)

A Microkernel is a minimal computer operating system kernel which , in its purest form , provides no operating-system services at all , only the mechanisms needed to implement such services , such as low-level address space management , thread management , and inter-process communication - LBR - IPC - RBR - .

det(Microkernel-2, A-1)
nsubj(kernel-9, Microkernel-2)
cop(kernel-9, is-3)
det(kernel-9, a-4)
amod(kernel-9, minimal-5)
nn(kernel-9, computer-6)
nn(kernel-9, operating-7)
nn(kernel-9, system-8)
nsubj(provides-17, kernel-9)
ccomp(needed-27, kernel-9)
poss(form-15, its-13)
amod(form-15, purest-14)
prep_in(provides-17, form-15)
rcmod(kernel-9, provides-17)
det(services-20, no-18)
amod(services-20, operating-system-19)
dobj(provides-17, services-20)
advmod(provides-17, at-21)
pobj(at-21, all-22)
advmod(mechanisms-26, only-24)
det(mechanisms-26, the-25)
nsubj(needed-27, mechanisms-26)
xsubj(implement-29, mechanisms-26)
root(ROOT-0, needed-27)
aux(implement-29, to-28)
xcomp(needed-27, implement-29)
amod(services-31, such-30)
dep(LBR-47, services-31)
amod(management-38, low-level-35)
nn(management-38, address-36)
nn(management-38, space-37)
prep_such_as(services-31, management-38)
nn(management-41, thread-40)
prep_such_as(services-31, management-41)
conj_and(management-38, management-41)
amod(communication-45, inter-process-44)
prep_such_as(services-31, communication-45)
conj_and(management-38, communication-45)
dep(IPC-49, LBR-47)
dep(implement-29, IPC-49)
dep(IPC-49, RBR-51)

A Multihull is a ship or boat with more than one hull .

det(Multihull-2, A-1)
nsubj(ship-5, Multihull-2)
cop(ship-5, is-3)
det(ship-5, a-4)
root(ROOT-0, ship-5)
conj_or(ship-5, boat-7)
mwe(than-10, more-9)
quantmod(one-11, than-10)
num(hull-12, one-11)
prep_with(ship-5, hull-12)

A Mondegreen is the misinterpretation of a line or lyric in a song due to homophony .

det(Mondegreen-2, A-1)
nsubj(misinterpretation-5, Mondegreen-2)
cop(misinterpretation-5, is-3)
det(misinterpretation-5, the-4)
root(ROOT-0, misinterpretation-5)
det(line-8, a-7)
prep_of(misinterpretation-5, line-8)
prep_of(misinterpretation-5, lyric-10)
conj_or(line-8, lyric-10)
det(song-13, a-12)
prep_in(line-8, song-13)
amod(homophony-16, due-14)
dep(homophony-16, to-15)
amod(song-13, homophony-16)

A Microassembler - LBR - sometimes called a meta-assembler - RBR - is a computer program that helps prepare a microprogram to control the low level operation of a computer in much the same way an assembler helps prepare higher level code for a processor .

det(Microassembler-2, A-1)
nsubj(called-7, Microassembler-2)
dep(Microassembler-2, LBR-4)
advmod(called-7, sometimes-6)
root(ROOT-0, called-7)
det(meta-assembler-9, a-8)
nsubj(program-16, meta-assembler-9)
dep(meta-assembler-9, RBR-11)
cop(program-16, is-13)
det(program-16, a-14)
nn(program-16, computer-15)
ccomp(called-7, program-16)
nsubj(helps-18, program-16)
rcmod(program-16, helps-18)
xcomp(helps-18, prepare-19)
det(microprogram-21, a-20)
dobj(prepare-19, microprogram-21)
aux(control-23, to-22)
infmod(microprogram-21, control-23)
det(operation-27, the-24)
amod(operation-27, low-25)
nn(operation-27, level-26)
dobj(control-23, operation-27)
det(computer-30, a-29)
prep_of(operation-27, computer-30)
advmod(way-35, much-32)
det(way-35, the-33)
amod(way-35, same-34)
prep_in(control-23, way-35)
det(assembler-37, an-36)
nsubj(helps-38, assembler-37)
rcmod(way-35, helps-38)
xcomp(helps-38, prepare-39)
amod(code-42, higher-40)
nn(code-42, level-41)
dobj(prepare-39, code-42)
det(processor-45, a-44)
prep_for(prepare-39, processor-45)

The term Myriad is a progression in the commonly used system of describing numbers using tens and hundreds .

det(Myriad-3, The-1)
nn(Myriad-3, term-2)
nsubj(progression-6, Myriad-3)
cop(progression-6, is-4)
det(progression-6, a-5)
root(ROOT-0, progression-6)
det(system-11, the-8)
advmod(used-10, commonly-9)
amod(system-11, used-10)
prep_in(progression-6, system-11)
prepc_of(system-11, describing-13)
dobj(describing-13, numbers-14)
xcomp(describing-13, using-15)
dobj(using-15, tens-16)
dobj(using-15, hundreds-18)
conj_and(tens-16, hundreds-18)

The Marcomanni were a Germanic tribe , probably related to the Buri , Suebi or Suevi .

det(Marcomanni-2, The-1)
nsubj(tribe-6, Marcomanni-2)
cop(tribe-6, were-3)
det(tribe-6, a-4)
amod(tribe-6, Germanic-5)
root(ROOT-0, tribe-6)
advmod(tribe-6, probably-8)
amod(tribe-6, related-9)
det(Buri-12, the-11)
prep_to(related-9, Buri-12)
prep_to(related-9, Suebi-14)
conj_or(Buri-12, Suebi-14)
prep_to(related-9, Suevi-16)
conj_or(Buri-12, Suevi-16)

A Metallocene is a compound with the general formula - LBR - C -LRB- ; 5 -LRB- ; R -LRB- ; 5 -LRB- ; - RBR - -LRB- ; -LRB- LST -RRB- 2 -LRB- \/ LST -RRB- -LRB- ; M consisting of two cyclopentadienyl anions - LBR - Cp - RBR - bound to a metal center in the oxidation state II .

det(Metallocene-2, A-1)
nsubj(compound-5, Metallocene-2)
cop(compound-5, is-3)
det(compound-5, a-4)
root(ROOT-0, compound-5)
det(formula-9, the-7)
amod(formula-9, general-8)
prep_with(compound-5, formula-9)
dep(compound-5, LBR-11)
dep(compound-5, C-13)
dep(C-13, 5-16)
dep(5-16, R-19)
dep(bound-53, 5-22)
dep(5-22, RBR-26)
dep(LBR-47, LST-31)
dep(LST-31, 2-33)
nn(LST-36, \/-35)
dep(2-33, LST-36)
dep(consisting-41, M-40)
dep(LST-36, consisting-41)
num(anions-45, two-43)
amod(anions-45, cyclopentadienyl-44)
prep_of(consisting-41, anions-45)
dep(--27, LBR-47)
dep(LBR-47, Cp-49)
dep(5-22, RBR-51)
dep(R-19, bound-53)
dep(bound-53, to-54)
dep(bound-53, a-55)
dep(5-16, center-57)
conj_metal(R-19, center-57)
prep_in(center-57, the-59)
dep(C-13, state-61)
conj_oxidation(5-16, state-61)
dep(state-61, II-62)

A Maze is a complex tour puzzle in the form of a complex branching passage through which the solver must find a route .

det(Maze-2, A-1)
nsubj(puzzle-7, Maze-2)
cop(puzzle-7, is-3)
det(puzzle-7, a-4)
amod(puzzle-7, complex-5)
nn(puzzle-7, tour-6)
root(ROOT-0, puzzle-7)
det(form-10, the-9)
prep_in(puzzle-7, form-10)
det(passage-15, a-12)
amod(passage-15, complex-13)
amod(passage-15, branching-14)
prep_of(form-10, passage-15)
rel(find-21, which-17)
det(solver-19, the-18)
nsubj(find-21, solver-19)
aux(find-21, must-20)
rcmod(passage-15, find-21)
det(route-23, a-22)
dobj(find-21, route-23)

A Mammoth is any species of the extinct genus Mammuthus .

det(Mammoth-2, A-1)
nsubj(species-5, Mammoth-2)
cop(species-5, is-3)
det(species-5, any-4)
root(ROOT-0, species-5)
det(Mammuthus-10, the-7)
amod(genus-9, extinct-8)
amod(Mammuthus-10, genus-9)
prep_of(species-5, Mammuthus-10)

A Mummy is a corpse whose skin and dried flesh have been preserved by either intentional or incidental exposure to chemicals , extreme cold , very low humidity , or lack of air when bodies are submerged in bogs .

det(Mummy-2, A-1)
nsubj(corpse-5, Mummy-2)
cop(corpse-5, is-3)
det(corpse-5, a-4)
root(ROOT-0, corpse-5)
poss(skin-7, corpse-5)
nsubjpass(preserved-13, skin-7)
amod(flesh-10, dried-9)
conj_and(skin-7, flesh-10)
nsubjpass(preserved-13, flesh-10)
aux(preserved-13, have-11)
auxpass(preserved-13, been-12)
rcmod(corpse-5, preserved-13)
det(exposure-19, either-15)
amod(exposure-19, intentional-16)
conj_or(intentional-16, incidental-18)
amod(exposure-19, incidental-18)
agent(preserved-13, exposure-19)
prep_to(exposure-19, chemicals-21)
amod(cold-24, extreme-23)
agent(preserved-13, cold-24)
conj_or(exposure-19, cold-24)
advmod(low-27, very-26)
amod(humidity-28, low-27)
agent(preserved-13, humidity-28)
conj_or(exposure-19, humidity-28)
agent(preserved-13, lack-31)
conj_or(exposure-19, lack-31)
tmod(submerged-37, lack-31)
prep_of(lack-31, air-33)
advmod(submerged-37, when-34)
nsubjpass(submerged-37, bodies-35)
auxpass(submerged-37, are-36)
dep(lack-31, submerged-37)
prep_in(submerged-37, bogs-39)

Macaroni is a corruption of the Italian word maccherone and its plural maccheroni .

nsubj(corruption-4, Macaroni-1)
cop(corruption-4, is-2)
det(corruption-4, a-3)
root(ROOT-0, corruption-4)
det(maccherone-9, the-6)
amod(maccherone-9, Italian-7)
nn(maccherone-9, word-8)
prep_of(corruption-4, maccherone-9)
poss(maccheroni-13, its-11)
nn(maccheroni-13, plural-12)
prep_of(corruption-4, maccheroni-13)
conj_and(maccherone-9, maccheroni-13)

The McIntosh Red - LBR - McIntosh , Mac - RBR - is an apple cultivar with red and green skin , a tart flavor , and tender white flesh .

det(Red-3, The-1)
nn(Red-3, McIntosh-2)
nsubj(cultivar-16, Red-3)
nn(RBR-11, LBR-5)
nn(Mac-9, McIntosh-7)
dep(RBR-11, Mac-9)
dep(Red-3, RBR-11)
cop(cultivar-16, is-13)
det(cultivar-16, an-14)
nn(cultivar-16, apple-15)
root(ROOT-0, cultivar-16)
amod(skin-21, red-18)
conj_and(red-18, green-20)
amod(skin-21, green-20)
prep_with(cultivar-16, skin-21)
det(flavor-25, a-23)
amod(flavor-25, tart-24)
prep_with(cultivar-16, flavor-25)
conj_and(skin-21, flavor-25)
nn(flesh-30, tender-28)
amod(flesh-30, white-29)
prep_with(cultivar-16, flesh-30)
conj_and(skin-21, flesh-30)

The Machete - LBR - mÃƒâ ‰ ˆÃ ‚ Ë ™ Ãƒâ $ '' Ã ‚ âˆšÃƒâ $ ¦ Ã ‚ âˆžÃƒâ ‰ ˆÃ ‚ Ë ti - RBR - is a large cleaver-like cutting tool .

det(mÃƒâ-6, The-1)
nn(mÃƒâ-6, Machete-2)
dep(mÃƒâ-6, LBR-4)
nsubj(tool-36, mÃƒâ-6)
punct(Ë-10, ‰-7)
dep(Ë-10, ˆÃ-8)
punct(Ë-10, ‚-9)
dep(mÃƒâ-6, Ë-10)
punct(Ë-10, ™-11)
dep(Ë-10, Ãƒâ-12)
nn(Ã-15, $-13)
dep(Ãƒâ-12, Ã-15)
punct(Ãƒâ-12, ‚-16)
dep(Ãƒâ-12, âˆšÃƒâ-17)
amod(Ã-20, $-18)
number($-18, ¦-19)
dep(âˆšÃƒâ-17, Ã-20)
punct(Ãƒâ-12, ‚-21)
dep(Ãƒâ-12, âˆžÃƒâ-22)
punct(âˆžÃƒâ-22, ‰-23)
dep(ti-27, ˆÃ-24)
punct(ti-27, ‚-25)
nn(ti-27, Ë-26)
dep(âˆžÃƒâ-22, ti-27)
dep(ti-27, RBR-29)
cop(tool-36, is-31)
det(tool-36, a-32)
amod(tool-36, large-33)
amod(tool-36, cleaver-like-34)
nn(tool-36, cutting-35)
root(ROOT-0, tool-36)

A Mushroom is the fleshy , spore-bearing fruiting body of a fungus , typically produced above ground on soil or on its food source .

det(Mushroom-2, A-1)
nsubj(body-9, Mushroom-2)
cop(body-9, is-3)
det(body-9, the-4)
amod(body-9, fleshy-5)
amod(body-9, spore-bearing-7)
nn(body-9, fruiting-8)
root(ROOT-0, body-9)
det(fungus-12, a-11)
prep_of(body-9, fungus-12)
advmod(produced-15, typically-14)
partmod(fungus-12, produced-15)
partmod(fungus-12, produced-15')
conj_or(produced-15, produced-15')
prep_above(produced-15, ground-17)
prep_on(ground-17, soil-19)
poss(source-24, its-22)
nn(source-24, food-23)
prep_on(produced-15', source-24)

The MorrÃƒâˆžÃ ‚ â $ `` gan - LBR - `` terror `` or `` phantom queen `` - RBR - or MÃƒâˆžÃ ‚ â $ œrrÃƒâˆžÃ ‚ â $ `` gan - LBR - `` great queen `` - RBR - - LBR - also known as MorrÃƒâˆžÃ ‚ â $ `` gu , MorrÃƒâˆžÃ ‚ â $ `` ghan , Mor-RÃƒâˆžÃ ‚ â $ `` oghain , sometimes given in the plural as MorrÃƒâˆžÃ ‚ â $ `` gna - RBR - is a figure from Irish mythology who appears to have once been a goddess , although she is not explicitly referred to as such in the texts .

det(MorrÃƒâˆžÃ-2, The-1)
nsubj(figure-87, MorrÃƒâˆžÃ-2)
punct(MorrÃƒâˆžÃ-2, ‚-3)
partmod(MorrÃƒâˆžÃ-2, â-4)
dobj(â-4, $-5)
number($-5, gan-7)
dep($-5, LBR-9)
dobj(â-4, terror-12)
amod(RBR-20, phantom-16)
nn(RBR-20, queen-17)
conj_or(MorrÃƒâˆžÃ-2, RBR-20)
nsubj(figure-87, RBR-20)
punct(‚-24, MÃƒâˆžÃ-23)
dep(RBR-20, ‚-24)
advmod(‚-24, â-25)
dobj(‚-24, $-26)
num($-26, œrrÃƒâˆžÃ-27)
punct($-26, ‚-28)
partmod($-26, â-29)
dobj(â-29, $-30)
number($-30, gan-32)
dep($-30, LBR-34)
amod(queen-38, great-37)
dobj(â-29, queen-38)
dep($-26, RBR-41)
conj_or(MorrÃƒâˆžÃ-2, LBR-44)
conj_or(RBR-20, LBR-44)
advmod(known-47, also-46)
dep(RBR-20, known-47)
nn(‚-50, MorrÃƒâˆžÃ-49)
poss(â-58, ‚-50)
amod(â-58, $-52)
dep(â-58, gu-54)
dep(gu-54, MorrÃƒâˆžÃ-56)
punct(â-58, ‚-57)
prep_as(known-47, â-58)
nn(Mor-RÃƒâˆžÃ-63, ghan-61)
prep_$(â-58, Mor-RÃƒâˆžÃ-63)
punct(Mor-RÃƒâˆžÃ-63, ‚-64)
dep(Mor-RÃƒâˆžÃ-63, â-65)
dobj(known-47, $-66)
dep($-66, oghain-68)
advmod($-66, sometimes-70)
prep(known-47, given-71)
pcomp(given-71, in-72)
det(plural-74, the-73)
prep_in(given-71, plural-74)
nn(RBR-83, MorrÃƒâˆžÃ-76)
punct($-79, ‚-77)
dep($-79, â-78)
dep(RBR-83, $-79)
number($-79, gna-81)
prep_as(plural-74, RBR-83)
cop(figure-87, is-85)
det(figure-87, a-86)
root(ROOT-0, figure-87)
nsubj(appears-92, figure-87)
amod(mythology-90, Irish-89)
prep_from(figure-87, mythology-90)
rcmod(figure-87, appears-92)
aux(goddess-98, to-93)
aux(goddess-98, have-94)
advmod(goddess-98, once-95)
cop(goddess-98, been-96)
det(goddess-98, a-97)
xcomp(appears-92, goddess-98)
mark(referred-105, although-100)
nsubjpass(referred-105, she-101)
auxpass(referred-105, is-102)
neg(referred-105, not-103)
advmod(referred-105, explicitly-104)
advcl(appears-92, referred-105)
advmod(such-108, as-107)
prep_to(referred-105, such-108)
det(texts-111, the-110)
prep_in(such-108, texts-111)

The Month is a unit of time , used with calendars , which is approximately as long as some natural period related to the motion of the Moon ; month and Moon are cognates .

det(Month-2, The-1)
nsubj(unit-5, Month-2)
cop(unit-5, is-3)
det(unit-5, a-4)
root(ROOT-0, unit-5)
prep_of(unit-5, time-7)
partmod(time-7, used-9)
prep_with(used-9, calendars-11)
nsubj(long-17, calendars-11)
cop(long-17, is-14)
quantmod(long-17, approximately-15)
quantmod(long-17, as-16)
rcmod(calendars-11, long-17)
det(period-21, some-19)
amod(period-21, natural-20)
prep_as(long-17, period-21)
partmod(period-21, related-22)
det(motion-25, the-24)
prep_to(related-22, motion-25)
det(Moon-28, the-27)
prep_of(motion-25, Moon-28)
nsubj(cognates-34, month-30)
conj_and(month-30, Moon-32)
nsubj(cognates-34, Moon-32)
cop(cognates-34, are-33)
parataxis(unit-5, cognates-34)

In biology , a Mutagen - LBR - Latin , literally origin of change - RBR - is a physical or chemical agent that changes the genetic information - LBR - usually DNA - RBR - of an organism and thus increases the frequency of mutations above the natural background level .

prep_in(agent-23, biology-2)
det(Mutagen-5, a-4)
nsubj(agent-23, Mutagen-5)
dep(Mutagen-5, LBR-7)
nn(RBR-16, Latin-9)
dep(origin-12, literally-11)
dep(RBR-16, origin-12)
prep_of(origin-12, change-14)
dep(LBR-7, RBR-16)
cop(agent-23, is-18)
det(agent-23, a-19)
amod(agent-23, physical-20)
conj_or(physical-20, chemical-22)
amod(agent-23, chemical-22)
root(ROOT-0, agent-23)
nsubj(changes-25, agent-23)
nsubj(increases-42, agent-23)
rcmod(agent-23, changes-25)
det(information-28, the-26)
amod(information-28, genetic-27)
dobj(changes-25, information-28)
nn(RBR-35, LBR-30)
dep(DNA-33, usually-32)
dep(RBR-35, DNA-33)
dep(information-28, RBR-35)
det(organism-39, an-38)
prep_of(changes-25, organism-39)
advmod(increases-42, thus-41)
rcmod(agent-23, increases-42)
conj_and(changes-25, increases-42)
det(frequency-44, the-43)
dobj(increases-42, frequency-44)
prep_of(frequency-44, mutations-46)
det(level-51, the-48)
amod(level-51, natural-49)
nn(level-51, background-50)
prep_above(mutations-46, level-51)

ML refers to Major League Baseball .

nsubj(refers-2, ML-1)
root(ROOT-0, refers-2)
nn(Baseball-6, Major-4)
nn(Baseball-6, League-5)
prep_to(refers-2, Baseball-6)

A Microorganism - LBR - also can be spelled as micro organism or micro-organism - RBR - or microbe is an organism that is microscopic - LBR - too small to be seen by the naked human eye - RBR - .

det(Microorganism-2, A-1)
nsubj(organism-22, Microorganism-2)
dep(Microorganism-2, LBR-4)
advmod(spelled-9, also-6)
aux(spelled-9, can-7)
auxpass(spelled-9, be-8)
rcmod(Microorganism-2, spelled-9)
amod(organism-12, micro-11)
prep_as(spelled-9, organism-12)
prep_as(spelled-9, micro-organism-14)
conj_or(organism-12, micro-organism-14)
conj_or(Microorganism-2, RBR-16)
nsubj(organism-22, RBR-16)
conj_or(Microorganism-2, microbe-19)
nsubj(organism-22, microbe-19)
cop(organism-22, is-20)
det(organism-22, an-21)
root(ROOT-0, organism-22)
nsubj(eye-38, organism-22)
cop(eye-38, is-24)
amod(eye-38, microscopic-25)
dep(eye-38, LBR-27)
advmod(small-30, too-29)
amod(eye-38, small-30)
aux(seen-33, to-31)
auxpass(seen-33, be-32)
xcomp(small-30, seen-33)
det(human-37, the-35)
amod(human-37, naked-36)
agent(seen-33, human-37)
rcmod(organism-22, eye-38)
dep(eye-38, RBR-40)

In physics , M-theory is a proposal that unifies the five ten-dimensional superstring theories as limits of a single 11-dimensional theory .

prep_in(proposal-7, physics-2)
nsubj(proposal-7, M-theory-4)
cop(proposal-7, is-5)
det(proposal-7, a-6)
root(ROOT-0, proposal-7)
nsubj(unifies-9, proposal-7)
rcmod(proposal-7, unifies-9)
det(theories-14, the-10)
num(theories-14, five-11)
amod(theories-14, ten-dimensional-12)
nn(theories-14, superstring-13)
dobj(unifies-9, theories-14)
prep_as(theories-14, limits-16)
det(theory-21, a-18)
amod(theory-21, single-19)
amod(theory-21, 11-dimensional-20)
prep_of(limits-16, theory-21)

Multimedia - LBR - as an adjective - RBR - also describes electronic media devices used to store and experience multimedia content .

nsubj(describes-12, Multimedia-1)
nn(RBR-9, LBR-3)
dep(RBR-9, as-5)
det(adjective-7, an-6)
pobj(as-5, adjective-7)
dep(Multimedia-1, RBR-9)
advmod(describes-12, also-11)
root(ROOT-0, describes-12)
amod(devices-15, electronic-13)
nn(devices-15, media-14)
dobj(describes-12, devices-15)
partmod(devices-15, used-16)
nn(content-22, store-18)
conj_and(store-18, experience-20)
nn(content-22, experience-20)
nn(content-22, multimedia-21)
prep_to(used-16, content-22)

The Mafia - LBR - also known as Cosa Nostra - RBR - is a Sicilian criminal secret society which is believed to have first developed in the mid-19th century in Sicily .

det(Mafia-2, The-1)
nsubj(known-7, Mafia-2)
dep(Mafia-2, LBR-4)
advmod(known-7, also-6)
root(ROOT-0, known-7)
mark(society-19, as-8)
nn(Nostra-10, Cosa-9)
nsubj(society-19, Nostra-10)
dep(Nostra-10, RBR-12)
cop(society-19, is-14)
det(society-19, a-15)
nn(society-19, Sicilian-16)
amod(society-19, criminal-17)
nn(society-19, secret-18)
advcl(known-7, society-19)
nsubjpass(believed-22, society-19)
auxpass(believed-22, is-21)
rcmod(society-19, believed-22)
aux(developed-26, to-23)
aux(developed-26, have-24)
advmod(developed-26, first-25)
xcomp(believed-22, developed-26)
det(century-30, the-28)
amod(century-30, mid-19th-29)
prep_in(developed-26, century-30)
prep_in(century-30, Sicily-32)

A Magnetosphere is the region around an astronomical object in which phenomena are dominated or organized by its magnetic field .

det(Magnetosphere-2, A-1)
nsubj(region-5, Magnetosphere-2)
cop(region-5, is-3)
det(region-5, the-4)
root(ROOT-0, region-5)
det(object-9, an-7)
amod(object-9, astronomical-8)
prep_around(region-5, object-9)
rel(dominated-14, which-11)
nsubjpass(dominated-14, phenomena-12)
nsubjpass(organized-16, phenomena-12)
auxpass(dominated-14, are-13)
rcmod(object-9, dominated-14)
rcmod(object-9, organized-16)
conj_or(dominated-14, organized-16)
poss(field-20, its-18)
amod(field-20, magnetic-19)
agent(dominated-14, field-20)

In poetry , a Monometer is a line of verse with just one metrical foot , exemplified by this portion of Robert Herrick 's `` Upon His Departure Hence `` : A Mirror is an object with a surface that has good specular reflection ; that is , it is smooth enough to form an image .

prep_in(line-8, poetry-2)
det(Monometer-5, a-4)
nsubj(line-8, Monometer-5)
cop(line-8, is-6)
det(line-8, a-7)
root(ROOT-0, line-8)
prep_of(line-8, verse-10)
advmod(foot-15, just-12)
num(foot-15, one-13)
amod(foot-15, metrical-14)
prep_with(verse-10, foot-15)
partmod(foot-15, exemplified-17)
det(portion-20, this-19)
agent(exemplified-17, portion-20)
nn(Herrick-23, Robert-22)
prep_of(portion-20, Herrick-23)
possessive(Herrick-23, 's-24)
poss(Departure-28, His-27)
prep_upon(Hence-29, Departure-28)
dep(line-8, Hence-29)
det(Mirror-33, A-32)
nsubj(object-36, Mirror-33)
cop(object-36, is-34)
det(object-36, an-35)
ccomp(Hence-29, object-36)
det(surface-39, a-38)
prep_with(object-36, surface-39)
nsubj(has-41, surface-39)
rcmod(surface-39, has-41)
amod(reflection-44, good-42)
nn(reflection-44, specular-43)
dobj(has-41, reflection-44)
advmod(smooth-51, that-46)
dep(that-46, is-47)
nsubj(smooth-51, it-49)
cop(smooth-51, is-50)
parataxis(line-8, smooth-51)
advmod(smooth-51, enough-52)
aux(form-54, to-53)
xcomp(smooth-51, form-54)
det(image-56, an-55)
dobj(form-54, image-56)

A Macro in computer science is a rule or pattern that specifies how a certain input sequence - LBR - often a sequence of characters - RBR - should be mapped to an output sequence - LBR - also often a sequence of characters - RBR - according to a defined procedure .

det(Macro-2, A-1)
nsubj(rule-8, Macro-2)
nn(science-5, computer-4)
prep_in(Macro-2, science-5)
cop(rule-8, is-6)
det(rule-8, a-7)
root(ROOT-0, rule-8)
nsubj(specifies-12, rule-8)
conj_or(rule-8, pattern-10)
nsubj(specifies-12, pattern-10)
rcmod(rule-8, specifies-12)
advmod(mapped-31, how-13)
det(sequence-17, a-14)
amod(sequence-17, certain-15)
nn(sequence-17, input-16)
nsubjpass(mapped-31, sequence-17)
nn(RBR-27, LBR-19)
advmod(sequence-23, often-21)
det(sequence-23, a-22)
dep(RBR-27, sequence-23)
prep_of(sequence-23, characters-25)
dep(sequence-17, RBR-27)
aux(mapped-31, should-29)
auxpass(mapped-31, be-30)
dep(RBR-46, mapped-31)
det(sequence-35, an-33)
nn(sequence-35, output-34)
prep_to(mapped-31, sequence-35)
nn(RBR-46, LBR-37)
dep(sequence-42, also-39)
advmod(sequence-42, often-40)
det(sequence-42, a-41)
dep(RBR-46, sequence-42)
prep_of(sequence-42, characters-44)
dobj(specifies-12, RBR-46)
prepc_according_to(rule-8, to-49)
det(procedure-52, a-50)
amod(procedure-52, defined-51)
pobj(rule-8, procedure-52)

In physics , Motion means a continuous change in the location of a body .

prep_in(means-5, physics-2)
nsubj(means-5, Motion-4)
root(ROOT-0, means-5)
det(change-8, a-6)
amod(change-8, continuous-7)
dobj(means-5, change-8)
det(location-11, the-10)
prep_in(change-8, location-11)
det(body-14, a-13)
prep_of(location-11, body-14)

In law , Malpractice is a type of negligence in which the misfeasance , malfeasance or nonfeasance of a professional , under a duty to act , fails to follow generally accepted professional standards , and that breach of duty is the proximate cause of injury to a plaintiff who suffers damages .

prep_in(type-7, law-2)
nsubj(type-7, Malpractice-4)
cop(type-7, is-5)
det(type-7, a-6)
root(ROOT-0, type-7)
prep_of(type-7, negligence-9)
rel(fails-28, which-11)
det(misfeasance-13, the-12)
nsubj(fails-28, misfeasance-13)
xsubj(follow-30, misfeasance-13)
conj_or(misfeasance-13, malfeasance-15)
nsubj(fails-28, malfeasance-15)
xsubj(follow-30, malfeasance-15)
conj_or(misfeasance-13, nonfeasance-17)
nsubj(fails-28, nonfeasance-17)
xsubj(follow-30, nonfeasance-17)
det(professional-20, a-19)
prep_of(misfeasance-13, professional-20)
det(duty-24, a-23)
prep_under(fails-28, duty-24)
aux(act-26, to-25)
infmod(duty-24, act-26)
rcmod(type-7, fails-28)
aux(follow-30, to-29)
xcomp(fails-28, follow-30)
advmod(follow-30, generally-31)
ccomp(follow-30, accepted-32)
amod(standards-34, professional-33)
dobj(accepted-32, standards-34)
complm(cause-44, that-37)
nsubj(cause-44, breach-38)
prep_of(breach-38, duty-40)
cop(cause-44, is-41)
det(cause-44, the-42)
amod(cause-44, proximate-43)
ccomp(follow-30, cause-44)
conj_and(accepted-32, cause-44)
prep_of(cause-44, injury-46)
det(plaintiff-49, a-48)
prep_to(injury-46, plaintiff-49)
nsubj(suffers-51, plaintiff-49)
rcmod(plaintiff-49, suffers-51)
dobj(suffers-51, damages-52)

A Misdemeanor , or misdemeanor , in many common law legal systems , is a `` lesser `` criminal act .

det(Misdemeanor-2, A-1)
nsubj(act-20, Misdemeanor-2)
conj_or(Misdemeanor-2, misdemeanor-5)
nsubj(act-20, misdemeanor-5)
amod(systems-12, many-8)
amod(systems-12, common-9)
nn(systems-12, law-10)
amod(systems-12, legal-11)
prep_in(Misdemeanor-2, systems-12)
cop(act-20, is-14)
det(act-20, a-15)
amod(act-20, lesser-17)
amod(act-20, criminal-19)
root(ROOT-0, act-20)

The word Mambo - LBR - which means conversation with the gods - RBR - is the name of a priestess in Haitian Voodoo .

det(Mambo-3, The-1)
nn(Mambo-3, word-2)
root(ROOT-0, Mambo-3)
nsubj(name-18, LBR-5)
nsubj(means-8, which-7)
rcmod(LBR-5, means-8)
dobj(means-8, conversation-9)
det(gods-12, the-11)
prep_with(means-8, gods-12)
advmod(means-8, RBR-14)
cop(name-18, is-16)
det(name-18, the-17)
dep(Mambo-3, name-18)
det(priestess-21, a-20)
prep_of(name-18, priestess-21)
nn(Voodoo-24, Haitian-23)
prep_in(priestess-21, Voodoo-24)

The term Militia is commonly used today to refer to a military force composed of ordinary citizens to provide defense , emergency law enforcement , or paramilitary service , in times of emergency without being paid a regular salary or committed to a fixed term of service .

det(Militia-3, The-1)
nn(Militia-3, term-2)
nsubjpass(used-6, Militia-3)
auxpass(used-6, is-4)
advmod(used-6, commonly-5)
root(ROOT-0, used-6)
tmod(used-6, today-7)
aux(refer-9, to-8)
xcomp(used-6, refer-9)
det(force-13, a-11)
amod(force-13, military-12)
prep_to(refer-9, force-13)
xsubj(provide-19, force-13)
partmod(force-13, composed-14)
amod(citizens-17, ordinary-16)
prep_of(composed-14, citizens-17)
aux(provide-19, to-18)
xcomp(composed-14, provide-19)
dobj(provide-19, defense-20)
nn(enforcement-24, emergency-22)
nn(enforcement-24, law-23)
dobj(provide-19, enforcement-24)
conj_or(defense-20, enforcement-24)
amod(service-28, paramilitary-27)
dobj(provide-19, service-28)
conj_or(defense-20, service-28)
prep_in(provide-19, times-31)
prep_of(times-31, emergency-33)
auxpass(paid-36, being-35)
prepc_without(provide-19, paid-36)
det(salary-39, a-37)
amod(salary-39, regular-38)
dobj(paid-36, salary-39)
prepc_without(provide-19, committed-41)
conj_or(paid-36, committed-41)
det(term-45, a-43)
amod(term-45, fixed-44)
prep_to(committed-41, term-45)
prep_of(term-45, service-47)

A Micrometre - LBR - American spelling : micrometer ; symbol Ãƒâ ‰ & nbsp ; Ã ‚ Âµm - RBR - is one millionth of a metre , or equivalently one thousandth of a millimetre .

det(Micrometre-2, A-1)
nsubj(millionth-25, Micrometre-2)
dep(Micrometre-2, LBR-4)
amod(spelling-7, American-6)
dep(LBR-4, spelling-7)
dep(spelling-7, micrometer-9)
dep(spelling-7, symbol-11)
nn(‰-13, Ãƒâ-12)
dep(symbol-11, ‰-13)
dep(symbol-11, nbsp-15)
conj_and(‰-13, nbsp-15)
nn(Âµm-19, Ã-17)
nn(Âµm-19, ‚-18)
dep(spelling-7, Âµm-19)
dep(Âµm-19, RBR-21)
cop(millionth-25, is-23)
num(millionth-25, one-24)
root(ROOT-0, millionth-25)
det(metre-28, a-27)
prep_of(millionth-25, metre-28)
amod(thousandth-33, equivalently-31)
nn(thousandth-33, one-32)
conj_or(millionth-25, thousandth-33)
det(millimetre-36, a-35)
prep_of(thousandth-33, millimetre-36)

In Greek mythology , the Minotaur - LBR - Greek : Ãƒâﾁ „ Ã ‚ Ë ' ÃƒÂ ¡ Ã ‚ Â ¿ Ã ‚ Å ' Ãƒâ „ Ã ‚ âˆ Ãƒâˆ ‚ Ã ‚ â „ Ãƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâ „ Ã ‚ Â ± Ãƒâˆ ‚ Ã ‚ âˆ ` Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , MÃƒâ ‰ ¥ Ã ‚ Â `` nÃƒÂ ¡ Ã ‚ â $ ™ Ã ‚ â $ žtauros - RBR - was a creature that was part man and part bull .

amod(mythology-3, Greek-2)
prep_in(â-92, mythology-3)
det(Minotaur-6, the-5)
appos(mythology-3, Minotaur-6)
dep(mythology-3, LBR-8)
dep(LBR-8, Greek-10)
nn(Ã-14, Ãƒâﾁ-12)
nn(Ã-14, „-13)
dep(mythology-3, Ã-14)
nn(Ë-16, ‚-15)
poss(Ã-24, Ë-16)
nn(Ã-24, ÃƒÂ-18)
nn(Ã-24, ¡-19)
nn(Ã-24, Ã-20)
nn(Ã-24, ‚-21)
nn(Ã-24, Â-22)
nn(Ã-24, ¿-23)
dep(Ã-14, Ã-24)
partmod(mythology-3, ‚-25)
poss(âˆ-56, Å-26)
nn(âˆ-56, Ãƒâ-28)
nn(âˆ-56, „-29)
nn(âˆ-56, Ã-30)
nn(âˆ-56, ‚-31)
nn(âˆ-56, âˆ-32)
nn(âˆ-56, Ãƒâˆ-33)
nn(âˆ-56, ‚-34)
nn(âˆ-56, Ã-35)
nn(âˆ-56, ‚-36)
nn(âˆ-56, â-37)
nn(âˆ-56, „-38)
nn(âˆ-56, Ãƒâˆ-39)
nn(âˆ-56, ‚-40)
nn(âˆ-56, Ã-41)
nn(âˆ-56, ‚-42)
nn(âˆ-56, â-43)
nn(âˆ-56, ‰-44)
nn(âˆ-56, ¥-45)
nn(âˆ-56, Ãƒâ-46)
nn(âˆ-56, „-47)
nn(âˆ-56, Ã-48)
nn(âˆ-56, ‚-49)
nn(âˆ-56, Â-50)
nn(âˆ-56, ±-51)
nn(âˆ-56, Ãƒâˆ-52)
nn(âˆ-56, ‚-53)
nn(âˆ-56, Ã-54)
nn(âˆ-56, ‚-55)
dobj(‚-25, âˆ-56)
nn(‰-76, Ãƒâˆ-58)
nn(‰-76, ‚-59)
nn(‰-76, Ã-60)
nn(‰-76, ‚-61)
nn(‰-76, â-62)
nn(‰-76, „-63)
nn(‰-76, cents-64)
nn(‰-76, Ãƒâ-65)
nn(‰-76, „-66)
nn(‰-76, Ã-67)
nn(‰-76, ‚-68)
nn(‰-76, Â-69)
nn(‰-76, ¿-70)
nn(‰-76, Ãƒâˆ-71)
nn(‰-76, ‚-72)
nn(‰-76, Ã-73)
nn(‰-76, ‚-74)
nn(‰-76, â-75)
dep(âˆ-56, ‰-76)
dep(âˆ-56, nbsp-78)
conj_and(‰-76, nbsp-78)
nn(‚-91, MÃƒâ-81)
nn(‚-91, ‰-82)
nn(‚-91, ¥-83)
nn(‚-91, Ã-84)
nn(‚-91, ‚-85)
nn(‚-91, Â-86)
nn(‚-91, nÃƒÂ-88)
nn(‚-91, ¡-89)
nn(‚-91, Ã-90)
nsubj(â-92, ‚-91)
root(ROOT-0, â-92)
dobj(â-92, $-93)
num($-93, ™-94)
nn(â-97, Ã-95)
nn(â-97, ‚-96)
nsubj(creature-105, â-97)
amod(â-97, $-98)
dep($-98, žtauros-99)
dep(â-97, RBR-101)
cop(creature-105, was-103)
det(creature-105, a-104)
rcmod($-93, creature-105)
nsubj(man-109, creature-105)
cop(man-109, was-107)
nn(man-109, part-108)
rcmod(creature-105, man-109)
nn(bull-112, part-111)
rcmod(creature-105, bull-112)
conj_and(man-109, bull-112)

The Memex - LBR - a portmanteau of `` memory extender `` - RBR - is the name given by Vannevar Bush to the theoretical proto-hypertext computer system he proposed in his 1945 The Atlantic Monthly article As We May Think .

det(Memex-2, The-1)
nsubj(name-18, Memex-2)
dep(Memex-2, LBR-4)
det(portmanteau-7, a-6)
dep(LBR-4, portmanteau-7)
nn(extender-11, memory-10)
prep_of(portmanteau-7, extender-11)
dep(extender-11, RBR-14)
cop(name-18, is-16)
det(name-18, the-17)
root(ROOT-0, name-18)
prep(name-18, given-19)
pcomp(given-19, by-20)
nn(Bush-22, Vannevar-21)
prep_by(given-19, Bush-22)
det(system-28, the-24)
amod(system-28, theoretical-25)
amod(system-28, proto-hypertext-26)
nn(system-28, computer-27)
prep_to(Bush-22, system-28)
nsubj(proposed-30, he-29)
rcmod(system-28, proposed-30)
poss(article-37, his-32)
nn(article-37, 1945-33)
nn(article-37, The-34)
nn(article-37, Atlantic-35)
amod(article-37, Monthly-36)
prep_in(proposed-30, article-37)
mark(Think-41, As-38)
nsubj(Think-41, We-39)
aux(Think-41, May-40)
advcl(proposed-30, Think-41)

In telecommunications , Modulation is the process of varying a periodic waveform .

prep_in(process-7, telecommunications-2)
nsubj(process-7, Modulation-4)
cop(process-7, is-5)
det(process-7, the-6)
root(ROOT-0, process-7)
prepc_of(process-7, varying-9)
det(waveform-12, a-10)
amod(waveform-12, periodic-11)
dobj(varying-9, waveform-12)

The name Megadeth is a deliberate misspelling of the word megadeath , a term coined in 1953 by RAND military strategist Herman Kahn to describe one million deaths , popularized in his 1960 book On Thermonuclear War .

det(name-2, The-1)
nsubj(popularized-30, name-2)
nsubj(misspelling-7, Megadeth-3)
cop(misspelling-7, is-4)
det(misspelling-7, a-5)
amod(misspelling-7, deliberate-6)
rcmod(name-2, misspelling-7)
det(megadeath-11, the-9)
nn(megadeath-11, word-10)
prep_of(misspelling-7, megadeath-11)
det(term-14, a-13)
appos(name-2, term-14)
xsubj(describe-25, term-14)
partmod(term-14, coined-15)
prep_in(coined-15, 1953-17)
amod(Kahn-23, RAND-19)
amod(Kahn-23, military-20)
nn(Kahn-23, strategist-21)
nn(Kahn-23, Herman-22)
agent(coined-15, Kahn-23)
aux(describe-25, to-24)
xcomp(coined-15, describe-25)
number(million-27, one-26)
num(deaths-28, million-27)
dobj(describe-25, deaths-28)
root(ROOT-0, popularized-30)
poss(book-34, his-32)
num(book-34, 1960-33)
prep_in(popularized-30, book-34)
nn(War-37, Thermonuclear-36)
prep_on(popularized-30, War-37)

In Greek mythology , Minos - LBR - ancient Greek : Ãƒâﾁ „ Ã ‚ Ë ' Ãƒâﾁ „ Ã ‚ Â ¯ Ãƒâﾁ „ Ã ‚ âˆﾏÃƒâˆ ‚ Ã ‚ â ‰ ˆÃƒâˆ ‚ Ã ‚ â ‰ & nbsp ; - RBR - was a mythical king of Crete , son of Zeus and Europa .

amod(mythology-3, Greek-2)
prep_in(king-49, mythology-3)
nsubj(king-49, Minos-5)
nn(RBR-44, LBR-7)
amod(Greek-10, ancient-9)
dep(RBR-44, Greek-10)
nn(Ë-16, Ãƒâﾁ-12)
nn(Ë-16, „-13)
nn(Ë-16, Ã-14)
nn(Ë-16, ‚-15)
poss(‚-37, Ë-16)
nn(‚-37, Ãƒâﾁ-18)
nn(‚-37, „-19)
nn(‚-37, Ã-20)
nn(‚-37, ‚-21)
nn(‚-37, Â-22)
nn(‚-37, ¯-23)
nn(‚-37, Ãƒâﾁ-24)
nn(‚-37, „-25)
nn(‚-37, Ã-26)
nn(‚-37, ‚-27)
nn(‚-37, âˆﾏÃƒâˆ-28)
nn(‚-37, ‚-29)
nn(‚-37, Ã-30)
nn(‚-37, ‚-31)
nn(‚-37, â-32)
nn(‚-37, ‰-33)
nn(‚-37, ˆÃƒâˆ-34)
nn(‚-37, ‚-35)
nn(‚-37, Ã-36)
dep(Greek-10, ‚-37)
amod(‰-39, â-38)
dep(‚-37, ‰-39)
dep(‚-37, nbsp-41)
conj_and(‰-39, nbsp-41)
dep(Minos-5, RBR-44)
cop(king-49, was-46)
det(king-49, a-47)
amod(king-49, mythical-48)
root(ROOT-0, king-49)
prep_of(king-49, Crete-51)
appos(Crete-51, son-53)
prep_of(son-53, Zeus-55)
prep_of(son-53, Europa-57)
conj_and(Zeus-55, Europa-57)

The Microvision was a hand-held game console released by the Milton Bradley Company in 1979 .

det(Microvision-2, The-1)
nsubj(console-7, Microvision-2)
cop(console-7, was-3)
det(console-7, a-4)
amod(console-7, hand-held-5)
nn(console-7, game-6)
root(ROOT-0, console-7)
partmod(console-7, released-8)
det(Company-13, the-10)
nn(Company-13, Milton-11)
nn(Company-13, Bradley-12)
agent(released-8, Company-13)
prep_in(Company-13, 1979-15)

In set theory and its applications throughout mathematics , a Class is a collection of sets - LBR - or sometimes other mathematical objects - RBR - that can be unambiguously defined by a property that all its members share .

amod(theory-3, set-2)
prep_in(collection-14, theory-3)
poss(applications-6, its-5)
conj_and(theory-3, applications-6)
prep_in(collection-14, applications-6)
prep_throughout(applications-6, mathematics-8)
det(Class-11, a-10)
nsubj(collection-14, Class-11)
cop(collection-14, is-12)
det(collection-14, a-13)
root(ROOT-0, collection-14)
nsubjpass(defined-32, collection-14)
prep_of(collection-14, sets-16)
advmod(sets-16, LBR-18)
advmod(sets-16, sometimes-21)
conj_or(LBR-18, sometimes-21)
amod(objects-24, other-22)
amod(objects-24, mathematical-23)
dep(sets-16, objects-24)
dep(collection-14, RBR-26)
aux(defined-32, can-29)
auxpass(defined-32, be-30)
advmod(defined-32, unambiguously-31)
rcmod(collection-14, defined-32)
det(property-35, a-34)
agent(defined-32, property-35)
complm(share-40, that-36)
predet(members-39, all-37)
poss(members-39, its-38)
nsubj(share-40, members-39)
ccomp(defined-32, share-40)

In J. R. R. Tolkien 's fictional universe of Middle-earth , Mordor - LBR - from Sindarin Black Land and Quenya Land of Shadow - RBR - is the dwelling place of Sauron , in the southeast of Middle-earth to the East of Anduin , the great river .

nn(Tolkien-5, J.-2)
nn(Tolkien-5, R.-3)
nn(Tolkien-5, R.-4)
poss(universe-8, Tolkien-5)
amod(universe-8, fictional-7)
prep_in(place-31, universe-8)
prep_of(universe-8, Middle-earth-10)
nsubj(place-31, Mordor-12)
nn(RBR-26, LBR-14)
dep(RBR-26, from-16)
nn(Land-19, Sindarin-17)
nn(Land-19, Black-18)
pobj(from-16, Land-19)
nn(Land-22, Quenya-21)
pobj(from-16, Land-22)
conj_and(Land-19, Land-22)
prep_of(Land-19, Shadow-24)
dep(Mordor-12, RBR-26)
cop(place-31, is-28)
det(place-31, the-29)
nn(place-31, dwelling-30)
root(ROOT-0, place-31)
prep_of(place-31, Sauron-33)
det(southeast-37, the-36)
prep_in(place-31, southeast-37)
prep_of(southeast-37, Middle-earth-39)
det(East-42, the-41)
prep_to(Middle-earth-39, East-42)
prep_of(East-42, Anduin-44)
det(river-48, the-46)
amod(river-48, great-47)
appos(Anduin-44, river-48)

A Mineraloid is a mineral-like substance that does not demonstrate crystallinity .

det(Mineraloid-2, A-1)
nsubj(substance-6, Mineraloid-2)
cop(substance-6, is-3)
det(substance-6, a-4)
amod(substance-6, mineral-like-5)
root(ROOT-0, substance-6)
nsubj(demonstrate-10, substance-6)
aux(demonstrate-10, does-8)
neg(demonstrate-10, not-9)
rcmod(substance-6, demonstrate-10)
advmod(demonstrate-10, crystallinity-11)

A Metropolis - LBR - in Greek Ãƒâ „ Ã ‚ Ï $ Ãƒâ „ Ã ‚ Â ® Ãƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâ „ Ã ‚ Â · Ãƒâˆ ‚ Ã ‚ â „ cents , mÃƒâ ‰ ¥ Ã ‚ â $ žtÃƒâ ‰ ¥ Ã ‚ â $ žr meaning ` mother ' and Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâˆ ‚ Ã ‚ â $ ˜Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ â $ ™ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , pÃƒâˆžÃ ‚ â $ œlis meaning ` city \/ town ' - RBR - is a big city , in most cases with over half a million inhabitants in the city proper , and with a population of at least one million living in its urban agglomeration .

det(Metropolis-2, A-1)
nsubj(city-114, Metropolis-2)
dep(Metropolis-2, LBR-4)
amod(Ï-12, Greek-7)
nn(Ï-12, Ãƒâ-8)
nn(Ï-12, „-9)
nn(Ï-12, Ã-10)
nn(Ï-12, ‚-11)
prep_in(Metropolis-2, Ï-12)
amod(Ï-12, $-13)
dep($-13, Ãƒâ-14)
nn(â-37, „-15)
nn(â-37, Ã-16)
nn(â-37, ‚-17)
nn(â-37, Â-18)
nn(â-37, ®-19)
nn(â-37, Ãƒâˆ-20)
nn(â-37, ‚-21)
nn(â-37, Ã-22)
nn(â-37, ‚-23)
nn(â-37, â-24)
nn(â-37, ‰-25)
nn(â-37, ¥-26)
nn(â-37, Ãƒâ-27)
nn(â-37, „-28)
nn(â-37, Ã-29)
nn(â-37, ‚-30)
nn(â-37, Â-31)
nn(â-37, ·-32)
nn(â-37, Ãƒâˆ-33)
nn(â-37, ‚-34)
nn(â-37, Ã-35)
nn(â-37, ‚-36)
dep(‚-45, â-37)
num(cents-39, „-38)
dep(â-37, cents-39)
dep(‚-45, mÃƒâ-41)
nn(‚-45, ‰-42)
nn(‚-45, ¥-43)
nn(‚-45, Ã-44)
nsubj(â-46, ‚-45)
rcmod(Ï-12, â-46)
num(‚-52, $-47)
number($-47, žtÃƒâ-48)
number($-47, ‰-49)
nn(‚-52, ¥-50)
nn(‚-52, Ã-51)
nsubj(â-53, ‚-52)
dep(â-46, â-53)
dobj(â-53, $-54)
num($-54, žr-55)
partmod($-54, meaning-56)
dobj(meaning-56, mother-58)
nn(‚-64, Ãƒâˆ-61)
nn(‚-64, ‚-62)
nn(‚-64, Ã-63)
nsubj(â-65, ‚-64)
dep(â-46, â-65)
conj_and(â-53, â-65)
dobj(â-65, $-66)
num($-66, cents-67)
number(cents-67, Ãƒâˆ-68)
nn(‚-71, ‚-69)
nn(‚-71, Ã-70)
nsubj(â-72, ‚-71)
rcmod($-66, â-72)
num(‚-77, $-73)
number($-73, ˜Ãƒâ-74)
number($-73, „-75)
nn(‚-77, Ã-76)
dobj(â-72, ‚-77)
nn(‚-83, Â-78)
nn(‚-83, Ãƒâ-80)
nn(‚-83, „-81)
nn(‚-83, Ã-82)
nsubj(â-84, ‚-83)
rcmod(‚-77, â-84)
num(‰-92, $-85)
number($-85, ™-86)
number($-85, Ãƒâˆ-87)
nn(‰-92, ‚-88)
nn(‰-92, Ã-89)
nn(‰-92, ‚-90)
nn(‰-92, â-91)
dobj(â-84, ‰-92)
dobj(â-84, nbsp-94)
conj_and(‰-92, nbsp-94)
nn(â-99, pÃƒâˆžÃ-97)
nn(â-99, ‚-98)
nsubj(meaning-102, â-99)
amod(â-99, $-100)
dep($-100, œlis-101)
parataxis(city-114, meaning-102)
nn(town-106, city-104)
amod(town-106, \/-105)
dobj(meaning-102, town-106)
dep(town-106, RBR-109)
cop(city-114, is-111)
det(city-114, a-112)
amod(city-114, big-113)
root(ROOT-0, city-114)
amod(cases-118, most-117)
prep_in(city-114, cases-118)
quantmod(inhabitants-124, over-120)
quantmod(inhabitants-124, half-121)
quantmod(inhabitants-124, a-122)
number(inhabitants-124, million-123)
prep_with(cases-118, inhabitants-124)
det(city-127, the-126)
prep_in(inhabitants-124, city-127)
amod(city-127, proper-128)
det(population-133, a-132)
nsubj(living-139, population-133)
quantmod(million-138, at-135)
mwe(at-135, least-136)
pobj(at-135, least-136)
number(million-138, one-137)
prep_of(population-133, million-138)
prep_with(cases-118, living-139)
conj_and(inhabitants-124, living-139)
poss(agglomeration-143, its-141)
amod(agglomeration-143, urban-142)
prep_in(living-139, agglomeration-143)

A Microlith is a small stone tool , typically knapped of flint or chert , usually about three centimetres long or less ; They are typically one centimetre long and half a centimetre wide when finished .

det(Microlith-2, A-1)
nsubj(tool-7, Microlith-2)
cop(tool-7, is-3)
det(tool-7, a-4)
amod(tool-7, small-5)
nn(tool-7, stone-6)
root(ROOT-0, tool-7)
advmod(knapped-10, typically-9)
dep(tool-7, knapped-10)
prep_of(knapped-10, flint-12)
prep_of(knapped-10, chert-14)
conj_or(flint-12, chert-14)
advmod(knapped-10, usually-16)
prep(knapped-10, about-17)
num(centimetres-19, three-18)
npadvmod(long-20, centimetres-19)
pcomp(about-17, long-20)
dep(tool-7, less-22)
conj_or(knapped-10, less-22)
nsubj(wide-34, They-24)
cop(wide-34, are-25)
advmod(wide-34, typically-26)
num(centimetre-28, one-27)
npadvmod(wide-34, centimetre-28)
advmod(centimetre-28, long-29)
advmod(centimetre-28, half-31)
conj_and(long-29, half-31)
det(centimetre-33, a-32)
pobj(long-29, centimetre-33)
parataxis(tool-7, wide-34)
advmod(finished-36, when-35)
dep(wide-34, finished-36)

The Menorah - LBR - Hebrew : ÃƒËœÃ ‚ Ä ± ÃƒËœÃ ‚ & nbsp ; ÃƒËœÃ ‚ ï # ¿ ÃƒËœÃ ‚ Â ¨ ÃƒËœÃ ‚ â $ ° - RBR - , is a seven branched candelabrum and has been a symbol of Judaism for almost 3000 years .

nn(Hebrew-6, The-1)
nn(Hebrew-6, Menorah-2)
dep(Hebrew-6, LBR-4)
root(ROOT-0, Hebrew-6)
nn(‚-13, ÃƒËœÃ-8)
nn(‚-13, ‚-9)
nn(‚-13, Ä-10)
nn(‚-13, ±-11)
nn(‚-13, ÃƒËœÃ-12)
dep(Hebrew-6, ‚-13)
dep(Hebrew-6, nbsp-15)
conj_and(‚-13, nbsp-15)
nn(‚-18, ÃƒËœÃ-17)
nsubj(ï-19, ‚-18)
dep(‚-13, ï-19)
number(ÃƒËœÃ-22, #-20)
number(ÃƒËœÃ-22, ¿-21)
num(â-28, ÃƒËœÃ-22)
nn(â-28, ‚-23)
nn(â-28, Â-24)
nn(â-28, ¨-25)
nn(â-28, ÃƒËœÃ-26)
nn(â-28, ‚-27)
dobj(ï-19, â-28)
amod(â-28, $-29)
dep($-29, °-30)
dep(â-28, RBR-32)
cop(candelabrum-39, is-35)
det(candelabrum-39, a-36)
number(branched-38, seven-37)
num(candelabrum-39, branched-38)
dep(‚-13, candelabrum-39)
conj_and(ï-19, candelabrum-39)
aux(symbol-44, has-41)
cop(symbol-44, been-42)
det(symbol-44, a-43)
dep(‚-13, symbol-44)
conj_and(ï-19, symbol-44)
prep(symbol-44, of-45)
dep(of-45, Judaism-46)
advmod(years-50, almost-48)
num(years-50, 3000-49)
prep_for(symbol-44, years-50)

A Monorail is a transportation system based on a single beam .

det(Monorail-2, A-1)
nsubj(system-6, Monorail-2)
cop(system-6, is-3)
det(system-6, a-4)
nn(system-6, transportation-5)
root(ROOT-0, system-6)
prepc_based_on(system-6, on-8)
det(beam-11, a-9)
amod(beam-11, single-10)
pobj(system-6, beam-11)

MMIX - LBR - pronounced em-mix - RBR - is a 64-bit RISC instruction set architecture - LBR - ISA - RBR - designed by Donald Knuth , with significant contributions by John L. Hennessy - LBR - who contributed to the design of the MIPS processor - RBR - and Richard L. In Western music , Motet is a word that is applied to a number of highly varied choral musical compositions .

nsubj(instruction-14, MMIX-1)
nn(RBR-8, LBR-3)
amod(em-mix-6, pronounced-5)
dep(RBR-8, em-mix-6)
dep(MMIX-1, RBR-8)
cop(instruction-14, is-10)
det(instruction-14, a-11)
amod(instruction-14, 64-bit-12)
nn(instruction-14, RISC-13)
root(ROOT-0, instruction-14)
partmod(instruction-14, set-15)
dobj(set-15, architecture-16)
dep(set-15, LBR-18)
dep(LBR-18, ISA-20)
dep(ISA-20, RBR-22)
dep(LBR-18, designed-24)
nn(Knuth-27, Donald-26)
prep_by(designed-24, Knuth-27)
amod(contributions-31, significant-30)
prep_with(designed-24, contributions-31)
nn(Hennessy-35, John-33)
nn(Hennessy-35, L.-34)
prep_by(contributions-31, Hennessy-35)
nsubj(RBR-49, LBR-37)
nsubj(contributed-40, who-39)
rcmod(LBR-37, contributed-40)
det(design-43, the-42)
prep_to(contributed-40, design-43)
det(processor-47, the-45)
nn(processor-47, MIPS-46)
prep_of(design-43, processor-47)
conj_and(instruction-14, RBR-49)
parataxis(instruction-14, RBR-49)
nn(L.-53, Richard-52)
conj_and(instruction-14, L.-53)
dep(L.-53, In-54)
amod(music-56, Western-55)
pobj(In-54, music-56)
nsubj(word-61, Motet-58)
cop(word-61, is-59)
det(word-61, a-60)
ccomp(instruction-14, word-61)
conj_and(instruction-14, word-61)
nsubjpass(applied-64, word-61)
auxpass(applied-64, is-63)
rcmod(word-61, applied-64)
det(number-67, a-66)
prep_to(applied-64, number-67)
advmod(varied-70, highly-69)
amod(compositions-73, varied-70)
amod(compositions-73, choral-71)
amod(compositions-73, musical-72)
prep_of(number-67, compositions-73)

A Mentat is a profession or discipline in Frank Herbert 's fictional Dune universe .

det(Mentat-2, A-1)
nsubj(profession-5, Mentat-2)
cop(profession-5, is-3)
det(profession-5, a-4)
root(ROOT-0, profession-5)
conj_or(profession-5, discipline-7)
nn(Herbert-10, Frank-9)
poss(universe-14, Herbert-10)
amod(universe-14, fictional-12)
nn(universe-14, Dune-13)
prep_in(profession-5, universe-14)

A Minivan , multi-purpose vehicle - LBR - abbreviated MPV - RBR - , people-carrier , people-mover or multi-utility vehicle - LBR - shortened MUV - RBR - is a type of automobile similar in shape to a van that is designed for personal use .

det(vehicle-5, A-1)
amod(vehicle-5, Minivan-2)
amod(vehicle-5, multi-purpose-4)
root(ROOT-0, vehicle-5)
nn(LBR-22, LBR-7)
nn(MPV-10, abbreviated-9)
dep(LBR-22, MPV-10)
dep(MPV-10, RBR-12)
nn(vehicle-20, people-carrier-15)
conj_or(people-carrier-15, people-mover-17)
nn(vehicle-20, people-mover-17)
conj_or(people-carrier-15, multi-utility-19)
nn(vehicle-20, multi-utility-19)
appos(MPV-10, vehicle-20)
dep(vehicle-5, LBR-22)
nn(MUV-25, shortened-24)
nsubj(type-31, MUV-25)
dep(MUV-25, RBR-27)
cop(type-31, is-29)
det(type-31, a-30)
dep(LBR-22, type-31)
prep_of(type-31, automobile-33)
amod(automobile-33, similar-34)
prep_in(similar-34, shape-36)
det(van-39, a-38)
prep_to(similar-34, van-39)
nsubjpass(designed-42, van-39)
auxpass(designed-42, is-41)
rcmod(van-39, designed-42)
amod(use-45, personal-44)
prep_for(designed-42, use-45)

A Manifesto is a public declaration of principles and intentions , often political in nature , but may also be life stance related .

det(Manifesto-2, A-1)
nsubj(declaration-6, Manifesto-2)
cop(declaration-6, is-3)
det(declaration-6, a-4)
amod(declaration-6, public-5)
root(ROOT-0, declaration-6)
prep_of(declaration-6, principles-8)
prep_of(declaration-6, intentions-10)
conj_and(principles-8, intentions-10)
advmod(political-13, often-12)
amod(declaration-6, political-13)
prep_in(political-13, nature-15)
aux(stance-22, may-18)
advmod(stance-22, also-19)
cop(stance-22, be-20)
nn(stance-22, life-21)
conj_but(declaration-6, stance-22)
partmod(stance-22, related-23)

A Magneto is a device used in the ignition system of gasoline-powered internal combustion engines to provide pulses of high tension current to the spark plugs .

det(Magneto-2, A-1)
nsubj(device-5, Magneto-2)
cop(device-5, is-3)
det(device-5, a-4)
root(ROOT-0, device-5)
xsubj(provide-17, device-5)
partmod(device-5, used-6)
det(system-10, the-8)
nn(system-10, ignition-9)
prep_in(used-6, system-10)
amod(engines-15, gasoline-powered-12)
amod(engines-15, internal-13)
nn(engines-15, combustion-14)
prep_of(system-10, engines-15)
aux(provide-17, to-16)
xcomp(used-6, provide-17)
dobj(provide-17, pulses-18)
amod(current-22, high-20)
nn(current-22, tension-21)
prep_of(pulses-18, current-22)
det(plugs-26, the-24)
amod(plugs-26, spark-25)
prep_to(provide-17, plugs-26)

Manorialism or Seigneurialism was the organizing principle of rural economy and society widely practiced in medieval western and parts of central Europe .

nsubj(principle-7, Manorialism-1)
conj_or(Manorialism-1, Seigneurialism-3)
nsubj(principle-7, Seigneurialism-3)
cop(principle-7, was-4)
det(principle-7, the-5)
amod(principle-7, organizing-6)
root(ROOT-0, principle-7)
amod(economy-10, rural-9)
prep_of(principle-7, economy-10)
prep_of(principle-7, society-12)
conj_and(economy-10, society-12)
advmod(practiced-14, widely-13)
partmod(economy-10, practiced-14)
amod(western-17, medieval-16)
prep_in(practiced-14, western-17)
prep_in(practiced-14, parts-19)
conj_and(western-17, parts-19)
amod(Europe-22, central-21)
prep_of(western-17, Europe-22)

A Manhattan is a cocktail made with whiskey , sweet vermouth , ice , and bitters .

det(Manhattan-2, A-1)
nsubj(cocktail-5, Manhattan-2)
cop(cocktail-5, is-3)
det(cocktail-5, a-4)
root(ROOT-0, cocktail-5)
partmod(cocktail-5, made-6)
prep_with(made-6, whiskey-8)
amod(vermouth-11, sweet-10)
prep_with(made-6, vermouth-11)
conj_and(whiskey-8, vermouth-11)
prep_with(made-6, ice-13)
conj_and(whiskey-8, ice-13)
prep_with(made-6, bitters-16)
conj_and(whiskey-8, bitters-16)

The word Mojito is the diminutive of the word mojo .

det(Mojito-3, The-1)
nn(Mojito-3, word-2)
nsubj(diminutive-6, Mojito-3)
cop(diminutive-6, is-4)
det(diminutive-6, the-5)
root(ROOT-0, diminutive-6)
det(mojo-10, the-8)
nn(mojo-10, word-9)
prep_of(diminutive-6, mojo-10)

The Multiverse - LBR - or meta-universe - RBR - is the hypothetical set of multiple possible universes - LBR - including our universe - RBR - that together comprise all of reality .

det(Multiverse-2, The-1)
nsubj(set-14, Multiverse-2)
nn(RBR-9, LBR-4)
dep(meta-universe-7, or-6)
dep(RBR-9, meta-universe-7)
dep(Multiverse-2, RBR-9)
cop(set-14, is-11)
det(set-14, the-12)
amod(set-14, hypothetical-13)
root(ROOT-0, set-14)
amod(universes-18, multiple-16)
amod(universes-18, possible-17)
prep_of(set-14, universes-18)
dep(universes-18, LBR-20)
poss(universe-24, our-23)
prep_including(universes-18, universe-24)
nsubj(comprise-30, universe-24)
dep(universe-24, RBR-26)
advmod(comprise-30, together-29)
rcmod(universe-24, comprise-30)
dobj(comprise-30, all-31)
prep_of(all-31, reality-33)

Millennialism - LBR - from millennium , Latin for `` thousand years `` - RBR - , or chiliasm in Greek , is primarily a belief expressed in some Christian denominations , and literature , that there will be a Golden Age or Paradise on Earth where `` Christ will reign `` prior to the final judgment and future eternal state , primarily derived from the book of bibleverse .

nsubj(belief-26, Millennialism-1)
dep(Millennialism-1, LBR-3)
dep(LBR-3, from-5)
nn(Latin-8, millennium-6)
pobj(from-5, Latin-8)
num(years-12, thousand-11)
prep_for(Latin-8, years-12)
dep(years-12, RBR-15)
conj_or(Millennialism-1, chiliasm-19)
nsubj(belief-26, chiliasm-19)
prep_in(chiliasm-19, Greek-21)
cop(belief-26, is-23)
advmod(belief-26, primarily-24)
det(belief-26, a-25)
root(ROOT-0, belief-26)
partmod(belief-26, expressed-27)
det(denominations-31, some-29)
amod(denominations-31, Christian-30)
prep_in(expressed-27, denominations-31)
nsubj(derived-64, literature-34)
dep(Age-42, that-36)
expl(Age-42, there-37)
aux(Age-42, will-38)
cop(Age-42, be-39)
det(Age-42, a-40)
nn(Age-42, Golden-41)
dep(literature-34, Age-42)
dep(literature-34, Paradise-44)
conj_or(Age-42, Paradise-44)
prep_on(Age-42, Earth-46)
advmod(reign-51, where-47)
nsubj(reign-51, Christ-49)
aux(reign-51, will-50)
advcl(Age-42, reign-51)
det(judgment-57, the-55)
amod(judgment-57, final-56)
prep_prior_to(reign-51, judgment-57)
amod(state-61, future-59)
amod(state-61, eternal-60)
prep_prior_to(reign-51, state-61)
conj_and(judgment-57, state-61)
advmod(derived-64, primarily-63)
conj_and(belief-26, derived-64)
det(book-67, the-66)
prep_from(derived-64, book-67)
prep_of(book-67, bibleverse-69)

The word Modulo - LBR - Latin , with respect to a modulus of - RBR - is the Latin ablative of modulus which itself means `` a small measure .

det(Modulo-3, The-1)
nn(Modulo-3, word-2)
nsubj(ablative-21, Modulo-3)
nn(RBR-16, LBR-5)
dep(RBR-16, Latin-7)
dep(Latin-7, with-9)
pobj(with-9, respect-10)
det(modulus-13, a-12)
prep_to(respect-10, modulus-13)
prep(modulus-13, of-14)
dep(Modulo-3, RBR-16)
cop(ablative-21, is-18)
det(ablative-21, the-19)
amod(ablative-21, Latin-20)
root(ROOT-0, ablative-21)
prep_of(ablative-21, modulus-23)
dobj(means-26, modulus-23)
rel(means-26, which-24)
nsubj(means-26, itself-25)
rcmod(modulus-23, means-26)
det(measure-30, a-28)
amod(measure-30, small-29)
dobj(means-26, measure-30)

`` It was introduced into mathematics in the book Disquisitiones Arithmeticae by Carl Friedrich Gauss in 1801 .

nsubjpass(introduced-4, It-2)
auxpass(introduced-4, was-3)
root(ROOT-0, introduced-4)
prep_into(introduced-4, mathematics-6)
det(Arithmeticae-11, the-8)
nn(Arithmeticae-11, book-9)
nn(Arithmeticae-11, Disquisitiones-10)
prep_in(mathematics-6, Arithmeticae-11)
nn(Gauss-15, Carl-13)
nn(Gauss-15, Friedrich-14)
agent(introduced-4, Gauss-15)
prep_in(Gauss-15, 1801-17)

The Maremma is an area in Italy , consisting of part of southern Tuscany - LBR - and partly coincident with province of Grosseto area - RBR - and some part of northern Lazio - LBR - a bordering region of the province of Viterbo - RBR - .

det(Maremma-2, The-1)
nsubj(area-5, Maremma-2)
cop(area-5, is-3)
det(area-5, an-4)
root(ROOT-0, area-5)
prep_in(area-5, Italy-7)
partmod(area-5, consisting-9)
prep_of(consisting-9, part-11)
amod(Tuscany-14, southern-13)
prep_of(part-11, Tuscany-14)
prep_of(consisting-9, LBR-16)
amod(part-11, LBR-16)
conj_and(part-11, LBR-16)
advmod(coincident-20, partly-19)
amod(part-11, coincident-20)
conj_and(part-11, coincident-20)
conj_and(LBR-16, coincident-20)
prep_with(coincident-20, province-22)
nn(area-25, Grosseto-24)
prep_of(province-22, area-25)
prep_of(consisting-9, RBR-27)
conj_and(part-11, RBR-27)
det(part-31, some-30)
prep_of(consisting-9, part-31)
conj_and(part-11, part-31)
amod(Lazio-34, northern-33)
prep_of(part-31, Lazio-34)
dep(area-5, LBR-36)
det(region-40, a-38)
amod(region-40, bordering-39)
dep(LBR-36, region-40)
det(province-43, the-42)
prep_of(region-40, province-43)
prep_of(province-43, Viterbo-45)
dep(Viterbo-45, RBR-47)

A Multivibrator is an electronic circuit used to implement a variety of simple two-state systems such as oscillators , timers and flip-flops .

det(Multivibrator-2, A-1)
nsubj(circuit-6, Multivibrator-2)
cop(circuit-6, is-3)
det(circuit-6, an-4)
amod(circuit-6, electronic-5)
root(ROOT-0, circuit-6)
xsubj(implement-9, circuit-6)
partmod(circuit-6, used-7)
aux(implement-9, to-8)
xcomp(used-7, implement-9)
det(variety-11, a-10)
dobj(implement-9, variety-11)
amod(systems-15, simple-13)
amod(systems-15, two-state-14)
prep_of(variety-11, systems-15)
prep_such_as(systems-15, oscillators-18)
prep_such_as(systems-15, timers-20)
conj_and(oscillators-18, timers-20)
prep_such_as(systems-15, flip-flops-22)
conj_and(oscillators-18, flip-flops-22)

A Microcontroller - LBR - also MCU or Ãƒâ ‰ & nbsp ; Ã ‚ ÂµC - RBR - is a computer-on-a-chip , containing a processor , memory , and input \/ output functions .

det(Microcontroller-2, A-1)
nsubj(computer-on-a-chip-22, Microcontroller-2)
nn(RBR-18, LBR-4)
dep(‰-10, also-6)
nn(‰-10, MCU-7)
conj_or(MCU-7, Ãƒâ-9)
nn(‰-10, Ãƒâ-9)
dep(RBR-18, ‰-10)
conj_and(‰-10, nbsp-12)
dep(RBR-18, nbsp-12)
nn(ÂµC-16, Ã-14)
nn(ÂµC-16, ‚-15)
dep(‰-10, ÂµC-16)
dep(Microcontroller-2, RBR-18)
cop(computer-on-a-chip-22, is-20)
det(computer-on-a-chip-22, a-21)
root(ROOT-0, computer-on-a-chip-22)
partmod(computer-on-a-chip-22, containing-24)
xcomp(computer-on-a-chip-22, containing-24)
det(processor-26, a-25)
dobj(containing-24, processor-26)
dobj(containing-24, memory-28)
conj_and(processor-26, memory-28)
dobj(containing-24, input-31)
conj_and(processor-26, input-31)
partmod(processor-26, \/-32)
nn(functions-34, output-33)
dobj(\/-32, functions-34)

Entering dictionaries after World War II , the word Motel , an abbreviation of motor and hotel or motorists ' hotel , referred initially to a type of hotel in Columbia , MD of a single building of connected rooms whose doors faced a parking lot and , in some circumstances , a common area ; or a series of small cabins with common parking .

partmod(referred-23, Entering-1)
dobj(Entering-1, dictionaries-2)
nn(II-6, World-4)
nn(II-6, War-5)
prep_after(Entering-1, II-6)
det(Motel-10, the-8)
nn(Motel-10, word-9)
nsubj(referred-23, Motel-10)
det(abbreviation-13, an-12)
appos(Motel-10, abbreviation-13)
prep_of(abbreviation-13, motor-15)
prep_of(abbreviation-13, hotel-17)
conj_and(motor-15, hotel-17)
poss(hotel-21, motorists-19)
appos(Motel-10, hotel-21)
conj_or(abbreviation-13, hotel-21)
root(ROOT-0, referred-23)
advmod(referred-23, initially-24)
det(type-27, a-26)
prep_to(referred-23, type-27)
prep_of(type-27, hotel-29)
nn(MD-33, Columbia-31)
prep_in(referred-23, MD-33)
poss(doors-42, MD-33)
det(building-37, a-35)
amod(building-37, single-36)
prep_of(MD-33, building-37)
amod(rooms-40, connected-39)
prep_of(building-37, rooms-40)
nsubj(faced-43, doors-42)
rcmod(MD-33, faced-43)
det(lot-46, a-44)
nn(lot-46, parking-45)
dobj(faced-43, lot-46)
dep(lot-46, in-49)
det(circumstances-51, some-50)
pobj(in-49, circumstances-51)
det(area-55, a-53)
amod(area-55, common-54)
dobj(faced-43, area-55)
conj_and(lot-46, area-55)
det(series-59, a-58)
dobj(faced-43, series-59)
conj_or(lot-46, series-59)
amod(cabins-62, small-61)
prep_of(series-59, cabins-62)
amod(parking-65, common-64)
prep_with(faced-43, parking-65)

The North Atlantic Treaty Organization - LBR - NATO - RBR - ; Organisation du TraitÃƒâˆžÃ ‚ Â © de l'Atlantique Nord - LBR - OTAN - RBR - ; - LBR - also called the North Atlantic Alliance , the Atlantic Alliance , or the Western Alliance - RBR - is a military alliance established by the signing of the North Atlantic Treaty on 4 April 1949 .

det(Organization-5, The-1)
nn(Organization-5, North-2)
nn(Organization-5, Atlantic-3)
nn(Organization-5, Treaty-4)
nsubj(called-35, Organization-5)
dep(Organization-5, LBR-7)
dep(LBR-7, NATO-9)
dep(NATO-9, RBR-11)
nn(©-19, Organisation-14)
nn(©-19, du-15)
nn(©-19, TraitÃƒâˆžÃ-16)
nn(©-19, ‚-17)
nn(©-19, Â-18)
dep(LBR-7, ©-19)
nn(OTAN-26, l'Atlantique-21)
nn(OTAN-26, Nord-22)
dep(OTAN-26, LBR-24)
prep_de(©-19, OTAN-26)
dep(OTAN-26, RBR-28)
dep(Organization-5, LBR-32)
advmod(called-35, also-34)
root(ROOT-0, called-35)
det(Alliance-39, the-36)
nn(Alliance-39, North-37)
nn(Alliance-39, Atlantic-38)
nsubj(alliance-55, Alliance-39)
det(Alliance-43, the-41)
nn(Alliance-43, Atlantic-42)
conj_or(Alliance-39, Alliance-43)
nsubj(alliance-55, Alliance-43)
det(Alliance-48, the-46)
nn(Alliance-48, Western-47)
conj_or(Alliance-39, Alliance-48)
nsubj(alliance-55, Alliance-48)
dep(Alliance-39, RBR-50)
cop(alliance-55, is-52)
det(alliance-55, a-53)
amod(alliance-55, military-54)
ccomp(called-35, alliance-55)
partmod(alliance-55, established-56)
det(signing-59, the-58)
agent(established-56, signing-59)
det(Treaty-64, the-61)
nn(Treaty-64, North-62)
nn(Treaty-64, Atlantic-63)
prep_of(signing-59, Treaty-64)
prep_on(established-56, 4-66)
tmod(established-56, April-67)
num(April-67, 1949-68)

The Netherlands - LBR - Dutch : Audio , Ãƒâ $ '' Ã ‚ âˆšne : dÃƒâ ‰ ˆÃ ‚ Ë ™ rlÃƒâ ‰ ˆÃ ‚ Å ’n t - RBR - is the European part of the Kingdom of the Netherlands , which consists of the Netherlands , the Netherlands Antilles and Aruba in the Caribbean .

det(Netherlands-2, The-1)
root(ROOT-0, Netherlands-2)
nsubj(part-36, LBR-4)
dep(LBR-4, Dutch-6)
nn(Ã-13, Audio-8)
appos(Ã-13, Ãƒâ-10)
nn(Ã-13, $-11)
dep(Dutch-6, Ã-13)
punct(âˆšne-15, ‚-14)
dep(Ã-13, âˆšne-15)
dep(âˆšne-15, dÃƒâ-17)
punct(dÃƒâ-17, ‰-18)
dep(Ë-21, ˆÃ-19)
punct(Ë-21, ‚-20)
dep(dÃƒâ-17, Ë-21)
punct(Ë-21, ™-22)
dep(Ë-21, rlÃƒâ-23)
punct(rlÃƒâ-23, ‰-24)
punct(rlÃƒâ-23, ˆÃ-25)
punct(t-29, ‚-26)
dep(t-29, Å-27)
nn(t-29, ’n-28)
dep(rlÃƒâ-23, t-29)
dep(t-29, RBR-31)
cop(part-36, is-33)
det(part-36, the-34)
amod(part-36, European-35)
dep(Netherlands-2, part-36)
det(Kingdom-39, the-38)
prep_of(part-36, Kingdom-39)
nsubj(consists-45, Kingdom-39)
det(Netherlands-42, the-41)
prep_of(Kingdom-39, Netherlands-42)
rcmod(Kingdom-39, consists-45)
det(Netherlands-48, the-47)
prep_of(consists-45, Netherlands-48)
det(Antilles-52, the-50)
nn(Antilles-52, Netherlands-51)
prep_of(consists-45, Antilles-52)
conj_and(Netherlands-48, Antilles-52)
prep_of(consists-45, Aruba-54)
conj_and(Netherlands-48, Aruba-54)
det(Caribbean-57, the-56)
prep_in(consists-45, Caribbean-57)

A Nibble - LBR - often , nybble - RBR - is the computing term for a four-bit aggregation , or half an octet - LBR - an octet being an 8-bit byte - RBR - .

det(Nibble-2, A-1)
root(ROOT-0, Nibble-2)
nsubj(term-15, LBR-4)
dep(nybble-8, often-6)
dep(LBR-4, nybble-8)
dep(nybble-8, RBR-10)
cop(term-15, is-12)
det(term-15, the-13)
amod(term-15, computing-14)
dep(Nibble-2, term-15)
det(aggregation-19, a-17)
amod(aggregation-19, four-bit-18)
prep_for(term-15, aggregation-19)
dep(Nibble-2, or-21)
predet(octet-24, half-22)
det(octet-24, an-23)
dep(Nibble-2, octet-24)
dep(octet-24, LBR-26)
det(octet-29, an-28)
nsubj(byte-33, octet-29)
cop(byte-33, being-30)
det(byte-33, an-31)
amod(byte-33, 8-bit-32)
dep(octet-24, byte-33)
dep(byte-33, RBR-35)

The Neolithic - LBR - from Greek Ãƒâ „ Ã ‚ âˆ Ãƒâ „ Ã ‚ ÂµÃƒâ „ Ã ‚ Â ¿ Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ Â ¸ Ãƒâ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ ÂºÃƒâˆ ‚ Ã ‚ â $ ˜Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; - neolithikos , from Ãƒâ „ Ã ‚ âˆ Ãƒâ „ Ã ‚ â $ `` Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; neos , `` new `` + Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ¯ Ãƒâ „ Ã ‚ Â ¸ Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; lithos , `` stone `` - RBR - or `` New `` Stone Age , was a period in the development of human technology beginning about 10,000 B. C. Nomic actually refers to a large number of games based on the initial ruleset laid -LRB- PRT -RRB- out -LRB- \/ PRT -RRB- by Peter Suber in his book .

det(Neolithic-2, The-1)
nsubj(period-155, Neolithic-2)
dep(Ã-31, LBR-4)
dep(LBR-4, from-6)
amod(Ãƒâ-29, Greek-7)
nn(Ãƒâ-29, Ãƒâ-8)
punct(Ãƒâ-29, „-9)
nn(Ãƒâ-29, Ã-10)
nn(Ãƒâ-29, ‚-11)
nn(Ãƒâ-29, âˆ-12)
nn(Ãƒâ-29, Ãƒâ-13)
punct(Ãƒâ-29, „-14)
nn(Ãƒâ-29, Ã-15)
punct(Ãƒâ-29, ‚-16)
nn(Ãƒâ-29, ÂµÃƒâ-17)
punct(Ãƒâ-29, „-18)
nn(Ãƒâ-29, Ã-19)
punct(Ãƒâ-29, ‚-20)
nn(Ãƒâ-29, Â-21)
punct(Ãƒâ-29, ¿-22)
nn(Ãƒâ-29, Ãƒâ-23)
punct(Ãƒâ-29, „-24)
nn(Ãƒâ-29, Ã-25)
punct(Ãƒâ-29, ‚-26)
nn(Ãƒâ-29, Â-27)
pobj(from-6, Ãƒâ-29)
punct(Ã-31, „-30)
dep(Neolithic-2, Ã-31)
punct(Ã-31, ‚-32)
det($-34, â-33)
dep(Ã-31, $-34)
num($-34, ™-35)
nn(Ã-55, Ãƒâ-36)
punct(Ã-55, „-37)
nn(Ã-55, Ã-38)
punct(Ã-55, ‚-39)
nn(Ã-55, Â-40)
punct(Ã-55, ¸-41)
nn(Ã-55, Ãƒâ-42)
punct(Ã-55, „-43)
nn(Ã-55, Ã-44)
punct(Ã-55, ‚-45)
amod(Ã-55, â-46)
amod(Ã-55, $-47)
punct(Ã-55, ™-48)
nn(Ã-55, Ãƒâ-49)
punct(Ã-55, „-50)
nn(Ã-55, Ã-51)
punct(Ã-55, ‚-52)
nn(Ã-55, ÂºÃƒâˆ-53)
punct(Ã-55, ‚-54)
dep($-34, Ã-55)
punct($-34, ‚-56)
dep($-34, â-57)
dep(â-57, $-58)
num($-58, ˜Ãƒâˆ-59)
punct(â-63, ‚-60)
nn(â-63, Ã-61)
punct(â-63, ‚-62)
dep($-58, â-63)
punct(â-63, ‰-64)
dep($-58, nbsp-66)
conj_and(â-63, nbsp-66)
dep($-34, neolithikos-69)
dep(neolithikos-69, from-71)
nn(‰-95, Ãƒâ-72)
punct(‰-95, „-73)
pobj(from-71, Ã-74)
conj_and(‰-95, Ã-74)
nn(‰-95, Ã-74)
nn(‰-95, ‚-75)
nn(‰-95, âˆ-76)
nn(‰-95, Ãƒâ-77)
punct(‰-95, „-78)
pobj(from-71, Ã-79)
conj_and(‰-95, Ã-79)
nn(‰-95, Ã-79)
nn(‰-95, ‚-80)
nn(‰-95, â-81)
nn(‰-95, $-82)
pobj(from-71, Ãƒâ-84)
conj_and(‰-95, Ãƒâ-84)
nn(‰-95, Ãƒâ-84)
punct(‰-95, „-85)
pobj(from-71, Ã-86)
conj_and(‰-95, Ã-86)
nn(‰-95, Ã-86)
punct(‰-95, ‚-87)
pobj(from-71, Â-88)
conj_and(‰-95, Â-88)
nn(‰-95, Â-88)
punct(‰-95, ¿-89)
pobj(from-71, Ãƒâˆ-90)
conj_and(‰-95, Ãƒâˆ-90)
nn(‰-95, Ãƒâˆ-90)
punct(‰-95, ‚-91)
pobj(from-71, Ã-92)
conj_and(‰-95, Ã-92)
nn(‰-95, Ã-92)
punct(‰-95, ‚-93)
pobj(from-71, â-94)
conj_and(‰-95, â-94)
nn(‰-95, â-94)
pobj(from-71, ‰-95)
pobj(from-71, nbsp-97)
conj_and(‰-95, nbsp-97)
dep(neolithikos-69, neos-99)
amod(Ãƒâ-111, new-102)
nn(Ãƒâ-111, +-104)
nn(Ãƒâ-111, Ãƒâ-105)
punct(Ãƒâ-111, „-106)
nn(Ãƒâ-111, Ã-107)
punct(Ãƒâ-111, ‚-108)
nn(Ãƒâ-111, Â-109)
appos(neos-99, Ãƒâ-111)
punct(neos-99, „-112)
nn(‰-134, Ã-113)
punct(‰-134, ‚-114)
dep(neos-99, Â-115)
conj_and(‰-134, Â-115)
nn(‰-134, Â-115)
punct(‰-134, ¯-116)
dep(neos-99, Ãƒâ-117)
conj_and(‰-134, Ãƒâ-117)
nn(‰-134, Ãƒâ-117)
punct(‰-134, „-118)
dep(neos-99, Ã-119)
conj_and(‰-134, Ã-119)
nn(‰-134, Ã-119)
punct(‰-134, ‚-120)
dep(neos-99, Â-121)
conj_and(‰-134, Â-121)
nn(‰-134, Â-121)
punct(‰-134, ¸-122)
dep(neos-99, Ãƒâ-123)
conj_and(‰-134, Ãƒâ-123)
nn(‰-134, Ãƒâ-123)
punct(‰-134, „-124)
dep(neos-99, Ã-125)
conj_and(‰-134, Ã-125)
nn(‰-134, Ã-125)
punct(‰-134, ‚-126)
dep(neos-99, Â-127)
conj_and(‰-134, Â-127)
nn(‰-134, Â-127)
punct(‰-134, ¿-128)
dep(neos-99, Ãƒâˆ-129)
conj_and(‰-134, Ãƒâˆ-129)
nn(‰-134, Ãƒâˆ-129)
punct(‰-134, ‚-130)
dep(neos-99, Ã-131)
conj_and(‰-134, Ã-131)
nn(‰-134, Ã-131)
punct(‰-134, ‚-132)
dep(neos-99, â-133)
conj_and(‰-134, â-133)
nn(‰-134, â-133)
dep(neos-99, ‰-134)
dep(neos-99, nbsp-136)
conj_and(‰-134, nbsp-136)
dep(neos-99, lithos-138)
conj_and(‰-134, lithos-138)
nn(RBR-144, stone-141)
appos(lithos-138, RBR-144)
nn(Age-151, New-148)
nn(Age-151, Stone-150)
dep(neos-99, Age-151)
conj_or(‰-134, Age-151)
cop(period-155, was-153)
det(period-155, a-154)
root(ROOT-0, period-155)
det(development-158, the-157)
prep_in(period-155, development-158)
amod(technology-161, human-160)
prep_of(development-158, technology-161)
quantmod(10,000-164, about-163)
prep_beginning(technology-161, 10,000-164)
dobj(refers-169, 10,000-164)
nn(Nomic-167, B.-165)
nn(Nomic-167, C.-166)
nsubj(refers-169, Nomic-167)
advmod(refers-169, actually-168)
rcmod(10,000-164, refers-169)
det(number-173, a-171)
amod(number-173, large-172)
prep_to(refers-169, number-173)
prep_of(number-173, games-175)
partmod(games-175, based-176)
det(ruleset-180, the-178)
amod(ruleset-180, initial-179)
prep_on(based-176, ruleset-180)
partmod(ruleset-180, laid-181)
dep(laid-181, PRT-183)
advmod(PRT-183, out-185)
abbrev(number-173, \/-187)
dep(\/-187, PRT-188)
nn(Suber-192, Peter-191)
prep_by(10,000-164, Suber-192)
poss(book-195, his-194)
prep_in(Suber-192, book-195)

The Naraoiidae is a family of soft-shelled trilobite-like arthropods that are known only from the early and middle Cambrian -- primarily from the Burgess Shale of British Columbia and the Maotianshan Shale of China .

det(Naraoiidae-2, The-1)
nsubj(family-5, Naraoiidae-2)
cop(family-5, is-3)
det(family-5, a-4)
root(ROOT-0, family-5)
nsubjpass(known-12, family-5)
amod(arthropods-9, soft-shelled-7)
amod(arthropods-9, trilobite-like-8)
prep_of(family-5, arthropods-9)
auxpass(known-12, are-11)
rcmod(family-5, known-12)
advmod(known-12, only-13)
det(Cambrian-19, the-15)
amod(Cambrian-19, early-16)
conj_and(early-16, middle-18)
amod(Cambrian-19, middle-18)
prep_from(known-12, Cambrian-19)
advmod(known-12, primarily-21)
det(Shale-25, the-23)
nn(Shale-25, Burgess-24)
prep_from(known-12, Shale-25)
nn(Columbia-28, British-27)
prep_of(Shale-25, Columbia-28)
det(Shale-32, the-30)
nn(Shale-32, Maotianshan-31)
prep_from(known-12, Shale-32)
conj_and(Shale-25, Shale-32)
prep_of(Shale-32, China-34)

Nortel Networks Corporation - LBR - NT NT - RBR - , formerly known as Northern Telecom Limited and sometimes known simply as Nortel , is a multinational telecommunications equipment manufacturer headquartered in Toronto , Canada .

nn(Corporation-3, Nortel-1)
nn(Corporation-3, Networks-2)
nsubj(manufacturer-31, Corporation-3)
nn(RBR-10, LBR-5)
nn(NT-8, NT-7)
dep(RBR-10, NT-8)
dep(Corporation-3, RBR-10)
advmod(known-14, formerly-13)
ccomp(manufacturer-31, known-14)
nn(Limited-18, Northern-16)
nn(Limited-18, Telecom-17)
prep_as(known-14, Limited-18)
advmod(known-21, sometimes-20)
conj_and(known-14, known-21)
ccomp(manufacturer-31, known-21)
advmod(known-21, simply-22)
prep_as(known-21, Nortel-24)
cop(manufacturer-31, is-26)
det(manufacturer-31, a-27)
amod(manufacturer-31, multinational-28)
nn(manufacturer-31, telecommunications-29)
nn(manufacturer-31, equipment-30)
root(ROOT-0, manufacturer-31)
partmod(manufacturer-31, headquartered-32)
nn(Canada-36, Toronto-34)
prep_in(headquartered-32, Canada-36)

The Nile - LBR - ÃƒË˜Ã ‚ Â § ÃƒË ™ Ã ‚ â ‰ ¥ ÃƒË ™ Ã ‚ âˆ `` ÃƒË ™ Ã ‚ â $ ¦ ÃƒË ™ Ã ‚ â ‰ ¥ , an-nÃƒâ ‰ ¥ Ã ‚ Â `` l , Ancient Egyptian iteru or ÃƒÂ ¡ Ã ‚ Â ¸ Ã ‚ â ‚ ¬ ` pÃƒâ ‰ ¥ Ã ‚ Â , Coptic piaro or phiaro - RBR - is a major north-flowing river in Africa , generally regarded as the longest river in the world .

det(Nile-2, The-1)
nsubj(river-81, Nile-2)
nn(RBR-75, LBR-4)
number(‚-7, ÃƒË˜Ã-6)
num(âˆ-21, ‚-7)
nn(âˆ-21, Â-8)
nn(âˆ-21, §-9)
nn(âˆ-21, ÃƒË-10)
nn(âˆ-21, ™-11)
nn(âˆ-21, Ã-12)
nn(âˆ-21, ‚-13)
nn(âˆ-21, â-14)
nn(âˆ-21, ‰-15)
nn(âˆ-21, ¥-16)
nn(âˆ-21, ÃƒË-17)
nn(âˆ-21, ™-18)
nn(âˆ-21, Ã-19)
nn(âˆ-21, ‚-20)
dep(RBR-75, âˆ-21)
nn(â-27, ÃƒË-23)
nn(â-27, ™-24)
nn(â-27, Ã-25)
nn(â-27, ‚-26)
dep(âˆ-21, â-27)
num(¥-36, $-28)
number($-28, ¦-29)
number($-28, ÃƒË-30)
nn(¥-36, ™-31)
nn(¥-36, Ã-32)
nn(¥-36, ‚-33)
nn(¥-36, â-34)
nn(¥-36, ‰-35)
dep(â-27, ¥-36)
nn(Â-43, an-nÃƒâ-38)
nn(Â-43, ‰-39)
nn(Â-43, ¥-40)
nn(Â-43, Ã-41)
nn(Â-43, ‚-42)
appos(âˆ-21, Â-43)
dep(Â-43, l-45)
amod(¬-61, Ancient-47)
amod(iteru-49, Egyptian-48)
amod(¬-61, iteru-49)
nn(‚-60, ÃƒÂ-51)
nn(‚-60, ¡-52)
nn(‚-60, Ã-53)
nn(‚-60, ‚-54)
nn(‚-60, Â-55)
nn(‚-60, ¸-56)
nn(‚-60, Ã-57)
nn(‚-60, ‚-58)
nn(‚-60, â-59)
conj_or(iteru-49, ‚-60)
amod(¬-61, ‚-60)
appos(âˆ-21, ¬-61)
nn(Â-68, pÃƒâ-63)
nn(Â-68, ‰-64)
nn(Â-68, ¥-65)
nn(Â-68, Ã-66)
nn(Â-68, ‚-67)
dep(¬-61, Â-68)
amod(piaro-71, Coptic-70)
dep(¬-61, piaro-71)
conj_or(Â-68, piaro-71)
dep(¬-61, phiaro-73)
conj_or(Â-68, phiaro-73)
dep(Nile-2, RBR-75)
cop(river-81, is-77)
det(river-81, a-78)
amod(river-81, major-79)
amod(river-81, north-flowing-80)
root(ROOT-0, river-81)
prep_in(river-81, Africa-83)
advmod(regarded-86, generally-85)
partmod(river-81, regarded-86)
det(river-90, the-88)
amod(river-90, longest-89)
prep_as(regarded-86, river-90)
det(world-93, the-92)
prep_in(river-90, world-93)

Neuroscience generally includes all scientific studies involving the nervous system .

nsubj(includes-3, Neuroscience-1)
advmod(includes-3, generally-2)
root(ROOT-0, includes-3)
det(studies-6, all-4)
amod(studies-6, scientific-5)
dobj(includes-3, studies-6)
det(system-10, the-8)
amod(system-10, nervous-9)
prep_involving(studies-6, system-10)

In engineering , woodworking and construction , a Nail is a pin-shaped , sharp object of hard metal , typically steel , used as a fastener .

prep_in(object-15, engineering-2)
conj_and(engineering-2, woodworking-4)
prep_in(object-15, woodworking-4)
conj_and(engineering-2, construction-6)
prep_in(object-15, construction-6)
det(Nail-9, a-8)
nsubj(object-15, Nail-9)
cop(object-15, is-10)
det(object-15, a-11)
amod(object-15, pin-shaped-12)
amod(object-15, sharp-14)
root(ROOT-0, object-15)
amod(metal-18, hard-17)
prep_of(object-15, metal-18)
advmod(metal-18, typically-20)
dep(metal-18, steel-21)
partmod(steel-21, used-23)
det(fastener-26, a-25)
prep_as(used-23, fastener-26)

A Nerve is an enclosed , cable-like bundle of axons - LBR - the long , slender projection of a neuron - RBR - .

det(Nerve-2, A-1)
nsubj(bundle-8, Nerve-2)
cop(bundle-8, is-3)
det(bundle-8, an-4)
amod(bundle-8, enclosed-5)
amod(bundle-8, cable-like-7)
root(ROOT-0, bundle-8)
prep_of(bundle-8, axons-10)
dep(bundle-8, LBR-12)
det(projection-18, the-14)
amod(projection-18, long-15)
amod(projection-18, slender-17)
dep(LBR-12, projection-18)
det(neuron-21, a-20)
prep_of(projection-18, neuron-21)
dep(neuron-21, RBR-23)

The Necronomicon is a fictional book appearing in the stories by horror novelist H. P. Lovecraft .

det(Necronomicon-2, The-1)
nsubj(book-6, Necronomicon-2)
cop(book-6, is-3)
det(book-6, a-4)
amod(book-6, fictional-5)
root(ROOT-0, book-6)
partmod(book-6, appearing-7)
det(stories-10, the-9)
prep_in(appearing-7, stories-10)
nn(Lovecraft-16, horror-12)
nn(Lovecraft-16, novelist-13)
nn(Lovecraft-16, H.-14)
nn(Lovecraft-16, P.-15)
agent(appearing-7, Lovecraft-16)

The Neogene is a geologic period and system starting 23.03 Ãƒâ ‰ & nbsp ; Ã ‚ Â ± 0.05 million years ago and lasting either until today or ending 2.588 million years ago with the beginning of the Quaternary .

det(Neogene-2, The-1)
nsubj(period-6, Neogene-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
conj_and(period-6, system-8)
dep(period-6, starting-9)
num(‰-12, 23.03-10)
nn(‰-12, Ãƒâ-11)
dobj(starting-9, ‰-12)
dobj(starting-9, nbsp-14)
conj_and(‰-12, nbsp-14)
nn(±-19, Ã-16)
nn(±-19, ‚-17)
nn(±-19, Â-18)
dep(‰-12, ±-19)
num(years-22, 0.05-20)
num(years-22, million-21)
npadvmod(ago-23, years-22)
advmod(‰-12, ago-23)
dep(period-6, lasting-25)
conj_and(starting-9, lasting-25)
advmod(lasting-25, either-26)
prep_until(lasting-25, today-28)
dep(period-6, ending-30)
conj_or(starting-9, ending-30)
number(million-32, 2.588-31)
num(years-33, million-32)
npadvmod(ago-34, years-33)
advmod(ending-30, ago-34)
det(beginning-37, the-36)
prep_with(ending-30, beginning-37)
det(Quaternary-40, the-39)
prep_of(beginning-37, Quaternary-40)

In inorganic chemistry , a Nitrate is a salt of nitric acid with an ion composed of one nitrogen and three oxygen atoms - LBR - -LRB- INTJ -RRB- NO -LRB- \/ INTJ -RRB- -LRB- ; -LRB- LST -RRB- 3 -LRB- \/ LST -RRB- -LRB- ; -LRB- ; ÃƒÂ cents Ã ‚ âˆšÃ ‚ â $ š -LRB- ; - RBR - .

amod(chemistry-3, inorganic-2)
prep_in(salt-9, chemistry-3)
det(Nitrate-6, a-5)
nsubj(salt-9, Nitrate-6)
cop(salt-9, is-7)
det(salt-9, a-8)
root(ROOT-0, salt-9)
amod(acid-12, nitric-11)
prep_of(salt-9, acid-12)
det(ion-15, an-14)
prep_with(acid-12, ion-15)
partmod(ion-15, composed-16)
num(nitrogen-19, one-18)
prep_of(composed-16, nitrogen-19)
num(atoms-23, three-21)
nn(atoms-23, oxygen-22)
prep_of(composed-16, atoms-23)
conj_and(nitrogen-19, atoms-23)
nn(NO-30, LBR-25)
abbrev(NO-30, INTJ-28)
dep(nitrogen-19, NO-30)
nn(INTJ-33, \/-32)
abbrev(NO-30, INTJ-33)
dep(nitrogen-19, LST-38)
dep(LST-38, 3-40)
abbrev(nitrogen-19, \/-42)
dep(\/-42, LST-43)
nn(Ã-51, ÃƒÂ-49)
nn(Ã-51, cents-50)
npadvmod(â-55, Ã-51)
punct(âˆšÃ-53, ‚-52)
dep(Ã-51, âˆšÃ-53)
punct(âˆšÃ-53, ‚-54)
dep($-56, â-55)
dep(nitrogen-19, $-56)
number($-56, š-57)
dep(nitrogen-19, RBR-61)

A Navy is the branch of a country 's military forces principally designated for naval warfare and amphibious warfare namely lake - or ocean-borne combat operations and related functions .

det(Navy-2, A-1)
nsubj(branch-5, Navy-2)
cop(branch-5, is-3)
det(branch-5, the-4)
root(ROOT-0, branch-5)
det(country-8, a-7)
poss(forces-11, country-8)
amod(forces-11, military-10)
prep_of(branch-5, forces-11)
advmod(designated-13, principally-12)
partmod(branch-5, designated-13)
amod(warfare-16, naval-15)
prep_for(designated-13, warfare-16)
amod(warfare-19, amphibious-18)
conj_and(branch-5, warfare-19)
advmod(lake-21, namely-20)
dep(warfare-19, lake-21)
amod(operations-26, ocean-borne-24)
nn(operations-26, combat-25)
conj_or(branch-5, operations-26)
amod(functions-29, related-28)
conj_or(branch-5, functions-29)
conj_and(operations-26, functions-29)

The Norns - LBR - Old Norse : norn , plural : nornir - RBR - are a kind of dÃƒâˆžÃ ‚ â $ `` sir , numerous female beings who rule the fates of the various races of Norse mythology - LBR - see : The Fates - RBR - .

det(Norns-2, The-1)
root(ROOT-0, Norns-2)
dep(Norns-2, LBR-4)
nn(Norse-7, Old-6)
dep(LBR-4, Norse-7)
dep(Norns-2, norn-9)
dep(Norns-2, plural-11)
nsubj(kind-19, nornir-13)
dep(nornir-13, RBR-15)
cop(kind-19, are-17)
det(kind-19, a-18)
dep(plural-11, kind-19)
nn(‚-22, dÃƒâˆžÃ-21)
prep_of(kind-19, ‚-22)
partmod(‚-22, â-23)
dobj(â-23, $-24)
nsubj(rule-32, $-24)
npadvmod(female-29, sir-26)
dep(sir-26, numerous-28)
dep(beings-30, female-29)
num($-24, beings-30)
rcmod($-24, rule-32)
det(fates-34, the-33)
nsubj(see-45, fates-34)
det(races-38, the-36)
amod(races-38, various-37)
prep_of(fates-34, races-38)
nn(mythology-41, Norse-40)
prep_of(races-38, mythology-41)
dep(fates-34, LBR-43)
ccomp(rule-32, see-45)
det(Fates-48, The-47)
dep($-24, Fates-48)
dep(Fates-48, RBR-50)

The NASDAQ - LBR - acronym of National Association of Securities Dealers Automated Quotation System - RBR - is an American stock exchange .

det(acronym-6, The-1)
nn(acronym-6, NASDAQ-2)
dep(acronym-6, LBR-4)
nsubj(exchange-23, acronym-6)
nn(Association-9, National-8)
prep_of(acronym-6, Association-9)
nn(System-15, Securities-11)
nn(System-15, Dealers-12)
nn(System-15, Automated-13)
nn(System-15, Quotation-14)
prep_of(Association-9, System-15)
dep(System-15, RBR-17)
cop(exchange-23, is-19)
det(exchange-23, an-20)
amod(exchange-23, American-21)
nn(exchange-23, stock-22)
root(ROOT-0, exchange-23)

In computational complexity theory , NP is one of the most fundamental complexity classes .

amod(theory-4, computational-2)
nn(theory-4, complexity-3)
prep_in(one-8, theory-4)
nsubj(one-8, NP-6)
cop(one-8, is-7)
root(ROOT-0, one-8)
det(classes-14, the-10)
advmod(classes-14, most-11)
amod(classes-14, fundamental-12)
nn(classes-14, complexity-13)
prep_of(one-8, classes-14)

In Greek mythology , the Nereids - LBR - neer ' - ee-eds - RBR - are sea nymphs , the fifty daughters of Nereus and Doris .

amod(mythology-3, Greek-2)
prep_in(nymphs-19, mythology-3)
det(neer-10, the-5)
nn(neer-10, Nereids-6)
dep(neer-10, LBR-8)
nsubj(nymphs-19, neer-10)
dep(neer-10, ee-eds-13)
dep(ee-eds-13, RBR-15)
cop(nymphs-19, are-17)
nn(nymphs-19, sea-18)
root(ROOT-0, nymphs-19)
det(daughters-23, the-21)
amod(daughters-23, fifty-22)
appos(nymphs-19, daughters-23)
prep_of(daughters-23, Nereus-25)
prep_of(daughters-23, Doris-27)
conj_and(Nereus-25, Doris-27)

The term Negro , literally meaning `` black `` , was used by the Spanish and Portuguese to refer to people .

det(Negro-3, The-1)
nn(Negro-3, term-2)
nsubjpass(used-12, Negro-3)
xsubj(refer-19, Negro-3)
advmod(meaning-6, literally-5)
dep(Negro-3, meaning-6)
dobj(meaning-6, black-8)
auxpass(used-12, was-11)
root(ROOT-0, used-12)
det(Spanish-15, the-14)
agent(used-12, Spanish-15)
agent(used-12, Portuguese-17)
conj_and(Spanish-15, Portuguese-17)
aux(refer-19, to-18)
xcomp(used-12, refer-19)
prep_to(refer-19, people-21)

Michel de Nostredame - LBR - 14 December 1503 or 21 December 1503 & amp ; ndash ; -LRB- LST -RRB- 2 -LRB- \/ LST -RRB- July 1566 - RBR - , usually Latinized to Nostradamus , was a French apothecary and reputed seer who published collections of prophecies that have since become famous world-wide .

nn(Nostredame-3, Michel-1)
amod(Nostredame-3, de-2)
nsubj(apothecary-41, Nostredame-3)
dep(Nostredame-3, LBR-5)
num(December-8, 14-7)
dep(Nostredame-3, December-8)
num(December-8, 1503-9)
num(1503-13, 21-11)
nn(1503-13, December-12)
dep(Nostredame-3, 1503-13)
conj_or(December-8, 1503-13)
dep(Nostredame-3, amp-15)
conj_and(December-8, amp-15)
dep(Nostredame-3, ndash-17)
dep(ndash-17, LST-20)
dep(LST-20, 2-22)
nn(LST-25, \/-24)
abbrev(2-22, LST-25)
dep(LST-20, July-27)
num(July-27, 1566-28)
dep(Nostredame-3, RBR-30)
advmod(Latinized-34, usually-33)
partmod(Nostredame-3, Latinized-34)
prep_to(Latinized-34, Nostradamus-36)
cop(apothecary-41, was-38)
det(apothecary-41, a-39)
amod(apothecary-41, French-40)
root(ROOT-0, apothecary-41)
nsubj(published-46, apothecary-41)
amod(seer-44, reputed-43)
conj_and(apothecary-41, seer-44)
nsubj(published-46, seer-44)
rcmod(apothecary-41, published-46)
dobj(published-46, collections-47)
prep_of(collections-47, prophecies-49)
nsubj(famous-54, prophecies-49)
aux(famous-54, have-51)
advmod(famous-54, since-52)
cop(famous-54, become-53)
rcmod(prophecies-49, famous-54)
advmod(famous-54, world-wide-55)

A Nebula - LBR - from Latin : `` mist `` ; pl .

det(Nebula-2, A-1)
nsubj(from-6, Nebula-2)
dobj(from-6, LBR-4)
root(ROOT-0, from-6)
pobj(from-6, Latin-7)
advmod(from-6, mist-10)
dep(from-6, pl-13)

nebulae or nebulÃƒâˆžÃ ‚ Å `` , with ligature or nebulas - RBR - is an interstellar cloud of dust , hydrogen gas and plasma .

nsubj(cloud-18, nebulae-1)
amod(Å-5, nebulÃƒâˆžÃ-3)
nn(Å-5, ‚-4)
conj_or(nebulae-1, Å-5)
nsubj(cloud-18, Å-5)
prep_with(nebulae-1, ligature-9)
prep_with(nebulae-1, nebulas-11)
conj_or(ligature-9, nebulas-11)
dep(nebulae-1, RBR-13)
cop(cloud-18, is-15)
det(cloud-18, an-16)
nn(cloud-18, interstellar-17)
root(ROOT-0, cloud-18)
nn(gas-23, dust-20)
prep_of(cloud-18, hydrogen-22)
conj_and(gas-23, hydrogen-22)
prep_of(cloud-18, gas-23)
prep_of(cloud-18, plasma-25)
conj_and(gas-23, plasma-25)

A Number is an abstract object , tokens of which are symbols used in counting and measuring .

det(Number-2, A-1)
nsubj(object-6, Number-2)
cop(object-6, is-3)
det(object-6, an-4)
amod(object-6, abstract-5)
root(ROOT-0, object-6)
appos(object-6, tokens-8)
nsubj(symbols-12, which-10)
cop(symbols-12, are-11)
prepc_of(tokens-8, symbols-12)
partmod(symbols-12, used-13)
prepc_in(used-13, counting-15)
prepc_in(used-13, measuring-17)
conj_and(counting-15, measuring-17)

The Normans were the people who gave their names to Normandy , a region in northern France .

det(Normans-2, The-1)
nsubj(people-5, Normans-2)
cop(people-5, were-3)
det(people-5, the-4)
root(ROOT-0, people-5)
nsubj(gave-7, people-5)
rcmod(people-5, gave-7)
poss(names-9, their-8)
dobj(gave-7, names-9)
prep_to(gave-7, Normandy-11)
det(region-14, a-13)
dobj(gave-7, region-14)
amod(France-17, northern-16)
prep_in(region-14, France-17)

Historians use the term Nationalism to refer to this historical transition and to the emergence and predominance of nationalist ideology .

nsubj(use-2, Historians-1)
root(ROOT-0, use-2)
det(Nationalism-5, the-3)
nn(Nationalism-5, term-4)
nsubj(refer-7, Nationalism-5)
aux(refer-7, to-6)
xcomp(use-2, refer-7)
det(transition-11, this-9)
amod(transition-11, historical-10)
prep_to(refer-7, transition-11)
det(emergence-15, the-14)
prep_to(refer-7, emergence-15)
conj_and(transition-11, emergence-15)
conj_and(transition-11, predominance-17)
conj_and(emergence-15, predominance-17)
amod(ideology-20, nationalist-19)
prep_of(emergence-15, ideology-20)

A Nation is a human cultural and social community .

det(Nation-2, A-1)
nsubj(community-9, Nation-2)
cop(community-9, is-3)
det(community-9, a-4)
amod(community-9, human-5)
amod(community-9, cultural-6)
conj_and(cultural-6, social-8)
amod(community-9, social-8)
root(ROOT-0, community-9)

The National Broadcasting Company - LBR - NBC - RBR - is an American television network headquartered in the GE Building in New York City 's Rockefeller Center .

det(Company-4, The-1)
nn(Company-4, National-2)
nn(Company-4, Broadcasting-3)
nsubj(network-16, Company-4)
nn(RBR-10, LBR-6)
dep(RBR-10, NBC-8)
dep(Company-4, RBR-10)
cop(network-16, is-12)
det(network-16, an-13)
amod(network-16, American-14)
nn(network-16, television-15)
root(ROOT-0, network-16)
partmod(network-16, headquartered-17)
det(Building-21, the-19)
nn(Building-21, GE-20)
prep_in(headquartered-17, Building-21)
nn(City-25, New-23)
nn(City-25, York-24)
poss(Center-28, City-25)
nn(Center-28, Rockefeller-27)
prep_in(Building-21, Center-28)

A Nova - LBR - pl .

det(Nova-2, A-1)
nsubj(pl-6, Nova-2)
dep(Nova-2, LBR-4)
root(ROOT-0, pl-6)

novae - RBR - is a cataclysmic nuclear explosion caused by the accretion of hydrogen onto the surface of a white dwarf star .

nsubj(explosion-9, novae-1)
dep(novae-1, RBR-3)
cop(explosion-9, is-5)
det(explosion-9, a-6)
amod(explosion-9, cataclysmic-7)
amod(explosion-9, nuclear-8)
root(ROOT-0, explosion-9)
partmod(explosion-9, caused-10)
det(accretion-13, the-12)
agent(caused-10, accretion-13)
prep_of(accretion-13, hydrogen-15)
det(surface-18, the-17)
prep_onto(caused-10, surface-18)
det(star-23, a-20)
amod(star-23, white-21)
nn(star-23, dwarf-22)
prep_of(surface-18, star-23)

In general , a Namespace is an abstract container providing context for the items - LBR - names , or technical terms , or words - RBR - it holds and allowing disambiguation of items having the same name - LBR - residing in different namespaces - RBR - .

prep_in(container-9, general-2)
det(Namespace-5, a-4)
nsubj(container-9, Namespace-5)
cop(container-9, is-6)
det(container-9, an-7)
amod(container-9, abstract-8)
root(ROOT-0, container-9)
dep(container-9, providing-10)
dobj(providing-10, context-11)
det(items-14, the-13)
prep_for(providing-10, items-14)
prep_for(providing-10, LBR-16)
conj_or(items-14, LBR-16)
prep_for(providing-10, names-18)
conj_or(items-14, names-18)
amod(terms-22, technical-21)
conj_or(items-14, terms-22)
conj_or(names-18, terms-22)
prep_for(providing-10, words-25)
conj_or(items-14, words-25)
dobj(providing-10, RBR-27)
nsubj(holds-30, it-29)
dep(RBR-27, holds-30)
dep(container-9, allowing-32)
conj_and(providing-10, allowing-32)
dobj(allowing-32, disambiguation-33)
prep_of(disambiguation-33, items-35)
partmod(items-35, having-36)
det(name-39, the-37)
amod(name-39, same-38)
dobj(having-36, name-39)
dep(name-39, LBR-41)
partmod(name-39, residing-43)
amod(namespaces-46, different-45)
prep_in(residing-43, namespaces-46)
dep(name-39, RBR-48)

Nemo is an Oromo word meaning `` The Man `` .

nsubj(is-2, Nemo-1)
root(ROOT-0, is-2)
det(Oromo-4, an-3)
dep(is-2, Oromo-4)
punct(Oromo-4, word-5)
partmod(Oromo-4, meaning-6)
det(Man-9, The-8)
dep(meaning-6, Man-9)

In the mathematical subfield of numerical analysis , a B-spline is a spline function that has minimal support with respect to a given degree , smoothness , and domain partition .

det(subfield-4, the-2)
amod(subfield-4, mathematical-3)
prep_in(function-14, subfield-4)
amod(analysis-7, numerical-6)
prep_of(subfield-4, analysis-7)
det(B-spline-10, a-9)
nsubj(function-14, B-spline-10)
cop(function-14, is-11)
det(function-14, a-12)
amod(function-14, spline-13)
root(ROOT-0, function-14)
nsubj(has-16, function-14)
rcmod(function-14, has-16)
amod(support-18, minimal-17)
dobj(has-16, support-18)
prep_with(support-18, respect-20)
det(degree-24, a-22)
amod(degree-24, given-23)
prep_to(has-16, degree-24)
prep_to(has-16, smoothness-26)
conj_and(degree-24, smoothness-26)
nn(partition-30, domain-29)
prep_to(has-16, partition-30)
conj_and(degree-24, partition-30)

A Nanometre - LBR - American spelling : nanometer , symbol nm - RBR - - LBR - Greek : Ãƒâﾁ „ Ã ‚ âˆﾏÃƒâﾁ „ Ã ‚ Â ¬ Ãƒâﾁ „ Ã ‚ âˆﾏÃƒâﾁ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , nanos , dwarf ; Ãƒâﾁ „ Ã ‚ Ï $ Ãƒâ „ Ã ‚ ÂµÃƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâˆ ‚ Ã ‚ â „ , metrÃƒâˆ ‚ Ã ‚ â $ ˜ , count - RBR - is a unit of length in the metric system , equal to one billionth of a metre - LBR - i. e. , one millionth of a millimetre - RBR - .

det(Nanometre-2, A-1)
root(ROOT-0, Nanometre-2)
dep(Nanometre-2, LBR-4)
dep(LBR-4, American-6)
partmod(American-6, spelling-7)
dep(Nanometre-2, nanometer-9)
nn(nm-12, symbol-11)
appos(nanometer-9, nm-12)
dep(nm-12, RBR-14)
dep(Nanometre-2, LBR-17)
dep(LBR-17, Greek-19)
number(„-22, Ãƒâﾁ-21)
num(‰-46, „-22)
nn(‰-46, Ã-23)
nn(‰-46, ‚-24)
nn(‰-46, âˆﾏÃƒâﾁ-25)
nn(‰-46, „-26)
nn(‰-46, Ã-27)
nn(‰-46, ‚-28)
nn(‰-46, Â-29)
nn(‰-46, ¬-30)
nn(‰-46, Ãƒâﾁ-31)
nn(‰-46, „-32)
nn(‰-46, Ã-33)
nn(‰-46, ‚-34)
nn(‰-46, âˆﾏÃƒâﾁ-35)
nn(‰-46, „-36)
nn(‰-46, Ã-37)
nn(‰-46, ‚-38)
nn(‰-46, Â-39)
nn(‰-46, ¿-40)
nn(‰-46, Ãƒâˆ-41)
nn(‰-46, ‚-42)
nn(‰-46, Ã-43)
nn(‰-46, ‚-44)
nn(‰-46, â-45)
dep(Greek-19, ‰-46)
dep(Greek-19, nbsp-48)
conj_and(‰-46, nbsp-48)
appos(Nanometre-2, nanos-51)
appos(Nanometre-2, dwarf-53)
nn(Ï-59, Ãƒâﾁ-55)
nn(Ï-59, „-56)
nn(Ï-59, Ã-57)
nn(Ï-59, ‚-58)
dep(Nanometre-2, Ï-59)
num(„-84, $-60)
number($-60, Ãƒâ-61)
number($-60, „-62)
nn(„-84, Ã-63)
nn(„-84, ‚-64)
nn(„-84, ÂµÃƒâˆ-65)
nn(„-84, ‚-66)
nn(„-84, Ã-67)
nn(„-84, ‚-68)
nn(„-84, â-69)
nn(„-84, ‰-70)
nn(„-84, ¥-71)
nn(„-84, Ãƒâˆ-72)
nn(„-84, ‚-73)
nn(„-84, Ã-74)
nn(„-84, ‚-75)
nn(„-84, â-76)
nn(„-84, „-77)
nn(„-84, cents-78)
nn(„-84, Ãƒâˆ-79)
nn(„-84, ‚-80)
nn(„-84, Ã-81)
nn(„-84, ‚-82)
nn(„-84, â-83)
dep(Ï-59, „-84)
nn(â-90, metrÃƒâˆ-86)
nn(â-90, ‚-87)
nn(â-90, Ã-88)
nn(â-90, ‚-89)
appos(Nanometre-2, â-90)
dep(â-90, $-91)
num($-91, ˜-92)
nsubj(unit-100, count-94)
dep(count-94, RBR-96)
cop(unit-100, is-98)
det(unit-100, a-99)
dep(Nanometre-2, unit-100)
prep_of(unit-100, length-102)
det(system-106, the-104)
amod(system-106, metric-105)
prep_in(length-102, system-106)
amod(billionth-111, equal-108)
prep_to(equal-108, one-110)
appos(Nanometre-2, billionth-111)
det(metre-114, a-113)
prep_of(billionth-111, metre-114)
dep(Nanometre-2, LBR-116)
nn(e.-119, i.-118)
dep(LBR-116, e.-119)
num(millionth-122, one-121)
appos(Nanometre-2, millionth-122)
det(millimetre-125, a-124)
prep_of(millionth-122, millimetre-125)
dep(millimetre-125, RBR-127)

In computing , Nano is a curses-based text editor for Unix and Unix-like systems .

prep_in(editor-9, computing-2)
nsubj(editor-9, Nano-4)
cop(editor-9, is-5)
det(editor-9, a-6)
amod(editor-9, curses-based-7)
nn(editor-9, text-8)
root(ROOT-0, editor-9)
prep_for(editor-9, Unix-11)
amod(systems-14, Unix-like-13)
prep_for(editor-9, systems-14)
conj_and(Unix-11, systems-14)

A Novel - LBR - from , Italian novella , Spanish novela , French nouvelle for `` new `` , `` news `` , or `` short story of something new `` - RBR - is today a long written , fictional , prose narrative .

det(Novel-2, A-1)
nsubj(LBR-4, Novel-2)
root(ROOT-0, LBR-4)
dep(novella-9, from-6)
amod(novella-9, Italian-8)
dep(LBR-4, novella-9)
amod(novela-12, Spanish-11)
appos(novella-9, novela-12)
advmod(nouvelle-15, French-14)
partmod(novela-12, nouvelle-15)
prep_for(nouvelle-15, new-18)
appos(novela-12, news-22)
amod(story-28, short-27)
nsubj(today-37, story-28)
prep_of(story-28, something-30)
amod(something-30, new-31)
dep(something-30, RBR-34)
cop(today-37, is-36)
conj_or(LBR-4, today-37)
det(narrative-45, a-38)
amod(narrative-45, long-39)
amod(narrative-45, written-40)
amod(narrative-45, fictional-42)
amod(narrative-45, prose-44)
attr(today-37, narrative-45)

A Nutcracker is a mechanical device for cracking nuts .

det(Nutcracker-2, A-1)
nsubj(device-6, Nutcracker-2)
cop(device-6, is-3)
det(device-6, a-4)
amod(device-6, mechanical-5)
root(ROOT-0, device-6)
prepc_for(device-6, cracking-8)
dobj(cracking-8, nuts-9)

In physics a Nucleon is a collective name for two baryons : the neutron and the proton .

prep_in(name-8, physics-2)
det(Nucleon-4, a-3)
nsubj(name-8, Nucleon-4)
cop(name-8, is-5)
det(name-8, a-6)
amod(name-8, collective-7)
root(ROOT-0, name-8)
num(baryons-11, two-10)
prep_for(name-8, baryons-11)
det(neutron-14, the-13)
dep(name-8, neutron-14)
det(proton-17, the-16)
dep(name-8, proton-17)
conj_and(neutron-14, proton-17)

The Nomenklatura were a small , elite subset of the general population in the Soviet Union who held various key administrative positions in all spheres of the Soviet Union : government , industry , agriculture , education , etc. .

det(Nomenklatura-2, The-1)
nsubj(subset-8, Nomenklatura-2)
cop(subset-8, were-3)
det(subset-8, a-4)
amod(subset-8, small-5)
amod(subset-8, elite-7)
root(ROOT-0, subset-8)
nsubj(held-18, subset-8)
det(population-12, the-10)
amod(population-12, general-11)
prep_of(subset-8, population-12)
det(Union-16, the-14)
nn(Union-16, Soviet-15)
prep_in(population-12, Union-16)
rcmod(subset-8, held-18)
amod(positions-22, various-19)
amod(positions-22, key-20)
amod(positions-22, administrative-21)
dobj(held-18, positions-22)
det(spheres-25, all-24)
prep_in(held-18, spheres-25)
det(Union-29, the-27)
nn(Union-29, Soviet-28)
prep_of(spheres-25, Union-29)
nn(education-37, government-31)
dep(education-37, industry-33)
dep(education-37, agriculture-35)
nn(Union-29, education-37)
dep(Union-29, etc.-39)

Neopets ' - LBR - originally Neopets - RBR - is a virtual pet website launched by Adam Powell and Donna Williams on 15 November 1999 .

poss(RBR-9, Neopets-1)
nn(RBR-9, LBR-4)
dep(Neopets-7, originally-6)
dep(RBR-9, Neopets-7)
root(ROOT-0, RBR-9)
auxpass(launched-16, is-11)
det(website-15, a-12)
amod(website-15, virtual-13)
amod(website-15, pet-14)
nsubjpass(launched-16, website-15)
dep(RBR-9, launched-16)
nn(Powell-19, Adam-18)
agent(launched-16, Powell-19)
nn(Williams-22, Donna-21)
agent(launched-16, Williams-22)
conj_and(Powell-19, Williams-22)
prep_on(launched-16, 15-24)
tmod(launched-16, November-25)
num(November-25, 1999-26)

In Greek mythology , a Nymph is any member of a large class of mythological entities in human female form .

amod(mythology-3, Greek-2)
prep_in(member-9, mythology-3)
det(Nymph-6, a-5)
nsubj(member-9, Nymph-6)
cop(member-9, is-7)
det(member-9, any-8)
root(ROOT-0, member-9)
det(class-13, a-11)
amod(class-13, large-12)
prep_of(member-9, class-13)
amod(entities-16, mythological-15)
prep_of(class-13, entities-16)
amod(form-20, human-18)
amod(form-20, female-19)
prep_in(entities-16, form-20)

A Newspaper is a written publication containing news , information and advertising , usually printed on low-cost paper called newsprint .

det(Newspaper-2, A-1)
nsubj(publication-6, Newspaper-2)
cop(publication-6, is-3)
det(publication-6, a-4)
amod(publication-6, written-5)
root(ROOT-0, publication-6)
partmod(publication-6, containing-7)
dobj(containing-7, news-8)
dobj(containing-7, information-10)
conj_and(news-8, information-10)
dobj(containing-7, advertising-12)
conj_and(news-8, advertising-12)
advmod(printed-15, usually-14)
partmod(containing-7, printed-15)
amod(paper-18, low-cost-17)
prep_on(printed-15, paper-18)
partmod(paper-18, called-19)
dobj(called-19, newsprint-20)

In complexity theory , NC - LBR - for `` Nick 's Class `` - RBR - is the set of decision problems decidable in polylogarithmic time on a parallel computer with a polynomial number of processors .

nn(theory-3, complexity-2)
prep_in(decidable-24, theory-3)
nsubj(decidable-24, NC-5)
dep(NC-5, LBR-7)
prep(NC-5, for-9)
nsubj(Class-13, Nick-11)
possessive(Nick-11, 's-12)
dep(for-9, Class-13)
nsubj(set-20, RBR-16)
cop(set-20, is-18)
det(set-20, the-19)
ccomp(Class-13, set-20)
nn(problems-23, decision-22)
prep_of(set-20, problems-23)
root(ROOT-0, decidable-24)
amod(time-27, polylogarithmic-26)
prep_in(decidable-24, time-27)
det(computer-31, a-29)
amod(computer-31, parallel-30)
prep_on(time-27, computer-31)
det(number-35, a-33)
amod(number-35, polynomial-34)
prep_with(decidable-24, number-35)
prep_of(number-35, processors-37)

The term Nori is also commonly used to refer to the food products created from these `` sea vegetables `` , similar to the Korean gim .

det(term-2, The-1)
nsubj(created-14, term-2)
nsubjpass(used-7, Nori-3)
auxpass(used-7, is-4)
advmod(used-7, also-5)
advmod(used-7, commonly-6)
rcmod(term-2, used-7)
aux(refer-9, to-8)
xcomp(used-7, refer-9)
det(products-13, the-11)
nn(products-13, food-12)
prep_to(refer-9, products-13)
root(ROOT-0, created-14)
prep_from(created-14, these-16)
prep_sea(these-16, vegetables-19)
acomp(created-14, similar-22)
det(gim-26, the-24)
amod(gim-26, Korean-25)
prep_to(similar-22, gim-26)

Negotiation is a dialogue intended to resolve disputes , to produce an agreement upon courses of action , to bargain for individual or collective advantage , or to craft outcomes to satisfy various interests .

nsubj(dialogue-4, Negotiation-1)
cop(dialogue-4, is-2)
det(dialogue-4, a-3)
root(ROOT-0, dialogue-4)
partmod(dialogue-4, intended-5)
aux(resolve-7, to-6)
ccomp(intended-5, resolve-7)
dobj(resolve-7, disputes-8)
aux(produce-11, to-10)
ccomp(intended-5, produce-11)
conj_or(resolve-7, produce-11)
det(agreement-13, an-12)
dobj(produce-11, agreement-13)
prep_upon(produce-11, courses-15)
prep_of(courses-15, action-17)
aux(bargain-20, to-19)
xcomp(produce-11, bargain-20)
amod(advantage-25, individual-22)
conj_or(individual-22, collective-24)
amod(advantage-25, collective-24)
prep_for(bargain-20, advantage-25)
aux(craft-29, to-28)
ccomp(intended-5, craft-29)
conj_or(resolve-7, craft-29)
nsubj(satisfy-32, outcomes-30)
aux(satisfy-32, to-31)
xcomp(craft-29, satisfy-32)
amod(interests-34, various-33)
dobj(satisfy-32, interests-34)

In Greek mythology , Narcissus , Narkissos or The Self-Admirer - LBR - Greek : Ãƒâ „ Ã ‚ Ë ‡ Ãƒâ „ Ã ‚ Â ¬ Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ ÂºÃƒâ „ Ã ‚ â $ ™ Ãƒâˆ ‚ Ã ‚ âˆžÃƒâˆ ‚ Ã ‚ âˆžÃƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; - RBR - was a hero of the territory of Thespiae in Boeotia who was renowned for his beauty .

amod(mythology-3, Greek-2)
prep_in(hero-74, mythology-3)
nsubj(hero-74, Narcissus-5)
conj_or(Narcissus-5, Narkissos-7)
nsubj(hero-74, Narkissos-7)
det(Self-Admirer-10, The-9)
conj_or(Narcissus-5, Self-Admirer-10)
nsubj(hero-74, Self-Admirer-10)
dep(Narcissus-5, LBR-12)
dep(LBR-12, Greek-14)
nn(â-32, Ãƒâ-16)
nn(â-32, „-17)
nn(â-32, Ã-18)
nn(â-32, ‚-19)
nn(â-32, Ë-20)
nn(â-32, ‡-21)
nn(â-32, Ãƒâ-22)
nn(â-32, „-23)
nn(â-32, Ã-24)
nn(â-32, ‚-25)
nn(â-32, Â-26)
nn(â-32, ¬-27)
nn(â-32, Ãƒâˆ-28)
nn(â-32, ‚-29)
nn(â-32, Ã-30)
nn(â-32, ‚-31)
dep(â-43, â-32)
num(cents-34, „-33)
dep(â-32, cents-34)
nn(â-43, Ãƒâ-35)
nn(â-43, „-36)
nn(â-43, Ã-37)
nn(â-43, ‚-38)
nn(â-43, ÂºÃƒâ-39)
nn(â-43, „-40)
nn(â-43, Ã-41)
nn(â-43, ‚-42)
dep(Narcissus-5, â-43)
num(‚-63, $-44)
number($-44, ™-45)
number($-44, Ãƒâˆ-46)
nn(‚-63, ‚-47)
nn(‚-63, Ã-48)
nn(‚-63, ‚-49)
nn(‚-63, âˆžÃƒâˆ-50)
nn(‚-63, ‚-51)
nn(‚-63, Ã-52)
nn(‚-63, ‚-53)
nn(‚-63, âˆžÃƒâ-54)
nn(‚-63, „-55)
nn(‚-63, Ã-56)
nn(‚-63, ‚-57)
nn(‚-63, Â-58)
nn(‚-63, ¿-59)
nn(‚-63, Ãƒâˆ-60)
nn(‚-63, ‚-61)
nn(‚-63, Ã-62)
dep(â-43, ‚-63)
amod(‰-65, â-64)
dep(‚-63, ‰-65)
dep(‚-63, nbsp-67)
conj_and(‰-65, nbsp-67)
dep(Narcissus-5, RBR-70)
cop(hero-74, was-72)
det(hero-74, a-73)
root(ROOT-0, hero-74)
nsubjpass(renowned-84, hero-74)
det(territory-77, the-76)
prep_of(hero-74, territory-77)
prep_of(territory-77, Thespiae-79)
prep_in(Thespiae-79, Boeotia-81)
auxpass(renowned-84, was-83)
rcmod(hero-74, renowned-84)
poss(beauty-87, his-86)
prep_for(renowned-84, beauty-87)

The Nuvistor is a type of vacuum tube announced by RCA in 1959 .

det(Nuvistor-2, The-1)
nsubj(type-5, Nuvistor-2)
cop(type-5, is-3)
det(type-5, a-4)
root(ROOT-0, type-5)
nn(tube-8, vacuum-7)
prep_of(type-5, tube-8)
partmod(tube-8, announced-9)
agent(announced-9, RCA-11)
prep_in(announced-9, 1959-13)

The NÃƒâˆžÃ ‚ Ï $ rburgring , known as simply `` the Ring `` by enthusiasts , is a motorsport race track in NÃƒâˆžÃ ‚ Ï $ rburg , Germany .

det(Ï-4, The-1)
nn(Ï-4, NÃƒâˆžÃ-2)
nn(Ï-4, ‚-3)
nsubj(track-22, Ï-4)
amod(Ï-4, $-5)
dep($-5, rburgring-6)
partmod(track-22, known-8)
prep(known-8, as-9)
pcomp(as-9, simply-10)
det(Ring-13, the-12)
dobj(known-8, Ring-13)
prep_by(Ring-13, enthusiasts-16)
cop(track-22, is-18)
det(track-22, a-19)
amod(track-22, motorsport-20)
nn(track-22, race-21)
root(ROOT-0, track-22)
nn(Ï-26, NÃƒâˆžÃ-24)
nn(Ï-26, ‚-25)
prep_in(track-22, Ï-26)
amod(Ï-26, $-27)
dep($-27, rburg-28)
appos(Ï-26, Germany-30)

Nichiren was a Buddhist monk of 13th century Japan .

nsubj(monk-5, Nichiren-1)
cop(monk-5, was-2)
det(monk-5, a-3)
nn(monk-5, Buddhist-4)
root(ROOT-0, monk-5)
amod(Japan-9, 13th-7)
nn(Japan-9, century-8)
prep_of(monk-5, Japan-9)

In topology and related areas of mathematics a Net or Moore-Smith sequence is a generalization of a sequence , intended to unify the various notions of limit and generalize them to arbitrary topological spaces .

amod(areas-5, topology-2)
conj_and(topology-2, related-4)
amod(areas-5, related-4)
prep_in(generalization-15, areas-5)
prep_of(areas-5, mathematics-7)
det(Net-9, a-8)
nsubj(generalization-15, Net-9)
amod(sequence-12, Moore-Smith-11)
conj_or(Net-9, sequence-12)
nsubj(generalization-15, sequence-12)
cop(generalization-15, is-13)
det(generalization-15, a-14)
root(ROOT-0, generalization-15)
det(sequence-18, a-17)
prep_of(generalization-15, sequence-18)
xsubj(unify-22, sequence-18)
partmod(sequence-18, intended-20)
aux(unify-22, to-21)
xcomp(intended-20, unify-22)
det(notions-25, the-23)
amod(notions-25, various-24)
dobj(unify-22, notions-25)
prep_of(notions-25, limit-27)
xcomp(intended-20, generalize-29)
conj_and(unify-22, generalize-29)
dobj(generalize-29, them-30)
amod(topological-33, arbitrary-32)
amod(spaces-34, topological-33)
prep_to(generalize-29, spaces-34)

An Oligopoly is a market form in which a market or industry is dominated by a small number of sellers - LBR - oligopolists - RBR - .

det(Oligopoly-2, An-1)
nsubj(form-6, Oligopoly-2)
cop(form-6, is-3)
det(form-6, a-4)
nn(form-6, market-5)
root(ROOT-0, form-6)
rel(dominated-14, which-8)
det(market-10, a-9)
nsubjpass(dominated-14, market-10)
conj_or(market-10, industry-12)
nsubjpass(dominated-14, industry-12)
auxpass(dominated-14, is-13)
rcmod(form-6, dominated-14)
det(number-18, a-16)
amod(number-18, small-17)
agent(dominated-14, number-18)
prep_of(number-18, sellers-20)
nn(RBR-26, LBR-22)
dep(RBR-26, oligopolists-24)
dep(number-18, RBR-26)

In geography , an Oasis - LBR - plural : oases - RBR - or cienega - LBR - southwestern United States - RBR - is an isolated area of vegetation in a desert , typically surrounding a spring or similar water source .

prep_in(area-29, geography-2)
det(plural-9, an-4)
nn(plural-9, Oasis-5)
dep(plural-9, LBR-7)
nsubj(area-29, plural-9)
dep(plural-9, oases-11)
dep(oases-11, RBR-13)
nn(RBR-24, cienega-16)
dep(RBR-24, LBR-18)
nn(States-22, southwestern-20)
nn(States-22, United-21)
dep(LBR-18, States-22)
dep(plural-9, RBR-24)
conj_or(oases-11, RBR-24)
cop(area-29, is-26)
det(area-29, an-27)
amod(area-29, isolated-28)
root(ROOT-0, area-29)
prep_of(area-29, vegetation-31)
det(desert-34, a-33)
prep_in(vegetation-31, desert-34)
advmod(surrounding-37, typically-36)
partmod(area-29, surrounding-37)
xcomp(area-29, surrounding-37)
det(spring-39, a-38)
dobj(surrounding-37, spring-39)
amod(source-43, similar-41)
nn(source-43, water-42)
dobj(surrounding-37, source-43)
conj_or(spring-39, source-43)

The Oboe is a double reed musical instrument of the woodwind family .

det(Oboe-2, The-1)
nsubj(instrument-8, Oboe-2)
cop(instrument-8, is-3)
det(instrument-8, a-4)
amod(instrument-8, double-5)
amod(instrument-8, reed-6)
amod(instrument-8, musical-7)
root(ROOT-0, instrument-8)
det(family-12, the-10)
nn(family-12, woodwind-11)
prep_of(instrument-8, family-12)

The Orthography of a language specifies the correct way of using a specific writing system to write the language .

det(Orthography-2, The-1)
nsubj(specifies-6, Orthography-2)
det(language-5, a-4)
prep_of(Orthography-2, language-5)
root(ROOT-0, specifies-6)
det(way-9, the-7)
amod(way-9, correct-8)
dobj(specifies-6, way-9)
prepc_of(way-9, using-11)
det(system-15, a-12)
amod(system-15, specific-13)
nn(system-15, writing-14)
dobj(using-11, system-15)
aux(write-17, to-16)
xcomp(using-11, write-17)
det(language-19, the-18)
dobj(write-17, language-19)

An Ocean - LBR - from Greek Ãƒâ „ Ã ‚ Â © Ãƒâ „ Ã ‚ ÂºÃƒâ „ Ã ‚ ÂµÃƒâ „ Ã ‚ Â ± Ãƒâ „ Ã ‚ âˆ Ãƒâˆ ‚ Ã ‚ â $ ˜Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , Okeanos - LBR - Oceanus - RBR - - RBR - is a major body of saline water , and a principal component of the hydrosphere .

det(Ocean-2, An-1)
nsubj(body-63, Ocean-2)
dep(â-37, LBR-4)
dep(LBR-4, from-6)
amod(Ãƒâ-8, Greek-7)
pobj(from-6, Ãƒâ-8)
nn(â-37, „-9)
nn(â-37, Ã-10)
nn(â-37, ‚-11)
nn(â-37, Â-12)
nn(â-37, ©-13)
nn(â-37, Ãƒâ-14)
nn(â-37, „-15)
nn(â-37, Ã-16)
nn(â-37, ‚-17)
nn(â-37, ÂºÃƒâ-18)
nn(â-37, „-19)
nn(â-37, Ã-20)
nn(â-37, ‚-21)
nn(â-37, ÂµÃƒâ-22)
nn(â-37, „-23)
nn(â-37, Ã-24)
nn(â-37, ‚-25)
nn(â-37, Â-26)
nn(â-37, ±-27)
nn(â-37, Ãƒâ-28)
nn(â-37, „-29)
nn(â-37, Ã-30)
nn(â-37, ‚-31)
nn(â-37, âˆ-32)
nn(â-37, Ãƒâˆ-33)
nn(â-37, ‚-34)
nn(â-37, Ã-35)
nn(â-37, ‚-36)
dep($-38, â-37)
dep(‚-42, $-38)
num($-38, ˜Ãƒâˆ-39)
nn(Ã-41, ‚-40)
nsubj(‚-42, Ã-41)
dep(Ocean-2, ‚-42)
amod(‰-44, â-43)
dobj(‚-42, ‰-44)
dobj(‚-42, nbsp-46)
conj_and(‰-44, nbsp-46)
nn(RBR-55, Okeanos-49)
dep(RBR-55, LBR-51)
dep(LBR-51, Oceanus-53)
appos(‰-44, RBR-55)
dep(Ocean-2, RBR-58)
cop(body-63, is-60)
det(body-63, a-61)
amod(body-63, major-62)
root(ROOT-0, body-63)
amod(water-66, saline-65)
prep_of(body-63, water-66)
det(component-71, a-69)
amod(component-71, principal-70)
conj_and(body-63, component-71)
det(hydrosphere-74, the-73)
prep_of(component-71, hydrosphere-74)

In mathematics , an Operator is a function which operates on - LBR - or modifies - RBR - another function .

prep_in(function-8, mathematics-2)
det(Operator-5, an-4)
nsubj(function-8, Operator-5)
cop(function-8, is-6)
det(function-8, a-7)
root(ROOT-0, function-8)
nsubj(operates-10, function-8)
rcmod(function-8, operates-10)
nn(RBR-18, LBR-13)
dep(modifies-16, or-15)
dep(RBR-18, modifies-16)
prep_on(operates-10, RBR-18)
det(function-21, another-20)
dep(RBR-18, function-21)

In philosophy , Ontology - LBR - from the Greek ÃƒÂ ¡ Ã ‚ âˆﾏÃ ‚ â ‰ ¥ Ãƒâﾁ „ Ã ‚ âˆﾏ , genitive ÃƒÂ ¡ Ã ‚ âˆﾏÃ ‚ â ‰ ¥ Ãƒâﾁ „ Ã ‚ âˆﾏÃƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâﾁ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; : of being - LBR - part .

prep_in(LBR-66, philosophy-2)
appos(philosophy-2, Ontology-4)
dep(Ontology-4, LBR-6)
det(âˆﾏ-24, the-9)
amod(âˆﾏ-24, Greek-10)
nn(âˆﾏ-24, ÃƒÂ-11)
nn(âˆﾏ-24, ¡-12)
nn(âˆﾏ-24, Ã-13)
nn(âˆﾏ-24, ‚-14)
nn(âˆﾏ-24, âˆﾏÃ-15)
nn(âˆﾏ-24, ‚-16)
nn(âˆﾏ-24, â-17)
nn(âˆﾏ-24, ‰-18)
nn(âˆﾏ-24, ¥-19)
nn(âˆﾏ-24, Ãƒâﾁ-20)
nn(âˆﾏ-24, „-21)
nn(âˆﾏ-24, Ã-22)
nn(âˆﾏ-24, ‚-23)
prep_from(Ontology-4, âˆﾏ-24)
advmod(‚-56, genitive-26)
nn(‚-56, ÃƒÂ-27)
nn(‚-56, ¡-28)
nn(‚-56, Ã-29)
nn(‚-56, ‚-30)
nn(‚-56, âˆﾏÃ-31)
nn(‚-56, ‚-32)
nn(‚-56, â-33)
nn(‚-56, ‰-34)
nn(‚-56, ¥-35)
nn(‚-56, Ãƒâﾁ-36)
nn(‚-56, „-37)
nn(‚-56, Ã-38)
nn(‚-56, ‚-39)
nn(‚-56, âˆﾏÃƒâˆ-40)
nn(‚-56, ‚-41)
nn(‚-56, Ã-42)
nn(‚-56, ‚-43)
nn(‚-56, â-44)
nn(‚-56, ‰-45)
nn(‚-56, ¥-46)
nn(‚-56, Ãƒâﾁ-47)
nn(‚-56, „-48)
nn(‚-56, Ã-49)
nn(‚-56, ‚-50)
nn(‚-56, Â-51)
nn(‚-56, ¿-52)
nn(‚-56, Ãƒâˆ-53)
nn(‚-56, ‚-54)
nn(‚-56, Ã-55)
rcmod(Ontology-4, ‚-56)
amod(‰-58, â-57)
nsubj(LBR-66, ‰-58)
conj_and(‰-58, nbsp-60)
nsubj(LBR-66, nbsp-60)
prep_of(‰-58, being-64)
root(ROOT-0, LBR-66)
dobj(LBR-66, part-68)

of Ãƒâﾁ „ Ã ‚ ÂµÃƒÂ ¡ Ã ‚ Ï $ Ã ‚ Â ¶ Ãƒâ „ Ã ‚ âˆ Ãƒâ „ Ã ‚ Â ± Ãƒâ „ Ã ‚ â $ ™ : to be - RBR - and - Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ¿ Ãƒâ „ Ã ‚ â $ œÃƒâ „ Ã ‚ Â ¯ Ãƒâ „ Ã ‚ Â ± : science , study , theory - RBR - is the most fundamental branch of metaphysics .

dep(RBR-38, Ãƒâﾁ-2)
nn(Ï-10, „-3)
nn(Ï-10, Ã-4)
nn(Ï-10, ‚-5)
nn(Ï-10, ÂµÃƒÂ-6)
nn(Ï-10, ¡-7)
nn(Ï-10, Ã-8)
nn(Ï-10, ‚-9)
nsubj(â-31, Ï-10)
num(â-31, $-11)
number($-11, Ã-12)
number($-11, ‚-13)
nn(â-31, Â-14)
nn(â-31, ¶-15)
nn(â-31, Ãƒâ-16)
nn(â-31, „-17)
nn(â-31, Ã-18)
nn(â-31, ‚-19)
nn(â-31, âˆ-20)
nn(â-31, Ãƒâ-21)
nn(â-31, „-22)
nn(â-31, Ã-23)
nn(â-31, ‚-24)
nn(â-31, Â-25)
nn(â-31, ±-26)
nn(â-31, Ãƒâ-27)
nn(â-31, „-28)
nn(â-31, Ã-29)
nn(â-31, ‚-30)
xcomp(Ãƒâﾁ-2, â-31)
amod(â-31, $-32)
dep($-32, ™-33)
aux(be-36, to-35)
parataxis(Ãƒâﾁ-2, be-36)
xcomp(Ãƒâﾁ-2, be-36)
prep_of(is-81, RBR-38)
nn(‚-45, Ãƒâ-42)
nn(‚-45, „-43)
nn(‚-45, Ã-44)
dep(RBR-38, ‚-45)
nn(‚-57, Â-46)
nn(‚-57, Ãƒâ-48)
nn(‚-57, „-49)
nn(‚-57, Ã-50)
nn(‚-57, ‚-51)
nn(‚-57, Â-52)
nn(‚-57, ¿-53)
nn(‚-57, Ãƒâ-54)
nn(‚-57, „-55)
nn(‚-57, Ã-56)
nsubj(â-58, ‚-57)
rcmod(‚-45, â-58)
num(science-73, $-59)
number($-59, œÃƒâ-60)
number($-59, „-61)
nn(±-71, Ã-62)
nn(±-71, ‚-63)
nn(±-71, Â-64)
nn(±-71, ¯-65)
nn(±-71, Ãƒâ-66)
nn(±-71, „-67)
nn(±-71, Ã-68)
nn(±-71, ‚-69)
nn(±-71, Â-70)
dep(science-73, ±-71)
dobj(â-58, science-73)
appos(science-73, study-75)
appos(science-73, theory-77)
conj_and(RBR-38, RBR-79)
prep_of(is-81, RBR-79)
root(ROOT-0, is-81)
det(branch-85, the-82)
advmod(fundamental-84, most-83)
amod(branch-85, fundamental-84)
nsubj(is-81, branch-85)
prep_of(branch-85, metaphysics-87)

The Ordovician is a geologic period and system , the second of six of the Paleozoic era , and covers the time between 488.3 & amp ; ; plusmn ; 1.7 to 443.7 & amp ; ; plusmn ; 1.5 million years ago ICS 2004 .

det(Ordovician-2, The-1)
nsubj(period-6, Ordovician-2)
nsubj(covers-20, Ordovician-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
conj_and(period-6, system-8)
det(second-11, the-10)
appos(period-6, second-11)
prep_of(second-11, six-13)
det(era-17, the-15)
amod(era-17, Paleozoic-16)
prep_of(second-11, era-17)
conj_and(period-6, covers-20)
det(time-22, the-21)
dobj(covers-20, time-22)
prep_between(time-22, 488.3-24)
prep_between(time-22, amp-26)
conj_and(488.3-24, amp-26)
nsubj(ICS-44, plusmn-29)
number(443.7-33, 1.7-31)
dep(443.7-33, to-32)
dep(plusmn-29, 443.7-33)
cc(amp-35, &-34)
dep(443.7-33, amp-35)
dep(plusmn-29, plusmn-38)
number(million-41, 1.5-40)
num(years-42, million-41)
npadvmod(ago-43, years-42)
advmod(ICS-44, ago-43)
parataxis(period-6, ICS-44)
dobj(ICS-44, 2004-45)

The Oligocene is a geologic period that extends from about 33.9 million to 23 million years before the present .

det(Oligocene-2, The-1)
nsubj(period-6, Oligocene-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
nsubj(extends-8, period-6)
rcmod(period-6, extends-8)
quantmod(million-15, about-10)
number(million-15, 33.9-11)
number(million-15, million-12)
dep(million-15, to-13)
number(million-15, 23-14)
num(years-16, million-15)
prep_from(extends-8, years-16)
det(present-19, the-18)
prep_before(extends-8, present-19)

Ozymandias was another name of Ramesses the Great , Pharaoh of the nineteenth dynasty of ancient Egypt .

nsubj(name-4, Ozymandias-1)
cop(name-4, was-2)
det(name-4, another-3)
root(ROOT-0, name-4)
nn(Great-8, Ramesses-6)
det(Great-8, the-7)
prep_of(name-4, Great-8)
appos(Great-8, Pharaoh-10)
det(dynasty-14, the-12)
amod(dynasty-14, nineteenth-13)
prep_of(Pharaoh-10, dynasty-14)
amod(Egypt-17, ancient-16)
prep_of(dynasty-14, Egypt-17)

The Octal numeral system , or oct for short , is the base-8 number system , and uses the digits 0 to 7 .

det(system-4, The-1)
nn(system-4, Octal-2)
nn(system-4, numeral-3)
nsubj(system-15, system-4)
nsubj(uses-18, system-4)
conj_or(system-4, oct-7)
nsubj(system-15, oct-7)
prep_for(oct-7, short-9)
cop(system-15, is-11)
det(system-15, the-12)
amod(system-15, base-8-13)
nn(system-15, number-14)
root(ROOT-0, system-15)
conj_and(system-15, uses-18)
det(0-21, the-19)
nn(0-21, digits-20)
dobj(uses-18, 0-21)
prep_to(uses-18, 7-23)

An Ovum - LBR - plural ova - RBR - is a haploid female reproductive cell or gamete .

det(ova-7, An-1)
nn(ova-7, Ovum-2)
dep(ova-7, LBR-4)
nn(ova-7, plural-6)
nsubj(cell-16, ova-7)
dep(ova-7, RBR-9)
cop(cell-16, is-11)
det(cell-16, a-12)
amod(cell-16, haploid-13)
amod(cell-16, female-14)
amod(cell-16, reproductive-15)
root(ROOT-0, cell-16)
conj_or(cell-16, gamete-18)

The Odyssey - LBR - Greek : Ãƒâ „ Ã ‚ Æ ' Ãƒâ „ Ã ‚ Â ´ Ãƒâˆ ‚ Ã ‚ Å ¸ Ãƒâˆ ‚ Ã ‚ âˆžÃƒâˆ ‚ Ã ‚ âˆžÃƒâ „ Ã ‚ ÂµÃƒâ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ Â ± or OdÃƒâˆžÃ ‚ Âºsseia - RBR - is one of two major ancient Greek epic poems attributed to Homer .

det(Odyssey-2, The-1)
nsubj(one-59, Odyssey-2)
nn(RBR-56, LBR-4)
dep(RBR-56, Greek-6)
nn(Æ-12, Ãƒâ-8)
nn(Æ-12, „-9)
nn(Æ-12, Ã-10)
nn(Æ-12, ‚-11)
poss(â-42, Æ-12)
nn(â-42, Ãƒâ-14)
nn(â-42, „-15)
nn(â-42, Ã-16)
nn(â-42, ‚-17)
nn(â-42, Â-18)
nn(â-42, ´-19)
nn(â-42, Ãƒâˆ-20)
nn(â-42, ‚-21)
nn(â-42, Ã-22)
nn(â-42, ‚-23)
nn(â-42, Å-24)
nn(â-42, ¸-25)
nn(â-42, Ãƒâˆ-26)
nn(â-42, ‚-27)
nn(â-42, Ã-28)
nn(â-42, ‚-29)
nn(â-42, âˆžÃƒâˆ-30)
nn(â-42, ‚-31)
nn(â-42, Ã-32)
nn(â-42, ‚-33)
nn(â-42, âˆžÃƒâ-34)
nn(â-42, „-35)
nn(â-42, Ã-36)
nn(â-42, ‚-37)
nn(â-42, ÂµÃƒâ-38)
nn(â-42, „-39)
nn(â-42, Ã-40)
nn(â-42, ‚-41)
dep(Greek-6, â-42)
amod(±-50, $-43)
dep($-43, ™-44)
nn(±-50, Ãƒâ-45)
nn(±-50, „-46)
nn(±-50, Ã-47)
nn(±-50, ‚-48)
nn(±-50, Â-49)
dep(â-42, ±-50)
nn(Âºsseia-54, OdÃƒâˆžÃ-52)
nn(Âºsseia-54, ‚-53)
dep(â-42, Âºsseia-54)
conj_or(±-50, Âºsseia-54)
dep(Odyssey-2, RBR-56)
cop(one-59, is-58)
root(ROOT-0, one-59)
num(poems-66, two-61)
amod(poems-66, major-62)
amod(poems-66, ancient-63)
amod(poems-66, Greek-64)
nn(poems-66, epic-65)
prep_of(one-59, poems-66)
partmod(poems-66, attributed-67)
prep_to(attributed-67, Homer-69)

In cell biology , an Organelle - LBR - pronunciation : \/ Ãƒâ ‰ ˆÃ ‚ â $ ° Ãƒâ $ '' Ã ‚ âˆ † - LBR-r-RBR-gÃƒâ ‰ ˆÃ ‚ Ë ™ Ãƒâ $ '' Ã ‚ Â ¡ nÃƒâ ‰ ˆÃ ‚ Ë l \/ - RBR - is a specialized subunit within a cell that has a specific function , and is separately enclosed within its own lipid membrane .

nn(biology-3, cell-2)
prep_in(subunit-54, biology-3)
det(Organelle-6, an-5)
nsubj(subunit-54, Organelle-6)
dep(Organelle-6, LBR-8)
dep(LBR-8, pronunciation-10)
punct(pronunciation-10, \/-12)
dep(pronunciation-10, Ãƒâ-13)
punct(Ãƒâ-13, ‰-14)
punct(Ãƒâ-13, ˆÃ-15)
punct($-18, ‚-16)
dep($-18, â-17)
dep(Ãƒâ-13, $-18)
num($-18, °-19)
nn(Ã-23, Ãƒâ-20)
nn(Ã-23, $-21)
dep($-18, Ã-23)
punct(âˆ-25, ‚-24)
dep(Ã-23, âˆ-25)
punct(âˆ-25, †-26)
dep($-18, LBR-r-RBR-gÃƒâ-28)
punct(LBR-r-RBR-gÃƒâ-28, ‰-29)
punct(LBR-r-RBR-gÃƒâ-28, ˆÃ-30)
dep($-35, ‚-31)
nn($-35, Ë-32)
punct($-35, ™-33)
nn($-35, Ãƒâ-34)
dep(Â-39, $-35)
dep($-35, Ã-37)
punct(Â-39, ‚-38)
dep(LBR-r-RBR-gÃƒâ-28, Â-39)
punct(Â-39, ¡-40)
dep(Â-39, nÃƒâ-41)
punct(nÃƒâ-41, ‰-42)
dep(Ë-45, ˆÃ-43)
punct(Ë-45, ‚-44)
dep(nÃƒâ-41, Ë-45)
punct(Ë-45, l-46)
dep(RBR-49, \/-47)
dep(Ë-45, RBR-49)
cop(subunit-54, is-51)
det(subunit-54, a-52)
amod(subunit-54, specialized-53)
root(ROOT-0, subunit-54)
nsubj(has-59, subunit-54)
nsubjpass(enclosed-67, subunit-54)
det(cell-57, a-56)
prep_within(subunit-54, cell-57)
rcmod(subunit-54, has-59)
det(function-62, a-60)
amod(function-62, specific-61)
dobj(has-59, function-62)
auxpass(enclosed-67, is-65)
advmod(enclosed-67, separately-66)
rcmod(subunit-54, enclosed-67)
conj_and(has-59, enclosed-67)
poss(membrane-72, its-69)
amod(membrane-72, own-70)
nn(membrane-72, lipid-71)
prep_within(enclosed-67, membrane-72)

The Ostrogoths - LBR - Ostrogothi or Austrogothi - RBR - were a branch of the Goths , an East Germanic tribe that played a major role in the political events of the late Roman Empire .

det(Ostrogoths-2, The-1)
nsubj(branch-14, Ostrogoths-2)
nn(RBR-10, LBR-4)
dep(RBR-10, Ostrogothi-6)
conj_or(Ostrogothi-6, Austrogothi-8)
dep(RBR-10, Austrogothi-8)
dep(Ostrogoths-2, RBR-10)
cop(branch-14, were-12)
det(branch-14, a-13)
root(ROOT-0, branch-14)
det(Goths-17, the-16)
prep_of(branch-14, Goths-17)
det(tribe-22, an-19)
nn(tribe-22, East-20)
nn(tribe-22, Germanic-21)
appos(Goths-17, tribe-22)
nsubj(played-24, tribe-22)
rcmod(tribe-22, played-24)
det(role-27, a-25)
amod(role-27, major-26)
dobj(played-24, role-27)
det(events-31, the-29)
amod(events-31, political-30)
prep_in(played-24, events-31)
det(Empire-36, the-33)
amod(Empire-36, late-34)
nn(Empire-36, Roman-35)
prep_of(events-31, Empire-36)

An Octahedron - LBR - plural : octahedra - RBR - is a polyhedron with eight faces .

det(Octahedron-2, An-1)
nsubj(polyhedron-14, Octahedron-2)
nn(RBR-10, LBR-4)
dep(RBR-10, plural-6)
dep(plural-6, octahedra-8)
dep(Octahedron-2, RBR-10)
cop(polyhedron-14, is-12)
det(polyhedron-14, a-13)
root(ROOT-0, polyhedron-14)
num(faces-17, eight-16)
prep_with(polyhedron-14, faces-17)

In more general terms , Ontogeny is defined as the history of structural change in a unity , which can be a cell , an organism , or a society of organisms , without the loss of the organization that allows that unity to exist - LBR - Maturana and Varela , 1987 , p. 74 - RBR - .

amod(terms-4, more-2)
amod(terms-4, general-3)
prep_in(defined-8, terms-4)
nsubjpass(defined-8, Ontogeny-6)
auxpass(defined-8, is-7)
root(ROOT-0, defined-8)
det(history-11, the-10)
prep_as(defined-8, history-11)
amod(change-14, structural-13)
prep_of(history-11, change-14)
nsubj(cell-23, change-14)
det(unity-17, a-16)
prep_in(change-14, unity-17)
aux(cell-23, can-20)
cop(cell-23, be-21)
det(cell-23, a-22)
rcmod(change-14, cell-23)
det(organism-26, an-25)
rcmod(change-14, organism-26)
conj_or(cell-23, organism-26)
det(society-30, a-29)
rcmod(change-14, society-30)
conj_or(cell-23, society-30)
prep_of(society-30, organisms-32)
det(loss-36, the-35)
prep_without(cell-23, loss-36)
det(organization-39, the-38)
prep_of(loss-36, organization-39)
nsubj(allows-41, organization-39)
rcmod(organization-39, allows-41)
dep(exist-45, that-42)
nsubj(exist-45, unity-43)
aux(exist-45, to-44)
dep(RBR-58, exist-45)
nn(RBR-58, LBR-47)
dep(RBR-58, Maturana-49)
conj_and(Maturana-49, Varela-51)
dep(RBR-58, Varela-51)
appos(Maturana-49, 1987-53)
appos(Maturana-49, p.-55)
num(p.-55, 74-56)
dobj(allows-41, RBR-58)

Octans - LBR - Ãƒâ $ '' Ã ‚ âˆšÃƒâ ‰ ˆÃ ‚ â $ šktÃƒâˆžÃ ‚ Å `` nz , eighth part of a circle , alluding to octant - LBR - instrument - RBR - - RBR - is an inconspicuous constellation introduced by Nicolas Louis de Lacaille .

nsubj(constellation-44, Octans-1)
dep(Octans-1, LBR-3)
nn(Ã-8, Ãƒâ-5)
nn(Ã-8, $-6)
dep(LBR-3, Ã-8)
punct(âˆšÃƒâ-10, ‚-9)
dep(Ã-8, âˆšÃƒâ-10)
punct(âˆšÃƒâ-10, ‰-11)
punct(âˆšÃƒâ-10, ˆÃ-12)
dep(alluding-28, ‚-13)
det(alluding-28, â-14)
num(alluding-28, $-15)
number($-15, šktÃƒâˆžÃ-16)
number($-15, ‚-17)
nn(alluding-28, Å-18)
dep(alluding-28, nz-20)
amod(part-23, eighth-22)
dep(nz-20, part-23)
det(circle-26, a-25)
prep_of(part-23, circle-26)
dep(RBR-39, alluding-28)
amod(instrument-34, octant-30)
dep(instrument-34, LBR-32)
prep_to(alluding-28, instrument-34)
dep(instrument-34, RBR-36)
dep(âˆšÃƒâ-10, RBR-39)
cop(constellation-44, is-41)
det(constellation-44, an-42)
amod(constellation-44, inconspicuous-43)
root(ROOT-0, constellation-44)
partmod(constellation-44, introduced-45)
nn(Lacaille-50, Nicolas-47)
nn(Lacaille-50, Louis-48)
amod(Lacaille-50, de-49)
agent(introduced-45, Lacaille-50)

The Olive - LBR - Olea europaea - RBR - is a species of small tree in the family Oleaceae , native to the coastal areas of the eastern Mediterranean region , from Lebanon , Syria and the maritime parts of Asia Minor and northern Iran at the south end of the Caspian Sea .

det(europaea-7, The-1)
nn(europaea-7, Olive-2)
dep(europaea-7, LBR-4)
nn(europaea-7, Olea-6)
nsubj(species-13, europaea-7)
dep(europaea-7, RBR-9)
cop(species-13, is-11)
det(species-13, a-12)
root(ROOT-0, species-13)
amod(tree-16, small-15)
prep_of(species-13, tree-16)
det(Oleaceae-20, the-18)
nn(Oleaceae-20, family-19)
prep_in(tree-16, Oleaceae-20)
amod(parts-40, native-22)
det(areas-26, the-24)
amod(areas-26, coastal-25)
prep_to(native-22, areas-26)
det(region-31, the-28)
amod(region-31, eastern-29)
nn(region-31, Mediterranean-30)
prep_of(areas-26, region-31)
prep_from(native-22, Lebanon-34)
prep_from(native-22, Syria-36)
conj_and(Lebanon-34, Syria-36)
det(maritime-39, the-38)
prep_from(native-22, maritime-39)
conj_and(Lebanon-34, maritime-39)
prep_of(species-13, parts-40)
conj_and(tree-16, parts-40)
nn(Minor-43, Asia-42)
prep_of(parts-40, Minor-43)
amod(Iran-46, northern-45)
prep_of(species-13, Iran-46)
conj_and(tree-16, Iran-46)
det(end-50, the-48)
amod(end-50, south-49)
prep_at(Iran-46, end-50)
det(Sea-54, the-52)
nn(Sea-54, Caspian-53)
prep_of(end-50, Sea-54)

The OS is the external orifice of the uterus ; it is the opening at the tip of the cervix which separates the uterus from the vagina .

det(OS-2, The-1)
nsubj(orifice-6, OS-2)
cop(orifice-6, is-3)
det(orifice-6, the-4)
amod(orifice-6, external-5)
root(ROOT-0, orifice-6)
det(uterus-9, the-8)
prep_of(orifice-6, uterus-9)
nsubj(opening-14, it-11)
cop(opening-14, is-12)
det(opening-14, the-13)
parataxis(orifice-6, opening-14)
det(tip-17, the-16)
prep_at(opening-14, tip-17)
det(cervix-20, the-19)
prep_of(tip-17, cervix-20)
nsubj(separates-22, cervix-20)
rcmod(cervix-20, separates-22)
det(uterus-24, the-23)
dobj(separates-22, uterus-24)
det(vagina-27, the-26)
prep_from(separates-22, vagina-27)

The word Occult comes from the Latin word occultus - LBR - clandestine , hidden , secret - RBR - , referring to `` knowledge of the hidden `` .

det(Occult-3, The-1)
nn(Occult-3, word-2)
nsubj(comes-4, Occult-3)
root(ROOT-0, comes-4)
det(occultus-9, the-6)
amod(occultus-9, Latin-7)
nn(occultus-9, word-8)
prep_from(comes-4, occultus-9)
dep(occultus-9, LBR-11)
dep(LBR-11, clandestine-13)
partmod(clandestine-13, hidden-15)
acomp(hidden-15, secret-17)
dep(secret-17, RBR-19)
xcomp(hidden-15, referring-22)
prep_to(referring-22, knowledge-25)
det(hidden-28, the-27)
prep_of(knowledge-25, hidden-28)

The University of Oxford and the University of Cambridge , collectively known as Oxbridge , are the two oldest and most famous universities in Britain .

det(University-2, The-1)
nsubj(universities-23, University-2)
prep_of(University-2, Oxford-4)
det(University-7, the-6)
conj_and(University-2, University-7)
nsubj(universities-23, University-7)
prep_of(University-7, Cambridge-9)
advmod(known-12, collectively-11)
partmod(University-2, known-12)
prep_as(known-12, Oxbridge-14)
cop(universities-23, are-16)
det(universities-23, the-17)
num(universities-23, two-18)
amod(universities-23, oldest-19)
advmod(famous-22, most-21)
conj_and(oldest-19, famous-22)
amod(universities-23, famous-22)
root(ROOT-0, universities-23)
prep_in(universities-23, Britain-25)

The city of Odense - LBR - Danish , Ãƒâ $ '' Ã ‚ âˆšoÃƒâˆžÃ ‚ Â ° Ãƒâ $ ˜Ã ‚ Ä ± Ãƒâ $ '' Ã ‚ â $ cents nÃƒâ $ ˜Ã ‚ Â © sÃƒâ ‰ ˆÃ ‚ Ë ™ audio - RBR - is the third largest city in Denmark .

det(city-2, The-1)
nsubj(city-53, city-2)
prep_of(city-2, Odense-4)
dep(city-2, LBR-6)
amod(audio-45, Danish-8)
dep(audio-45, Ãƒâ-10)
amod(audio-45, $-11)
number($-11, Ã-13)
punct(Ãƒâ-19, ‚-14)
nn(Ãƒâ-19, âˆšoÃƒâˆžÃ-15)
punct(Ãƒâ-19, ‚-16)
nn(Ãƒâ-19, Â-17)
punct(Ãƒâ-19, °-18)
dep($-11, Ãƒâ-19)
dep(Ãƒâ-19, $-20)
num($-20, ˜Ã-21)
punct(Ãƒâ-19, ‚-22)
nn($-26, Ä-23)
punct($-26, ±-24)
nn($-26, Ãƒâ-25)
dep(Ãƒâ-19, $-26)
nn(Â-37, Ã-28)
punct(â-30, ‚-29)
dep(Â-37, â-30)
dep(â-30, $-31)
number($-31, cents-32)
number($-31, nÃƒâ-33)
dep($-31, $-34)
num($-34, ˜Ã-35)
punct(â-30, ‚-36)
dep($-26, Â-37)
punct(Ãƒâ-19, ©-38)
dep(Ãƒâ-19, sÃƒâ-39)
punct(sÃƒâ-39, ‰-40)
dep(Ë-43, ˆÃ-41)
punct(Ë-43, ‚-42)
dep(sÃƒâ-39, Ë-43)
punct(Ãƒâ-19, ™-44)
dep(LBR-6, audio-45)
dep(city-2, RBR-47)
cop(city-53, is-49)
det(city-53, the-50)
amod(city-53, third-51)
amod(city-53, largest-52)
root(ROOT-0, city-53)
prep_in(city-53, Denmark-55)

The Ostrich - LBR - Struthio camelus - RBR - is a large flightless bird native to Africa - LBR - and formerly the Middle East - RBR - .

nn(RBR-9, The-1)
nn(RBR-9, Ostrich-2)
dep(RBR-9, LBR-4)
nn(camelus-7, Struthio-6)
dep(LBR-4, camelus-7)
root(ROOT-0, RBR-9)
dep(RBR-9, is-11)
det(native-16, a-12)
amod(native-16, large-13)
nn(native-16, flightless-14)
nn(native-16, bird-15)
nsubj(is-11, native-16)
prep_to(native-16, Africa-18)
dep(Africa-18, LBR-20)
advmod(East-26, formerly-23)
det(East-26, the-24)
nn(East-26, Middle-25)
prep_to(native-16, East-26)
conj_and(Africa-18, East-26)
dep(Africa-18, RBR-28)

An Orgasm - LBR - sexual climax - RBR - is the conclusion of the plateau phase of the sexual response cycle , and may be experienced by both males and females .

det(climax-7, An-1)
nn(climax-7, Orgasm-2)
dep(climax-7, LBR-4)
amod(climax-7, sexual-6)
nsubj(conclusion-13, climax-7)
nsubjpass(experienced-27, climax-7)
dep(climax-7, RBR-9)
cop(conclusion-13, is-11)
det(conclusion-13, the-12)
root(ROOT-0, conclusion-13)
det(phase-17, the-15)
nn(phase-17, plateau-16)
prep_of(conclusion-13, phase-17)
det(cycle-22, the-19)
amod(cycle-22, sexual-20)
nn(cycle-22, response-21)
prep_of(phase-17, cycle-22)
aux(experienced-27, may-25)
auxpass(experienced-27, be-26)
conj_and(conclusion-13, experienced-27)
preconj(males-30, both-29)
agent(experienced-27, males-30)
agent(experienced-27, females-32)
conj_and(males-30, females-32)

An Oracle is a person or agency considered to be a source of wise counsel or prophetic opinion ; an infallible authority , usually spiritual in nature .

det(Oracle-2, An-1)
nsubj(person-5, Oracle-2)
cop(person-5, is-3)
det(person-5, a-4)
root(ROOT-0, person-5)
xsubj(source-12, person-5)
conj_or(person-5, agency-7)
xsubj(source-12, agency-7)
partmod(person-5, considered-8)
aux(source-12, to-9)
cop(source-12, be-10)
det(source-12, a-11)
xcomp(considered-8, source-12)
amod(counsel-15, wise-14)
prep_of(source-12, counsel-15)
amod(opinion-18, prophetic-17)
prep_of(source-12, opinion-18)
conj_or(counsel-15, opinion-18)
det(authority-22, an-20)
amod(authority-22, infallible-21)
dep(person-5, authority-22)
advmod(spiritual-25, usually-24)
partmod(authority-22, spiritual-25)
prep_in(spiritual-25, nature-27)

An Ore is a volume of rock containing components or minerals in a mode of occurrence that renders it valuable for mining .

det(Ore-2, An-1)
nsubj(volume-5, Ore-2)
cop(volume-5, is-3)
det(volume-5, a-4)
root(ROOT-0, volume-5)
prep_of(volume-5, rock-7)
partmod(rock-7, containing-8)
dobj(containing-8, components-9)
dobj(containing-8, minerals-11)
conj_or(components-9, minerals-11)
det(mode-14, a-13)
prep_in(containing-8, mode-14)
nsubj(renders-18, mode-14)
prep_of(mode-14, occurrence-16)
rcmod(mode-14, renders-18)
nsubj(valuable-20, it-19)
xcomp(renders-18, valuable-20)
prep_for(valuable-20, mining-22)

In biology , an Organism is an individual living system - LBR - such as animal , plant , fungus , or micro-organism - RBR - .

prep_in(system-10, biology-2)
det(Organism-5, an-4)
nsubj(system-10, Organism-5)
cop(system-10, is-6)
det(system-10, an-7)
amod(system-10, individual-8)
amod(system-10, living-9)
root(ROOT-0, system-10)
dep(system-10, LBR-12)
prep_such_as(system-10, animal-16)
prep_such_as(system-10, plant-18)
conj_or(animal-16, plant-18)
prep_such_as(system-10, fungus-20)
conj_or(animal-16, fungus-20)
prep_such_as(system-10, micro-organism-23)
conj_or(animal-16, micro-organism-23)
dep(animal-16, RBR-25)

In mathematics , an Operand is one of the inputs - LBR - arguments - RBR - of an operator .

prep_in(one-7, mathematics-2)
det(Operand-5, an-4)
nsubj(one-7, Operand-5)
cop(one-7, is-6)
root(ROOT-0, one-7)
det(inputs-10, the-9)
prep_of(one-7, inputs-10)
dep(one-7, LBR-12)
dep(one-7, arguments-14)
dep(one-7, RBR-16)
det(operator-20, an-19)
prep_of(one-7, operator-20)

An Oxymoron - LBR - plural oxymorons or , more rarely , oxymora - RBR - is a figure of speech that combines two normally contradictory terms .

det(oxymorons-7, An-1)
amod(oxymorons-7, Oxymoron-2)
dep(oxymorons-7, LBR-4)
nn(oxymorons-7, plural-6)
nsubj(figure-19, oxymorons-7)
dep(oxymorons-7, more-10)
dep(more-10, rarely-11)
conj_or(oxymorons-7, oxymora-13)
nsubj(figure-19, oxymora-13)
dep(oxymorons-7, RBR-15)
cop(figure-19, is-17)
det(figure-19, a-18)
root(ROOT-0, figure-19)
nsubj(combines-23, figure-19)
prep_of(figure-19, speech-21)
rcmod(figure-19, combines-23)
num(terms-27, two-24)
amod(terms-27, normally-25)
amod(terms-27, contradictory-26)
dobj(combines-23, terms-27)

The Oromo are an African ethnic group found in Ethiopia and to a lesser extent in Kenya .

det(Oromo-2, The-1)
nsubj(group-7, Oromo-2)
cop(group-7, are-3)
det(group-7, an-4)
amod(group-7, African-5)
amod(group-7, ethnic-6)
root(ROOT-0, group-7)
partmod(group-7, found-8)
partmod(group-7, found-8')
conj_and(found-8, found-8')
prep_in(found-8, Ethiopia-10)
det(extent-15, a-13)
amod(extent-15, lesser-14)
prep_to(found-8', extent-15)
prep_in(extent-15, Kenya-17)

An Oncogene is a protein encoding gene , which ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ° when deregulated ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ° participates in the onset and development of cancer .

det(Oncogene-2, An-1)
nsubj(gene-7, Oncogene-2)
cop(gene-7, is-3)
det(gene-7, a-4)
nn(gene-7, protein-5)
amod(gene-7, encoding-6)
root(ROOT-0, gene-7)
dobj(â-14, gene-7)
rel(Ã-12, which-9)
nn(cents-11, ÃƒÂ-10)
nsubj(Ã-12, cents-11)
rcmod(gene-7, Ã-12)
nsubj(â-14, ‚-13)
ccomp(Ã-12, â-14)
dobj(â-14, $-15)
num($-15, cents-16)
nn(‚-18, Ã-17)
nsubj(â-19, ‚-18)
rcmod($-15, â-19)
dobj(â-19, $-20)
tmod(â-28, $-20)
num($-20, °-21)
advmod(â-28, when-22)
nn(‚-27, deregulated-23)
nn(‚-27, ÃƒÂ-24)
nn(‚-27, cents-25)
nn(‚-27, Ã-26)
nsubj(â-28, ‚-27)
dep($-20, â-28)
dobj(â-28, $-29)
num($-29, cents-30)
nn(‚-32, Ã-31)
nsubj(â-33, ‚-32)
rcmod($-29, â-33)
dobj(â-33, $-34)
number($-34, °-35)
number($-34, participates-36)
det(onset-39, the-38)
prep_in($-34, onset-39)
prep_in($-34, development-41)
conj_and(onset-39, development-41)
prep_of(onset-39, cancer-43)

An Orchestra is an instrumental ensemble , usually fairly large with string , brass , woodwind sections , and possibly a percussion section as well .

det(Orchestra-2, An-1)
nsubj(ensemble-6, Orchestra-2)
cop(ensemble-6, is-3)
det(ensemble-6, an-4)
amod(ensemble-6, instrumental-5)
root(ROOT-0, ensemble-6)
advmod(large-10, usually-8)
advmod(large-10, fairly-9)
amod(ensemble-6, large-10)
prep_with(large-10, string-12)
prep_with(large-10, brass-14)
conj_and(string-12, brass-14)
nn(sections-17, woodwind-16)
prep_with(large-10, sections-17)
conj_and(string-12, sections-17)
advmod(section-23, possibly-20)
det(section-23, a-21)
amod(section-23, percussion-22)
prep_with(large-10, section-23)
conj_and(string-12, section-23)
advmod(well-25, as-24)
mwe(well-25, as-24)
advmod(large-10, well-25)

The Okapi - LBR - Okapia johnstoni - RBR - is a mammal living in the Ituri Rainforest in the north east of the Democratic Republic of the Congo in central Africa .

det(johnstoni-7, The-1)
nn(johnstoni-7, Okapi-2)
dep(johnstoni-7, LBR-4)
nn(johnstoni-7, Okapia-6)
nsubj(mammal-13, johnstoni-7)
dep(johnstoni-7, RBR-9)
cop(mammal-13, is-11)
det(mammal-13, a-12)
root(ROOT-0, mammal-13)
partmod(mammal-13, living-14)
det(Rainforest-18, the-16)
nn(Rainforest-18, Ituri-17)
prep_in(living-14, Rainforest-18)
det(north-21, the-20)
prep_in(Rainforest-18, north-21)
advmod(north-21, east-22)
det(Republic-26, the-24)
amod(Republic-26, Democratic-25)
prep_of(north-21, Republic-26)
det(Congo-29, the-28)
prep_of(Republic-26, Congo-29)
amod(Africa-32, central-31)
prep_in(living-14, Africa-32)

An Ovary is an ovum-producing reproductive organ found in female organisms .

det(Ovary-2, An-1)
nsubj(organ-7, Ovary-2)
cop(organ-7, is-3)
det(organ-7, an-4)
amod(organ-7, ovum-producing-5)
amod(organ-7, reproductive-6)
root(ROOT-0, organ-7)
partmod(organ-7, found-8)
amod(organisms-11, female-10)
prep_in(found-8, organisms-11)

In medicine , the term Opiate describes any of the narcotic alkaloids found in opium , as well as any derivatives of such alkaloids .

prep_in(describes-7, medicine-2)
det(Opiate-6, the-4)
nn(Opiate-6, term-5)
nsubj(describes-7, Opiate-6)
root(ROOT-0, describes-7)
dobj(describes-7, any-8)
det(alkaloids-12, the-10)
amod(alkaloids-12, narcotic-11)
prep_of(any-8, alkaloids-12)
partmod(alkaloids-12, found-13)
prep_in(found-13, opium-15)
det(derivatives-21, any-20)
dobj(describes-7, derivatives-21)
conj_and(any-8, derivatives-21)
amod(alkaloids-24, such-23)
prep_of(derivatives-21, alkaloids-24)

The Octopus - LBR - Ãƒâ $ '' Ã ‚ âˆšÃƒâ ‰ ˆÃ ‚ â $ šktÃƒâ ‰ ˆÃ ‚ Ë ™ pÃƒâ ‰ ˆÃ ‚ Ë ™ s , from Greek ÃƒÂ ¡ Ã ‚ âˆ Ã ‚ âˆšÃƒâ „ Ã ‚ ÂºÃƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâˆ ‚ Ã ‚ â „ Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ âˆ ` Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , ` eight-footed ' , with plural forms : octopuses -LRB- Ãƒâ $ '' Ã ‚ âˆšÃƒâ ‰ ˆÃ ‚ â $ šktÃƒâ ‰ ˆÃ ‚ Ë ™ pÃƒâ ‰ ˆÃ ‚ Ë ™ sÃƒâ ‰ ˆÃ ‚ Âªs -RRB- , octopi -LRB- Ãƒâ $ '' Ã ‚ âˆšÃƒâ ‰ ˆÃ ‚ â $ šktÃƒâ ‰ ˆÃ ‚ Ë ™ paÃƒâ ‰ ˆÃ ‚ Âª -RRB- , or octopodes -LRB- Ãƒâ $ '' Ã ‚ â $ ˜Ãƒâ ‰ ˆÃ ‚ â $ škÃƒâ $ '' Ã ‚ âˆštÃƒâ ‰ ˆÃ ‚ Ë ™ Ãƒâ $ ¦ Ã ‚ â $ ¦ pÃƒâ ‰ ˆÃ ‚ Ë ™ diÃƒâ $ '' Ã ‚ âˆ † s -RRB- , see below - RBR - is a cephalopod of the order Octopoda that inhabits many diverse regions of the ocean , especially coral reefs .

det(Octopus-2, The-1)
root(ROOT-0, Octopus-2)
nsubj(see-203, LBR-4)
nn($-7, Ãƒâ-6)
dep(LBR-4, $-7)
nn(âˆšÃƒâ-11, Ã-9)
punct(âˆšÃƒâ-11, ‚-10)
dep(LBR-4, âˆšÃƒâ-11)
punct(âˆšÃƒâ-11, ‰-12)
punct(âˆšÃƒâ-11, ˆÃ-13)
punct(â-15, ‚-14)
dep(âˆšÃƒâ-11, â-15)
pobj(â-15, $-16)
num($-16, šktÃƒâ-17)
punct(â-15, ‰-18)
punct(â-15, ˆÃ-19)
dep(Ë-21, ‚-20)
dep(â-15, Ë-21)
punct(Ë-21, ™-22)
dep(Ë-21, pÃƒâ-23)
punct(pÃƒâ-23, ‰-24)
dep(Ë-27, ˆÃ-25)
punct(Ë-27, ‚-26)
dep(pÃƒâ-23, Ë-27)
punct(Ë-27, ™-28)
dep(Ë-27, s-29)
dep(s-29, from-31)
amod(ÃƒÂ-33, Greek-32)
pobj(from-31, ÃƒÂ-33)
punct(s-29, ¡-34)
dep(Ã-46, Ã-35)
dep(Ã-46, ‚-36)
dep(Ã-46, âˆ-37)
dep(Ã-46, Ã-38)
dep(Ã-46, ‚-39)
dep(Ã-46, âˆšÃƒâ-40)
dep(Ã-46, „-41)
dep(Ã-46, Ã-42)
dep(Ã-46, ‚-43)
dep(Ã-46, ÂºÃƒâˆ-44)
dep(Ã-46, ‚-45)
dep(â-48, Ã-46)
punct(â-48, ‚-47)
dep(s-29, â-48)
punct(â-48, ‰-49)
dep(Ã-53, ¥-50)
nn(Ã-53, Ãƒâˆ-51)
nn(Ã-53, ‚-52)
dep(â-55, Ã-53)
punct(â-55, ‚-54)
dep(â-48, â-55)
punct(â-55, „-56)
dep(Ã-59, Ãƒâˆ-57)
punct(Ã-59, ‚-58)
dep(â-55, Ã-59)
punct(Ã-59, ‚-60)
nn(cents-63, â-61)
nn(cents-63, $-62)
dep(Ã-59, cents-63)
nn(Ã-78, Ãƒâ-64)
punct(Ã-78, „-65)
nn(Ã-78, Ã-66)
punct(Ã-78, ‚-67)
nn(Ã-78, Â-68)
punct(Ã-78, ¿-69)
nn(Ã-78, Ãƒâˆ-70)
punct(Ã-78, ‚-71)
nn(Ã-78, Ã-72)
punct(Ã-78, ‚-73)
nn(Ã-78, âˆ-74)
nn(Ã-78, Ãƒâˆ-76)
punct(Ã-78, ‚-77)
dep(cents-63, Ã-78)
punct(cents-63, ‚-79)
amod(‰-81, â-80)
dep(cents-63, ‰-81)
dep(cents-63, nbsp-83)
conj_and(‰-81, nbsp-83)
appos(‰-81, eight-footed-87)
nn(forms-92, plural-91)
prep_with(‰-81, forms-92)
dep(‰-81, octopuses-94)
nn(Ã-99, Ãƒâ-96)
nn(Ã-99, $-97)
dep(octopuses-94, Ã-99)
punct(cents-63, ‚-100)
dep(cents-63, âˆšÃƒâ-101)
punct(âˆšÃƒâ-101, ‰-102)
punct(âˆšÃƒâ-101, ˆÃ-103)
dep(âˆšÃƒâ-101, ‚-104)
dep(‚-104, â-105)
pobj(â-105, $-106)
num($-106, šktÃƒâ-107)
punct(‚-104, ‰-108)
dep(Ë-111, ˆÃ-109)
punct(Ë-111, ‚-110)
dep(‚-104, Ë-111)
punct(Ë-111, ™-112)
dep(Ë-111, pÃƒâ-113)
punct(pÃƒâ-113, ‰-114)
dep(Ë-117, ˆÃ-115)
punct(Ë-117, ‚-116)
dep(pÃƒâ-113, Ë-117)
punct(Ë-117, ™-118)
dep(Ë-117, sÃƒâ-119)
punct(sÃƒâ-119, ‰-120)
dep(Âªs-123, ˆÃ-121)
punct(Âªs-123, ‚-122)
dep(sÃƒâ-119, Âªs-123)
dep(LBR-4, octopi-126)
conj_or(âˆšÃƒâ-11, octopi-126)
nn(Ã-131, Ãƒâ-128)
nn(Ã-131, $-129)
dep(octopi-126, Ã-131)
punct(âˆšÃƒâ-133, ‚-132)
dep(octopi-126, âˆšÃƒâ-133)
punct(âˆšÃƒâ-133, ‰-134)
punct(âˆšÃƒâ-133, ˆÃ-135)
dep(âˆšÃƒâ-133, ‚-136)
dep(‚-136, â-137)
pobj(â-137, $-138)
num($-138, šktÃƒâ-139)
punct(‚-136, ‰-140)
dep(Ë-143, ˆÃ-141)
punct(Ë-143, ‚-142)
dep(‚-136, Ë-143)
punct(Ë-143, ™-144)
dep(Ë-143, paÃƒâ-145)
punct(paÃƒâ-145, ‰-146)
dep(Âª-149, ˆÃ-147)
punct(Âª-149, ‚-148)
dep(paÃƒâ-145, Âª-149)
dep(LBR-4, octopodes-153)
conj_or(âˆšÃƒâ-11, octopodes-153)
nn(Ã-158, Ãƒâ-155)
nn(Ã-158, $-156)
dep(octopodes-153, Ã-158)
punct(â-160, ‚-159)
dep(octopodes-153, â-160)
pobj(â-160, $-161)
num($-161, ˜Ãƒâ-162)
punct(â-160, ‰-163)
punct(â-160, ˆÃ-164)
punct($-167, ‚-165)
dep($-167, â-166)
dep(â-160, $-167)
num($-167, škÃƒâ-168)
amod(Ã-171, $-169)
dep($-167, Ã-171)
punct($-167, ‚-172)
dep($-167, âˆštÃƒâ-173)
punct(âˆštÃƒâ-173, ‰-174)
dep(Ë-177, ˆÃ-175)
punct(Ë-177, ‚-176)
dep(âˆštÃƒâ-173, Ë-177)
punct(Ë-177, ™-178)
dep(Ë-177, Ãƒâ-179)
dep(Ãƒâ-179, $-180)
num($-180, ¦-181)
nn(‚-183, Ã-182)
dep($-180, ‚-183)
possessive(‚-183, â-184)
num(‚-183, $-185)
number($-185, ¦-186)
number($-185, pÃƒâ-187)
punct(Ãƒâ-179, ‰-188)
dep(Ë-191, ˆÃ-189)
punct(Ë-191, ‚-190)
dep(Ãƒâ-179, Ë-191)
punct(Ë-191, ™-192)
dep(Ã-196, diÃƒâ-193)
pobj(diÃƒâ-193, $-194)
dep(Ë-191, Ã-196)
punct(Ã-196, ‚-197)
punct(Ã-196, âˆ-198)
dep(s-200, †-199)
dep(Ã-196, s-200)
dep(Octopus-2, see-203)
advmod(cephalopod-210, below-204)
nsubj(cephalopod-210, RBR-206)
cop(cephalopod-210, is-208)
det(cephalopod-210, a-209)
ccomp(see-203, cephalopod-210)
nsubj(inhabits-216, cephalopod-210)
det(Octopoda-214, the-212)
nn(Octopoda-214, order-213)
prep_of(cephalopod-210, Octopoda-214)
rcmod(cephalopod-210, inhabits-216)
amod(regions-219, many-217)
amod(regions-219, diverse-218)
dobj(inhabits-216, regions-219)
det(ocean-222, the-221)
prep_of(regions-219, ocean-222)
advmod(ocean-222, especially-224)
nn(reefs-226, coral-225)
dep(ocean-222, reefs-226)

The Paleolithic - LBR - or Palaeolithic - RBR - - LBR - from Greek : Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â ± Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ± Ãƒâ „ Ã ‚ â $ ™ Ãƒâˆ ‚ Ã ‚ â $ ˜Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , palaios , `` old `` ; and Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ¯ Ãƒâ „ Ã ‚ Â ¸ Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , lithos , `` stone `` lit .

nn(Paleolithic-2, The-1)
nsubj(lithos-106, Paleolithic-2)
dep(Paleolithic-2, LBR-4)
nn(‚-20, Palaeolithic-7)
dep(‚-20, RBR-9)
dep(Ã-19, LBR-12)
dep(LBR-12, from-14)
pobj(from-14, Greek-15)
nn(Ã-19, Ãƒâˆ-17)
nn(Ã-19, ‚-18)
dep(RBR-9, Ã-19)
conj_or(Paleolithic-2, ‚-20)
nsubj(lithos-106, ‚-20)
ccomp(lithos-106, â-21)
dobj(â-21, $-22)
num($-22, cents-23)
nn(Â-28, Ãƒâ-24)
nn(Â-28, „-25)
nn(Â-28, Ã-26)
nn(Â-28, ‚-27)
nsubj(±-29, Â-28)
rcmod($-22, ±-29)
nn(Â-34, Ãƒâ-30)
nn(Â-34, „-31)
nn(Â-34, Ã-32)
nn(Â-34, ‚-33)
dobj(±-29, Â-34)
partmod(Â-34, Ãƒâ-36)
nn(‚-45, „-37)
nn(‚-45, Ã-38)
nn(‚-45, ‚-39)
nn(‚-45, Â-40)
nn(‚-45, ±-41)
nn(‚-45, Ãƒâ-42)
nn(‚-45, „-43)
nn(‚-45, Ã-44)
nsubj(â-46, ‚-45)
ccomp(Ãƒâ-36, â-46)
num(‚-52, $-47)
number($-47, ™-48)
number($-47, Ãƒâˆ-49)
nn(‚-52, ‚-50)
nn(‚-52, Ã-51)
nsubj(â-53, ‚-52)
ccomp(â-46, â-53)
num(‚-58, $-54)
number($-54, ˜Ãƒâˆ-55)
number($-54, ‚-56)
nn(‚-58, Ã-57)
dep(old-68, ‚-58)
amod(‰-60, â-59)
dep(‚-58, ‰-60)
dep(‚-58, nbsp-62)
conj_and(‰-60, nbsp-62)
appos(‚-58, palaios-65)
dep(â-53, old-68)
nn(Ãƒâ-78, Ãƒâ-72)
nn(Ãƒâ-78, „-73)
nn(Ãƒâ-78, Ã-74)
nn(Ãƒâ-78, ‚-75)
nn(Ãƒâ-78, Â-76)
dobj(±-29, Ãƒâ-78)
conj_and(Â-34, Ãƒâ-78)
advmod(‰-101, „-79)
nn(‰-101, Ã-80)
nn(‰-101, ‚-81)
nn(‰-101, Â-82)
nn(‰-101, ¯-83)
nn(‰-101, Ãƒâ-84)
nn(‰-101, „-85)
nn(‰-101, Ã-86)
nn(‰-101, ‚-87)
nn(‰-101, Â-88)
nn(‰-101, ¸-89)
nn(‰-101, Ãƒâ-90)
nn(‰-101, „-91)
nn(‰-101, Ã-92)
nn(‰-101, ‚-93)
nn(‰-101, Â-94)
nn(‰-101, ¿-95)
nn(‰-101, Ãƒâˆ-96)
nn(‰-101, ‚-97)
nn(‰-101, Ã-98)
nn(‰-101, ‚-99)
nn(‰-101, â-100)
rcmod(Ãƒâ-78, ‰-101)
conj_and(Â-34, nbsp-103)
conj_and(Ãƒâ-78, nbsp-103)
root(ROOT-0, lithos-106)
nsubj(lit-111, stone-109)
ccomp(lithos-106, lit-111)

`` old age of the stone `` ; was coined by archaeologist John Lubbock in 1865 .

nsubj(age-3, old-2)
root(ROOT-0, age-3)
amod(stone-6, of-4)
det(stone-6, the-5)
dobj(age-3, stone-6)
auxpass(coined-10, was-9)
parataxis(age-3, coined-10)
nn(Lubbock-14, archaeologist-12)
nn(Lubbock-14, John-13)
agent(coined-10, Lubbock-14)
prep_in(Lubbock-14, 1865-16)

- RBR - is a prehistoric era distinguished by the development of the first stone tools .

nsubj(era-7, RBR-2)
cop(era-7, is-4)
det(era-7, a-5)
amod(era-7, prehistoric-6)
root(ROOT-0, era-7)
rcmod(era-7, distinguished-8)
det(development-11, the-10)
prep_by(distinguished-8, development-11)
det(tools-16, the-13)
amod(tools-16, first-14)
nn(tools-16, stone-15)
prep_of(development-11, tools-16)

A Planet , as defined by the International Astronomical Union - LBR - IAU - RBR - , is a celestial body orbiting a star or stellar remnant that is massive enough to be rounded by its own gravity , not massive enough to cause thermonuclear fusion , and has cleared its neighbouring region of planetesimals .

det(Planet-2, A-1)
nsubj(body-22, Planet-2)
mark(defined-5, as-4)
dep(Planet-2, defined-5)
det(International-8, the-7)
prep_by(defined-5, International-8)
nn(IAU-14, Astronomical-9)
nn(IAU-14, Union-10)
dep(IAU-14, LBR-12)
dobj(defined-5, IAU-14)
dep(IAU-14, RBR-16)
cop(body-22, is-19)
det(body-22, a-20)
amod(body-22, celestial-21)
root(ROOT-0, body-22)
partmod(body-22, orbiting-23)
det(remnant-28, a-24)
nn(remnant-28, star-25)
conj_or(star-25, stellar-27)
nn(remnant-28, stellar-27)
dobj(orbiting-23, remnant-28)
nsubj(massive-31, remnant-28)
cop(massive-31, is-30)
rcmod(remnant-28, massive-31)
advmod(massive-31, enough-32)
aux(rounded-35, to-33)
cop(rounded-35, be-34)
xcomp(massive-31, rounded-35)
poss(gravity-39, its-37)
amod(gravity-39, own-38)
prep_by(rounded-35, gravity-39)
neg(massive-42, not-41)
xcomp(massive-31, massive-42)
conj_and(rounded-35, massive-42)
advmod(massive-42, enough-43)
aux(cause-45, to-44)
xcomp(massive-42, cause-45)
nn(fusion-47, thermonuclear-46)
dobj(cause-45, fusion-47)
aux(cleared-51, has-50)
xcomp(massive-31, cleared-51)
conj_and(rounded-35, cleared-51)
poss(region-54, its-52)
amod(region-54, neighbouring-53)
dobj(cleared-51, region-54)
prep_of(region-54, planetesimals-56)

Physics is the science of matter and its motion , as well as space and time .

nsubj(science-4, Physics-1)
cop(science-4, is-2)
det(science-4, the-3)
root(ROOT-0, science-4)
prep_of(science-4, matter-6)
poss(motion-9, its-8)
prep_of(science-4, motion-9)
conj_and(matter-6, motion-9)
prep_of(science-4, space-14)
conj_and(matter-6, space-14)
conj_and(matter-6, time-16)
conj_and(space-14, time-16)

In Greek mythology , Poseidon - LBR - Greek : Ãƒâ „ Ã ‚ & nbsp ; Ãƒâ „ Ã ‚ Â ¿ Ãƒâˆ ‚ Ã ‚ âˆžÃƒâ „ Ã ‚ ÂµÃƒâ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ Â ´ ÃƒÂ ¡ Ã ‚ Â ¿ Ã ‚ Â ¶ Ãƒâ „ Ã ‚ âˆ ; Latin : NeptÃƒâˆ ` Ã ‚ Â `` nus - RBR - was the god of the sea , as well as of horses , and , as `` Earth-Shaker , `` of earthquakes .

amod(mythology-3, Greek-2)
prep_in(NeptÃƒâˆ-63, mythology-3)
nsubj(NeptÃƒâˆ-63, Poseidon-5)
dep(Poseidon-5, LBR-7)
dep(Poseidon-5, Greek-9)
nn(‚-14, Ãƒâ-11)
nn(‚-14, „-12)
nn(‚-14, Ã-13)
dep(Poseidon-5, ‚-14)
dep(Poseidon-5, nbsp-16)
conj_and(‚-14, nbsp-16)
nn(â-36, Ãƒâ-18)
nn(â-36, „-19)
nn(â-36, Ã-20)
nn(â-36, ‚-21)
nn(â-36, Â-22)
nn(â-36, ¿-23)
nn(â-36, Ãƒâˆ-24)
nn(â-36, ‚-25)
nn(â-36, Ã-26)
nn(â-36, ‚-27)
nn(â-36, âˆžÃƒâ-28)
nn(â-36, „-29)
nn(â-36, Ã-30)
nn(â-36, ‚-31)
nn(â-36, ÂµÃƒâ-32)
nn(â-36, „-33)
nn(â-36, Ã-34)
nn(â-36, ‚-35)
dep(Poseidon-5, â-36)
num(âˆ-59, $-37)
number($-37, ™-38)
number($-37, Ãƒâ-39)
nn(âˆ-59, „-40)
nn(âˆ-59, Ã-41)
nn(âˆ-59, ‚-42)
nn(âˆ-59, Â-43)
nn(âˆ-59, ´-44)
nn(âˆ-59, ÃƒÂ-45)
nn(âˆ-59, ¡-46)
nn(âˆ-59, Ã-47)
nn(âˆ-59, ‚-48)
nn(âˆ-59, Â-49)
nn(âˆ-59, ¿-50)
nn(âˆ-59, Ã-51)
nn(âˆ-59, ‚-52)
nn(âˆ-59, Â-53)
nn(âˆ-59, ¶-54)
nn(âˆ-59, Ãƒâ-55)
nn(âˆ-59, „-56)
nn(âˆ-59, Ã-57)
nn(âˆ-59, ‚-58)
dep(â-36, âˆ-59)
dep(Poseidon-5, Latin-61)
root(ROOT-0, NeptÃƒâˆ-63)
nn(Â-67, Ã-65)
nn(Â-67, ‚-66)
dobj(NeptÃƒâˆ-63, Â-67)
nsubj(god-75, nus-69)
dep(nus-69, RBR-71)
cop(god-75, was-73)
det(god-75, the-74)
rcmod(Â-67, god-75)
det(sea-78, the-77)
prep_of(god-75, sea-78)
prep_of(god-75, horses-84)
conj_and(sea-78, horses-84)
rcmod(Â-67, as-88)
conj_and(god-75, as-88)
prep_as(god-75, Earth-Shaker-90)
prep_of(Earth-Shaker-90, earthquakes-94)

In sociology and biology a Population is the collection of inter-breeding organisms of a particular species .

prep_in(collection-9, sociology-2)
conj_and(sociology-2, biology-4)
prep_in(collection-9, biology-4)
det(Population-6, a-5)
nsubj(collection-9, Population-6)
cop(collection-9, is-7)
det(collection-9, the-8)
root(ROOT-0, collection-9)
amod(organisms-12, inter-breeding-11)
prep_of(collection-9, organisms-12)
det(species-16, a-14)
amod(species-16, particular-15)
prep_of(organisms-12, species-16)

In probability theory , an Event is a set of outcomes - LBR - a subset of the sample space - RBR - to which a probability is assigned .

nn(theory-3, probability-2)
prep_in(set-9, theory-3)
det(Event-6, an-5)
nsubj(set-9, Event-6)
cop(set-9, is-7)
det(set-9, a-8)
root(ROOT-0, set-9)
prep_of(set-9, outcomes-11)
dep(set-9, LBR-13)
det(subset-16, a-15)
dep(LBR-13, subset-16)
det(space-20, the-18)
nn(space-20, sample-19)
prep_of(subset-16, space-20)
dep(set-9, RBR-22)
rel(assigned-29, which-25)
det(probability-27, a-26)
nsubjpass(assigned-29, probability-27)
auxpass(assigned-29, is-28)
rcmod(set-9, assigned-29)

A Play , or stageplay , is a form of literature written by a playwright , almost always consisting of dialogue between fictional characters , intended for theatrical performance rather than reading .

det(Play-2, A-1)
nsubj(form-9, Play-2)
dep(stageplay-5, or-4)
dep(form-9, stageplay-5)
cop(form-9, is-7)
det(form-9, a-8)
root(ROOT-0, form-9)
prep_of(form-9, literature-11)
partmod(literature-11, written-12)
det(playwright-15, a-14)
agent(written-12, playwright-15)
advmod(always-18, almost-17)
advmod(consisting-19, always-18)
ccomp(written-12, consisting-19)
prep_of(consisting-19, dialogue-21)
amod(characters-24, fictional-23)
prep_between(dialogue-21, characters-24)
partmod(dialogue-21, intended-26)
amod(performance-29, theatrical-28)
prep_for(intended-26, performance-29)
ccomp(written-12, reading-32)
conj_negcc(consisting-19, reading-32)

In human language , a Phoneme is the smallest posited structural unit that distinguishes meaning .

amod(language-3, human-2)
prep_in(unit-12, language-3)
det(Phoneme-6, a-5)
nsubj(unit-12, Phoneme-6)
cop(unit-12, is-7)
det(unit-12, the-8)
amod(unit-12, smallest-9)
amod(unit-12, posited-10)
amod(unit-12, structural-11)
root(ROOT-0, unit-12)
nsubj(distinguishes-14, unit-12)
rcmod(unit-12, distinguishes-14)
xcomp(distinguishes-14, meaning-15)

Within phonetics , a Phone is a speech sound or gesture considered a physical event without regard to its place in the phonology of a language .

prep_within(sound-9, phonetics-2)
det(Phone-5, a-4)
nsubj(sound-9, Phone-5)
cop(sound-9, is-6)
det(sound-9, a-7)
nn(sound-9, speech-8)
root(ROOT-0, sound-9)
conj_or(sound-9, gesture-11)
partmod(sound-9, considered-12)
det(event-15, a-13)
amod(event-15, physical-14)
dobj(considered-12, event-15)
prep_without(considered-12, regard-17)
poss(place-20, its-19)
prep_to(considered-12, place-20)
det(phonology-23, the-22)
prep_in(place-20, phonology-23)
det(language-26, a-25)
prep_of(phonology-23, language-26)

A Primate is any member of the biological order Primates - LBR - Latin : `` prime , first rank `` - RBR - , the group that contains all the species commonly related to the lemurs , monkeys , and apes , with the last category including humans .

det(Primate-2, A-1)
nsubj(member-5, Primate-2)
cop(member-5, is-3)
det(member-5, any-4)
root(ROOT-0, member-5)
det(order-9, the-7)
amod(order-9, biological-8)
prep_of(member-5, order-9)
nn(Latin-14, Primates-10)
dep(Latin-14, LBR-12)
dep(order-9, Latin-14)
amod(RBR-23, prime-17)
amod(RBR-23, first-19)
amod(RBR-23, rank-20)
dep(order-9, RBR-23)
det(group-27, the-26)
appos(member-5, group-27)
nsubj(contains-29, group-27)
rcmod(group-27, contains-29)
predet(species-32, all-30)
det(species-32, the-31)
nsubj(related-34, species-32)
advmod(related-34, commonly-33)
xcomp(contains-29, related-34)
det(lemurs-37, the-36)
prep_to(related-34, lemurs-37)
prep_to(related-34, monkeys-39)
conj_and(lemurs-37, monkeys-39)
prep_to(related-34, apes-42)
conj_and(lemurs-37, apes-42)
det(category-47, the-45)
amod(category-47, last-46)
prep_with(contains-29, category-47)
prep_including(category-47, humans-49)

In mathematics , a Polynomial is an expression constructed from one or more indeterminates and constants - LBR - if the polynomial is regarded as a function , the indeterminates are variables - RBR - , using the operations of addition , subtraction , multiplication , and raising to constant non-negative integer powers .

prep_in(expression-8, mathematics-2)
det(Polynomial-5, a-4)
nsubj(expression-8, Polynomial-5)
cop(expression-8, is-6)
det(expression-8, an-7)
root(ROOT-0, expression-8)
partmod(expression-8, constructed-9)
prep_from(constructed-9, one-11)
amod(indeterminates-14, more-13)
prep_from(constructed-9, indeterminates-14)
conj_or(one-11, indeterminates-14)
conj_or(one-11, constants-16)
conj_and(indeterminates-14, constants-16)
dep(constructed-9, LBR-18)
mark(regarded-24, if-20)
det(polynomial-22, the-21)
nsubjpass(regarded-24, polynomial-22)
auxpass(regarded-24, is-23)
advcl(variables-32, regarded-24)
det(function-27, a-26)
prep_as(regarded-24, function-27)
det(indeterminates-30, the-29)
nsubj(variables-32, indeterminates-30)
cop(variables-32, are-31)
dep(LBR-18, variables-32)
dep(variables-32, RBR-34)
partmod(variables-32, using-37)
det(operations-39, the-38)
dobj(using-37, operations-39)
prep_of(operations-39, addition-41)
prep_of(operations-39, subtraction-43)
conj_and(addition-41, subtraction-43)
prep_of(operations-39, multiplication-45)
conj_and(addition-41, multiplication-45)
prep_of(operations-39, raising-48)
conj_and(addition-41, raising-48)
amod(powers-53, constant-50)
amod(powers-53, non-negative-51)
nn(powers-53, integer-52)
prep_to(addition-41, powers-53)

A Polymer is a large molecule - LBR - macromolecule - RBR - composed of repeating structural units connected by covalent chemical bonds .

det(Polymer-2, A-1)
nsubj(molecule-6, Polymer-2)
cop(molecule-6, is-3)
det(molecule-6, a-4)
amod(molecule-6, large-5)
dep(LBR-8, molecule-6)
root(ROOT-0, LBR-8)
dep(LBR-8, macromolecule-10)
dep(macromolecule-10, RBR-12)
dep(LBR-8, composed-14)
prepc_of(composed-14, repeating-16)
amod(units-18, structural-17)
dobj(repeating-16, units-18)
partmod(units-18, connected-19)
amod(bonds-23, covalent-21)
nn(bonds-23, chemical-22)
agent(connected-19, bonds-23)

In common law legal systems , a Precedent or authority is a legal case establishing a principle or rule that a court or other judicial body adopts when deciding subsequent cases with similar issues or facts .

amod(law-3, common-2)
prep_in(case-14, law-3)
amod(systems-5, legal-4)
nsubj(case-14, systems-5)
det(Precedent-8, a-7)
conj_or(systems-5, Precedent-8)
nsubj(case-14, Precedent-8)
conj_or(systems-5, authority-10)
nsubj(case-14, authority-10)
cop(case-14, is-11)
det(case-14, a-12)
amod(case-14, legal-13)
root(ROOT-0, case-14)
partmod(case-14, establishing-15)
det(principle-17, a-16)
dobj(establishing-15, principle-17)
dobj(establishing-15, rule-19)
conj_or(principle-17, rule-19)
complm(adopts-27, that-20)
det(court-22, a-21)
nsubj(adopts-27, court-22)
amod(body-26, other-24)
amod(body-26, judicial-25)
conj_or(court-22, body-26)
nsubj(adopts-27, body-26)
ccomp(establishing-15, adopts-27)
advmod(deciding-29, when-28)
advcl(adopts-27, deciding-29)
amod(cases-31, subsequent-30)
dobj(deciding-29, cases-31)
amod(issues-34, similar-33)
prep_with(deciding-29, issues-34)
prep_with(deciding-29, facts-36)
conj_or(issues-34, facts-36)

The Piano is a musical instrument played by means of a keyboard that produces sound by striking steel strings with felt hammers .

det(Piano-2, The-1)
nsubj(instrument-6, Piano-2)
cop(instrument-6, is-3)
det(instrument-6, a-4)
amod(instrument-6, musical-5)
root(ROOT-0, instrument-6)
partmod(instrument-6, played-7)
det(keyboard-12, a-11)
prep_by_means_of(played-7, keyboard-12)
nsubj(produces-14, keyboard-12)
rcmod(keyboard-12, produces-14)
acomp(produces-14, sound-15)
prepc_by(sound-15, striking-17)
nn(strings-19, steel-18)
dobj(striking-17, strings-19)
amod(hammers-22, felt-21)
prep_with(striking-17, hammers-22)

A Printer is a company that provides commercial printing services , often also offering typesetting and book-binding services .

det(Printer-2, A-1)
nsubj(company-5, Printer-2)
cop(company-5, is-3)
det(company-5, a-4)
root(ROOT-0, company-5)
nsubj(provides-7, company-5)
rcmod(company-5, provides-7)
amod(services-10, commercial-8)
nn(services-10, printing-9)
dobj(provides-7, services-10)
advmod(company-5, often-12)
advmod(offering-14, also-13)
xcomp(company-5, offering-14)
amod(services-18, typesetting-15)
conj_and(typesetting-15, book-binding-17)
amod(services-18, book-binding-17)
dobj(offering-14, services-18)

A Prion - LBR - Ãƒâ $ '' Ã ‚ âˆšpriÃƒâ $ '' Ã ‚ âˆ † Ãƒâ ‰ ˆÃ ‚ â $ šnAudio - RBR - ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ° combination of the first two syllables of the words ` proteinaceous and ` infectious - LBR - - on by analogy to virion - RBR - ÃƒÂ cents Ã ‚ â $ cents Ã ‚ â $ ° is a poorly-understood hypothetical infectious agent that , according to the `` protein only `` hypothesis , is composed entirely of proteins .

det(Prion-2, A-1)
root(ROOT-0, Prion-2)
dep(Prion-2, LBR-4)
nn(Ã-9, Ãƒâ-6)
nn(Ã-9, $-7)
dep(LBR-4, Ã-9)
punct(Prion-2, ‚-10)
dep(Prion-2, âˆšpriÃƒâ-11)
dobj(âˆšpriÃƒâ-11, $-12)
dep($-12, Ã-14)
punct(Ã-14, ‚-15)
nsubj(agent-83, âˆ-16)
punct(Ãƒâ-18, †-17)
dep(âˆ-16, Ãƒâ-18)
punct(Ãƒâ-18, ‰-19)
punct(Ãƒâ-18, ˆÃ-20)
punct($-23, ‚-21)
dep($-23, â-22)
dep(Ãƒâ-18, $-23)
num($-23, šnAudio-24)
dep($-23, RBR-26)
nn(cents-29, ÃƒÂ-28)
dep($-23, cents-29)
dep(cents-29, Ã-30)
punct(cents-29, ‚-31)
det(combination-40, â-32)
amod(combination-40, $-33)
number($-33, cents-34)
number($-33, Ã-35)
punct(combination-40, ‚-36)
nn(combination-40, â-37)
amod(combination-40, $-38)
number($-38, °-39)
dep(cents-29, combination-40)
det(syllables-45, the-42)
amod(syllables-45, first-43)
num(syllables-45, two-44)
prep_of(combination-40, syllables-45)
det(proteinaceous-50, the-47)
nn(proteinaceous-50, words-48)
prep_of(combination-40, proteinaceous-50)
prep_of(combination-40, infectious-53)
conj_and(proteinaceous-50, infectious-53)
dep(cents-29, LBR-55)
dep(RBR-64, on-58)
pcomp(on-58, by-59)
prep_by(on-58, analogy-60)
prep_to(analogy-60, virion-62)
dep(LBR-55, RBR-64)
nn(cents-67, ÃƒÂ-66)
dep(RBR-64, cents-67)
dep(cents-67, Ã-68)
punct(cents-67, ‚-69)
nn(cents-72, â-70)
nn(cents-72, $-71)
dep(cents-67, cents-72)
nn(‚-74, Ã-73)
dep(cents-72, ‚-74)
possessive(‚-74, â-75)
dep(‚-74, $-76)
num(‚-74, °-77)
cop(agent-83, is-78)
det(agent-83, a-79)
amod(agent-83, poorly-understood-80)
amod(agent-83, hypothetical-81)
amod(agent-83, infectious-82)
dep(Ã-14, agent-83)
nsubjpass(composed-96, agent-83)
prepc_according_to(composed-96, to-87)
det(protein-90, the-88)
pobj(composed-96, protein-90)
advmod(hypothesis-93, only-91)
amod(protein-90, hypothesis-93)
auxpass(composed-96, is-95)
rcmod(agent-83, composed-96)
advmod(composed-96, entirely-97)
prep_of(composed-96, proteins-99)

The Pope - LBR - from Latin : `` papa `` or `` father `` from Greek Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â ¬ Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â ± Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , pÃƒâˆžÃ ‚ Â ¡ pas , `` papa `` , originally written Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â ¬ Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ Â ± Ãƒâˆ ‚ Ã ‚ â ‰ & nbsp ; , pÃƒâˆžÃ ‚ Â ¡ ppas , as in Odyssey VI .57 ; Papa in Italian - RBR - is the Bishop of Rome , the leader of the Roman Catholic Church and head of state of Vatican City .

det(Pope-2, The-1)
nsubj(Bishop-129, Pope-2)
dep(Pope-2, LBR-4)
dep(Pope-2, from-6)
pobj(from-6, Latin-7)
dep(Latin-7, papa-10)
conj_or(Pope-2, father-14)
nsubj(Bishop-129, father-14)
amod(‚-21, Greek-17)
nn(‚-21, Ãƒâˆ-18)
nn(‚-21, ‚-19)
nn(‚-21, Ã-20)
prep_from(father-14, ‚-21)
partmod(father-14, â-22)
dobj(â-22, $-23)
num($-23, cents-24)
nn(‚-34, Ãƒâ-25)
nn(‚-34, „-26)
nn(‚-34, Ã-27)
nn(‚-34, ‚-28)
nn(‚-34, Â-29)
nn(‚-34, ¬-30)
nn(‚-34, Ãƒâˆ-31)
nn(‚-34, ‚-32)
nn(‚-34, Ã-33)
nsubj(â-35, ‚-34)
rcmod($-23, â-35)
dobj(â-35, $-36)
num($-36, cents-37)
nn(Ã-46, Ãƒâ-38)
nn(Ã-46, „-39)
nn(Ã-46, Ã-40)
nn(Ã-46, ‚-41)
nn(Ã-46, Â-42)
nn(Ã-46, ±-43)
nn(Ã-46, Ãƒâˆ-44)
nn(Ã-46, ‚-45)
nsubj(‚-47, Ã-46)
rcmod($-36, ‚-47)
amod(‰-49, â-48)
dobj(‚-47, ‰-49)
dobj(‚-47, nbsp-51)
conj_and(‰-49, nbsp-51)
partmod(‰-49, pÃƒâˆžÃ-54)
nn(pas-58, ‚-55)
nn(pas-58, Â-56)
nn(pas-58, ¡-57)
dobj(pÃƒâˆžÃ-54, pas-58)
dep(pas-58, papa-61)
advmod(‚-102, originally-64)
amod(‚-102, written-65)
nn(‚-102, Ãƒâˆ-66)
nn(‚-102, ‚-67)
nn(‚-102, Ã-68)
nn(‚-102, ‚-69)
dep($-71, â-70)
dep(‚-102, $-71)
num($-71, cents-72)
nn(‚-102, Ãƒâ-73)
nn(‚-102, „-74)
nn(‚-102, Ã-75)
nn(‚-102, ‚-76)
nn(‚-102, Â-77)
nn(‚-102, ¬-78)
nn(‚-102, Ãƒâˆ-79)
nn(‚-102, ‚-80)
nn(‚-102, Ã-81)
nn(‚-102, ‚-82)
dep($-84, â-83)
dep(‚-102, $-84)
num($-84, cents-85)
number(cents-85, Ãƒâˆ-86)
nn(‚-102, ‚-87)
nn(‚-102, Ã-88)
nn(‚-102, ‚-89)
dep($-91, â-90)
dep(‚-102, $-91)
num($-91, cents-92)
nn(‚-102, Ãƒâ-93)
nn(‚-102, „-94)
nn(‚-102, Ã-95)
nn(‚-102, ‚-96)
nn(‚-102, Â-97)
nn(‚-102, ±-98)
nn(‚-102, Ãƒâˆ-99)
nn(‚-102, ‚-100)
nn(‚-102, Ã-101)
appos(‰-49, ‚-102)
amod(‰-104, â-103)
dep(‚-102, ‰-104)
dep(‚-102, nbsp-106)
conj_and(‰-104, nbsp-106)
partmod(‰-49, pÃƒâˆžÃ-109)
num(ppas-113, ‚-110)
nn(ppas-113, Â-111)
nn(ppas-113, ¡-112)
dobj(pÃƒâˆžÃ-109, ppas-113)
mark(.57-119, as-115)
dep(.57-119, in-116)
nn(VI-118, Odyssey-117)
pobj(in-116, VI-118)
advcl(â-35, .57-119)
dep(.57-119, Papa-121)
prep_in(Papa-121, Italian-123)
dep(.57-119, RBR-125)
cop(Bishop-129, is-127)
det(Bishop-129, the-128)
root(ROOT-0, Bishop-129)
prep_of(Bishop-129, Rome-131)
det(leader-134, the-133)
conj_and(Bishop-129, leader-134)
det(Church-139, the-136)
nn(Church-139, Roman-137)
nn(Church-139, Catholic-138)
prep_of(leader-134, Church-139)
conj_and(Bishop-129, head-141)
prep_of(head-141, state-143)
nn(City-146, Vatican-145)
prep_of(state-143, City-146)

A Plotter is a vector graphics printing device that connects to a computer .

det(Plotter-2, A-1)
nsubj(device-8, Plotter-2)
cop(device-8, is-3)
det(device-8, a-4)
nn(device-8, vector-5)
nn(device-8, graphics-6)
nn(device-8, printing-7)
root(ROOT-0, device-8)
nsubj(connects-10, device-8)
rcmod(device-8, connects-10)
det(computer-13, a-12)
prep_to(connects-10, computer-13)

A Bug in poker is a limited form of wild card .

det(Bug-2, A-1)
nsubj(form-8, Bug-2)
prep_in(Bug-2, poker-4)
cop(form-8, is-5)
det(form-8, a-6)
amod(form-8, limited-7)
root(ROOT-0, form-8)
amod(card-11, wild-10)
prep_of(form-8, card-11)

A Check-raise in poker is a common deceptive play in which a player checks early in a betting round , hoping someone else will open .

det(Check-raise-2, A-1)
nsubj(play-9, Check-raise-2)
prep_in(Check-raise-2, poker-4)
cop(play-9, is-5)
det(play-9, a-6)
amod(play-9, common-7)
amod(play-9, deceptive-8)
root(ROOT-0, play-9)
rel(checks-14, which-11)
det(player-13, a-12)
nsubj(checks-14, player-13)
rcmod(play-9, checks-14)
acomp(checks-14, early-15)
det(round-19, a-17)
amod(round-19, betting-18)
prep_in(early-15, round-19)
xcomp(checks-14, hoping-21)
nsubj(open-25, someone-22)
advmod(someone-22, else-23)
aux(open-25, will-24)
ccomp(hoping-21, open-25)

In poker , the strength of a hand - LBR - how likely it is to be the best according to the rules of the game being played - RBR - is often called its Value ; however , in the context of poker strategy the term is more often used to describe a betting tactic , a bet for value .

prep_in(used-51, poker-2)
det(strength-5, the-4)
nsubjpass(used-51, strength-5)
xsubj(describe-53, strength-5)
det(hand-8, a-7)
prep_of(strength-5, hand-8)
dep(hand-8, LBR-10)
advmod(is-15, how-12)
dep(how-12, likely-13)
nsubj(is-15, it-14)
xsubj(best-19, it-14)
dep(hand-8, is-15)
aux(best-19, to-16)
cop(best-19, be-17)
det(best-19, the-18)
xcomp(is-15, best-19)
prepc_according_to(best-19, to-21)
det(rules-23, the-22)
pobj(best-19, rules-23)
det(game-26, the-25)
prep_of(rules-23, game-26)
auxpass(played-28, being-27)
partmod(game-26, played-28)
attr(best-19, RBR-30)
auxpass(called-34, is-32)
advmod(called-34, often-33)
dep(RBR-30, called-34)
poss(Value-36, its-35)
dobj(called-34, Value-36)
advmod(called-34, however-38)
det(context-42, the-41)
prep_in(called-34, context-42)
nn(strategy-45, poker-44)
prep_of(context-42, strategy-45)
det(term-47, the-46)
dobj(called-34, term-47)
auxpass(used-51, is-48)
advmod(often-50, more-49)
advmod(used-51, often-50)
root(ROOT-0, used-51)
aux(describe-53, to-52)
xcomp(used-51, describe-53)
det(tactic-56, a-54)
amod(tactic-56, betting-55)
dobj(describe-53, tactic-56)
det(bet-59, a-58)
appos(tactic-56, bet-59)
prep_for(bet-59, value-61)

In poker , Protection is a bet made with a strong but vulnerable hand , such as top pair when straight or flush draws are possible .

prep_in(bet-7, poker-2)
nsubj(bet-7, Protection-4)
cop(bet-7, is-5)
det(bet-7, a-6)
root(ROOT-0, bet-7)
partmod(bet-7, made-8)
det(hand-14, a-10)
amod(hand-14, strong-11)
conj_but(strong-11, vulnerable-13)
amod(hand-14, vulnerable-13)
prep_with(made-8, hand-14)
amod(pair-19, top-18)
prep_such_as(hand-14, pair-19)
advmod(possible-26, when-20)
amod(draws-24, straight-21)
conj_or(straight-21, flush-23)
amod(draws-24, flush-23)
nsubj(possible-26, draws-24)
cop(possible-26, are-25)
dep(pair-19, possible-26)

In poker , the term Steal is often used as merely a synonym for bluff , but there is a more specific use of the term which is also called an `` ante steal `` or `` blind steal `` - LBR - depending on whether the game being played uses antes or blinds - RBR - .

prep_in(used-9, poker-2)
det(Steal-6, the-4)
nn(Steal-6, term-5)
nsubjpass(used-9, Steal-6)
auxpass(used-9, is-7)
advmod(used-9, often-8)
root(ROOT-0, used-9)
advmod(synonym-13, merely-11)
det(synonym-13, a-12)
prep_as(used-9, synonym-13)
prep_for(synonym-13, bluff-15)
expl(is-19, there-18)
conj_but(used-9, is-19)
det(use-23, a-20)
advmod(specific-22, more-21)
amod(use-23, specific-22)
nsubj(is-19, use-23)
det(term-26, the-25)
prep_of(use-23, term-26)
nsubjpass(called-30, term-26)
auxpass(called-30, is-28)
advmod(called-30, also-29)
rcmod(term-26, called-30)
det(ante-33, an-31)
dobj(called-30, ante-33)
dep(called-30, steal-34)
cc(steal-39, or-36)
amod(steal-39, blind-38)
dobj(steal-34, steal-39)
dep(steal-39, LBR-42)
prepc_depending_on(steal-34, on-45)
complm(uses-51, whether-46)
det(game-48, the-47)
nsubj(uses-51, game-48)
auxpass(played-50, being-49)
partmod(game-48, played-50)
pcomp(steal-34, uses-51)
dobj(uses-51, antes-52)
dobj(uses-51, blinds-54)
conj_or(antes-52, blinds-54)
dep(term-26, RBR-56)

In poker , an Isolation play is usually a raise designed to encourage one or more players to fold , specifically for the purpose of making the hand a one-on-one contest with a specific opponent .

prep_in(raise-10, poker-2)
det(play-6, an-4)
nn(play-6, Isolation-5)
nsubj(raise-10, play-6)
cop(raise-10, is-7)
advmod(raise-10, usually-8)
det(raise-10, a-9)
root(ROOT-0, raise-10)
xsubj(encourage-13, raise-10)
partmod(raise-10, designed-11)
aux(encourage-13, to-12)
xcomp(designed-11, encourage-13)
num(players-17, one-14)
conj_or(one-14, more-16)
quantmod(one-14, more-16)
num(players-17, more-16)
dobj(encourage-13, players-17)
aux(fold-19, to-18)
xcomp(encourage-13, fold-19)
advmod(fold-19, specifically-21)
det(purpose-24, the-23)
prep_for(fold-19, purpose-24)
prepc_of(purpose-24, making-26)
det(hand-28, the-27)
nsubj(contest-31, hand-28)
det(contest-31, a-29)
amod(contest-31, one-on-one-30)
xcomp(making-26, contest-31)
det(opponent-35, a-33)
amod(opponent-35, specific-34)
prep_with(contest-31, opponent-35)

Philology , derived from the Greek lang - LBR - philologia , from the terms lang philos meaning `` loved , beloved , dear , friend `` and lang logos `` word , articulation , reason `` - RBR - is a branch of the human sciences dealing with language and literature , specifically a literary canon , combining aspects of grammar , rhetoric , historical linguistics - LBR - etymology and language change - RBR - , interpretation of authors , textual criticism and the critical traditions associated with a given language .

advmod(associated-89, Philology-1)
dep(associated-89, derived-3)
det(lang-7, the-5)
amod(lang-7, Greek-6)
prep_from(derived-3, lang-7)
dep(lang-7, LBR-9)
dep(lang-7, philologia-11)
det(terms-15, the-14)
nsubj(lang-16, terms-15)
prepc_from(associated-89, lang-16)
dobj(lang-16, philos-17)
partmod(philos-17, meaning-18)
dobj(meaning-18, loved-20)
dep(friend-26, beloved-22)
dep(beloved-22, dear-24)
appos(loved-20, friend-26)
prep(friend-26, and-28)
dep(and-28, lang-29)
dobj(lang-29, logos-30)
nsubj(reason-36, word-32)
appos(word-32, articulation-34)
dep(lang-29, reason-36)
nsubj(branch-43, RBR-39)
cop(branch-43, is-41)
det(branch-43, a-42)
ccomp(reason-36, branch-43)
det(sciences-47, the-45)
amod(sciences-47, human-46)
prep_of(branch-43, sciences-47)
partmod(sciences-47, dealing-48)
prep_with(dealing-48, language-50)
prep_with(dealing-48, literature-52)
conj_and(language-50, literature-52)
advmod(sciences-47, specifically-54)
det(canon-57, a-55)
amod(canon-57, literary-56)
dep(sciences-47, canon-57)
xcomp(meaning-18, combining-59)
dobj(combining-59, aspects-60)
prep_of(aspects-60, grammar-62)
dep(meaning-18, rhetoric-64)
amod(linguistics-67, historical-66)
appos(rhetoric-64, linguistics-67)
dep(rhetoric-64, LBR-69)
nn(change-74, etymology-71)
conj_and(etymology-71, language-73)
nn(change-74, language-73)
dep(LBR-69, change-74)
dep(rhetoric-64, RBR-76)
nsubj(associated-89, interpretation-79)
prep_of(interpretation-79, authors-81)
amod(criticism-84, textual-83)
prep_of(interpretation-79, criticism-84)
conj_and(authors-81, criticism-84)
det(traditions-88, the-86)
amod(traditions-88, critical-87)
prep_of(interpretation-79, traditions-88)
conj_and(authors-81, traditions-88)
root(ROOT-0, associated-89)
det(language-93, a-91)
amod(language-93, given-92)
prep_with(associated-89, language-93)

Petroleum - LBR - L. Petroleum -LRB- Gr .

root(ROOT-0, Petroleum-1)
dep(Petroleum-1, LBR-3)
dep(LBR-3, L.-5)
nn(Gr-8, Petroleum-6)
dep(L.-5, Gr-8)

Ãƒâˆ ‚ Ã ‚ â $ cents Ãƒâ „ Ã ‚ ÂµÃƒâˆ ‚ Ã ‚ â ‰ ¥ Ãƒâˆ ‚ Ã ‚ â „ cents Ãƒâ „ Ã ‚ â $ `` Ãƒâ „ Ã ‚ Â '' Ãƒâ „ Ã ‚ Â ± Ãƒâ „ Ã ‚ â $ ™ Ãƒâ „ Ã ‚ Â ¿ Ãƒâ „ Ã ‚ âˆ lit .

dep(Ã-3, Ãƒâˆ-1)
punct(Ã-3, ‚-2)
root(ROOT-0, Ã-3)
punct(Ã-3, ‚-4)
dep(Ãƒâ-8, â-5)
pobj(â-5, $-6)
num($-6, cents-7)
dep(Ã-3, Ãƒâ-8)
punct(Ãƒâ-8, „-9)
dep(Ã-14, Ã-10)
dep(Ã-14, ‚-11)
dep(Ã-14, ÂµÃƒâˆ-12)
dep(Ã-14, ‚-13)
dep(â-16, Ã-14)
punct(â-16, ‚-15)
dep(Ãƒâ-8, â-16)
punct(â-16, ‰-17)
dep(Ãƒâˆ-19, ¥-18)
dep(Ã-21, Ãƒâˆ-19)
punct(Ã-21, ‚-20)
dep(â-16, Ã-21)
punct(Ã-21, ‚-22)
dep(Ã-21, â-23)
punct(â-23, „-24)
dep(â-23, cents-25)
nn(Ãƒâ-39, Ãƒâ-26)
punct(Ãƒâ-39, „-27)
nn(Ãƒâ-39, Ã-28)
punct(Ãƒâ-39, ‚-29)
amod(Ãƒâ-39, â-30)
amod(Ãƒâ-39, $-31)
nn(Ãƒâ-39, Ãƒâ-33)
punct(Ãƒâ-39, „-34)
nn(Ãƒâ-39, Ã-35)
punct(Ãƒâ-39, ‚-36)
nn(Ãƒâ-39, Â-37)
dep(cents-25, Ãƒâ-39)
punct(cents-25, „-40)
nn(â-49, Ã-41)
punct(â-49, ‚-42)
nn(â-49, Â-43)
punct(â-49, ±-44)
nn(â-49, Ãƒâ-45)
punct(â-49, „-46)
nn(â-49, Ã-47)
punct(â-49, ‚-48)
dep(cents-25, â-49)
dep(â-49, $-50)
num($-50, ™-51)
nn(âˆ-62, Ãƒâ-52)
punct(âˆ-62, „-53)
nn(âˆ-62, Ã-54)
punct(âˆ-62, ‚-55)
nn(âˆ-62, Â-56)
punct(âˆ-62, ¿-57)
nn(âˆ-62, Ãƒâ-58)
punct(âˆ-62, „-59)
nn(âˆ-62, Ã-60)
punct(âˆ-62, ‚-61)
dep($-50, âˆ-62)
advmod($-50, lit-63)

`` rock oil `` was first used in the treatise De re metallica published in 1556 by the German mineralogist Georg Bauer , known as Georgius Agricola .

nn(oil-3, rock-2)
nsubjpass(used-7, oil-3)
auxpass(used-7, was-5)
advmod(used-7, first-6)
dep(published-14, used-7)
det(metallica-13, the-9)
amod(metallica-13, treatise-10)
nn(metallica-13, De-11)
nn(metallica-13, re-12)
prep_in(used-7, metallica-13)
root(ROOT-0, published-14)
prep_in(published-14, 1556-16)
det(mineralogist-20, the-18)
amod(mineralogist-20, German-19)
prep_by(published-14, mineralogist-20)
nn(Bauer-22, Georg-21)
nsubj(published-14, Bauer-22)
partmod(Bauer-22, known-24)
nn(Agricola-27, Georgius-26)
prep_as(known-24, Agricola-27)

- RBR - is a naturally occurring , flammable liquid found in rock formations in the Earth consisting of a complex mixture of hydrocarbons of various molecular weights , plus other organic compounds .

nsubj(liquid-10, RBR-2)
cop(liquid-10, is-4)
det(liquid-10, a-5)
advmod(flammable-9, naturally-6)
amod(flammable-9, occurring-7)
amod(liquid-10, flammable-9)
root(ROOT-0, liquid-10)
partmod(liquid-10, found-11)
nn(formations-14, rock-13)
prep_in(found-11, formations-14)
det(Earth-17, the-16)
prep_in(found-11, Earth-17)
partmod(Earth-17, consisting-18)
det(mixture-22, a-20)
amod(mixture-22, complex-21)
prep_of(consisting-18, mixture-22)
prep_of(mixture-22, hydrocarbons-24)
amod(weights-28, various-26)
amod(weights-28, molecular-27)
prep_of(hydrocarbons-24, weights-28)
amod(weights-28, plus-30)
amod(compounds-33, other-31)
amod(compounds-33, organic-32)
dep(weights-28, compounds-33)

Ploidy is the number of homologous sets of chromosomes in a biological cell .

nsubj(number-4, Ploidy-1)
cop(number-4, is-2)
det(number-4, the-3)
root(ROOT-0, number-4)
advmod(sets-7, homologous-6)
prep_of(number-4, sets-7)
prep_of(sets-7, chromosomes-9)
det(cell-13, a-11)
amod(cell-13, biological-12)
prep_in(chromosomes-9, cell-13)

The Pennsylvanian is a subperiod of the Carboniferous period lasting from roughly period startperiod start error & amp ; ; nbsp ; to period endperiod end error & amp ; ; nbsp ; Ma - LBR - million years ago - RBR - .

det(Pennsylvanian-2, The-1)
nsubj(subperiod-5, Pennsylvanian-2)
cop(subperiod-5, is-3)
det(subperiod-5, a-4)
root(ROOT-0, subperiod-5)
det(period-9, the-7)
nn(period-9, Carboniferous-8)
prep_of(subperiod-5, period-9)
amod(period-9, lasting-10)
advmod(error-16, roughly-12)
nn(error-16, period-13)
nn(error-16, startperiod-14)
nn(error-16, start-15)
prep_from(lasting-10, error-16)
prep_from(lasting-10, amp-18)
conj_and(error-16, amp-18)
dep(period-9, nbsp-21)
prep_to(period-9, period-24)
partmod(period-24, endperiod-25)
nn(error-27, end-26)
dobj(endperiod-25, error-27)
dobj(endperiod-25, amp-29)
conj_and(error-27, amp-29)
dep(subperiod-5, nbsp-32)
nn(RBR-42, Ma-34)
dep(RBR-42, LBR-36)
num(years-39, million-38)
npadvmod(ago-40, years-39)
dep(LBR-36, ago-40)
dep(nbsp-32, RBR-42)

In computing , a Preview may be where output of a particular document , page , film , etc. .

prep_in(be-7, computing-2)
det(Preview-5, a-4)
nsubj(be-7, Preview-5)
aux(be-7, may-6)
root(ROOT-0, be-7)
advmod(output-9, where-8)
advcl(be-7, output-9)
det(film-17, a-11)
amod(film-17, particular-12)
nn(film-17, document-13)
dep(film-17, page-15)
prep_of(output-9, film-17)
dep(film-17, etc.-19)

The Permian is a geologic period and system that extends from 299.0 Ãƒâ ‰ & nbsp ; Ã ‚ Â ± 0.8 Ma to 251.0 Ãƒâ ‰ & nbsp ; Ã ‚ Â ± 0.4 Ma - LBR - million years before the present - RBR - ICS 2004 .

det(Permian-2, The-1)
nsubj(period-6, Permian-2)
cop(period-6, is-3)
det(period-6, a-4)
amod(period-6, geologic-5)
root(ROOT-0, period-6)
nsubj(extends-10, period-6)
conj_and(period-6, system-8)
nsubj(extends-10, system-8)
rcmod(period-6, extends-10)
num(‰-14, 299.0-12)
nn(‰-14, Ãƒâ-13)
prep_from(extends-10, ‰-14)
prep_from(extends-10, nbsp-16)
conj_and(‰-14, nbsp-16)
nn(Ma-23, Ã-18)
nn(Ma-23, ‚-19)
nn(Ma-23, Â-20)
nn(Ma-23, ±-21)
nn(Ma-23, 0.8-22)
dep(‰-14, Ma-23)
nn(‰-27, 251.0-25)
nn(‰-27, Ãƒâ-26)
prep_to(Ma-23, ‰-27)
prep_to(Ma-23, nbsp-29)
conj_and(‰-27, nbsp-29)
nn(Ma-36, Ã-31)
nn(Ma-36, ‚-32)
nn(Ma-36, Â-33)
nn(Ma-36, ±-34)
num(Ma-36, 0.4-35)
dep(‰-14, Ma-36)
dep(‰-14, LBR-38)
num(years-41, million-40)
dep(‰-14, years-41)
det(present-44, the-43)
prep_before(years-41, present-44)
dep(‰-14, RBR-46)
dep(‰-14, ICS-48)
num(ICS-48, 2004-49)

